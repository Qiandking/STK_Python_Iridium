# -*- coding: mbcs -*-
typelib_path = 'D:\\software\\STK\\bin\\AgVGT.dll'
_lcid = 0 # change this if required
from ctypes import *
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import GUID
from comtypes import BSTR
from ctypes import HRESULT
from ctypes.wintypes import VARIANT_BOOL
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
from comtypes.automation import VARIANT
from comtypes import CoClass
from comtypes.automation import _midlSAFEARRAY
import comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0
from comtypes import IUnknown


class _IAgCrdnParameterSetFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnParameterSetFactory'
    _iid_ = GUID('{FE1F6C54-48B0-4F48-B978-FA05347BB5F1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnParameterSetType'
eCrdnParameterSetTypeUnknown = -1
eCrdnParameterSetTypeAttitude = 0
eCrdnParameterSetTypeGroundTrajectory = 1
eCrdnParameterSetTypeTrajectory = 2
eCrdnParameterSetTypeOrbit = 3
eCrdnParameterSetTypeVector = 4
AgECrdnParameterSetType = c_int # enum
class IAgCrdnParameterSet(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Parameter set contains various sets of scalar computations.'
    _iid_ = GUID('{40E91EA6-63B0-4D3D-971C-2DC7B6A19C9D}')
    _idlflags_ = ['oleautomation']
_IAgCrdnParameterSetFactory._methods_ = [
    COMMETHOD([dispid(21401), helpstring('Creates and registers a parameter set using specified name and description.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnParameterSetType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnParameterSet)), 'ppRetVal' )),
    COMMETHOD([dispid(21409), helpstring('Creates a parameter set defined by identifying one set of axes in reference to another.')], HRESULT, 'CreateParameterSetAttitude',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnParameterSet)), 'ppRetVal' )),
    COMMETHOD([dispid(21414), helpstring('Creates a parameter set defined by identifying location in reference central body.')], HRESULT, 'CreateParameterSetGroundTrajectory',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnParameterSet)), 'ppRetVal' )),
    COMMETHOD([dispid(21411), helpstring('Creates a parameter set defined by identifying location in reference coordinate system.')], HRESULT, 'CreateParameterSetTrajectory',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnParameterSet)), 'ppRetVal' )),
    COMMETHOD([dispid(21412), helpstring('Creates a parameter set defined by identifying orbiting point and its central body.')], HRESULT, 'CreateParameterSetOrbit',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnParameterSet)), 'ppRetVal' )),
    COMMETHOD([dispid(21413), helpstring('Creates a parameter set defined by identifying vector in reference axes.')], HRESULT, 'CreateParameterSetVector',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnParameterSet)), 'ppRetVal' )),
    COMMETHOD([dispid(21406), helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnParameterSetType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnParameterSetFactory implementation
##class _IAgCrdnParameterSetFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Creates and registers a parameter set using specified name and description.'
##        #return ppRetVal
##
##    def CreateParameterSetAttitude(self, Name, Description):
##        'Creates a parameter set defined by identifying one set of axes in reference to another.'
##        #return ppRetVal
##
##    def CreateParameterSetGroundTrajectory(self, Name, Description):
##        'Creates a parameter set defined by identifying location in reference central body.'
##        #return ppRetVal
##
##    def CreateParameterSetTrajectory(self, Name, Description):
##        'Creates a parameter set defined by identifying location in reference coordinate system.'
##        #return ppRetVal
##
##    def CreateParameterSetOrbit(self, Name, Description):
##        'Creates a parameter set defined by identifying orbiting point and its central body.'
##        #return ppRetVal
##
##    def CreateParameterSetVector(self, Name, Description):
##        'Creates a parameter set defined by identifying vector in reference axes.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##

class _IAgCrdnVectorDirectionToStar(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorDirectionToStar'
    _iid_ = GUID('{9D056D4C-789F-4DBB-A185-F621BFAB8556}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnKind'
eCrdnKindUnknown = -1
eCrdnKindInvalid = 0
eCrdnKindAxes = 1
eCrdnKindAngle = 2
eCrdnKindVector = 3
eCrdnKindPoint = 4
eCrdnKindPlane = 5
eCrdnKindSystem = 6
eCrdnKindEvent = 7
eCrdnKindEventArray = 8
eCrdnKindEventInterval = 9
eCrdnKindEventIntervalCollection = 10
eCrdnKindEventIntervalList = 11
eCrdnKindParameterSet = 12
eCrdnKindCalcScalar = 13
eCrdnKindCondition = 14
eCrdnKindConditionSet = 15
eCrdnKindVolumeGrid = 16
eCrdnKindVolume = 17
AgECrdnKind = c_int # enum
class IAgCrdnContext(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The interface represents a context associated with a VGT component. All VGT components are associated with a valid context. A context can represent a VGT instance or a VGT template.'
    _iid_ = GUID('{023E87AD-73C0-4525-B428-45894A232F58}')
    _idlflags_ = ['oleautomation']
class IAgCrdnTypeInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Provides information about the type of VGT components.'
    _iid_ = GUID('{33182920-EC43-40CE-989B-36C84476E307}')
    _idlflags_ = ['oleautomation']
class IAgCrdnIntervalCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'The interface represents a collection of intervals.'
    _iid_ = GUID('{ACA6A9D2-B2B8-439B-9576-F86FDFF4B957}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnVectorType'
eCrdnVectorTypeUnknown = -1
eCrdnVectorTypeDisplacement = 0
eCrdnVectorTypeApoapsis = 1
eCrdnVectorTypeFixedAtEpoch = 2
eCrdnVectorTypeAngularVelocity = 3
eCrdnVectorTypeConing = 4
eCrdnVectorTypeCrossProduct = 5
eCrdnVectorTypeCustomScript = 6
eCrdnVectorTypeDerivative = 7
eCrdnVectorTypeAngleRate = 8
eCrdnVectorTypeEccentricity = 9
eCrdnVectorTypeFixedInAxes = 10
eCrdnVectorTypeTwoPlanesIntersection = 12
eCrdnVectorTypeLineOfNodes = 13
eCrdnVectorTypeModelAttachment = 14
eCrdnVectorTypeOrbitAngularMomentum = 15
eCrdnVectorTypeOrbitNormal = 16
eCrdnVectorTypePeriapsis = 17
eCrdnVectorTypeProjection = 18
eCrdnVectorTypeReflection = 19
eCrdnVectorTypeScaled = 20
eCrdnVectorTypeDirectionToStar = 21
eCrdnVectorTypeTemplate = 22
eCrdnVectorTypeAtTimeInstant = 23
eCrdnVectorTypeLinearCombination = 24
eCrdnVectorTypeProjectAlong = 25
eCrdnVectorTypeScalarLinearCombination = 26
eCrdnVectorTypeScalarScaled = 27
eCrdnVectorTypeVelocity = 28
eCrdnVectorTypePlugin = 29
AgECrdnVectorType = c_int # enum
class IAgCrdnAxes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The interface defines methods and properties common to all axes.'
    _iid_ = GUID('{A74D39BA-89D9-478E-8097-07731F64E027}')
    _idlflags_ = ['oleautomation']
class IAgCrdnVectorFindInAxesResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnVector.FindInAxes method.'
    _iid_ = GUID('{A4BF7EE2-45F9-4A60-9C40-106151DFA9BA}')
    _idlflags_ = ['oleautomation']
class IAgCrdnVectorFindInAxesWithRateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnVector.FindInAxesWithRate method.'
    _iid_ = GUID('{69E05BC0-F15D-4E5F-869B-B60EAA04A949}')
    _idlflags_ = ['oleautomation']
class IAgCrdn(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A base interface implemented by all VGT components. The methods and properties of the interface provide type information about the VGT component.'
    _iid_ = GUID('{467D32E8-C564-480F-9BE4-6A051E719771}')
    _idlflags_ = ['oleautomation']
class IAgCrdnCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'A collection of VGT objects.'
    _iid_ = GUID('{D4DD0E8D-BCA5-40DF-BCEC-03A812851D7B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
_IAgCrdnVectorDirectionToStar._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(8201), helpstring('A fully qualified path to a Star object.'), 'propget'], HRESULT, 'SelectedStar',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(8201), helpstring('A fully qualified path to a Star object.'), 'propput'], HRESULT, 'SelectedStar',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorDirectionToStar implementation
##class _IAgCrdnVectorDirectionToStar_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'A fully qualified path to a Star object.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A fully qualified path to a Star object.'
##    SelectedStar = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnAxesCommonTasks(CoClass):
    'Provides methods to create non-persistent VGT axes components. Non-persistent components do not have names, do not get saved/loaded and are not shown in the VGT browser.'
    _reg_clsid_ = GUID('{EF31F342-2805-4793-A90A-CA26585AD147}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnAxesCommonTasks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesCommonTasks'
    _iid_ = GUID('{EEE8BD1F-5429-4447-A50A-95497769BDA8}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnAxesCommonTasks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Provides methods to create non-persistent VGT axes components. Non-persistent components do not have names, do not get saved/loaded and are not shown in the VGT browser.'
    _iid_ = GUID('{F8279298-ED5C-4655-B642-6B85661959EE}')
    _idlflags_ = ['oleautomation']
AgCrdnAxesCommonTasks._com_interfaces_ = [_IAgCrdnAxesCommonTasks, IAgCrdnAxesCommonTasks]

class _IAgCrdnParameterSetVector(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnParameterSetVector'
    _iid_ = GUID('{02C0FF90-1CD1-4A47-8648-39979B0B20B3}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVector(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The interface defines methods and properties common to all vectors.'
    _iid_ = GUID('{E39A2AAF-4C13-49EE-AA42-6E57DB1F8D79}')
    _idlflags_ = ['oleautomation']
_IAgCrdnParameterSetVector._methods_ = [
    COMMETHOD([dispid(21203), helpstring('Get the type of parameter set.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnParameterSetType), 'pRetVal' )),
    COMMETHOD([dispid(21201), helpstring('Get the labels identifying hierarchy of representations within parameter set.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21206), helpstring('Get the names identifying types of dimensions of individual scalars within parameter set.'), 'propget'], HRESULT, 'Dimensions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21202), helpstring('Get the names identifying individual scalars within parameter set.'), 'propget'], HRESULT, 'ScalarNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21204), helpstring('Return results of computing individual scalars within parameter set at the specified time.')], HRESULT, 'Calculate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21205), helpstring('Return results of computing individual scalars and their time derivatives within parameter set at the specified time.')], HRESULT, 'CalculateWithDerivative',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(24801), helpstring('Get the vector for which representations are computed.'), 'propget'], HRESULT, 'Vector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(24801), helpstring('Get the vector for which representations are computed.'), 'propput'], HRESULT, 'Vector',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD([dispid(24802), helpstring('Get the reference axes relative to which representations are computed.'), 'propget'], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(24802), helpstring('Get the reference axes relative to which representations are computed.'), 'propput'], HRESULT, 'ReferenceAxes',
              ( ['in'], POINTER(IAgCrdnAxes), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnParameterSetVector implementation
##class _IAgCrdnParameterSetVector_Impl(object):
##    @property
##    def Type(self):
##        'Get the type of parameter set.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the labels identifying hierarchy of representations within parameter set.'
##        #return ppRetVal
##
##    @property
##    def Dimensions(self):
##        'Get the names identifying types of dimensions of individual scalars within parameter set.'
##        #return ppRetVal
##
##    @property
##    def ScalarNames(self):
##        'Get the names identifying individual scalars within parameter set.'
##        #return ppRetVal
##
##    def Calculate(self, Epoch):
##        'Return results of computing individual scalars within parameter set at the specified time.'
##        #return ppRetVal
##
##    def CalculateWithDerivative(self, Epoch):
##        'Return results of computing individual scalars and their time derivatives within parameter set at the specified time.'
##        #return ppRetVal
##
##    def _get(self):
##        'Get the vector for which representations are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the vector for which representations are computed.'
##    Vector = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the reference axes relative to which representations are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the reference axes relative to which representations are computed.'
##    ReferenceAxes = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnSystemCommonTasks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Provides methods to create non-persistent VGT coordinate reference frames (systems). Non-persistent components do not have names, do not get saved/loaded and are not shown in the VGT browser.'
    _iid_ = GUID('{DE1C4334-6702-4138-BAE3-F309F9C4F7EC}')
    _idlflags_ = ['oleautomation']
class IAgCrdnSystemAssembled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A system assembled from an origin point and a set of reference axes.'
    _iid_ = GUID('{FD28496D-0692-4A17-B23C-25DB611F10FF}')
    _idlflags_ = ['oleautomation']
class IAgCrdnPoint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The interface defines methods and properties common to all points.'
    _iid_ = GUID('{56986B69-C1AF-4D2B-9ABB-70F7E17E0040}')
    _idlflags_ = ['oleautomation']
IAgCrdnSystemCommonTasks._methods_ = [
    COMMETHOD([helpstring('Creates a non-persistent East-North-Up (ENU) reference frame with the origin at the specified geodetic location.')], HRESULT, 'CreateEastNorthUpCartographic',
              ( ['in'], VARIANT, 'Latitude' ),
              ( ['in'], VARIANT, 'Longitude' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemAssembled)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a non-persistent system component assembled from an origin point and a set of reference axes.')], HRESULT, 'CreateAssembled',
              ( ['in'], POINTER(IAgCrdnPoint), 'OriginPoint' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'ReferenceAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemAssembled)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnSystemCommonTasks implementation
##class IAgCrdnSystemCommonTasks_Impl(object):
##    def CreateEastNorthUpCartographic(self, Latitude, Longitude, Altitude):
##        'Creates a non-persistent East-North-Up (ENU) reference frame with the origin at the specified geodetic location.'
##        #return ppRetVal
##
##    def CreateAssembled(self, OriginPoint, ReferenceAxes):
##        'Creates a non-persistent system component assembled from an origin point and a set of reference axes.'
##        #return ppRetVal
##

class AgCrdnEvaluateWithRateResult(CoClass):
    'Represents the results of evaluating a scalar component.'
    _reg_clsid_ = GUID('{5CBBFB4C-5DB7-4578-8C13-9C0A952CA99F}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEvaluateWithRateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEvaluateWithRateResult'
    _iid_ = GUID('{EA8566C3-A79F-4C00-BD8A-D670B27B9ED0}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEvaluateWithRateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents the results of evaluating a scalar component using IAgCrdnCalcScalar.Evaluate method.'
    _iid_ = GUID('{3FAE0FFF-F951-4C57-9196-0CD55308EC13}')
    _idlflags_ = ['oleautomation']
AgCrdnEvaluateWithRateResult._com_interfaces_ = [_IAgCrdnEvaluateWithRateResult, IAgCrdnEvaluateWithRateResult]

class _IAgCrdnEventIntervalCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalCollection'
    _iid_ = GUID('{24094317-6DBE-4718-A35A-D7C30EA951FA}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnEventIntervalCollectionType'
eCrdnEventIntervalCollectionTypeUnknown = -1
eCrdnEventIntervalCollectionTypeLighting = 0
eCrdnEventIntervalCollectionTypeSignaled = 1
eCrdnEventIntervalCollectionTypeCondition = 2
AgECrdnEventIntervalCollectionType = c_int # enum
class IAgCrdnIntervalsVectorResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnEventIntervalCollection.FindIntervalCollection method.'
    _iid_ = GUID('{C8B0C679-523E-44F7-92D5-3AA4CBCB404F}')
    _idlflags_ = ['oleautomation']
class IAgCrdnEventIntervalCollectionOccurredResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnEventIntervalCollection.Occurred method.'
    _iid_ = GUID('{DC3D45D7-0F86-4827-8668-94E2C6547779}')
    _idlflags_ = ['oleautomation']
_IAgCrdnEventIntervalCollection._methods_ = [
    COMMETHOD([dispid(22204), helpstring('Return the type of collection of interval lists.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalCollectionType), 'pRetVal' )),
    COMMETHOD([dispid(22201), helpstring('Get the labels associated with the interval lists in the collection.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(22202), helpstring('Return computed collection of interval lists.')], HRESULT, 'FindIntervalCollection',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalsVectorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(22203), helpstring('Determine if specified time falls within any of the computed interval lists in the collection.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollectionOccurredResult)), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalCollection implementation
##class _IAgCrdnEventIntervalCollection_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of collection of interval lists.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the labels associated with the interval lists in the collection.'
##        #return ppRetVal
##
##    def FindIntervalCollection(self):
##        'Return computed collection of interval lists.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within any of the computed interval lists in the collection.'
##        #return ppRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnSamplingBasic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Sampling definition determines how scalar data should be sampled in order to adequately capture trends in that data.'
    _iid_ = GUID('{19A5B028-1CFD-42E6-B5C2-C46B3B509362}')
    _idlflags_ = ['oleautomation']
class IAgCrdnSamplingMethod(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A sampling method.'
    _iid_ = GUID('{0F1D3BC0-70FB-4782-8AA8-37F247DCEC56}')
    _idlflags_ = ['oleautomation']
class IAgCrdnSamplingMethodFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The factory creates sampling method components.'
    _iid_ = GUID('{D05BA4A2-2154-470A-8FC0-B1772EE5A776}')
    _idlflags_ = ['oleautomation']
IAgCrdnSamplingBasic._methods_ = [
    COMMETHOD(['propget', helpstring('Get the sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'SamplingMethod',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSamplingMethod)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'SamplingMethod',
              ( ['in'], POINTER(IAgCrdnSamplingMethod), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Creates sampling definitions, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'MethodFactory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSamplingMethodFactory)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnSamplingBasic implementation
##class IAgCrdnSamplingBasic_Impl(object):
##    def _get(self):
##        'Get the sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    SamplingMethod = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MethodFactory(self):
##        'Creates sampling definitions, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##

class AgCrdnAxesAtTimeInstant(CoClass):
    'Axes orientation fixed relative to reference axes based on orientation of another set of axes evaluated at specified time instant.'
    _reg_clsid_ = GUID('{B62CFC29-07A0-4C80-85D8-D539A5073C7E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnAxesAtTimeInstant(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesAtTimeInstant'
    _iid_ = GUID('{000ABB14-2B52-4717-B914-3879E5C65A1C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnAxesAtTimeInstant(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Axes orientation fixed relative to reference axes based on orientation of another set of axes evaluated at specified time instant.'
    _iid_ = GUID('{8F500AD6-9487-4385-92F0-BF2FB4671994}')
    _idlflags_ = ['oleautomation']
class IAgCrdnTimeProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Defines methods to compute time properties such as availability and special times.'
    _iid_ = GUID('{42BFCB93-FBE1-4353-A5FF-AF079C590DD0}')
    _idlflags_ = ['oleautomation']
AgCrdnAxesAtTimeInstant._com_interfaces_ = [_IAgCrdnAxesAtTimeInstant, IAgCrdnAxesAtTimeInstant, IAgCrdn, IAgCrdnTimeProperties, IAgCrdnAxes]

class _IAgCrdnSamplingCurvatureTolerance(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnSamplingCurvatureTolerance'
    _iid_ = GUID('{1ED10FD0-E26C-4EEE-BD76-6BF1369FE6EA}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnSamplingMethod'
eCrdnSamplingMethodUnknown = 0
eCrdnSamplingMethodFixedStep = 1
eCrdnSamplingMethodRelativeTolerance = 2
eCrdnSamplingMethodCurvatureTolerance = 3
AgECrdnSamplingMethod = c_int # enum
_IAgCrdnSamplingCurvatureTolerance._methods_ = [
    COMMETHOD([dispid(23801), helpstring('A sampling method type.'), 'propget'], HRESULT, 'MethodType',
              ( ['out', 'retval'], POINTER(AgECrdnSamplingMethod), 'pRetVal' )),
    COMMETHOD([dispid(23901), helpstring('Get the minimum allowed time step.'), 'propget'], HRESULT, 'MinimumTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(23901), helpstring('Get the minimum allowed time step.'), 'propput'], HRESULT, 'MinimumTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(23902), helpstring('Get the maximum allowed time step.'), 'propget'], HRESULT, 'MaximumTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(23902), helpstring('Get the maximum allowed time step.'), 'propput'], HRESULT, 'MaximumTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(23903), helpstring('Get the step taken at boundaries of discontinuity or availability.'), 'propget'], HRESULT, 'StepAtBoundaries',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(23903), helpstring('Get the step taken at boundaries of discontinuity or availability.'), 'propput'], HRESULT, 'StepAtBoundaries',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(23904), helpstring('Get the relative tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step relative to the sampled values'), 'propget'], HRESULT, 'RelativeTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(23904), helpstring('Get the relative tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step relative to the sampled values'), 'propput'], HRESULT, 'RelativeTolerance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(23905), helpstring('Get the absolute tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step'), 'propget'], HRESULT, 'AbsoluteTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(23905), helpstring('Get the absolute tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step'), 'propput'], HRESULT, 'AbsoluteTolerance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(23906), helpstring('Get the curvature tolerance which determines acceptable angular difference between slopes over consecutive steps'), 'propget'], HRESULT, 'CurvatureTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(23906), helpstring('Get the curvature tolerance which determines acceptable angular difference between slopes over consecutive steps'), 'propput'], HRESULT, 'CurvatureTolerance',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnSamplingCurvatureTolerance implementation
##class _IAgCrdnSamplingCurvatureTolerance_Impl(object):
##    @property
##    def MethodType(self):
##        'A sampling method type.'
##        #return pRetVal
##
##    def _get(self):
##        'Get the minimum allowed time step.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the minimum allowed time step.'
##    MinimumTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the maximum allowed time step.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the maximum allowed time step.'
##    MaximumTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the step taken at boundaries of discontinuity or availability.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the step taken at boundaries of discontinuity or availability.'
##    StepAtBoundaries = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the relative tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step relative to the sampled values'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the relative tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step relative to the sampled values'
##    RelativeTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the absolute tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the absolute tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step'
##    AbsoluteTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the curvature tolerance which determines acceptable angular difference between slopes over consecutive steps'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the curvature tolerance which determines acceptable angular difference between slopes over consecutive steps'
##    CurvatureTolerance = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnVolumeFromCalc(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'An volume from calc volume interface.'
    _iid_ = GUID('{A1210BFF-C5C3-4551-A4D9-3473BAF5B929}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgECrdnConditionThresholdOption'
eCrdnConditionThresholdOptionAboveMin = 1
eCrdnConditionThresholdOptionBelowMax = 2
eCrdnConditionThresholdOptionInsideMinMax = 3
eCrdnConditionThresholdOptionOutsideMinMax = 4
AgECrdnConditionThresholdOption = c_int # enum
IAgCrdnVolumeFromCalc._methods_ = [
    COMMETHOD(['propget', helpstring('Get the operation from the condition that determines how the bounds are considered. The operation can be set to define satisfaction when the scalar is above minimum, below maximum, between minimum and maximum or outside minimum and maximum.')], HRESULT, 'Operation',
              ( ['out', 'retval'], POINTER(AgECrdnConditionThresholdOption), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the operation from the condition that determines how the bounds are considered. The operation can be set to define satisfaction when the scalar is above minimum, below maximum, between minimum and maximum or outside minimum and maximum.')], HRESULT, 'Operation',
              ( ['in'], AgECrdnConditionThresholdOption, 'pRetVal' )),
    COMMETHOD([helpstring('Get the minimum bound value from the bounds. Call SetMinimum to apply changes.')], HRESULT, 'GetMinimum',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity)), 'ppRetVal' )),
    COMMETHOD([helpstring('Set the minimum bound value for the bounds.')], HRESULT, 'SetMinimum',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity), 'Value' )),
    COMMETHOD([helpstring('Get the maximum bound value from the bounds. Call SetMaximum to apply changes.')], HRESULT, 'GetMaximum',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity)), 'ppRetVal' )),
    COMMETHOD([helpstring('Set the maximum bound value for the condition.')], HRESULT, 'SetMaximum',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity), 'Value' )),
    COMMETHOD([helpstring('Set the min/max bounds. Throws an exception if the minimum is greater than maximum.')], HRESULT, 'Set',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity), 'Min' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity), 'Max' )),
]
################################################################
## code template for IAgCrdnVolumeFromCalc implementation
##class IAgCrdnVolumeFromCalc_Impl(object):
##    def _get(self):
##        'Get the operation from the condition that determines how the bounds are considered. The operation can be set to define satisfaction when the scalar is above minimum, below maximum, between minimum and maximum or outside minimum and maximum.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the operation from the condition that determines how the bounds are considered. The operation can be set to define satisfaction when the scalar is above minimum, below maximum, between minimum and maximum or outside minimum and maximum.'
##    Operation = property(_get, _set, doc = _set.__doc__)
##
##    def GetMinimum(self):
##        'Get the minimum bound value from the bounds. Call SetMinimum to apply changes.'
##        #return ppRetVal
##
##    def SetMinimum(self, Value):
##        'Set the minimum bound value for the bounds.'
##        #return 
##
##    def GetMaximum(self):
##        'Get the maximum bound value from the bounds. Call SetMaximum to apply changes.'
##        #return ppRetVal
##
##    def SetMaximum(self, Value):
##        'Set the maximum bound value for the condition.'
##        #return 
##
##    def Set(self, Min, Max):
##        'Set the min/max bounds. Throws an exception if the minimum is greater than maximum.'
##        #return 
##

class _IAgCrdnGridValuesFixedNumberOfSteps(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnGridValuesFixedNumberOfSteps'
    _iid_ = GUID('{0BA01255-F8DE-4E48-B18E-ED1BAC2E83F5}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnVolumetricGridValuesMethodType'
eCrdnVolumetricGridValuesMethodMethodUnknown = -1
eCrdnVolumetricGridValuesMethodMethodFixedNumSteps = 0
eCrdnVolumetricGridValuesMethodMethodFixedStepSize = 1
eCrdnVolumetricGridValuesMethodMethodCustomValues = 2
AgECrdnVolumetricGridValuesMethodType = c_int # enum
_IAgCrdnGridValuesFixedNumberOfSteps._methods_ = [
    COMMETHOD([dispid(33401), helpstring('Grid values method type.'), 'propget'], HRESULT, 'MethodType',
              ( ['out', 'retval'], POINTER(AgECrdnVolumetricGridValuesMethodType), 'pRetVal' )),
    COMMETHOD([dispid(33601), helpstring('Minimum coordinate value.'), 'propget'], HRESULT, 'Min',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(33601), helpstring('Minimum coordinate value.'), 'propput'], HRESULT, 'Min',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(33602), helpstring('Maximum coordinate value.'), 'propget'], HRESULT, 'Max',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(33602), helpstring('Maximum coordinate value.'), 'propput'], HRESULT, 'Max',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(33603), helpstring('The number of steps between coordinate values.'), 'propget'], HRESULT, 'NumberOfSteps',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(33603), helpstring('The number of steps between coordinate values.'), 'propput'], HRESULT, 'NumberOfSteps',
              ( ['in'], c_int, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnGridValuesFixedNumberOfSteps implementation
##class _IAgCrdnGridValuesFixedNumberOfSteps_Impl(object):
##    @property
##    def MethodType(self):
##        'Grid values method type.'
##        #return pRetVal
##
##    def _get(self):
##        'Minimum coordinate value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Minimum coordinate value.'
##    Min = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Maximum coordinate value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Maximum coordinate value.'
##    Max = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The number of steps between coordinate values.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The number of steps between coordinate values.'
##    NumberOfSteps = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnVectorAngleRate(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorAngleRate'
    _iid_ = GUID('{7F599133-0304-491B-9526-C26145630EF7}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnAngleRefTo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents a reference to a VGT angle.'
    _iid_ = GUID('{7DAC2622-4E37-401B-B281-8CFE8046B69D}')
    _idlflags_ = ['oleautomation']
_IAgCrdnVectorAngleRate._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(5801), helpstring('Specify an angle. The angle vector will be perpendicular to the plane in which the angle is defined.'), 'propget'], HRESULT, 'Angle',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(5802), helpstring('Time step used in numerical evaluation of derivatives using central differencing.'), 'propget'], HRESULT, 'DifferencingTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(5802), helpstring('Time step used in numerical evaluation of derivatives using central differencing.'), 'propput'], HRESULT, 'DifferencingTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorAngleRate implementation
##class _IAgCrdnVectorAngleRate_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Angle(self):
##        'Specify an angle. The angle vector will be perpendicular to the plane in which the angle is defined.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def _get(self):
##        'Time step used in numerical evaluation of derivatives using central differencing.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Time step used in numerical evaluation of derivatives using central differencing.'
##    DifferencingTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnEventIntervalResult(CoClass):
    'Contains the results returned with IAgCrdnEventIntervalList.FindIntervals method.'
    _reg_clsid_ = GUID('{A91F9056-6A49-40BB-A8DF-53EA02461AE5}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventIntervalResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalResult'
    _iid_ = GUID('{E5AC174C-1FD8-4231-8B9E-12AD8C9A8705}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventIntervalResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnEventIntervalList.FindIntervals method.'
    _iid_ = GUID('{8B7F5F3D-907E-481C-8228-8D532C08BE82}')
    _idlflags_ = ['oleautomation']
AgCrdnEventIntervalResult._com_interfaces_ = [_IAgCrdnEventIntervalResult, IAgCrdnEventIntervalResult]

class IAgCrdnSamplingCurvatureTolerance(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Curvature tolerance definition includes parameters that determine how scalar data should be sampled based on limits on slope changes between samples.'
    _iid_ = GUID('{9B3751B6-2F00-4D9B-8C86-67F64F9A8180}')
    _idlflags_ = ['oleautomation']
IAgCrdnSamplingCurvatureTolerance._methods_ = [
    COMMETHOD(['propget', helpstring('Get the minimum allowed time step.')], HRESULT, 'MinimumTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the minimum allowed time step.')], HRESULT, 'MinimumTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the maximum allowed time step.')], HRESULT, 'MaximumTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the maximum allowed time step.')], HRESULT, 'MaximumTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the step taken at boundaries of discontinuity or availability.')], HRESULT, 'StepAtBoundaries',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the step taken at boundaries of discontinuity or availability.')], HRESULT, 'StepAtBoundaries',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the relative tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step relative to the sampled values')], HRESULT, 'RelativeTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the relative tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step relative to the sampled values')], HRESULT, 'RelativeTolerance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the absolute tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step')], HRESULT, 'AbsoluteTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the absolute tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step')], HRESULT, 'AbsoluteTolerance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the curvature tolerance which determines acceptable angular difference between slopes over consecutive steps')], HRESULT, 'CurvatureTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the curvature tolerance which determines acceptable angular difference between slopes over consecutive steps')], HRESULT, 'CurvatureTolerance',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnSamplingCurvatureTolerance implementation
##class IAgCrdnSamplingCurvatureTolerance_Impl(object):
##    def _get(self):
##        'Get the minimum allowed time step.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the minimum allowed time step.'
##    MinimumTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the maximum allowed time step.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the maximum allowed time step.'
##    MaximumTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the step taken at boundaries of discontinuity or availability.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the step taken at boundaries of discontinuity or availability.'
##    StepAtBoundaries = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the relative tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step relative to the sampled values'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the relative tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step relative to the sampled values'
##    RelativeTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the absolute tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the absolute tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step'
##    AbsoluteTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the curvature tolerance which determines acceptable angular difference between slopes over consecutive steps'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the curvature tolerance which determines acceptable angular difference between slopes over consecutive steps'
##    CurvatureTolerance = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnWellKnownSunSystems(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnWellKnownSunSystems'
    _iid_ = GUID('{8700E0F9-73D7-4B2C-A698-FAADA6DB7260}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnSystem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The interface contains methods and properties shared by all VGT systems.'
    _iid_ = GUID('{CE6AE859-24FF-48A0-943D-6EAA6D13C9C3}')
    _idlflags_ = ['oleautomation']
_IAgCrdnWellKnownSunSystems._methods_ = [
    COMMETHOD([dispid(9901), helpstring("The Sun's Fixed coordinate system."), 'propget'], HRESULT, 'Fixed',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(9902), helpstring("The Sun's International Celestial Reference Frame (ICRF)."), 'propget'], HRESULT, 'ICRF',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(9903), helpstring("The Sun's Inertial coordinate system (as defined in STK)."), 'propget'], HRESULT, 'Inertial',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(9904), helpstring("The Sun's J2000 coordinate system."), 'propget'], HRESULT, 'J2000',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(9905), helpstring("The Inertial system at the Sun's barycenter."), 'propget'], HRESULT, 'Barycenter',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnWellKnownSunSystems implementation
##class _IAgCrdnWellKnownSunSystems_Impl(object):
##    @property
##    def Fixed(self):
##        "The Sun's Fixed coordinate system."
##        #return ppRetVal
##
##    @property
##    def ICRF(self):
##        "The Sun's International Celestial Reference Frame (ICRF)."
##        #return ppRetVal
##
##    @property
##    def Inertial(self):
##        "The Sun's Inertial coordinate system (as defined in STK)."
##        #return ppRetVal
##
##    @property
##    def J2000(self):
##        "The Sun's J2000 coordinate system."
##        #return ppRetVal
##
##    @property
##    def Barycenter(self):
##        "The Inertial system at the Sun's barycenter."
##        #return ppRetVal
##

class AgCrdnAxesPlugin(CoClass):
    'A VGT axes plugin.'
    _reg_clsid_ = GUID('{F0172FB8-62AA-478D-80B2-BA5301ED4470}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnAxesPlugin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesPlugin'
    _iid_ = GUID('{216A1874-2604-4687-93B4-72D6E689D531}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnAxesPlugin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A VGT axes plugin.'
    _iid_ = GUID('{98256780-18AF-4B9D-8B43-156A16A689D4}')
    _idlflags_ = ['oleautomation']
AgCrdnAxesPlugin._com_interfaces_ = [_IAgCrdnAxesPlugin, IAgCrdnAxesPlugin, IAgCrdn, IAgCrdnTimeProperties, IAgCrdnAxes]

class IAgCrdnLLAPosition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A position represented by the Latitude, longtitude and Latitude.'
    _iid_ = GUID('{2403D36F-DCBB-4AA1-83D0-D23E6A6B3995}')
    _idlflags_ = ['oleautomation']
IAgCrdnLLAPosition._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a latitude angle.')], HRESULT, 'Latitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a latitude angle.')], HRESULT, 'Latitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a longitude angle.')], HRESULT, 'Longitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a longitude angle.')], HRESULT, 'Longitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify an altitude value.')], HRESULT, 'Altitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify an altitude value.')], HRESULT, 'Altitude',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnLLAPosition implementation
##class IAgCrdnLLAPosition_Impl(object):
##    def _get(self):
##        'Specify a latitude angle.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a latitude angle.'
##    Latitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a longitude angle.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a longitude angle.'
##    Longitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify an altitude value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an altitude value.'
##    Altitude = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnEventIntervalListFile(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalListFile'
    _iid_ = GUID('{82C7F754-E2D9-4F84-A56A-D75D100AE3C4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnEventIntervalListType'
eCrdnEventIntervalListTypeUnknown = -1
eCrdnEventIntervalListTypeFromFile = 0
eCrdnEventIntervalListTypeMerged = 1
eCrdnEventIntervalListTypeFiltered = 2
eCrdnEventIntervalListTypeCondition = 3
eCrdnEventIntervalListTypeScaled = 4
eCrdnEventIntervalListTypeSignaled = 5
eCrdnEventIntervalListTypeTimeOffset = 6
eCrdnEventIntervalListTypeFile = 0
eCrdnEventIntervalListTypeFixed = 7
AgECrdnEventIntervalListType = c_int # enum
class IAgCrdnIntervalListResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnEventIntervalList.FindIntervals method.'
    _iid_ = GUID('{EA887C81-377E-4867-833E-5A8615046CDD}')
    _idlflags_ = ['oleautomation']
_IAgCrdnEventIntervalListFile._methods_ = [
    COMMETHOD([dispid(13509), helpstring('Return the type of interval list.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalListType), 'pRetVal' )),
    COMMETHOD([dispid(13502), helpstring('Get the label descriptions associated with the interval list.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13503), helpstring('Get the labels associated with the interval list.'), 'propget'], HRESULT, 'Descriptions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13507), helpstring('Return computed interval list that can be empty.')], HRESULT, 'FindIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalListResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13508), helpstring('Determine if specified time falls within computed interval list.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17301), helpstring('The path of an external file that contains the time interval list.'), 'propget'], HRESULT, 'Filename',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(17301), helpstring('The path of an external file that contains the time interval list.'), 'propput'], HRESULT, 'Filename',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(17302), helpstring('Reloads the interval list file.')], HRESULT, 'Reload'),
    COMMETHOD([dispid(17304), helpstring('Computes the interval list file span.')], HRESULT, 'GetFileSpan',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalResult)), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalListFile implementation
##class _IAgCrdnEventIntervalListFile_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval list.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the label descriptions associated with the interval list.'
##        #return ppRetVal
##
##    @property
##    def Descriptions(self):
##        'Get the labels associated with the interval list.'
##        #return ppRetVal
##
##    def FindIntervals(self):
##        'Return computed interval list that can be empty.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval list.'
##        #return pRetVal
##
##    def _get(self):
##        'The path of an external file that contains the time interval list.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The path of an external file that contains the time interval list.'
##    Filename = property(_get, _set, doc = _set.__doc__)
##
##    def Reload(self):
##        'Reloads the interval list file.'
##        #return 
##
##    def GetFileSpan(self):
##        'Computes the interval list file span.'
##        #return ppRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnEventFindOccurrenceResult(CoClass):
    'Contains the results returned with IAgCrdnEvent.FindOccurrence method.'
    _reg_clsid_ = GUID('{D5A483B4-9347-415A-A499-21A67694AD61}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventFindOccurrenceResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventFindOccurrenceResult'
    _iid_ = GUID('{2007F9F9-9769-4412-AE52-4FC4EDA3C4D6}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventFindOccurrenceResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnEvent.FindOccurrence method.'
    _iid_ = GUID('{C41E3F8A-F959-411C-BB6C-34F25CD9DB6F}')
    _idlflags_ = ['oleautomation']
AgCrdnEventFindOccurrenceResult._com_interfaces_ = [_IAgCrdnEventFindOccurrenceResult, IAgCrdnEventFindOccurrenceResult]

class AgCrdnAngleBetweenVectors(CoClass):
    'An angle between two vectors.'
    _reg_clsid_ = GUID('{30C6EE80-EF1F-4C22-BB41-A716DF5FB75B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnAngleBetweenVectors(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAngleBetweenVectors'
    _iid_ = GUID('{6EFE060E-6FC3-408B-A6B9-E3038FC3AB48}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnAngleBetweenVectors(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'An angle between two vectors.'
    _iid_ = GUID('{58CDACF2-A1B1-4EB4-A42E-2968DB2C23A7}')
    _idlflags_ = ['oleautomation']
class IAgCrdnAngle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The interface defines methods and properties common to all angles.'
    _iid_ = GUID('{CCC77A45-A50A-4F6C-BFB7-FE9DDE89A34D}')
    _idlflags_ = ['oleautomation']
AgCrdnAngleBetweenVectors._com_interfaces_ = [_IAgCrdnAngleBetweenVectors, IAgCrdnAngleBetweenVectors, IAgCrdnAngle, IAgCrdnTimeProperties, IAgCrdn]

class _IAgCrdnEventIntervalCollectionOccurredResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalCollectionOccurredResult'
    _iid_ = GUID('{F969CAC9-F110-4B17-819F-359858259593}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnEventIntervalCollectionOccurredResult._methods_ = [
    COMMETHOD([dispid(21001), helpstring('Indicates whether the result object is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(21002), helpstring('Index of an interval in the collection.'), 'propget'], HRESULT, 'Index',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnEventIntervalCollectionOccurredResult implementation
##class _IAgCrdnEventIntervalCollectionOccurredResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Index(self):
##        'Index of an interval in the collection.'
##        #return pRetVal
##


# values for enumeration 'AgECrdnConditionType'
eCrdnConditionTypeUnknown = -1
eCrdnConditionTypeScalarBounds = 0
eCrdnConditionTypeCombined = 1
AgECrdnConditionType = c_int # enum
class IAgCrdnGridValuesCustom(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Fixed step grid values.'
    _iid_ = GUID('{4A43F951-2954-4C31-9504-EF0C46CDCD77}')
    _idlflags_ = ['oleautomation']
IAgCrdnGridValuesCustom._methods_ = [
    COMMETHOD(['propget', helpstring('Custom set of coordinate values.')], HRESULT, 'Values',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Custom set of coordinate values.')], HRESULT, 'Values',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnGridValuesCustom implementation
##class IAgCrdnGridValuesCustom_Impl(object):
##    def _get(self):
##        'Custom set of coordinate values.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Custom set of coordinate values.'
##    Values = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnFindTimesResult(CoClass):
    'Returns a collection of intervals and an array of times.'
    _reg_clsid_ = GUID('{A592350C-AB17-4CCC-A427-0D795E058452}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnFindTimesResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnFindTimesResult'
    _iid_ = GUID('{9872B7D3-5746-4A37-B37A-689785B9BBD5}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnFindTimesResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Returns a collection of intervals and an array of times.'
    _iid_ = GUID('{34BB38A4-28D5-4060-B1F6-C0634D66B786}')
    _idlflags_ = ['oleautomation']
AgCrdnFindTimesResult._com_interfaces_ = [_IAgCrdnFindTimesResult, IAgCrdnFindTimesResult]

class AgCrdnAngleBetweenPlanes(CoClass):
    'An angle between two planes.'
    _reg_clsid_ = GUID('{07113984-E15B-4253-9CCC-B8FF5DAB9767}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnAngleBetweenPlanes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAngleBetweenPlanes'
    _iid_ = GUID('{23911D72-9A02-4FD4-B839-5C7C1DBA6CD0}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnAngleBetweenPlanes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'An angle between two planes.'
    _iid_ = GUID('{71A95217-E717-4A05-A1DB-1EF4F1594356}')
    _idlflags_ = ['oleautomation']
AgCrdnAngleBetweenPlanes._com_interfaces_ = [_IAgCrdnAngleBetweenPlanes, IAgCrdnAngleBetweenPlanes, IAgCrdnAngle, IAgCrdnTimeProperties, IAgCrdn]

class _IAgCrdnGapsFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnGapsFilter'
    _iid_ = GUID('{EBF2A703-8E80-4C7F-9DA3-316C03D00860}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnPruneFilter'
eCrdnPruneFilterUnknown = 0
eCrdnPruneFilterFirstIntervals = 1
eCrdnPruneFilterLastIntervals = 2
eCrdnPruneFilterIntervals = 3
eCrdnPruneFilterGaps = 4
eCrdnPruneFilterSatisfactionIntervals = 5
eCrdnPruneFilterRelativeSatisfactionIntervals = 6
AgECrdnPruneFilter = c_int # enum

# values for enumeration 'AgECrdnIntervalDurationKind'
eCrdnIntervalDurationKindAtLeast = 0
eCrdnIntervalDurationKindAtMost = 1
AgECrdnIntervalDurationKind = c_int # enum
_IAgCrdnGapsFilter._methods_ = [
    COMMETHOD([dispid(22901), helpstring('Returns a type of the filter.'), 'propget'], HRESULT, 'FilterType',
              ( ['out', 'retval'], POINTER(AgECrdnPruneFilter), 'pRetVal' )),
    COMMETHOD([dispid(23101), helpstring('Choose a duration type (at least/at most).'), 'propget'], HRESULT, 'DurationKind',
              ( ['out', 'retval'], POINTER(AgECrdnIntervalDurationKind), 'pRetVal' )),
    COMMETHOD([dispid(23101), helpstring('Choose a duration type (at least/at most).'), 'propput'], HRESULT, 'DurationKind',
              ( ['in'], AgECrdnIntervalDurationKind, 'pRetVal' )),
    COMMETHOD([dispid(23102), helpstring('Duration of the gap.'), 'propget'], HRESULT, 'GapDuration',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(23102), helpstring('Duration of the gap.'), 'propput'], HRESULT, 'GapDuration',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnGapsFilter implementation
##class _IAgCrdnGapsFilter_Impl(object):
##    @property
##    def FilterType(self):
##        'Returns a type of the filter.'
##        #return pRetVal
##
##    def _get(self):
##        'Choose a duration type (at least/at most).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Choose a duration type (at least/at most).'
##    DurationKind = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Duration of the gap.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Duration of the gap.'
##    GapDuration = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnIntervalsVectorResult(CoClass):
    'Contains the results returned with IAgCrdnEventIntervalCollection.FindIntervalCollection method.'
    _reg_clsid_ = GUID('{FD73A622-CC26-404F-8E15-864E49FB9A3B}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnIntervalsVectorResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnIntervalsVectorResult'
    _iid_ = GUID('{73110F0F-B787-4A35-BD9D-F30CBE096747}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnIntervalsVectorResult._com_interfaces_ = [_IAgCrdnIntervalsVectorResult, IAgCrdnIntervalsVectorResult]

class _IAgCrdnVectorApoapsis(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorApoapsis'
    _iid_ = GUID('{FD6FCF7A-15B3-427E-A3D4-D109D3DE01D4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPointRefTo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents a reference to a VGT point.'
    _iid_ = GUID('{A3440EC7-3A82-46CD-B9EB-0A18CBDC0D56}')
    _idlflags_ = ['oleautomation']
class IAgCrdnCentralBodyRefTo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents a reference to a VGT CentralBody.'
    _iid_ = GUID('{88481483-F927-4DEF-897A-C8319DDD1582}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgECrdnMeanElementTheory'
eCrdnMeanElementTheoryOsculating = 1
eCrdnMeanElementTheoryKozai = 2
eCrdnMeanElementTheoryBrouwerLyddane_Long = 3
eCrdnMeanElementTheoryBrouwerLyddane_Short = 4
AgECrdnMeanElementTheory = c_int # enum
_IAgCrdnVectorApoapsis._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(5901), helpstring('Specify a reference point.'), 'propget'], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(5902), helpstring('Specify a central body.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(5903), helpstring('Specify the mean element theory type for approximating motion.'), 'propget'], HRESULT, 'MeanElementType',
              ( ['out', 'retval'], POINTER(AgECrdnMeanElementTheory), 'pRetVal' )),
    COMMETHOD([dispid(5903), helpstring('Specify the mean element theory type for approximating motion.'), 'propput'], HRESULT, 'MeanElementType',
              ( ['in'], AgECrdnMeanElementTheory, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorApoapsis implementation
##class _IAgCrdnVectorApoapsis_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Specify a reference point.'
##        #return ppRetVal
##
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify the mean element theory type for approximating motion.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify the mean element theory type for approximating motion.'
##    MeanElementType = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnVectorCross(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorCross'
    _iid_ = GUID('{0BF50C55-802F-4CB2-A694-64C8B0EF8D96}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorRefTo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents a reference to a VGT vector.'
    _iid_ = GUID('{24BF4C8A-0812-44D4-BDB0-9CEF948D00A1}')
    _idlflags_ = ['oleautomation']
_IAgCrdnVectorCross._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6301), helpstring('Specify one of the two vectors which define the vector cross product.'), 'propget'], HRESULT, 'From',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(6302), helpstring('Specify the second of the two vectors which define the vector cross product.'), 'propget'], HRESULT, 'To',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(6303), helpstring('Whether to convert the cross product of two vectors to a unit vector.'), 'propget'], HRESULT, 'IsNormalized',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(6303), helpstring('Whether to convert the cross product of two vectors to a unit vector.'), 'propput'], HRESULT, 'IsNormalized',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(6304), helpstring("Returns a unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propget'], HRESULT, 'Dimension',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(6304), helpstring("Returns a unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propput'], HRESULT, 'Dimension',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnVectorCross implementation
##class _IAgCrdnVectorCross_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def From(self):
##        'Specify one of the two vectors which define the vector cross product.'
##        #return ppRetVal
##
##    @property
##    def To(self):
##        'Specify the second of the two vectors which define the vector cross product.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def _get(self):
##        'Whether to convert the cross product of two vectors to a unit vector.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to convert the cross product of two vectors to a unit vector.'
##    IsNormalized = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Returns a unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Returns a unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##    Dimension = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnAngleDihedral(CoClass):
    'An angle between two vectors about an axis.'
    _reg_clsid_ = GUID('{4507C453-CB01-44CC-A869-8C898D58911F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnAngleDihedral(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAngleDihedral'
    _iid_ = GUID('{E87904E6-B03E-4138-AA8E-0077456A6386}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnAngleDihedral(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'An angle between two vectors about an axis.'
    _iid_ = GUID('{FD019B8B-3181-4AD7-BC55-A4C605F49189}')
    _idlflags_ = ['oleautomation']
AgCrdnAngleDihedral._com_interfaces_ = [_IAgCrdnAngleDihedral, IAgCrdnAngleDihedral, IAgCrdnAngle, IAgCrdnTimeProperties, IAgCrdn]

class IAgCrdnIntervalVectorCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'A collection of interval collections.'
    _iid_ = GUID('{C0E7D4E8-7CD9-453F-8812-01CBECA40E79}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
IAgCrdnIntervalVectorCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('Number of elements in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Accesses an element at the specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnIntervalVectorCollection implementation
##class IAgCrdnIntervalVectorCollection_Impl(object):
##    @property
##    def Count(self):
##        'Number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Accesses an element at the specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

class _IAgCrdnVectorOrbitNormal(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorOrbitNormal'
    _iid_ = GUID('{A8B6C5C7-5F4F-4C30-AB64-E009A4A6D17B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnVectorOrbitNormal._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(7901), helpstring('Specify a central body.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(7902), helpstring('Eliptical orbit is fit to the current motion of the reference point according to the selected mean theory.'), 'propget'], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(7903), helpstring('Specify the mean element theory type for approximating motion.'), 'propget'], HRESULT, 'MeanElementType',
              ( ['out', 'retval'], POINTER(AgECrdnMeanElementTheory), 'pRetVal' )),
    COMMETHOD([dispid(7903), helpstring('Specify the mean element theory type for approximating motion.'), 'propput'], HRESULT, 'MeanElementType',
              ( ['in'], AgECrdnMeanElementTheory, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorOrbitNormal implementation
##class _IAgCrdnVectorOrbitNormal_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Eliptical orbit is fit to the current motion of the reference point according to the selected mean theory.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify the mean element theory type for approximating motion.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify the mean element theory type for approximating motion.'
##    MeanElementType = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnEventArrayGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Access or create VGT event arrays associated with an object.'
    _iid_ = GUID('{5487EE2B-0C06-4210-846C-FC6F96BE2699}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventArrayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The factory creates event arrays.'
    _iid_ = GUID('{BD55EC98-AED7-4308-8009-CB875857A410}')
    _idlflags_ = ['oleautomation']
class IAgCrdnEventArray(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'An ordered array of times, which may or may not be evenly spaced.'
    _iid_ = GUID('{105BDFA9-38B4-4A9F-9E40-E582CA6A2E84}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventArrayGroup._methods_ = [
    COMMETHOD([dispid(18901), helpstring('Removes a specified element.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'EventName' )),
    COMMETHOD([dispid(18902), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(18903), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the group.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18905), helpstring('Returns a Factory object used to create event arrays.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArrayFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns an element by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventArrayGroup implementation
##class IAgCrdnEventArrayGroup_Impl(object):
##    def Remove(self, EventName):
##        'Removes a specified element.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the group.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a Factory object used to create event arrays.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns an element by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

class AgCrdnEventIntervalCollectionOccurredResult(CoClass):
    'Contains the results returned with IAgCrdnEventIntervalCollection.Occurred method.'
    _reg_clsid_ = GUID('{F4750D11-F028-410A-AE3B-0D89D5E853E7}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventIntervalCollectionOccurredResult._com_interfaces_ = [_IAgCrdnEventIntervalCollectionOccurredResult, IAgCrdnEventIntervalCollectionOccurredResult]

IAgCrdnSamplingMethod._methods_ = [
    COMMETHOD(['propget', helpstring('A sampling method type.')], HRESULT, 'MethodType',
              ( ['out', 'retval'], POINTER(AgECrdnSamplingMethod), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnSamplingMethod implementation
##class IAgCrdnSamplingMethod_Impl(object):
##    @property
##    def MethodType(self):
##        'A sampling method type.'
##        #return pRetVal
##

class AgCrdnAngleRotation(CoClass):
    'Angle of the shortest rotation between the specified FromAxes and ToAxes axes.'
    _reg_clsid_ = GUID('{A77E9B18-1472-469A-BF29-00EBC282099E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnAngleRotation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAngleRotation'
    _iid_ = GUID('{649E692B-A14F-4BFE-B007-95B1389748BB}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnAngleRotation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Angle of the shortest rotation between the specified FromAxes and ToAxes axes.'
    _iid_ = GUID('{44EE6A16-5AA4-448F-91D6-9C06DEE06F9F}')
    _idlflags_ = ['oleautomation']
AgCrdnAngleRotation._com_interfaces_ = [_IAgCrdnAngleRotation, IAgCrdnAngleRotation, IAgCrdnAngle, IAgCrdnTimeProperties, IAgCrdn]

class _IAgCrdnPlaneLabels(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPlaneLabels'
    _iid_ = GUID('{9E0169FA-03B6-42C8-BC0E-BF9BEDAE8725}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnPlaneLabels._methods_ = [
    COMMETHOD([dispid(2101), helpstring('Specify an X axis label.'), 'propget'], HRESULT, 'XAxisLabel',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(2101), helpstring('Specify an X axis label.'), 'propput'], HRESULT, 'XAxisLabel',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(2102), helpstring('Specify a Y axis label.'), 'propget'], HRESULT, 'YAxisLabel',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(2102), helpstring('Specify a Y axis label.'), 'propput'], HRESULT, 'YAxisLabel',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnPlaneLabels implementation
##class _IAgCrdnPlaneLabels_Impl(object):
##    def _get(self):
##        'Specify an X axis label.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an X axis label.'
##    XAxisLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a Y axis label.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a Y axis label.'
##    YAxisLabel = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnIntervalListResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnIntervalListResult'
    _iid_ = GUID('{7FD79848-ED11-4F46-A079-52D578BE1797}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnIntervalListResult._methods_ = [
    COMMETHOD([dispid(21101), helpstring('Indicates whether the result object is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(21102), helpstring('A list of intervals.'), 'propget'], HRESULT, 'Intervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnIntervalListResult implementation
##class _IAgCrdnIntervalListResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Intervals(self):
##        'A list of intervals.'
##        #return ppRetVal
##

class IAgCrdnVolumeFromCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A volume from conditioninterface.'
    _iid_ = GUID('{84303F43-9955-4879-A42A-1AAA747891A4}')
    _idlflags_ = ['oleautomation']
class IAgCrdnCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Condition returns a non-dimensional metric that is positive if satisfied, negative if not satisfied and 0 if on boundary; this provides computational methods needed for accurate detection of condition crossings.'
    _iid_ = GUID('{F2090F5C-8394-48BA-AE93-4D3EC6E9CCFE}')
    _idlflags_ = ['oleautomation']
class IAgCrdnEventIntervalList(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'An ordered list of time intervals.'
    _iid_ = GUID('{05336FC7-A0E0-4576-9F06-041020AB1A0E}')
    _idlflags_ = ['oleautomation']
class IAgCrdnSampling(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Base sampling interface.'
    _iid_ = GUID('{7F3719CA-2AD8-449A-B5F5-11F7B493E93F}')
    _idlflags_ = ['oleautomation']
class IAgCrdnConverge(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents a base class for convergence definitions.'
    _iid_ = GUID('{6DFFAA52-ACDB-46C7-989A-0BBCEAF2B7F7}')
    _idlflags_ = ['oleautomation']
IAgCrdnVolumeFromCondition._methods_ = [
    COMMETHOD(['propget', helpstring('The condition component.')], HRESULT, 'Condition',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The condition component.')], HRESULT, 'Condition',
              ( ['in'], POINTER(IAgCrdnCondition), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Indicate whether to use specified custom time limits (see CustomTimeLimits).')], HRESULT, 'UseCustomTimeLimits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Indicate whether to use specified custom time limits (see CustomTimeLimits).')], HRESULT, 'UseCustomTimeLimits',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A custom interval list or a single interval. It is by default set to overall availability of host object. This determines time limits within extrema are sought. The time limits will be used if UseCustomTimeLimits is set to true.')], HRESULT, 'CustomTimeLimits',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A custom interval list or a single interval. It is by default set to overall availability of host object. This determines time limits within extrema are sought. The time limits will be used if UseCustomTimeLimits is set to true.')], HRESULT, 'CustomTimeLimits',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The Convergence definition, which uses time tolerance to determine when times of extrema are found.')], HRESULT, 'Convergence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConverge)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The Convergence definition, which uses time tolerance to determine when times of extrema are found.')], HRESULT, 'Convergence',
              ( ['in'], POINTER(IAgCrdnConverge), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeFromCondition implementation
##class IAgCrdnVolumeFromCondition_Impl(object):
##    def _get(self):
##        'The condition component.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The condition component.'
##    Condition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Indicate whether to use specified custom time limits (see CustomTimeLimits).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Indicate whether to use specified custom time limits (see CustomTimeLimits).'
##    UseCustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A custom interval list or a single interval. It is by default set to overall availability of host object. This determines time limits within extrema are sought. The time limits will be used if UseCustomTimeLimits is set to true.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A custom interval list or a single interval. It is by default set to overall availability of host object. This determines time limits within extrema are sought. The time limits will be used if UseCustomTimeLimits is set to true.'
##    CustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Convergence definition, which uses time tolerance to determine when times of extrema are found.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Convergence definition, which uses time tolerance to determine when times of extrema are found.'
##    Convergence = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnIntervalListResult(CoClass):
    'Contains the results returned with IAgCrdnEventIntervalList.FindIntervals method.'
    _reg_clsid_ = GUID('{4F59D401-5E26-45DF-8068-2B63396B455E}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnIntervalListResult._com_interfaces_ = [_IAgCrdnIntervalListResult, IAgCrdnIntervalListResult]

class IAgCrdnAxesFixed(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Axes fixed in reference axes.'
    _iid_ = GUID('{E3731911-F146-4EB2-834F-9AFFDBFFF281}')
    _idlflags_ = ['oleautomation']
class IAgCrdnAxesSamplingResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains tabulated orientations and angular velocities of axes created by Sample method.'
    _iid_ = GUID('{1862720F-767C-467F-A911-2905853515FF}')
    _idlflags_ = ['oleautomation']
_IAgCrdnAxesCommonTasks._methods_ = [
    COMMETHOD([dispid(11805), helpstring("Creates non-persistent axes fixed in axes on the surface of a central body with the location specified by the origin point. The quaternion defines the axes's orientation.")], HRESULT, 'CreateTopocentricAxesQuaternion',
              ( ['in'], POINTER(IAgCrdnPoint), 'OriginPoint' ),
              ( ['in'], c_double, 'QX' ),
              ( ['in'], c_double, 'QY' ),
              ( ['in'], c_double, 'QZ' ),
              ( ['in'], c_double, 'QS' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFixed)), 'ppRetVal' )),
    COMMETHOD([dispid(11806), helpstring("Creates non-persistent axes fixed in axes on the surface of a central body with the location specified by the origin point. The euler angles define the axes's orientation.")], HRESULT, 'CreateTopocentricAxesEulerAngles',
              ( ['in'], POINTER(IAgCrdnPoint), 'OriginPoint' ),
              ( ['in'], comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.AgEEulerOrientationSequence, 'Sequence' ),
              ( ['in'], VARIANT, 'A' ),
              ( ['in'], VARIANT, 'B' ),
              ( ['in'], VARIANT, 'C' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFixed)), 'ppRetVal' )),
    COMMETHOD([dispid(11802), helpstring('Creates non-persistent fixed axes based on specified axes.')], HRESULT, 'CreateFixed',
              ( ['in'], POINTER(IAgCrdnAxes), 'ReferenceAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFixed)), 'ppRetVal' )),
    COMMETHOD([dispid(11807), helpstring('Computes and returns tabulated orientations and angular velocities of axes with respect to reference axes using specified sampling parameters.')], HRESULT, 'Sample',
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'ReferenceAxes' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Intervals' ),
              ( ['in'], c_double, 'MinStep' ),
              ( ['in'], c_double, 'MaxStep' ),
              ( ['in'], VARIANT, 'TargetRate' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesSamplingResult)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnAxesCommonTasks implementation
##class _IAgCrdnAxesCommonTasks_Impl(object):
##    def CreateTopocentricAxesQuaternion(self, OriginPoint, QX, QY, QZ, QS):
##        "Creates non-persistent axes fixed in axes on the surface of a central body with the location specified by the origin point. The quaternion defines the axes's orientation."
##        #return ppRetVal
##
##    def CreateTopocentricAxesEulerAngles(self, OriginPoint, Sequence, A, B, C):
##        "Creates non-persistent axes fixed in axes on the surface of a central body with the location specified by the origin point. The euler angles define the axes's orientation."
##        #return ppRetVal
##
##    def CreateFixed(self, ReferenceAxes):
##        'Creates non-persistent fixed axes based on specified axes.'
##        #return ppRetVal
##
##    def Sample(self, Axes, ReferenceAxes, Intervals, MinStep, MaxStep, TargetRate):
##        'Computes and returns tabulated orientations and angular velocities of axes with respect to reference axes using specified sampling parameters.'
##        #return ppRetVal
##

class AgCrdnAngleToPlane(CoClass):
    'An angle between a vector and a plane.'
    _reg_clsid_ = GUID('{E5D5251E-C285-49B0-9979-F7038A4108A1}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnAngleToPlane(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAngleToPlane'
    _iid_ = GUID('{FDABE3BF-231D-4596-A11E-41B8376D5958}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnAngleToPlane(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'An angle between a vector and a plane.'
    _iid_ = GUID('{9BBCA03C-7746-4B88-ADDD-2D7DE43D146C}')
    _idlflags_ = ['oleautomation']
AgCrdnAngleToPlane._com_interfaces_ = [_IAgCrdnAngleToPlane, IAgCrdnAngleToPlane, IAgCrdnAngle, IAgCrdnTimeProperties, IAgCrdn]

class _IAgCrdnVectorEccentricity(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorEccentricity'
    _iid_ = GUID('{05230012-E9EA-4AA1-B34B-AFA12420C787}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnVectorEccentricity._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(7101), helpstring('Specify a central body.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(7102), helpstring('Eliptical orbit is fit to the current motion of the reference point according to the selected mean theory.'), 'propget'], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(7103), helpstring('Specify the mean element theory type for approximating motion.'), 'propget'], HRESULT, 'MeanElementType',
              ( ['out', 'retval'], POINTER(AgECrdnMeanElementTheory), 'pRetVal' )),
    COMMETHOD([dispid(7103), helpstring('Specify the mean element theory type for approximating motion.'), 'propput'], HRESULT, 'MeanElementType',
              ( ['in'], AgECrdnMeanElementTheory, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorEccentricity implementation
##class _IAgCrdnVectorEccentricity_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Eliptical orbit is fit to the current motion of the reference point according to the selected mean theory.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify the mean element theory type for approximating motion.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify the mean element theory type for approximating motion.'
##    MeanElementType = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnTypeInfo._methods_ = [
    COMMETHOD(['propget', helpstring('Return the type description.')], HRESULT, 'TypeDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Return the type name.')], HRESULT, 'TypeName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Return the short type description.')], HRESULT, 'ShortTypeDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnTypeInfo implementation
##class IAgCrdnTypeInfo_Impl(object):
##    @property
##    def TypeDescription(self):
##        'Return the type description.'
##        #return pRetVal
##
##    @property
##    def TypeName(self):
##        'Return the type name.'
##        #return pRetVal
##
##    @property
##    def ShortTypeDescription(self):
##        'Return the short type description.'
##        #return pRetVal
##

class AgCrdnIntervalVectorCollection(CoClass):
    'A collection of interval collections.'
    _reg_clsid_ = GUID('{B084309F-7657-4CD1-878F-5D1DC6F565EA}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnIntervalVectorCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnIntervalVectorCollection'
    _iid_ = GUID('{E15A240A-CC6B-4F89-B9A2-99A2B0AA3802}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnIntervalVectorCollection._com_interfaces_ = [_IAgCrdnIntervalVectorCollection, IAgCrdnIntervalVectorCollection]

class _IAgCrdnIntegral(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnIntegral'
    _iid_ = GUID('{D8C8531D-86B9-41E9-AD8B-A802597561C4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnIntegral._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnIntegral implementation
##class _IAgCrdnIntegral_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnPlaneNormal(CoClass):
    'A plane normal to a vector at a given point.'
    _reg_clsid_ = GUID('{0C464731-95B8-4AF9-A7A3-C537CB4E0DDE}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPlaneNormal(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPlaneNormal'
    _iid_ = GUID('{9A2B7AF4-8CF8-4B98-8211-41DDADC48B10}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPlaneNormal(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A plane normal to a vector at a given point.'
    _iid_ = GUID('{C2D0B928-45C3-4816-81AD-24977B49EDE5}')
    _idlflags_ = ['oleautomation']
class IAgCrdnPlane(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The interface defines methods and properties common to all VGT planes.'
    _iid_ = GUID('{72638CB1-A2F9-4541-9002-7303C4171824}')
    _idlflags_ = ['oleautomation']
AgCrdnPlaneNormal._com_interfaces_ = [_IAgCrdnPlaneNormal, IAgCrdnPlaneNormal, IAgCrdnPlane, IAgCrdnTimeProperties, IAgCrdn]

class _IAgCrdnCalcScalarVectorMagnitude(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCalcScalarVectorMagnitude'
    _iid_ = GUID('{41073FA5-9719-424F-8679-074966BB5E56}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnCalcScalarType'
eCrdnCalcScalarTypeUnknown = -1
eCrdnCalcScalarTypeAngle = 0
eCrdnCalcScalarTypeFixedAtTimeInstant = 1
eCrdnCalcScalarTypeConstant = 2
eCrdnCalcScalarTypeDataElement = 3
eCrdnCalcScalarTypeDerivative = 4
eCrdnCalcScalarTypeElapsedTime = 5
eCrdnCalcScalarTypeFile = 6
eCrdnCalcScalarTypeFunction = 7
eCrdnCalcScalarTypeIntegral = 8
eCrdnCalcScalarTypeFunction2Var = 9
eCrdnCalcScalarTypeVectorMagnitude = 10
eCrdnCalcScalarTypePlugin = 11
eCrdnCalcScalarTypeCustomScript = 12
eCrdnCalcScalarTypeSurfaceDistanceBetweenPoints = 13
AgECrdnCalcScalarType = c_int # enum
class IAgCrdnEvaluateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents the results of evaluating a scalar component using IAgCrdnCalcScalar.Evaluate method.'
    _iid_ = GUID('{33C9A2B6-243D-40BD-9B12-18B40DCF3DB6}')
    _idlflags_ = ['oleautomation']
_IAgCrdnCalcScalarVectorMagnitude._methods_ = [
    COMMETHOD([dispid(12805), helpstring('Returns the scalar calculation type.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnCalcScalarType), 'pRetVal' )),
    COMMETHOD([dispid(12803), helpstring('Evaluates the scalar calculation at the specified time instant.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12806), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...')], HRESULT, 'QuickEvaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12804), helpstring('Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12807), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...')], HRESULT, 'QuickEvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17003), helpstring('Specify any vector in VGT. Note that its magnitude is reference axes independent which is why it is not specified.'), 'propget'], HRESULT, 'InputVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(17003), helpstring('Specify any vector in VGT. Note that its magnitude is reference axes independent which is why it is not specified.'), 'propput'], HRESULT, 'InputVector',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(12808), helpstring('Returns a list of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(12809), helpstring("Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propget'], HRESULT, 'UnitOfMeasure',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(12810), helpstring('Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12811), helpstring('Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12812), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12813), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnCalcScalarVectorMagnitude implementation
##class _IAgCrdnCalcScalarVectorMagnitude_Impl(object):
##    @property
##    def Type(self):
##        'Returns the scalar calculation type.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant.'
##        #return ppRetVal
##
##    def QuickEvaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.'
##        #return ppRetVal
##
##    def QuickEvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify any vector in VGT. Note that its magnitude is reference axes independent which is why it is not specified.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Specify any vector in VGT. Note that its magnitude is reference axes independent which is why it is not specified.'
##    InputVector = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def GetAvailability(self):
##        'Returns a list of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def UnitOfMeasure(self):
##        "Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def QuickEvaluateArray(self, Times):
##        'Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateArray(self, Times):
##        'Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##

class _IAgCrdnEventArray(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventArray'
    _iid_ = GUID('{5675A754-F8C4-4515-AD6F-4CBD96363652}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnEventArrayType'
eCrdnEventArrayTypeUnknown = -1
eCrdnEventArrayTypeExtrema = 0
eCrdnEventArrayTypeStartStopTimes = 1
eCrdnEventArrayTypeMerged = 2
eCrdnEventArrayTypeFiltered = 3
eCrdnEventArrayTypeFixedStep = 4
eCrdnEventArrayTypeConditionCrossings = 5
eCrdnEventArrayTypeSignaled = 6
eCrdnEventArrayTypeFixedTimes = 7
AgECrdnEventArrayType = c_int # enum
_IAgCrdnEventArray._methods_ = [
    COMMETHOD([dispid(18302), helpstring('Return the type of time array.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventArrayType), 'pRetVal' )),
    COMMETHOD([dispid(18301), helpstring('Return computed array of times.')], HRESULT, 'FindTimes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnFindTimesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventArray implementation
##class _IAgCrdnEventArray_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time array.'
##        #return pRetVal
##
##    def FindTimes(self):
##        'Return computed array of times.'
##        #return ppRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnWellKnownSunAxes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnWellKnownSunAxes'
    _iid_ = GUID('{9E0178EF-FEFC-4174-9BFB-B44A6B2D80B3}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnWellKnownSunAxes._methods_ = [
    COMMETHOD([dispid(10001), helpstring("Sun's Fixed axes."), 'propget'], HRESULT, 'Fixed',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(10002), helpstring("Sun's ICRF."), 'propget'], HRESULT, 'ICRF',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(10003), helpstring("Sun's Inertial axes (as defined in STK)."), 'propget'], HRESULT, 'Inertial',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(10004), helpstring("The Sun's J2000 axes."), 'propget'], HRESULT, 'J2000',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnWellKnownSunAxes implementation
##class _IAgCrdnWellKnownSunAxes_Impl(object):
##    @property
##    def Fixed(self):
##        "Sun's Fixed axes."
##        #return ppRetVal
##
##    @property
##    def ICRF(self):
##        "Sun's ICRF."
##        #return ppRetVal
##
##    @property
##    def Inertial(self):
##        "Sun's Inertial axes (as defined in STK)."
##        #return ppRetVal
##
##    @property
##    def J2000(self):
##        "The Sun's J2000 axes."
##        #return ppRetVal
##

class AgCrdnEventGroup(CoClass):
    'Access or create VGT events associated with an object.'
    _reg_clsid_ = GUID('{915A4A40-9EDB-4B61-B8BB-51F7A8013DDC}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnEventGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Access or create VGT events associated with an object.'
    _iid_ = GUID('{14705C23-9AE9-423A-B7A6-B228111C3CEA}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
AgCrdnEventGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnEventGroup]

class AgCrdnPlaneQuadrant(CoClass):
    'A plane based on a selected Quadrant of a reference system.'
    _reg_clsid_ = GUID('{5811178B-6872-47AC-8AFB-C9F05D625BE3}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPlaneQuadrant(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPlaneQuadrant'
    _iid_ = GUID('{F898B607-C5AD-4E1E-823D-F56B50EA5A92}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPlaneQuadrant(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A plane based on a selected Quadrant of a reference system.'
    _iid_ = GUID('{2E56315E-9245-4AFB-BABC-B05164996A75}')
    _idlflags_ = ['oleautomation']
AgCrdnPlaneQuadrant._com_interfaces_ = [_IAgCrdnPlaneQuadrant, IAgCrdnPlaneQuadrant, IAgCrdnPlane, IAgCrdnTimeProperties, IAgCrdn]

class AgCrdnEventIntervalGroup(CoClass):
    'Access or create VGT event intervals associated with an object.'
    _reg_clsid_ = GUID('{48102FB2-6A8C-4A74-8A93-5589B25102EA}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnEventIntervalGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Access or create VGT event intervals associated with an object.'
    _iid_ = GUID('{1151E0B0-ED4F-4C9C-BB60-1A9B57FA5749}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
AgCrdnEventIntervalGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnEventIntervalGroup]

class IAgCrdnVectorAngleRate(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Angle rate vector perpendicular to the plane in which the angle is defined.'
    _iid_ = GUID('{291A8C3A-75A5-4875-851C-A8D8A7268F6E}')
    _idlflags_ = ['oleautomation']
IAgCrdnVectorAngleRate._methods_ = [
    COMMETHOD(['propget', helpstring('Specify an angle. The angle vector will be perpendicular to the plane in which the angle is defined.')], HRESULT, 'Angle',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Time step used in numerical evaluation of derivatives using central differencing.')], HRESULT, 'DifferencingTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Time step used in numerical evaluation of derivatives using central differencing.')], HRESULT, 'DifferencingTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorAngleRate implementation
##class IAgCrdnVectorAngleRate_Impl(object):
##    @property
##    def Angle(self):
##        'Specify an angle. The angle vector will be perpendicular to the plane in which the angle is defined.'
##        #return ppRetVal
##
##    def _get(self):
##        'Time step used in numerical evaluation of derivatives using central differencing.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Time step used in numerical evaluation of derivatives using central differencing.'
##    DifferencingTimeStep = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnGridValuesFixedStep(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnGridValuesFixedStep'
    _iid_ = GUID('{93ABD809-9244-41B4-A1F7-2CF1130CB2EB}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnGridValuesFixedStep._methods_ = [
    COMMETHOD([dispid(33401), helpstring('Grid values method type.'), 'propget'], HRESULT, 'MethodType',
              ( ['out', 'retval'], POINTER(AgECrdnVolumetricGridValuesMethodType), 'pRetVal' )),
    COMMETHOD([dispid(33501), helpstring('Minimum coordinate value.'), 'propget'], HRESULT, 'Min',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(33501), helpstring('Minimum coordinate value.'), 'propput'], HRESULT, 'Min',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(33502), helpstring('Maximum coordinate value.'), 'propget'], HRESULT, 'Max',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(33502), helpstring('Maximum coordinate value.'), 'propput'], HRESULT, 'Max',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(33503), helpstring('Flag indicating whether to include minimum and maximum coordinate values in the defined set of values.'), 'propget'], HRESULT, 'IncludeMinMax',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(33503), helpstring('Flag indicating whether to include minimum and maximum coordinate values in the defined set of values.'), 'propput'], HRESULT, 'IncludeMinMax',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(33504), helpstring('Reference coordinate value from which steps are taken.'), 'propget'], HRESULT, 'ReferenceValue',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(33504), helpstring('Reference coordinate value from which steps are taken.'), 'propput'], HRESULT, 'ReferenceValue',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(33505), helpstring('Step between subsequent coordinate values.'), 'propget'], HRESULT, 'Step',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(33505), helpstring('Step between subsequent coordinate values.'), 'propput'], HRESULT, 'Step',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnGridValuesFixedStep implementation
##class _IAgCrdnGridValuesFixedStep_Impl(object):
##    @property
##    def MethodType(self):
##        'Grid values method type.'
##        #return pRetVal
##
##    def _get(self):
##        'Minimum coordinate value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Minimum coordinate value.'
##    Min = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Maximum coordinate value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Maximum coordinate value.'
##    Max = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Flag indicating whether to include minimum and maximum coordinate values in the defined set of values.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Flag indicating whether to include minimum and maximum coordinate values in the defined set of values.'
##    IncludeMinMax = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Reference coordinate value from which steps are taken.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Reference coordinate value from which steps are taken.'
##    ReferenceValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Step between subsequent coordinate values.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Step between subsequent coordinate values.'
##    Step = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnPlaneTrajectory(CoClass):
    'The plane is defined on the basis of a trajectory of a Point with respect to a ReferenceSystem.'
    _reg_clsid_ = GUID('{5FD3BD3A-4035-471E-BA91-B2177855A90F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPlaneTrajectory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPlaneTrajectory'
    _iid_ = GUID('{D3407190-00AC-4C28-8174-7517F5338A53}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPlaneTrajectory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The plane is defined on the basis of a trajectory of a Point with respect to a ReferenceSystem.'
    _iid_ = GUID('{56482904-D0A0-45FE-B208-69E1BA0B981A}')
    _idlflags_ = ['oleautomation']
AgCrdnPlaneTrajectory._com_interfaces_ = [_IAgCrdnPlaneTrajectory, IAgCrdnPlaneTrajectory, IAgCrdnPlane, IAgCrdnTimeProperties, IAgCrdn]

class _IAgCrdnConditionSetFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnConditionSetFactory'
    _iid_ = GUID('{389A641E-6FFC-4B4C-838E-27C1EE3E2FCC}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnConditionSetType'
eCrdnConditionSetTypeUnknown = -1
eCrdnConditionSetTypeScalarThresholds = 0
AgECrdnConditionSetType = c_int # enum
class IAgCrdnConditionSet(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Condition set returns an array of non-dimensional metrics, one for each condition in the set; each metric is positive if corresponding condition is satisfied, negative if not satisfied and 0 if on boundary; this provides computational methods needed for...'
    _iid_ = GUID('{1AE76DC9-5DBA-4A74-8C05-8638404E75A8}')
    _idlflags_ = ['oleautomation']
_IAgCrdnConditionSetFactory._methods_ = [
    COMMETHOD([dispid(29501), helpstring('Creates and registers a condition set using specified name, description, and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnConditionSetType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionSet)), 'ppRetVal' )),
    COMMETHOD([dispid(29502), helpstring('Create a scalar thresholds condition set.')], HRESULT, 'CreateScalarThresholds',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionSet)), 'ppRetVal' )),
    COMMETHOD([dispid(29503), helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnConditionSetType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnConditionSetFactory implementation
##class _IAgCrdnConditionSetFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Creates and registers a condition set using specified name, description, and type.'
##        #return ppRetVal
##
##    def CreateScalarThresholds(self, Name, Description):
##        'Create a scalar thresholds condition set.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##

class AgCrdnEventIntervalListGroup(CoClass):
    'Access or create VGT event interval lists associated with an object.'
    _reg_clsid_ = GUID('{FD4B5FF7-B5AE-4F97-8A76-E00DF85179AE}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnEventIntervalListGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Access or create VGT event interval lists associated with an object.'
    _iid_ = GUID('{C5A28F39-E4B2-4884-8348-E7EED53077D8}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
AgCrdnEventIntervalListGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnEventIntervalListGroup]

class IAgCrdnVectorGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Access or create VGT vectors associated with an object or a central body.'
    _iid_ = GUID('{3716DB65-5320-4F8B-AFFF-F8E327D402AB}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A Factory object to create vectors.'
    _iid_ = GUID('{779484EA-9DF4-457D-B706-DF26ACCB4D62}')
    _idlflags_ = ['oleautomation']
IAgCrdnVectorGroup._methods_ = [
    COMMETHOD([dispid(8901), helpstring('Removes a specified vector.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'VectorName' )),
    COMMETHOD([dispid(8902), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(8903), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the group.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(8905), helpstring('Returns a Factory object used to create custom vectors.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns a vector by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVectorGroup implementation
##class IAgCrdnVectorGroup_Impl(object):
##    def Remove(self, VectorName):
##        'Removes a specified vector.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the group.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a Factory object used to create custom vectors.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns a vector by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

class AgCrdnPlaneTriad(CoClass):
    'A Plane containing points PointA, PointB and ReferencePont with the first axis aligned with the direction from the ReferencePoint to PointA and the second axis toward the direction from the ReferencePoint to PointB.'
    _reg_clsid_ = GUID('{754F21DB-5C64-4ED8-BD32-4DE7ABFFA456}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPlaneTriad(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPlaneTriad'
    _iid_ = GUID('{B225024E-8C5D-44B4-8EFB-8CAA4698A6A1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPlaneTriad(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A Plane containing points A, B and ReferencePont with the first axis aligned with the direction from the ReferencePoint to point A and the second axis toward the direction from the ReferencePoint to point B.'
    _iid_ = GUID('{0B7C56BD-9808-4F0E-82DE-C2689411BFD1}')
    _idlflags_ = ['oleautomation']
AgCrdnPlaneTriad._com_interfaces_ = [_IAgCrdnPlaneTriad, IAgCrdnPlaneTriad, IAgCrdnPlane, IAgCrdnTimeProperties, IAgCrdn]

class _IAgCrdnIntegralBasic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnIntegralBasic'
    _iid_ = GUID('{A6CFAB24-DDE3-4E97-B9E5-910B05448FF5}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnIntegralType'
eCrdnIntegralTypeFixedStepSimpson = 2
eCrdnIntegralTypeFixedStepTrapz = 1
eCrdnIntegralTypeAdaptiveStep = 3
AgECrdnIntegralType = c_int # enum
_IAgCrdnIntegralBasic._methods_ = [
    COMMETHOD([dispid(24501), helpstring('Get the integral type which determines the method of integration and can be set to trapezoidal, Simplson or adaptive Lobatto.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnIntegralType), 'pRetVal' )),
    COMMETHOD([dispid(24501), helpstring('Get the integral type which determines the method of integration and can be set to trapezoidal, Simplson or adaptive Lobatto.'), 'propput'], HRESULT, 'Type',
              ( ['in'], AgECrdnIntegralType, 'pRetVal' )),
    COMMETHOD([dispid(24503), helpstring('Get the tolerance which determines how accurate integral is computed by finding relative difference between refined and unrefined integral evaluations. Only available if Adaptive Lobatto is selected as the integral type.'), 'propget'], HRESULT, 'Tolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(24503), helpstring('Get the tolerance which determines how accurate integral is computed by finding relative difference between refined and unrefined integral evaluations. Only available if Adaptive Lobatto is selected as the integral type.'), 'propput'], HRESULT, 'Tolerance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(24504), helpstring('Get the number of iteration which determines how many refinement iterations are allowed. Only available if Adaptive Lobatto is selected as the integral type.'), 'propget'], HRESULT, 'MaximumIterations',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24504), helpstring('Get the number of iteration which determines how many refinement iterations are allowed. Only available if Adaptive Lobatto is selected as the integral type.'), 'propput'], HRESULT, 'MaximumIterations',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnIntegralBasic implementation
##class _IAgCrdnIntegralBasic_Impl(object):
##    def _get(self):
##        'Get the integral type which determines the method of integration and can be set to trapezoidal, Simplson or adaptive Lobatto.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the integral type which determines the method of integration and can be set to trapezoidal, Simplson or adaptive Lobatto.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the tolerance which determines how accurate integral is computed by finding relative difference between refined and unrefined integral evaluations. Only available if Adaptive Lobatto is selected as the integral type.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the tolerance which determines how accurate integral is computed by finding relative difference between refined and unrefined integral evaluations. Only available if Adaptive Lobatto is selected as the integral type.'
##    Tolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the number of iteration which determines how many refinement iterations are allowed. Only available if Adaptive Lobatto is selected as the integral type.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the number of iteration which determines how many refinement iterations are allowed. Only available if Adaptive Lobatto is selected as the integral type.'
##    MaximumIterations = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnSamplingMethodFactory._methods_ = [
    COMMETHOD([helpstring('Create a fixed time step sampling definition.')], HRESULT, 'CreateFixedStep',
              ( ['in'], c_double, 'FixedStep' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSamplingMethod)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a curvature tolerance sampling definition. Curvature tolerance uses changes in slope between samples.')], HRESULT, 'CreateCurvatureTolerance',
              ( ['in'], c_double, 'CurvatureTolerance' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSamplingMethod)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a relative tolerance sampling definition. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples.')], HRESULT, 'CreateRelativeTolerance',
              ( ['in'], c_double, 'RelativeTolerance' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSamplingMethod)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnSamplingMethodFactory implementation
##class IAgCrdnSamplingMethodFactory_Impl(object):
##    def CreateFixedStep(self, FixedStep):
##        'Create a fixed time step sampling definition.'
##        #return ppRetVal
##
##    def CreateCurvatureTolerance(self, CurvatureTolerance):
##        'Create a curvature tolerance sampling definition. Curvature tolerance uses changes in slope between samples.'
##        #return ppRetVal
##
##    def CreateRelativeTolerance(self, RelativeTolerance):
##        'Create a relative tolerance sampling definition. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples.'
##        #return ppRetVal
##

class IAgCrdnEventIntervalListFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The factory creates event interval lists.'
    _iid_ = GUID('{2B301EFB-32BA-4EB8-A552-696A0EA96986}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventIntervalListFactory._methods_ = [
    COMMETHOD([helpstring('Create and register an interval list using specified name, description, and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnEventIntervalListType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([helpstring('This method is deprecated. Use CreateEventIntervalListFile instead. Create an interval list loaded from specified interval file.')], HRESULT, 'CreateEventIntervalListFromFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'Filepath' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an interval list by merging two constituent interval lists using specified logical operation.')], HRESULT, 'CreateEventIntervalListMerged',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an interval list by filtering intervals from original interval list using specified filtering method.')], HRESULT, 'CreateEventIntervalListFiltered',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an interval list containing intervals during which specified condition is satisfied.')], HRESULT, 'CreateEventIntervalListCondition',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an interval list defined by scaling every interval in original interval list using either absolute or relative scale.')], HRESULT, 'CreateEventIntervalListScaled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an interval list recorded at the target clock location by performing signal transmission of original interval list between base and target clock locations.')], HRESULT, 'CreateEventIntervalListSignaled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an interval list defined by shifting the specified reference interval list by a fixed time offset.')], HRESULT, 'CreateEventIntervalListTimeOffset',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnEventIntervalListType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Create an interval list based on specified interval file.')], HRESULT, 'CreateEventIntervalListFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'Filepath' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([helpstring('Interval list defined by time ordered non-overlapping intervals each explicitly specified by its start and stop times. Stop date/time is required to be at or after start for each interval.')], HRESULT, 'CreateEventIntervalListFixed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalListFactory implementation
##class IAgCrdnEventIntervalListFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Create and register an interval list using specified name, description, and type.'
##        #return ppRetVal
##
##    def CreateEventIntervalListFromFile(self, Name, Description, Filepath):
##        'This method is deprecated. Use CreateEventIntervalListFile instead. Create an interval list loaded from specified interval file.'
##        #return ppRetVal
##
##    def CreateEventIntervalListMerged(self, Name, Description):
##        'Create an interval list by merging two constituent interval lists using specified logical operation.'
##        #return ppRetVal
##
##    def CreateEventIntervalListFiltered(self, Name, Description):
##        'Create an interval list by filtering intervals from original interval list using specified filtering method.'
##        #return ppRetVal
##
##    def CreateEventIntervalListCondition(self, Name, Description):
##        'Create an interval list containing intervals during which specified condition is satisfied.'
##        #return ppRetVal
##
##    def CreateEventIntervalListScaled(self, Name, Description):
##        'Create an interval list defined by scaling every interval in original interval list using either absolute or relative scale.'
##        #return ppRetVal
##
##    def CreateEventIntervalListSignaled(self, Name, Description):
##        'Create an interval list recorded at the target clock location by performing signal transmission of original interval list between base and target clock locations.'
##        #return ppRetVal
##
##    def CreateEventIntervalListTimeOffset(self, Name, Description):
##        'Create an interval list defined by shifting the specified reference interval list by a fixed time offset.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##
##    def CreateEventIntervalListFile(self, Name, Description, Filepath):
##        'Create an interval list based on specified interval file.'
##        #return ppRetVal
##
##    def CreateEventIntervalListFixed(self, Name, Description):
##        'Interval list defined by time ordered non-overlapping intervals each explicitly specified by its start and stop times. Stop date/time is required to be at or after start for each interval.'
##        #return ppRetVal
##

class AgCrdnEventArrayGroup(CoClass):
    'Access or create VGT event arrays associated with an object.'
    _reg_clsid_ = GUID('{689B8B45-3432-4E79-A649-E8290BFCAF40}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventArrayGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnEventArrayGroup]

class _IAgCrdnAxesFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesFactory'
    _iid_ = GUID('{7E07B2DA-E83D-4623-A4E4-79966A4BE21A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnAxesType'
eCrdnAxesTypeUnknown = -1
eCrdnAxesTypeLagrangeLibration = 0
eCrdnAxesTypeAngularOffset = 1
eCrdnAxesTypeFixedAtEpoch = 2
eCrdnAxesTypeBPlane = 3
eCrdnAxesTypeCustomScript = 4
eCrdnAxesTypeFromFile = 5
eCrdnAxesTypeFixed = 6
eCrdnAxesTypeAlignedAndConstrained = 7
eCrdnAxesTypeModelAttachment = 8
eCrdnAxesTypeSpinning = 9
eCrdnAxesTypeOnSurface = 10
eCrdnAxesTypeTrajectory = 11
eCrdnAxesTypeTemplate = 12
eCrdnAxesTypeAtTimeInstant = 13
eCrdnAxesTypePlugin = 14
eCrdnAxesTypeFile = 5
AgECrdnAxesType = c_int # enum
_IAgCrdnAxesFactory._methods_ = [
    COMMETHOD([dispid(8401), helpstring('Creates a VGT axes using specified name, description and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'AxesName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnAxesType, 'AxesType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(8402), helpstring('Returns true if the type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnAxesType, 'Type' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(8407), helpstring('An array of display names associated with available axes plugins. The elements of the array are strings. Display names are used to create VGT axes based on COM plugins using CreateAxesPluginFromDisplayName method.'), 'propget'], HRESULT, 'AvailableAxesPluginDisplayNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(8406), helpstring('Create an axes component based on a COM axes plugin. For information how to implement and register VGT plugins, see')], HRESULT, 'CreateAxesPluginFromDisplayName',
              ( ['in'], BSTR, 'AxesName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'DisplayName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnAxesFactory implementation
##class _IAgCrdnAxesFactory_Impl(object):
##    def Create(self, AxesName, Description, AxesType):
##        'Creates a VGT axes using specified name, description and type.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, Type):
##        'Returns true if the type is supported.'
##        #return pRetVal
##
##    @property
##    def AvailableAxesPluginDisplayNames(self):
##        'An array of display names associated with available axes plugins. The elements of the array are strings. Display names are used to create VGT axes based on COM plugins using CreateAxesPluginFromDisplayName method.'
##        #return ppRetVal
##
##    def CreateAxesPluginFromDisplayName(self, AxesName, Description, DisplayName):
##        'Create an axes component based on a COM axes plugin. For information how to implement and register VGT plugins, see'
##        #return ppRetVal
##

class AgCrdnPointBPlane(CoClass):
    'B-Plane point using the selected target body.'
    _reg_clsid_ = GUID('{0CEBF2FD-82A0-4739-A637-7BBA544C7FE3}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPointBPlane(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointBPlane'
    _iid_ = GUID('{8486E489-4CDE-4766-AB28-B8F14006C584}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPointBPlane(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'B-Plane point using the selected target body.'
    _iid_ = GUID('{F45C47E9-C6B9-4B90-A275-94B37554F0A0}')
    _idlflags_ = ['oleautomation']
AgCrdnPointBPlane._com_interfaces_ = [_IAgCrdnPointBPlane, IAgCrdnPointBPlane, IAgCrdnPoint, IAgCrdnTimeProperties, IAgCrdn]

class AgCrdnPointFile(CoClass):
    'Point specified by data from a file.'
    _reg_clsid_ = GUID('{06C47F31-A43A-46F4-A6D0-DBB598E78FAA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPointFile(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointFile'
    _iid_ = GUID('{EABE2BE3-2A1F-46AF-BAC9-4EB9440494B9}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPointFile(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Point specified by data from a file.'
    _iid_ = GUID('{92EBD1F9-3CBB-4A3F-ABA2-E1EC2FDC890B}')
    _idlflags_ = ['oleautomation']
AgCrdnPointFile._com_interfaces_ = [_IAgCrdnPointFile, IAgCrdnPointFile, IAgCrdnPoint, IAgCrdnTimeProperties, IAgCrdn]

class IAgCrdnSamplingFixedStep(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Fixed step definition includes parameters that determine how scalar data should be sampled based on fixed steps between samples.'
    _iid_ = GUID('{CAB2C4F4-3712-4F09-BA1B-33907D91B9C7}')
    _idlflags_ = ['oleautomation']
IAgCrdnSamplingFixedStep._methods_ = [
    COMMETHOD(['propget', helpstring('Get the fixed time step.')], HRESULT, 'TimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the fixed time step.')], HRESULT, 'TimeStep',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnSamplingFixedStep implementation
##class IAgCrdnSamplingFixedStep_Impl(object):
##    def _get(self):
##        'Get the fixed time step.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the fixed time step.'
##    TimeStep = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnCalcScalarGroup(CoClass):
    'Access or create VGT calculation scalars associated with an object or a central body.'
    _reg_clsid_ = GUID('{8502A0E4-0C61-4FD7-801E-979F16DC684A}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnCalcScalarGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Access or create VGT calculation scalars associated with an object or a central body.'
    _iid_ = GUID('{0D0ADA4A-4335-47EC-ABBA-53E7963CB29F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
AgCrdnCalcScalarGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnCalcScalarGroup]

class AgCrdnPointFixedInSystem(CoClass):
    'Point fixed in a reference coordinate system using the selected coordinate type.'
    _reg_clsid_ = GUID('{936EB09C-7FD9-4D4C-B3AC-51BBBD943C55}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPointFixedInSystem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointFixedInSystem'
    _iid_ = GUID('{DD7BE20C-0397-4529-8AAF-41F0391893B6}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPointFixedInSystem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Point fixed in a reference coordinate system using the selected coordinate type.'
    _iid_ = GUID('{EEB578E7-29C8-4C61-93F7-3F662D2123DF}')
    _idlflags_ = ['oleautomation']
AgCrdnPointFixedInSystem._com_interfaces_ = [_IAgCrdnPointFixedInSystem, IAgCrdnPointFixedInSystem, IAgCrdnPoint, IAgCrdnTimeProperties, IAgCrdn]

_IAgCrdnIntervalVectorCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('Number of elements in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Accesses an element at the specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnIntervalVectorCollection implementation
##class _IAgCrdnIntervalVectorCollection_Impl(object):
##    @property
##    def Count(self):
##        'Number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Accesses an element at the specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##


# values for enumeration 'AgECrdnPlaneType'
eCrdnPlaneTypeUnknown = -1
eCrdnPlaneTypeNormal = 0
eCrdnPlaneTypeQuadrant = 1
eCrdnPlaneTypeTrajectory = 2
eCrdnPlaneTypeTriad = 3
eCrdnPlaneTypeTemplate = 4
AgECrdnPlaneType = c_int # enum
class IAgCrdnPlaneFindInAxesResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnPlane.FindInAxes method.'
    _iid_ = GUID('{0690C045-DFF8-4E73-BB79-66EB79BA43D5}')
    _idlflags_ = ['oleautomation']
class IAgCrdnPlaneFindInAxesWithRateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnPlane.FindInAxesWithRate method.'
    _iid_ = GUID('{7EA9DFCF-2D40-4065-846F-C4F94ED9F26B}')
    _idlflags_ = ['oleautomation']
class IAgCrdnPlaneFindInSystemResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnPlane.FindInSystem method.'
    _iid_ = GUID('{E2274ECD-7729-4C46-A513-04276243DB80}')
    _idlflags_ = ['oleautomation']
class IAgCrdnPlaneFindInSystemWithRateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnPlane.FindInSystemWithRate method.'
    _iid_ = GUID('{8F9A9ED2-4D72-438E-BE8C-497F3F69432D}')
    _idlflags_ = ['oleautomation']
class IAgCrdnPlaneLabels(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Allows configuring the X and Y axes labels.'
    _iid_ = GUID('{8407B3E6-B6D2-4BB3-89C7-B0D46645FE94}')
    _idlflags_ = ['oleautomation']
class IAgCrdnSystemRefTo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents a reference to a VGT system.'
    _iid_ = GUID('{AF863B51-5186-4E13-A465-B503B66ABC10}')
    _idlflags_ = ['oleautomation']
_IAgCrdnPlaneTrajectory._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(2201), helpstring('Returns a type of the plane object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPlaneType), 'pRetVal' )),
    COMMETHOD([dispid(2202), helpstring("Computes the plane's axes vectors in a specified reference axes.")], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2203), helpstring("Computes the plane's axes vectors and their rates in a specified reference axes.")], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2204), helpstring('Computes the position and X and Y axes in the specified coordinate system.')], HRESULT, 'FindInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2205), helpstring('Computes the position, X and Y axes and their rates of change in the specified coordinate system.')], HRESULT, 'FindInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2206), helpstring("Allows configuring the plane's X and Y axes labels."), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(4201), helpstring('Specify a trajectory point.'), 'propget'], HRESULT, 'Point',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4202), helpstring('Specify a reference system.'), 'propget'], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4203), helpstring('Specify an angle measured from X (Axis 1) away from Y (Axis 2).'), 'propget'], HRESULT, 'RotationOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(4203), helpstring('Specify an angle measured from X (Axis 1) away from Y (Axis 2).'), 'propput'], HRESULT, 'RotationOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPlaneTrajectory implementation
##class _IAgCrdnPlaneTrajectory_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the plane object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        "Computes the plane's axes vectors in a specified reference axes."
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        "Computes the plane's axes vectors and their rates in a specified reference axes."
##        #return ppRetVal
##
##    def FindInSystem(self, Epoch, System):
##        'Computes the position and X and Y axes in the specified coordinate system.'
##        #return ppRetVal
##
##    def FindInSystemWithRate(self, Epoch, System):
##        'Computes the position, X and Y axes and their rates of change in the specified coordinate system.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        "Allows configuring the plane's X and Y axes labels."
##        #return ppRetVal
##
##    @property
##    def Point(self):
##        'Specify a trajectory point.'
##        #return ppRetVal
##
##    @property
##    def ReferenceSystem(self):
##        'Specify a reference system.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify an angle measured from X (Axis 1) away from Y (Axis 2).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an angle measured from X (Axis 1) away from Y (Axis 2).'
##    RotationOffset = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnEventExtremum(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventExtremum'
    _iid_ = GUID('{F53E912F-53BC-4AFE-B0F1-569E8F52331A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnEventType'
eCrdnEventTypeUnknown = -1
eCrdnEventTypeEpoch = 0
eCrdnEventTypeExtremum = 1
eCrdnEventTypeFromInterval = 2
eCrdnEventTypeSignaled = 3
eCrdnEventTypeTimeOffset = 4
eCrdnEventTypeSmartEpoch = 5
AgECrdnEventType = c_int # enum
class IAgCrdnEvent(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Defines an event (time instant).'
    _iid_ = GUID('{97EBF8C3-5C4F-40FE-BFEF-4D5DCB51D4FA}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgECrdnExtremumConstants'
eCrdnExtremumMinimum = 1
eCrdnExtremumMaximum = 2
AgECrdnExtremumConstants = c_int # enum
class IAgCrdnCalcScalar(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Any scalar calculation that is not constant by construction.'
    _iid_ = GUID('{4318BD6C-46D2-40CD-AA10-D979048DF4E5}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgECrdnSaveDataOption'
eCrdnSaveDataOptionApplicationSettings = -1
eCrdnSaveDataOptionYes = 100
eCrdnSaveDataOptionNo = 10
AgECrdnSaveDataOption = c_int # enum
_IAgCrdnEventExtremum._methods_ = [
    COMMETHOD([dispid(12911), helpstring('Return the type of time instant.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventType), 'pRetVal' )),
    COMMETHOD([dispid(12905), helpstring("Return time instant that corresponds to today's GMT midnight."), 'propget'], HRESULT, 'Today',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12906), helpstring("Return time instant that corresponds to tomorrow's GMT midnight."), 'propget'], HRESULT, 'Tomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12907), helpstring("Return time instant that corresponds to today's GMT noon."), 'propget'], HRESULT, 'NoonToday',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12908), helpstring("Return time instant that corresponds to tomorrow's GMT noon."), 'propget'], HRESULT, 'NoonTomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12909), helpstring('Return computed time instance if it occurs.')], HRESULT, 'FindOccurrence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventFindOccurrenceResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12912), helpstring('Return true if computed time instance occurs before or at specified time, return false otherwise.')], HRESULT, 'OccursBefore',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(13201), helpstring('The extremum type (either minimum or maximum) for the time instant.'), 'propget'], HRESULT, 'ExtremumType',
              ( ['out', 'retval'], POINTER(AgECrdnExtremumConstants), 'pRetVal' )),
    COMMETHOD([dispid(13201), helpstring('The extremum type (either minimum or maximum) for the time instant.'), 'propput'], HRESULT, 'ExtremumType',
              ( ['in'], AgECrdnExtremumConstants, 'pRetVal' )),
    COMMETHOD([dispid(13213), helpstring('The scalar calculation.'), 'propget'], HRESULT, 'Calculation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(13213), helpstring('The scalar calculation.'), 'propput'], HRESULT, 'Calculation',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD([dispid(13207), helpstring('A custom interval list or a single interval. By default it is set to overall availability of host object. This determines time limits within which global minimum or maximum is sought. The time limits will be used if UseCustomTimeLimits is set to true.'), 'propget'], HRESULT, 'CustomTimeLimits',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(13207), helpstring('A custom interval list or a single interval. By default it is set to overall availability of host object. This determines time limits within which global minimum or maximum is sought. The time limits will be used if UseCustomTimeLimits is set to true.'), 'propput'], HRESULT, 'CustomTimeLimits',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD([dispid(13208), helpstring('Specify whether to use specified custom interval list (see CustomTimeLimits).'), 'propget'], HRESULT, 'UseCustomTimeLimits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(13208), helpstring('Specify whether to use specified custom interval list (see CustomTimeLimits).'), 'propput'], HRESULT, 'UseCustomTimeLimits',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(13209), helpstring('Determines if computed time of extremum is saved/loaded, otherwise it is recomputed on load if necessary.'), 'propget'], HRESULT, 'SaveDataOption',
              ( ['out', 'retval'], POINTER(AgECrdnSaveDataOption), 'pRetVal' )),
    COMMETHOD([dispid(13209), helpstring('Determines if computed time of extremum is saved/loaded, otherwise it is recomputed on load if necessary.'), 'propput'], HRESULT, 'SaveDataOption',
              ( ['in'], AgECrdnSaveDataOption, 'pRetVal' )),
    COMMETHOD([dispid(13210), helpstring('A Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propget'], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD([dispid(13210), helpstring('A Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propput'], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD([dispid(13214), helpstring('A Convergence definition, which uses time tolerance to determine when time of extremum is found.'), 'propget'], HRESULT, 'Convergence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConverge)), 'ppRetVal' )),
    COMMETHOD([dispid(13214), helpstring('A Convergence definition, which uses time tolerance to determine when time of extremum is found.'), 'propput'], HRESULT, 'Convergence',
              ( ['in'], POINTER(IAgCrdnConverge), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventExtremum implementation
##class _IAgCrdnEventExtremum_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time instant.'
##        #return pRetVal
##
##    @property
##    def Today(self):
##        "Return time instant that corresponds to today's GMT midnight."
##        #return ppRetVal
##
##    @property
##    def Tomorrow(self):
##        "Return time instant that corresponds to tomorrow's GMT midnight."
##        #return ppRetVal
##
##    @property
##    def NoonToday(self):
##        "Return time instant that corresponds to today's GMT noon."
##        #return ppRetVal
##
##    @property
##    def NoonTomorrow(self):
##        "Return time instant that corresponds to tomorrow's GMT noon."
##        #return ppRetVal
##
##    def FindOccurrence(self):
##        'Return computed time instance if it occurs.'
##        #return ppRetVal
##
##    def OccursBefore(self, Epoch):
##        'Return true if computed time instance occurs before or at specified time, return false otherwise.'
##        #return pRetVal
##
##    def _get(self):
##        'The extremum type (either minimum or maximum) for the time instant.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The extremum type (either minimum or maximum) for the time instant.'
##    ExtremumType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The scalar calculation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The scalar calculation.'
##    Calculation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A custom interval list or a single interval. By default it is set to overall availability of host object. This determines time limits within which global minimum or maximum is sought. The time limits will be used if UseCustomTimeLimits is set to true.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A custom interval list or a single interval. By default it is set to overall availability of host object. This determines time limits within which global minimum or maximum is sought. The time limits will be used if UseCustomTimeLimits is set to true.'
##    CustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use specified custom interval list (see CustomTimeLimits).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use specified custom interval list (see CustomTimeLimits).'
##    UseCustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Determines if computed time of extremum is saved/loaded, otherwise it is recomputed on load if necessary.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Determines if computed time of extremum is saved/loaded, otherwise it is recomputed on load if necessary.'
##    SaveDataOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##    Convergence = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnEventIntervalCollectionGroup(CoClass):
    'Access or create VGT event interval collections associated with an object.'
    _reg_clsid_ = GUID('{8A893B40-4600-4530-84E2-E7733DDE1679}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnEventIntervalCollectionGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Access or create VGT event interval collections associated with an object.'
    _iid_ = GUID('{B6EFEC55-4AF0-4EB8-85DE-2DE3EF0E8026}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
AgCrdnEventIntervalCollectionGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnEventIntervalCollectionGroup]

class _IAgCrdnPointCommonTasks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointCommonTasks'
    _iid_ = GUID('{BCB8B69C-46B3-4ABD-BDB2-02A291925F0E}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPointSamplingResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains tabulated positions and velocities of a point created by Sample method.'
    _iid_ = GUID('{66B7EFAF-92BD-473A-9F3F-94AF085536A6}')
    _idlflags_ = ['oleautomation']
_IAgCrdnPointCommonTasks._methods_ = [
    COMMETHOD([dispid(12001), helpstring('Creates a non-persistent point fixed in a specified reference system.')], HRESULT, 'CreateFixedInSystemCartographic',
              ( ['in'], POINTER(IAgCrdnSystem), 'ReferenceSystem' ),
              ( ['in'], VARIANT, 'Latitude' ),
              ( ['in'], VARIANT, 'Longitude' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointFixedInSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(12002), helpstring('Creates a non-persistent point fixed in a specified reference system.')], HRESULT, 'CreateFixedInSystemCartesian',
              ( ['in'], POINTER(IAgCrdnSystem), 'ReferenceSystem' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointFixedInSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(12003), helpstring('Computes and returns tabulated positions and velocities of a point with respect to reference system using specified sampling parameters.')], HRESULT, 'Sample',
              ( ['in'], POINTER(IAgCrdnPoint), 'Point' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'ReferenceSystem' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Intervals' ),
              ( ['in'], c_double, 'MinStep' ),
              ( ['in'], c_double, 'MaxStep' ),
              ( ['in'], VARIANT, 'TargetRate' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointSamplingResult)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnPointCommonTasks implementation
##class _IAgCrdnPointCommonTasks_Impl(object):
##    def CreateFixedInSystemCartographic(self, ReferenceSystem, Latitude, Longitude, Altitude):
##        'Creates a non-persistent point fixed in a specified reference system.'
##        #return ppRetVal
##
##    def CreateFixedInSystemCartesian(self, ReferenceSystem, X, Y, Z):
##        'Creates a non-persistent point fixed in a specified reference system.'
##        #return ppRetVal
##
##    def Sample(self, Point, ReferenceSystem, Intervals, MinStep, MaxStep, TargetRate):
##        'Computes and returns tabulated positions and velocities of a point with respect to reference system using specified sampling parameters.'
##        #return ppRetVal
##

class IAgCrdnConditionSetEvaluateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents the results returned by ConditionSet.Evaluate.'
    _iid_ = GUID('{6BA91A0B-EE1A-45EB-AE9F-EE845A133B4F}')
    _idlflags_ = ['oleautomation']
IAgCrdnConditionSetEvaluateResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Computed values.')], HRESULT, 'Values',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnConditionSetEvaluateResult implementation
##class IAgCrdnConditionSetEvaluateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Values(self):
##        'Computed values.'
##        #return ppRetVal
##

class AgCrdnPointGrazing(CoClass):
    'The grazing point is the point of closest approach to the surface of the selected central body along a defined direction.'
    _reg_clsid_ = GUID('{0ABD932C-106B-4651-A54D-2CDDA2409496}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPointGrazing(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointGrazing'
    _iid_ = GUID('{69755D0F-9C74-49CA-9DC4-776150B77CCC}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPointGrazing(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The grazing point is the point of closest approach to the surface of the selected central body along a defined direction.'
    _iid_ = GUID('{278A5B79-66B3-4F52-AF6B-8EAC49BA3C15}')
    _idlflags_ = ['oleautomation']
AgCrdnPointGrazing._com_interfaces_ = [_IAgCrdnPointGrazing, IAgCrdnPointGrazing, IAgCrdnPoint, IAgCrdnTimeProperties, IAgCrdn]

class IAgCrdnVectorApoapsis(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Vector from the center of the specified central body to the farthest point of an elliptical orbit created from the motion of the specified point.'
    _iid_ = GUID('{BC6612F1-EE40-478A-844A-0A78CFABAB43}')
    _idlflags_ = ['oleautomation']
IAgCrdnVectorApoapsis._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a reference point.')], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a central body.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify the mean element theory type for approximating motion.')], HRESULT, 'MeanElementType',
              ( ['out', 'retval'], POINTER(AgECrdnMeanElementTheory), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify the mean element theory type for approximating motion.')], HRESULT, 'MeanElementType',
              ( ['in'], AgECrdnMeanElementTheory, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorApoapsis implementation
##class IAgCrdnVectorApoapsis_Impl(object):
##    @property
##    def ReferencePoint(self):
##        'Specify a reference point.'
##        #return ppRetVal
##
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify the mean element theory type for approximating motion.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify the mean element theory type for approximating motion.'
##    MeanElementType = property(_get, _set, doc = _set.__doc__)
##

IAgCrdn._methods_ = [
    COMMETHOD(['propget', helpstring('Returns the component kind.')], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Allows the user to access or change the component category (Folder).')], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Allows the user to access or change the component category (Folder).')], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the component name.')], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the component description.')], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).')], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns whether the VGT component can be duplicated.')], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.')], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the component type information.')], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).')], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns whether the component is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized.")], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns whether the component is modifiable.')], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a collection of embedded components.')], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for IAgCrdn implementation
##class IAgCrdn_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnGridValuesMethod(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnGridValuesMethod'
    _iid_ = GUID('{C2EEFBA1-8348-4CD6-8801-5FDF5D743B28}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnGridValuesMethod._methods_ = [
    COMMETHOD([dispid(33401), helpstring('Grid values method type.'), 'propget'], HRESULT, 'MethodType',
              ( ['out', 'retval'], POINTER(AgECrdnVolumetricGridValuesMethodType), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnGridValuesMethod implementation
##class _IAgCrdnGridValuesMethod_Impl(object):
##    @property
##    def MethodType(self):
##        'Grid values method type.'
##        #return pRetVal
##

class IAgCrdnSamplingRelativeTolerance(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Relative tolerance definition includes parameters that determine how scalar data should be sampled based on limits on difference between actual changes between samples and changes predicted by dead reckoning.'
    _iid_ = GUID('{ED00C8F4-C58E-4C91-983E-57B84555DA4F}')
    _idlflags_ = ['oleautomation']
IAgCrdnSamplingRelativeTolerance._methods_ = [
    COMMETHOD(['propget', helpstring('Get the minimum allowed time step.')], HRESULT, 'MinimumTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the minimum allowed time step.')], HRESULT, 'MinimumTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the maximum allowed time step.')], HRESULT, 'MaximumTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the maximum allowed time step.')], HRESULT, 'MaximumTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the step taken at boundaries of discontinuity or availability.')], HRESULT, 'StepAtBoundaries',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the step taken at boundaries of discontinuity or availability.')], HRESULT, 'StepAtBoundaries',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the relative tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step relative to the sampled values')], HRESULT, 'RelativeTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the relative tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step relative to the sampled values')], HRESULT, 'RelativeTolerance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the absolute tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step')], HRESULT, 'AbsoluteTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the absolute tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step')], HRESULT, 'AbsoluteTolerance',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnSamplingRelativeTolerance implementation
##class IAgCrdnSamplingRelativeTolerance_Impl(object):
##    def _get(self):
##        'Get the minimum allowed time step.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the minimum allowed time step.'
##    MinimumTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the maximum allowed time step.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the maximum allowed time step.'
##    MaximumTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the step taken at boundaries of discontinuity or availability.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the step taken at boundaries of discontinuity or availability.'
##    StepAtBoundaries = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the relative tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step relative to the sampled values'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the relative tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step relative to the sampled values'
##    RelativeTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the absolute tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the absolute tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step'
##    AbsoluteTolerance = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnVolumeGridCylindrical(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeGridCylindrical'
    _iid_ = GUID('{6CB2B2C8-9597-421F-B14E-4A34846A0EF9}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnGridCoordinateDefinition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Defines a set of coordinate values.'
    _iid_ = GUID('{BA874A99-2A7A-43D8-9A2B-262D345997B4}')
    _idlflags_ = ['oleautomation']
_IAgCrdnVolumeGridCylindrical._methods_ = [
    COMMETHOD([dispid(31801), helpstring('Get the reference system in which cylindrical parameters are computed.'), 'propget'], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(31801), helpstring('Get the reference system in which cylindrical parameters are computed.'), 'propput'], HRESULT, 'ReferenceSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(31802), helpstring('Returns theta Coordinates parameters for the Theta system.'), 'propget'], HRESULT, 'ThetaCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD([dispid(31803), helpstring('Returns radius Coordinates parameters for the Radius system.'), 'propget'], HRESULT, 'RadiusCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD([dispid(31804), helpstring('Returns height Coordinates parameters for the Height system.'), 'propget'], HRESULT, 'HeightCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVolumeGridCylindrical implementation
##class _IAgCrdnVolumeGridCylindrical_Impl(object):
##    def _get(self):
##        'Get the reference system in which cylindrical parameters are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the reference system in which cylindrical parameters are computed.'
##    ReferenceSystem = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ThetaCoordinates(self):
##        'Returns theta Coordinates parameters for the Theta system.'
##        #return ppRetVal
##
##    @property
##    def RadiusCoordinates(self):
##        'Returns radius Coordinates parameters for the Radius system.'
##        #return ppRetVal
##
##    @property
##    def HeightCoordinates(self):
##        'Returns height Coordinates parameters for the Height system.'
##        #return ppRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnParameterSetGroup(CoClass):
    'Access or create VGT parameter sets associated with an object or a central body.'
    _reg_clsid_ = GUID('{5B93788E-6CF7-4169-82A7-1CF32FDA371D}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnParameterSetGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Access or create VGT parameter sets associated with an object or a central body.'
    _iid_ = GUID('{0C3E1AEA-08CF-4550-AAFC-5ABB6B7A6ECB}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
AgCrdnParameterSetGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnParameterSetGroup]

class AgCrdnPointGlint(CoClass):
    'Point on central body surface that reflects from source to observer.'
    _reg_clsid_ = GUID('{2017DE19-4862-4D4F-A170-74E32A318FF4}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPointGlint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointGlint'
    _iid_ = GUID('{30F950B7-6302-4537-B66A-4F95C0820110}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPointGlint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Point on central body surface that reflects from source to observer.'
    _iid_ = GUID('{35499FCE-D8D0-40E6-884E-C9E527E5D84D}')
    _idlflags_ = ['oleautomation']
AgCrdnPointGlint._com_interfaces_ = [_IAgCrdnPointGlint, IAgCrdnPointGlint, IAgCrdnPoint, IAgCrdnTimeProperties, IAgCrdn]

class _IAgCrdnWellKnownSystems(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnWellKnownSystems'
    _iid_ = GUID('{26DE0981-60CC-456E-825A-88A01C82CEF2}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnWellKnownEarthSystems(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Well-known Earth's coordinate systems."
    _iid_ = GUID('{59DEACDD-6DD1-4511-9188-ACCE55A35C59}')
    _idlflags_ = ['oleautomation']
class IAgCrdnWellKnownSunSystems(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "The Sun's well-known coordinate reference systems."
    _iid_ = GUID('{8291275D-E3CA-4E66-97D7-A8E00AA36FA3}')
    _idlflags_ = ['oleautomation']
_IAgCrdnWellKnownSystems._methods_ = [
    COMMETHOD([dispid(10101), helpstring("Earth's coordinate reference systems."), 'propget'], HRESULT, 'Earth',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnWellKnownEarthSystems)), 'ppRetVal' )),
    COMMETHOD([dispid(10102), helpstring("The Sun's coordinate reference systems."), 'propget'], HRESULT, 'Sun',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnWellKnownSunSystems)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnWellKnownSystems implementation
##class _IAgCrdnWellKnownSystems_Impl(object):
##    @property
##    def Earth(self):
##        "Earth's coordinate reference systems."
##        #return ppRetVal
##
##    @property
##    def Sun(self):
##        "The Sun's coordinate reference systems."
##        #return ppRetVal
##

class _IAgCrdnAxesTrajectory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesTrajectory'
    _iid_ = GUID('{A9C56B8C-CF59-42BB-B3A1-A51890B9CC97}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnAxesFindInAxesWithRateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnAxes.FindInAxesWithRate method.'
    _iid_ = GUID('{45E20C8F-CC19-4C69-BD7A-DEA601668E34}')
    _idlflags_ = ['oleautomation']
class IAgCrdnAxesFindInAxesResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnAxes.FindInAxes method.'
    _iid_ = GUID('{D8B83F51-F4D7-438F-8D1F-5BAC7FCC190D}')
    _idlflags_ = ['oleautomation']
class IAgCrdnAxesLabels(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Allows configuring the VGT axes labels.'
    _iid_ = GUID('{B90C7093-7F80-4D23-8B90-67D852802FEE}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgECrdnTrajectoryAxesType'
eCrdnTrajectoryAxesICR = 0
eCrdnTrajectoryAxesVNC = 1
eCrdnTrajectoryAxesRIC = 2
eCrdnTrajectoryAxesLVLH = 3
eCrdnTrajectoryAxesVVLH = 4
eCrdnTrajectoryAxesBBR = 5
AgECrdnTrajectoryAxesType = c_int # enum
class IAgCrdnAxesTransformResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnAxes.TransformFrom method.'
    _iid_ = GUID('{F75866C1-39AF-44CE-BB8D-5B2DFEDDE5B7}')
    _idlflags_ = ['oleautomation']
class IAgCrdnAxesTransformWithRateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnAxes.TransformFromWithRate method.'
    _iid_ = GUID('{CE2B2889-37F6-4D0D-BE05-29D2C4F28A70}')
    _idlflags_ = ['oleautomation']
_IAgCrdnAxesTrajectory._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1701), helpstring('Returns a type of the axes object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAxesType), 'pRetVal' )),
    COMMETHOD([dispid(1706), helpstring('Find an angular velocity and orientation in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1707), helpstring('Find an orientation in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1708), helpstring('Returns an object that allows modifying the axes labels.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(3301), helpstring('Specify a trajectory point.'), 'propget'], HRESULT, 'TrajectoryPoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(3302), helpstring('Specify a reference system.'), 'propget'], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(3303), helpstring("Specify a type of the trajectory's coordinate frame."), 'propget'], HRESULT, 'TrajectoryAxesType',
              ( ['out', 'retval'], POINTER(AgECrdnTrajectoryAxesType), 'pRetVal' )),
    COMMETHOD([dispid(3303), helpstring("Specify a type of the trajectory's coordinate frame."), 'propput'], HRESULT, 'TrajectoryAxesType',
              ( ['in'], AgECrdnTrajectoryAxesType, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1709), helpstring('Returns the X axis of the component.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1710), helpstring('Returns the Y axis of the component.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1711), helpstring('Returns the Z axis of the component.'), 'propget'], HRESULT, 'Z',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1712), helpstring('Transforms the input vector from this axes into the output axes.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1713), helpstring("Transforms the input vector and vector's rate from this axes into the output axes.")], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'RateInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAxesTrajectory implementation
##class _IAgCrdnAxesTrajectory_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the axes object.'
##        #return pRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Find an angular velocity and orientation in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Find an orientation in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        'Returns an object that allows modifying the axes labels.'
##        #return ppRetVal
##
##    @property
##    def TrajectoryPoint(self):
##        'Specify a trajectory point.'
##        #return ppRetVal
##
##    @property
##    def ReferenceSystem(self):
##        'Specify a reference system.'
##        #return ppRetVal
##
##    def _get(self):
##        "Specify a type of the trajectory's coordinate frame."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Specify a type of the trajectory's coordinate frame."
##    TrajectoryAxesType = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    @property
##    def X(self):
##        'Returns the X axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Y(self):
##        'Returns the Y axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Z(self):
##        'Returns the Z axis of the component.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputAxes, VectorInMyAxes):
##        'Transforms the input vector from this axes into the output axes.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputAxes, VectorInMyAxes, RateInMyAxes):
##        "Transforms the input vector and vector's rate from this axes into the output axes."
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnPointCovarianceGrazing(CoClass):
    'The point of closest approach to the surface of the specified position covariance ellipsoid surface along a defined direction. Position covariance must be available for a vehicle object to be considered a possible target for this option.'
    _reg_clsid_ = GUID('{5D9DBBFC-D662-4E8F-9EAC-BB20EB2C2139}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPointCovarianceGrazing(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointCovarianceGrazing'
    _iid_ = GUID('{F9996E01-88D0-460A-9A5E-47D158FA1A88}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPointCovarianceGrazing(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The point of closest approach to the surface of the specified position covariance ellipsoid surface along a defined direction. Position covariance must be available for a vehicle object to be considered a possible target for this option.'
    _iid_ = GUID('{E1F764F2-BA4D-4C7B-A529-60C89C8FDE65}')
    _idlflags_ = ['oleautomation']
AgCrdnPointCovarianceGrazing._com_interfaces_ = [_IAgCrdnPointCovarianceGrazing, IAgCrdnPointCovarianceGrazing, IAgCrdnPoint, IAgCrdnTimeProperties, IAgCrdn]

class _IAgCrdnConditionSetEvaluateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnConditionSetEvaluateResult'
    _iid_ = GUID('{7C1C338F-987F-4E2D-9967-1C80DD58E4FC}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnConditionSetEvaluateResult._methods_ = [
    COMMETHOD([dispid(30701), helpstring('Indicates whether the result object is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(30702), helpstring('Computed values.'), 'propget'], HRESULT, 'Values',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnConditionSetEvaluateResult implementation
##class _IAgCrdnConditionSetEvaluateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Values(self):
##        'Computed values.'
##        #return ppRetVal
##

class AgCrdnConditionGroup(CoClass):
    'Access or create VGT conditions associated with an object or a central body.'
    _reg_clsid_ = GUID('{EB22D291-1C06-46B5-9B26-F93A7985C0C7}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnConditionGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Access or create VGT conditions associated with an object or a central body.'
    _iid_ = GUID('{88590338-434E-440D-BEE8-E87DC861A08C}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
AgCrdnConditionGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnConditionGroup]

class _IAgCrdnEventIntervalSmartInterval(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalSmartInterval'
    _iid_ = GUID('{9AD522CD-2270-4DA3-A523-3B2A5C7AF214}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnEventIntervalType'
eCrdnEventIntervalTypeUnknown = -1
eCrdnEventIntervalTypeFixed = 0
eCrdnEventIntervalTypeFixedDuration = 1
eCrdnEventIntervalTypeBetweenTimeInstants = 2
eCrdnEventIntervalTypeFromIntervalList = 3
eCrdnEventIntervalTypeScaled = 4
eCrdnEventIntervalTypeSignaled = 5
eCrdnEventIntervalTypeTimeOffset = 6
eCrdnEventIntervalTypeSmartInterval = 7
AgECrdnEventIntervalType = c_int # enum
class IAgCrdnEventInterval(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A single time interval.'
    _iid_ = GUID('{417650ED-02D8-4AAB-945C-E3A62DFA5E53}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgECrdnSmartIntervalState'
eCrdnSmartIntervalStateExplicit = 0
eCrdnSmartIntervalStateImplicit = 1
eCrdnSmartIntervalStateStartStop = 2
eCrdnSmartIntervalStateStartDuration = 4
eCrdnSmartIntervalStateExplicitDuration = 3
AgECrdnSmartIntervalState = c_int # enum
class IAgCrdnEventSmartEpoch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A smart epoch.'
    _iid_ = GUID('{4359FF91-520D-4484-AC92-1B23D38698B7}')
    _idlflags_ = ['oleautomation']
_IAgCrdnEventIntervalSmartInterval._methods_ = [
    COMMETHOD([dispid(13411), helpstring('Return the type of interval.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalType), 'pRetVal' )),
    COMMETHOD([dispid(13404), helpstring('The start description.'), 'propget'], HRESULT, 'LabelStartDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13405), helpstring('The stop description.'), 'propget'], HRESULT, 'LabelStopDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13406), helpstring('A label associated with the interval start.'), 'propget'], HRESULT, 'LabelStart',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13407), helpstring('A label associated with the interval stop.'), 'propget'], HRESULT, 'LabelStop',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13408), helpstring('Return computed interval if it exists.')], HRESULT, 'FindInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13409), helpstring('Determine if specified time falls within computed interval if it exists.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(25401), helpstring('The reference interval used to compute start/stop times of this interval if the state of the interval is set to implicit.'), 'propget'], HRESULT, 'ReferenceInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(25409), helpstring('The duration of the interval'), 'propget'], HRESULT, 'DurationAsString',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(25409), helpstring('The duration of the interval'), 'propput'], HRESULT, 'DurationAsString',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(25407), helpstring('A state of the smart interval.'), 'propget'], HRESULT, 'State',
              ( ['out', 'retval'], POINTER(AgECrdnSmartIntervalState), 'pRetVal' )),
    COMMETHOD([dispid(25407), helpstring('A state of the smart interval.'), 'propput'], HRESULT, 'State',
              ( ['in'], AgECrdnSmartIntervalState, 'pRetVal' )),
    COMMETHOD([dispid(25422), helpstring('Set the reference interval and changes the state to Implicit.')], HRESULT, 'SetImplicitInterval',
              ( ['in'], POINTER(IAgCrdnEventInterval), 'EventInterval' )),
    COMMETHOD([dispid(25418), helpstring("Finds a start time of the interval. An exception is thrown if the start time cannot be determined from the interval's current state.")], HRESULT, 'FindStartTime',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(25419), helpstring("Finds a stop time of the interval. An exception is thrown if the stop time cannot be determined from the interval's current state.")], HRESULT, 'FindStopTime',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(25410), helpstring('Returns a copy of the start epoch. Changes to the epoch will not affect the state of the interval.')], HRESULT, 'GetStartEpoch',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventSmartEpoch)), 'ppRetVal' )),
    COMMETHOD([dispid(25411), helpstring('Sets a start of the interval using specified epoch component.')], HRESULT, 'SetStartEpoch',
              ( ['in'], POINTER(IAgCrdnEventSmartEpoch), 'StartEpoch' )),
    COMMETHOD([dispid(25412), helpstring('Returns a copy of the stop epoch. Changes to the epoch will not affect the state of the interval.')], HRESULT, 'GetStopEpoch',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventSmartEpoch)), 'ppRetVal' )),
    COMMETHOD([dispid(25413), helpstring('Sets a stop of the interval using specified epoch component.')], HRESULT, 'SetStopEpoch',
              ( ['in'], POINTER(IAgCrdnEventSmartEpoch), 'StopEpoch' )),
    COMMETHOD([dispid(25414), helpstring("Set the interval's start and the stop times changes the interval's state to explicit. Exception is thrown if specified start time is greater than stop time.")], HRESULT, 'SetExplicitInterval',
              ( ['in'], VARIANT, 'Start' ),
              ( ['in'], VARIANT, 'Stop' )),
    COMMETHOD([dispid(25420), helpstring("Sets the interval's start and stop epochs as two smart epoch components. Exception is thrown if specified start time is greater than stop time.")], HRESULT, 'SetStartAndStopEpochs',
              ( ['in'], POINTER(IAgCrdnEventSmartEpoch), 'RefStartEpoch' ),
              ( ['in'], POINTER(IAgCrdnEventSmartEpoch), 'RefStopEpoch' )),
    COMMETHOD([dispid(25421), helpstring("Sets the interval's start and stop epochs as explicit times. Exception is thrown if specified start time is greater than stop time.")], HRESULT, 'SetStartAndStopTimes',
              ( ['in'], VARIANT, 'StartTime' ),
              ( ['in'], VARIANT, 'StopTime' )),
    COMMETHOD([dispid(25416), helpstring("Sets the interval's start epoch and the interval's duration.")], HRESULT, 'SetStartEpochAndDuration',
              ( ['in'], POINTER(IAgCrdnEventSmartEpoch), 'RefStartEpoch' ),
              ( ['in'], BSTR, 'DurationStr' )),
    COMMETHOD([dispid(25417), helpstring("Sets the interval's start time and the interval's duration.")], HRESULT, 'SetStartTimeAndDuration',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], BSTR, 'DurationStr' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalSmartInterval implementation
##class _IAgCrdnEventIntervalSmartInterval_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval.'
##        #return pRetVal
##
##    @property
##    def LabelStartDescription(self):
##        'The start description.'
##        #return pRetVal
##
##    @property
##    def LabelStopDescription(self):
##        'The stop description.'
##        #return pRetVal
##
##    @property
##    def LabelStart(self):
##        'A label associated with the interval start.'
##        #return pRetVal
##
##    @property
##    def LabelStop(self):
##        'A label associated with the interval stop.'
##        #return pRetVal
##
##    def FindInterval(self):
##        'Return computed interval if it exists.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval if it exists.'
##        #return pRetVal
##
##    @property
##    def ReferenceInterval(self):
##        'The reference interval used to compute start/stop times of this interval if the state of the interval is set to implicit.'
##        #return ppRetVal
##
##    def _get(self):
##        'The duration of the interval'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The duration of the interval'
##    DurationAsString = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A state of the smart interval.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A state of the smart interval.'
##    State = property(_get, _set, doc = _set.__doc__)
##
##    def SetImplicitInterval(self, EventInterval):
##        'Set the reference interval and changes the state to Implicit.'
##        #return 
##
##    def FindStartTime(self):
##        "Finds a start time of the interval. An exception is thrown if the start time cannot be determined from the interval's current state."
##        #return pRetVal
##
##    def FindStopTime(self):
##        "Finds a stop time of the interval. An exception is thrown if the stop time cannot be determined from the interval's current state."
##        #return pRetVal
##
##    def GetStartEpoch(self):
##        'Returns a copy of the start epoch. Changes to the epoch will not affect the state of the interval.'
##        #return ppRetVal
##
##    def SetStartEpoch(self, StartEpoch):
##        'Sets a start of the interval using specified epoch component.'
##        #return 
##
##    def GetStopEpoch(self):
##        'Returns a copy of the stop epoch. Changes to the epoch will not affect the state of the interval.'
##        #return ppRetVal
##
##    def SetStopEpoch(self, StopEpoch):
##        'Sets a stop of the interval using specified epoch component.'
##        #return 
##
##    def SetExplicitInterval(self, Start, Stop):
##        "Set the interval's start and the stop times changes the interval's state to explicit. Exception is thrown if specified start time is greater than stop time."
##        #return 
##
##    def SetStartAndStopEpochs(self, RefStartEpoch, RefStopEpoch):
##        "Sets the interval's start and stop epochs as two smart epoch components. Exception is thrown if specified start time is greater than stop time."
##        #return 
##
##    def SetStartAndStopTimes(self, StartTime, StopTime):
##        "Sets the interval's start and stop epochs as explicit times. Exception is thrown if specified start time is greater than stop time."
##        #return 
##
##    def SetStartEpochAndDuration(self, RefStartEpoch, DurationStr):
##        "Sets the interval's start epoch and the interval's duration."
##        #return 
##
##    def SetStartTimeAndDuration(self, Epoch, DurationStr):
##        "Sets the interval's start time and the interval's duration."
##        #return 
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnVolumeFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The factory is used to create instances of volumes.'
    _iid_ = GUID('{4E0163A7-C611-4724-AFA0-E0CCA42AAC21}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgECrdnVolumeType'
eCrdnVolumeTypeUnknown = -1
eCrdnVolumeTypeCombined = 0
eCrdnVolumeTypeLighting = 1
eCrdnVolumeTypeOverTime = 2
eCrdnVolumeTypeFromGrid = 3
eCrdnVolumeTypeFromCalc = 4
eCrdnVolumeTypeFromTimeSatisfaction = 5
eCrdnVolumeTypeFromCondition = 6
eCrdnVolumeTypeInview = 7
AgECrdnVolumeType = c_int # enum
class IAgCrdnVolume(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A volume interface. The methods and properties of the interface provide Volume functions.'
    _iid_ = GUID('{E3BB7E4A-1E3A-429B-BCD3-40F2E469D28B}')
    _idlflags_ = ['oleautomation']
IAgCrdnVolumeFactory._methods_ = [
    COMMETHOD([helpstring('Creates and registers a volume using specified name and description.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnVolumeType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnVolumeType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Creates a volume type combined.')], HRESULT, 'CreateVolumeCombined',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a volume type lighting.')], HRESULT, 'CreateVolumeLighting',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a volume type over time.')], HRESULT, 'CreateVolumeOverTime',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a volume type from grid.')], HRESULT, 'CreateVolumeFromGrid',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a volume type from calc.')], HRESULT, 'CreateVolumeFromCalc',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a volume type from time satisfaction.')], HRESULT, 'CreateVolumeFromTimeSatisfaction',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a volume type condition.')], HRESULT, 'CreateVolumeFromCondition',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a volume type Inview.')], HRESULT, 'CreateVolumeInview',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeFactory implementation
##class IAgCrdnVolumeFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Creates and registers a volume using specified name and description.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##
##    def CreateVolumeCombined(self, Name, Description):
##        'Creates a volume type combined.'
##        #return ppRetVal
##
##    def CreateVolumeLighting(self, Name, Description):
##        'Creates a volume type lighting.'
##        #return ppRetVal
##
##    def CreateVolumeOverTime(self, Name, Description):
##        'Creates a volume type over time.'
##        #return ppRetVal
##
##    def CreateVolumeFromGrid(self, Name, Description):
##        'Creates a volume type from grid.'
##        #return ppRetVal
##
##    def CreateVolumeFromCalc(self, Name, Description):
##        'Creates a volume type from calc.'
##        #return ppRetVal
##
##    def CreateVolumeFromTimeSatisfaction(self, Name, Description):
##        'Creates a volume type from time satisfaction.'
##        #return ppRetVal
##
##    def CreateVolumeFromCondition(self, Name, Description):
##        'Creates a volume type condition.'
##        #return ppRetVal
##
##    def CreateVolumeInview(self, Name, Description):
##        'Creates a volume type Inview.'
##        #return ppRetVal
##

class AgCrdnPointPlaneIntersection(CoClass):
    'Point on a plane located along a given direction looking from a given origin.'
    _reg_clsid_ = GUID('{60E16B73-10BF-496F-93A2-0707C31E71D5}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPointPlaneIntersection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointPlaneIntersection'
    _iid_ = GUID('{135C564A-06F1-4058-B576-8734C4F877EF}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPointPlaneIntersection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Point on a plane located along a given direction looking from a given origin.'
    _iid_ = GUID('{C25BB12F-A1F6-4E77-9F25-A3AEDDDA9336}')
    _idlflags_ = ['oleautomation']
AgCrdnPointPlaneIntersection._com_interfaces_ = [_IAgCrdnPointPlaneIntersection, IAgCrdnPointPlaneIntersection, IAgCrdnPoint, IAgCrdnTimeProperties, IAgCrdn]

class _IAgCrdnEventIntervalListFiltered(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalListFiltered'
    _iid_ = GUID('{A0B46FAF-046D-4AE4-A38D-D9C3320DE936}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPruneFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The factory creates pruning filters.'
    _iid_ = GUID('{E8D4771A-048D-480B-8ED0-D75AF6A6CB94}')
    _idlflags_ = ['oleautomation']
class IAgCrdnPruneFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "A filter used with <see ref='EventIntervalListPruned' /> class to prune interval lists..."
    _iid_ = GUID('{E2E922AF-BBA6-455C-85E8-61A4871E28C2}')
    _idlflags_ = ['oleautomation']
_IAgCrdnEventIntervalListFiltered._methods_ = [
    COMMETHOD([dispid(13509), helpstring('Return the type of interval list.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalListType), 'pRetVal' )),
    COMMETHOD([dispid(13502), helpstring('Get the label descriptions associated with the interval list.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13503), helpstring('Get the labels associated with the interval list.'), 'propget'], HRESULT, 'Descriptions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13507), helpstring('Return computed interval list that can be empty.')], HRESULT, 'FindIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalListResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13508), helpstring('Determine if specified time falls within computed interval list.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(27901), helpstring('The original interval list.'), 'propget'], HRESULT, 'OriginalIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(27901), helpstring('The original interval list.'), 'propput'], HRESULT, 'OriginalIntervals',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD([dispid(27902), helpstring('Get the prune filter factory.'), 'propget'], HRESULT, 'FilterFactory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPruneFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(27903), helpstring('The pruning filter.'), 'propget'], HRESULT, 'Filter',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPruneFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(27903), helpstring('The pruning filter.'), 'propput'], HRESULT, 'Filter',
              ( ['in'], POINTER(IAgCrdnPruneFilter), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalListFiltered implementation
##class _IAgCrdnEventIntervalListFiltered_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval list.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the label descriptions associated with the interval list.'
##        #return ppRetVal
##
##    @property
##    def Descriptions(self):
##        'Get the labels associated with the interval list.'
##        #return ppRetVal
##
##    def FindIntervals(self):
##        'Return computed interval list that can be empty.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval list.'
##        #return pRetVal
##
##    def _get(self):
##        'The original interval list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original interval list.'
##    OriginalIntervals = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def FilterFactory(self):
##        'Get the prune filter factory.'
##        #return ppRetVal
##
##    def _get(self):
##        'The pruning filter.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The pruning filter.'
##    Filter = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnConditionSetGroup(CoClass):
    'Allows accessing and creating condition set components.'
    _reg_clsid_ = GUID('{2C02FC9F-CA3F-4C4E-BDFB-619175E6198E}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnConditionSetGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Allows accessing and creating condition set components.'
    _iid_ = GUID('{DC75E9B5-4CB3-4A98-AD6B-FBB6F4133A3F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
AgCrdnConditionSetGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnConditionSetGroup]

class AgCrdnPointOnSurface(CoClass):
    'The detic subpoint of the reference point as projected onto the central body.'
    _reg_clsid_ = GUID('{36AD72DA-9FD8-49F3-80A1-80B446930507}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPointOnSurface(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointOnSurface'
    _iid_ = GUID('{1274A4C8-AE18-409A-BCE4-B2DD307CB5F1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPointOnSurface(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The detic subpoint of the reference point as projected onto the central body.'
    _iid_ = GUID('{66FD09F9-17E7-4BF7-8509-A72B3022F71D}')
    _idlflags_ = ['oleautomation']
AgCrdnPointOnSurface._com_interfaces_ = [_IAgCrdnPointOnSurface, IAgCrdnPointOnSurface, IAgCrdnPoint, IAgCrdnTimeProperties, IAgCrdn]

class AgCrdnConditionSetEvaluateResult(CoClass):
    'Represents the results returned by ConditionSet.Evaluate.'
    _reg_clsid_ = GUID('{AD65031A-0CFB-4296-92D1-16D48AB2B1A5}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnConditionSetEvaluateResult._com_interfaces_ = [_IAgCrdnConditionSetEvaluateResult, IAgCrdnConditionSetEvaluateResult]

class IAgCrdnVectorFixedAtEpoch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A vector based on another vector fixed at a specified epoch.'
    _iid_ = GUID('{BBC197BF-D2DC-4271-B2B2-FBB3BD977E4D}')
    _idlflags_ = ['oleautomation']
class IAgCrdnAxesRefTo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents a reference to a VGT axes.'
    _iid_ = GUID('{05C81762-066F-4D5A-9988-727506DF1229}')
    _idlflags_ = ['oleautomation']
IAgCrdnVectorFixedAtEpoch._methods_ = [
    COMMETHOD(['propget', helpstring('Specify an epoch.')], HRESULT, 'Epoch',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify an epoch.')], HRESULT, 'Epoch',
              ( ['in'], VARIANT, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a source vector.')], HRESULT, 'SourceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference axes.')], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVectorFixedAtEpoch implementation
##class IAgCrdnVectorFixedAtEpoch_Impl(object):
##    def _get(self):
##        'Specify an epoch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an epoch.'
##    Epoch = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SourceVector(self):
##        'Specify a source vector.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##

class _IAgCrdnSystemFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnSystemFactory'
    _iid_ = GUID('{31A664B9-A0C1-4A27-A014-5F94CBB91D3F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnSystemType'
eCrdnSystemTypeUnknown = -1
eCrdnSystemTypeAssembled = 0
eCrdnSystemTypeOnSurface = 1
eCrdnSystemTypeTemplate = 2
AgECrdnSystemType = c_int # enum
_IAgCrdnSystemFactory._methods_ = [
    COMMETHOD([dispid(8501), helpstring('Creates a VGT system using the specified name, description and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'SystemName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnSystemType, 'SystemType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(8502), helpstring('Returns true if the specified system type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnSystemType, 'Type' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnSystemFactory implementation
##class _IAgCrdnSystemFactory_Impl(object):
##    def Create(self, SystemName, Description, SystemType):
##        'Creates a VGT system using the specified name, description and type.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, Type):
##        'Returns true if the specified system type is supported.'
##        #return pRetVal
##

class AgCrdnPointModelAttach(CoClass):
    "A point placed at the specified attachment point of the object's 3D model. The point follows the model as well as any articulations that affect the specified attachment point."
    _reg_clsid_ = GUID('{D83D263F-100A-466E-8544-A7E5E991FC79}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPointModelAttach(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointModelAttach'
    _iid_ = GUID('{FC399D17-D4BE-4420-8614-08033B0778E6}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPointModelAttach(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "A point placed at the specified attachment point of the object's 3D model. The point follows the model as well as any articulations that affect the specified attachment point."
    _iid_ = GUID('{BE73AA6D-87D7-4F6F-BD16-89A930D8DC52}')
    _idlflags_ = ['oleautomation']
AgCrdnPointModelAttach._com_interfaces_ = [_IAgCrdnPointModelAttach, IAgCrdnPointModelAttach, IAgCrdnPoint, IAgCrdnTimeProperties, IAgCrdn]

class _IAgCrdnEventIntervalCollectionSignaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalCollectionSignaled'
    _iid_ = GUID('{8B2E52A3-0417-4EA8-94ED-847986A0032A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventIntervalCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A collection of related interval lists.'
    _iid_ = GUID('{03F42D68-83F1-485E-8274-C28F25A70FE3}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgECrdnSignalSense'
eCrdnSignalSenseReceive = 1
eCrdnSignalSenseTransmit = 2
AgECrdnSignalSense = c_int # enum
class IAgCrdnSignalDelay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Signal delay definition determines how long it takes for a signal to propagate from one location to another.'
    _iid_ = GUID('{31F8EF59-5259-428E-B82F-05EC915D519A}')
    _idlflags_ = ['oleautomation']
_IAgCrdnEventIntervalCollectionSignaled._methods_ = [
    COMMETHOD([dispid(22204), helpstring('Return the type of collection of interval lists.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalCollectionType), 'pRetVal' )),
    COMMETHOD([dispid(22201), helpstring('Get the labels associated with the interval lists in the collection.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(22202), helpstring('Return computed collection of interval lists.')], HRESULT, 'FindIntervalCollection',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalsVectorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(22203), helpstring('Determine if specified time falls within any of the computed interval lists in the collection.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollectionOccurredResult)), 'ppRetVal' )),
    COMMETHOD([dispid(20401), helpstring('The original interval list collection.'), 'propget'], HRESULT, 'OriginalCollection',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(20401), helpstring('The original interval list collection.'), 'propput'], HRESULT, 'OriginalCollection',
              ( ['in'], POINTER(IAgCrdnEventIntervalCollection), 'ppRetVal' )),
    COMMETHOD([dispid(20407), helpstring('The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'), 'propget'], HRESULT, 'SignalSense',
              ( ['out', 'retval'], POINTER(AgECrdnSignalSense), 'pRetVal' )),
    COMMETHOD([dispid(20407), helpstring('The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'), 'propput'], HRESULT, 'SignalSense',
              ( ['in'], AgECrdnSignalSense, 'pRetVal' )),
    COMMETHOD([dispid(20408), helpstring('The base clock location, which is a point from VGT.'), 'propget'], HRESULT, 'BaseClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(20408), helpstring('The base clock location, which is a point from VGT.'), 'propput'], HRESULT, 'BaseClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(20409), helpstring('The target clock location, which is a point from VGT.'), 'propget'], HRESULT, 'TargetClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(20409), helpstring('The target clock location, which is a point from VGT.'), 'propput'], HRESULT, 'TargetClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(20410), helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'), 'propget'], HRESULT, 'SignalDelay',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSignalDelay)), 'ppRetVal' )),
    COMMETHOD([dispid(20410), helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'), 'propput'], HRESULT, 'SignalDelay',
              ( ['in'], POINTER(IAgCrdnSignalDelay), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalCollectionSignaled implementation
##class _IAgCrdnEventIntervalCollectionSignaled_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of collection of interval lists.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the labels associated with the interval lists in the collection.'
##        #return ppRetVal
##
##    def FindIntervalCollection(self):
##        'Return computed collection of interval lists.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within any of the computed interval lists in the collection.'
##        #return ppRetVal
##
##    def _get(self):
##        'The original interval list collection.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original interval list collection.'
##    OriginalCollection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'
##    SignalSense = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The base clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The base clock location, which is a point from VGT.'
##    BaseClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The target clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The target clock location, which is a point from VGT.'
##    TargetClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##    SignalDelay = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnVolumeGridSpherical(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeGridSpherical'
    _iid_ = GUID('{BD75470F-6215-4CA0-8298-5405CCED6666}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnVolumeGridSpherical._methods_ = [
    COMMETHOD([dispid(31901), helpstring('Get the reference system in which spherical parameters are computed.'), 'propget'], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(31901), helpstring('Get the reference system in which spherical parameters are computed.'), 'propput'], HRESULT, 'ReferenceSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(31902), helpstring('Returns azimuth coordinates parameters for the spherical volume grid.'), 'propget'], HRESULT, 'AzimuthCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD([dispid(31903), helpstring('Returns elevation coordinates parameters for the spherical volume grid.'), 'propget'], HRESULT, 'ElevationCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD([dispid(31904), helpstring('Returns range coordinates parameters for the spherical volume grid.'), 'propget'], HRESULT, 'RangeCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVolumeGridSpherical implementation
##class _IAgCrdnVolumeGridSpherical_Impl(object):
##    def _get(self):
##        'Get the reference system in which spherical parameters are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the reference system in which spherical parameters are computed.'
##    ReferenceSystem = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def AzimuthCoordinates(self):
##        'Returns azimuth coordinates parameters for the spherical volume grid.'
##        #return ppRetVal
##
##    @property
##    def ElevationCoordinates(self):
##        'Returns elevation coordinates parameters for the spherical volume grid.'
##        #return ppRetVal
##
##    @property
##    def RangeCoordinates(self):
##        'Returns range coordinates parameters for the spherical volume grid.'
##        #return ppRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnVolumeFromGrid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'An over time volume interface.'
    _iid_ = GUID('{AC31CF77-28DE-458E-8D76-836B431A5D91}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgECrdnVolumeFromGridEdgeType'
eCrdnVolumeFromGridEdgeTypeMaskPoints = 16
eCrdnVolumeFromGridEdgeTypeMaskVoxels = 32
AgECrdnVolumeFromGridEdgeType = c_int # enum
class IAgCrdnVolumeGrid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A volume grid interface. The methods and properties of the interface provide Volumetric Grid functions.'
    _iid_ = GUID('{A896CA88-8EEC-4922-B677-5F653380CAD4}')
    _idlflags_ = ['oleautomation']
IAgCrdnVolumeFromGrid._methods_ = [
    COMMETHOD(['propget', helpstring('Sets/Returns the edge type.')], HRESULT, 'EdgeType',
              ( ['out', 'retval'], POINTER(AgECrdnVolumeFromGridEdgeType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Sets/Returns the edge type.')], HRESULT, 'EdgeType',
              ( ['in'], AgECrdnVolumeFromGridEdgeType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Sets/Returns the volume grid for bounding.')], HRESULT, 'VolumeGrid',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Sets/Returns the volume grid for bounding.')], HRESULT, 'VolumeGrid',
              ( ['in'], POINTER(IAgCrdnVolumeGrid), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeFromGrid implementation
##class IAgCrdnVolumeFromGrid_Impl(object):
##    def _get(self):
##        'Sets/Returns the edge type.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Sets/Returns the edge type.'
##    EdgeType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Sets/Returns the volume grid for bounding.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Sets/Returns the volume grid for bounding.'
##    VolumeGrid = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AgECrdnAngleType'
eCrdnAngleTypeUnknown = -1
eCrdnAngleTypeBetweenVectors = 0
eCrdnAngleTypeBetweenPlanes = 1
eCrdnAngleTypeDihedralAngle = 2
eCrdnAngleTypeRotation = 3
eCrdnAngleTypeToPlane = 4
eCrdnAngleTypeTemplate = 5
AgECrdnAngleType = c_int # enum
class IAgCrdnAngleFindAngleResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnAngle.FindAngle method.'
    _iid_ = GUID('{B1838A8B-E080-4DCA-B27F-170C3501EB87}')
    _idlflags_ = ['oleautomation']
class IAgCrdnAngleFindAngleWithRateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnAngle.FindAngleWithRate method.'
    _iid_ = GUID('{CE2E0E0D-F759-40AE-B27B-7E122926B4CE}')
    _idlflags_ = ['oleautomation']
class IAgCrdnAngleFindResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnAngle.FindCoordinates method.'
    _iid_ = GUID('{A9BAC738-5600-41A4-A781-5A3637D62ECC}')
    _idlflags_ = ['oleautomation']
class IAgCrdnAngleFindWithRateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnAngle.FindCoordinatesWithRate method.'
    _iid_ = GUID('{9E9617A5-FAF7-4E7E-8274-3589BC6A7638}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgECrdnDisplayAxisSelector'
eCrdnDisplayAxisX = 0
eCrdnDisplayAxisY = 1
eCrdnDisplayAxisZ = 2
AgECrdnDisplayAxisSelector = c_int # enum
_IAgCrdnAngleRotation._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(2001), helpstring('Returns a type of the angle object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAngleType), 'pRetVal' )),
    COMMETHOD([dispid(2002), helpstring('Finds an angle at the specified epoch.')], HRESULT, 'FindAngle',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindAngleResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2003), helpstring('Finds an angle and angle rate.')], HRESULT, 'FindAngleWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindAngleWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2004), helpstring('Finds the angle value and three vectors that define the angle in a specified input axes.')], HRESULT, 'FindCoordinates',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2005), helpstring('Finds the angle value, the angle rate and three vectors that define the angle in a specified input axes.')], HRESULT, 'FindCoordinatesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(3801), helpstring('Specify an axes to rotate from.'), 'propget'], HRESULT, 'FromAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(3802), helpstring('Specify an axes to rotate to.'), 'propget'], HRESULT, 'ToAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(3803), helpstring('Specify a rotation direction.'), 'propget'], HRESULT, 'ReferenceDirection',
              ( ['out', 'retval'], POINTER(AgECrdnDisplayAxisSelector), 'pRetVal' )),
    COMMETHOD([dispid(3803), helpstring('Specify a rotation direction.'), 'propput'], HRESULT, 'ReferenceDirection',
              ( ['in'], AgECrdnDisplayAxisSelector, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAngleRotation implementation
##class _IAgCrdnAngleRotation_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the angle object.'
##        #return pRetVal
##
##    def FindAngle(self, Epoch):
##        'Finds an angle at the specified epoch.'
##        #return ppRetVal
##
##    def FindAngleWithRate(self, Epoch):
##        'Finds an angle and angle rate.'
##        #return ppRetVal
##
##    def FindCoordinates(self, Epoch, Axes):
##        'Finds the angle value and three vectors that define the angle in a specified input axes.'
##        #return ppRetVal
##
##    def FindCoordinatesWithRate(self, Epoch, Axes):
##        'Finds the angle value, the angle rate and three vectors that define the angle in a specified input axes.'
##        #return ppRetVal
##
##    @property
##    def FromAxes(self):
##        'Specify an axes to rotate from.'
##        #return ppRetVal
##
##    @property
##    def ToAxes(self):
##        'Specify an axes to rotate to.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a rotation direction.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a rotation direction.'
##    ReferenceDirection = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnVectorModelAttach(CoClass):
    "Unit vector along the specified pointable element of the object's 3D model. The vector's direction follows the model as well as any articulations that affect the specified pointable element."
    _reg_clsid_ = GUID('{AFC19F3C-4B2C-4126-9C0B-4EBF512940EF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVectorModelAttach(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorModelAttach'
    _iid_ = GUID('{D089211F-4EE3-45B9-A03D-C538DEB43FB6}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorModelAttach(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Unit vector along the specified pointable element of the object's 3D model. The vector's direction follows the model as well as any articulations that affect the specified pointable element."
    _iid_ = GUID('{6B18BA87-6002-43DF-B47F-FC98483B017B}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorModelAttach._com_interfaces_ = [_IAgCrdnVectorModelAttach, IAgCrdnVectorModelAttach, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

class AgCrdnEventExtremum(CoClass):
    'Determines time of global minimum or maximum of specified scalar calculation. Determination is performed within interval list using Sampling and Convergence parameters.'
    _reg_clsid_ = GUID('{6D3AFAD7-0FDA-4241-95F7-B92FD269F8EB}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnEventExtremum(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Determines time of global minimum or maximum of specified scalar calculation. Determination is performed within interval list using Sampling and Convergence parameters.'
    _iid_ = GUID('{C009BA0D-3451-4220-B00D-A99F376B4937}')
    _idlflags_ = ['oleautomation']
AgCrdnEventExtremum._com_interfaces_ = [_IAgCrdnEventExtremum, IAgCrdnEventExtremum, IAgCrdnEvent, IAgCrdn]

class AgCrdnGridValuesFixedNumberOfSteps(CoClass):
    'Fixed step grid values.'
    _reg_clsid_ = GUID('{D05AE60E-6136-4EC1-A32C-96D9CB126EFA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnGridValuesFixedNumberOfSteps(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Fixed step grid values.'
    _iid_ = GUID('{252AF502-B1FA-447C-8A46-2C29CF8EA15E}')
    _idlflags_ = ['oleautomation']
class IAgCrdnGridValuesMethod(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A grid values method.'
    _iid_ = GUID('{66F283D8-BD27-4CF3-9750-759E8CE9A889}')
    _idlflags_ = ['oleautomation']
AgCrdnGridValuesFixedNumberOfSteps._com_interfaces_ = [_IAgCrdnGridValuesFixedNumberOfSteps, IAgCrdnGridValuesFixedNumberOfSteps, IAgCrdnGridValuesMethod]

class AgCrdnVectorProjection(CoClass):
    'A projection of a vector computed with respect to a reference plane.'
    _reg_clsid_ = GUID('{8E07374B-8D15-410B-9460-1810D0B06123}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVectorProjection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorProjection'
    _iid_ = GUID('{8D749A58-1D7D-4B63-816D-B5D6CCDBA402}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorProjection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A projection of a vector computed with respect to a reference plane.'
    _iid_ = GUID('{D7FEED45-C34D-4425-9F82-DD031D7A34E0}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorProjection._com_interfaces_ = [_IAgCrdnVectorProjection, IAgCrdnVectorProjection, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

class _IAgCrdnVolumeGridCartesian(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeGridCartesian'
    _iid_ = GUID('{9F90BC50-170C-4BBB-B584-9C5C0A06D9F3}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnVolumeGridCartesian._methods_ = [
    COMMETHOD([dispid(31301), helpstring('Get the reference system in which Cartesian parameters are computed.'), 'propget'], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(31301), helpstring('Get the reference system in which Cartesian parameters are computed.'), 'propput'], HRESULT, 'ReferenceSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(31302), helpstring('Returns X Coordinates parameters for the Cartesian system.'), 'propget'], HRESULT, 'XCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD([dispid(31303), helpstring('Returns Y Coordinates parameters for the Cartesian system.'), 'propget'], HRESULT, 'YCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD([dispid(31304), helpstring('Returns Z Coordinates parameters for the Cartesian system.'), 'propget'], HRESULT, 'ZCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVolumeGridCartesian implementation
##class _IAgCrdnVolumeGridCartesian_Impl(object):
##    def _get(self):
##        'Get the reference system in which Cartesian parameters are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the reference system in which Cartesian parameters are computed.'
##    ReferenceSystem = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def XCoordinates(self):
##        'Returns X Coordinates parameters for the Cartesian system.'
##        #return ppRetVal
##
##    @property
##    def YCoordinates(self):
##        'Returns Y Coordinates parameters for the Cartesian system.'
##        #return ppRetVal
##
##    @property
##    def ZCoordinates(self):
##        'Returns Z Coordinates parameters for the Cartesian system.'
##        #return ppRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnSatisfactionConditionFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The filter selects intervals if certain side condition is satisfied at least/most certain duration.'
    _iid_ = GUID('{6657FBC2-4D70-42CD-AA95-71019373549A}')
    _idlflags_ = ['oleautomation']
IAgCrdnSatisfactionConditionFilter._methods_ = [
    COMMETHOD(['propget', helpstring('This additional condition must be satisfied At Most or At Least specified duration within any interval for it to be considered in filtered list.')], HRESULT, 'Condition',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('This additional condition must be satisfied At Most or At Least specified duration within any interval for it to be considered in filtered list.')], HRESULT, 'Condition',
              ( ['in'], POINTER(IAgCrdnCondition), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Choose a duration type (at least/at most).')], HRESULT, 'DurationKind',
              ( ['out', 'retval'], POINTER(AgECrdnIntervalDurationKind), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Choose a duration type (at least/at most).')], HRESULT, 'DurationKind',
              ( ['in'], AgECrdnIntervalDurationKind, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A duration of time the condition must be satisfied.')], HRESULT, 'IntervalDuration',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('A duration of time the condition must be satisfied.')], HRESULT, 'IntervalDuration',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnSatisfactionConditionFilter implementation
##class IAgCrdnSatisfactionConditionFilter_Impl(object):
##    def _get(self):
##        'This additional condition must be satisfied At Most or At Least specified duration within any interval for it to be considered in filtered list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'This additional condition must be satisfied At Most or At Least specified duration within any interval for it to be considered in filtered list.'
##    Condition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Choose a duration type (at least/at most).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Choose a duration type (at least/at most).'
##    DurationKind = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A duration of time the condition must be satisfied.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A duration of time the condition must be satisfied.'
##    IntervalDuration = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnEventIntervalListCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Interval list containing intervals during which specified condition is satisfied. Determination is performed within interval list using Sampling and Convergence parameters.'
    _iid_ = GUID('{D6C3E35A-2CAC-4189-8654-8052B1ADC2E4}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventIntervalListCondition._methods_ = [
    COMMETHOD(['propget', helpstring('The condition that must be satisfied.')], HRESULT, 'Condition',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The condition that must be satisfied.')], HRESULT, 'Condition',
              ( ['in'], POINTER(IAgCrdnCondition), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The interval list or single interval within which intervals of satisfaction are sought. The specified value is used if UseCustomTimeLimits is true. The default is set to overall availability of host object.')], HRESULT, 'CustomTimeLimits',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The interval list or single interval within which intervals of satisfaction are sought. The specified value is used if UseCustomTimeLimits is true. The default is set to overall availability of host object.')], HRESULT, 'CustomTimeLimits',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether to use custom time limits.')], HRESULT, 'UseCustomTimeLimits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether to use custom time limits.')], HRESULT, 'UseCustomTimeLimits',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Determine if computed intervals of satisfaction are saved/loaded, or recomputed on load if necessary.')], HRESULT, 'SaveDataOption',
              ( ['out', 'retval'], POINTER(AgECrdnSaveDataOption), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Determine if computed intervals of satisfaction are saved/loaded, or recomputed on load if necessary.')], HRESULT, 'SaveDataOption',
              ( ['in'], AgECrdnSaveDataOption, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The Convergence definition, which uses time tolerance to determine when time of extremum is found.')], HRESULT, 'Convergence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConverge)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The Convergence definition, which uses time tolerance to determine when time of extremum is found.')], HRESULT, 'Convergence',
              ( ['in'], POINTER(IAgCrdnConverge), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalListCondition implementation
##class IAgCrdnEventIntervalListCondition_Impl(object):
##    def _get(self):
##        'The condition that must be satisfied.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The condition that must be satisfied.'
##    Condition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The interval list or single interval within which intervals of satisfaction are sought. The specified value is used if UseCustomTimeLimits is true. The default is set to overall availability of host object.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The interval list or single interval within which intervals of satisfaction are sought. The specified value is used if UseCustomTimeLimits is true. The default is set to overall availability of host object.'
##    CustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use custom time limits.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use custom time limits.'
##    UseCustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Determine if computed intervals of satisfaction are saved/loaded, or recomputed on load if necessary.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Determine if computed intervals of satisfaction are saved/loaded, or recomputed on load if necessary.'
##    SaveDataOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##    Convergence = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnEventFactory(CoClass):
    'The factory creates events.'
    _reg_clsid_ = GUID('{48F634F4-2B50-4669-8544-6FC5E1ADC3BC}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventFactory'
    _iid_ = GUID('{AB92BE81-0081-4631-8C76-898DA1B09D33}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The factory creates events.'
    _iid_ = GUID('{0FFF4188-5C52-487A-8D00-5B47476E81E8}')
    _idlflags_ = ['oleautomation']
AgCrdnEventFactory._com_interfaces_ = [_IAgCrdnEventFactory, IAgCrdnEventFactory]

class AgCrdnGridValuesFixedStep(CoClass):
    'Fixed step grid values.'
    _reg_clsid_ = GUID('{1E1AB1C2-18B5-4CEC-8098-4743B7EA0EFF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnGridValuesFixedStep(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Fixed step grid values.'
    _iid_ = GUID('{DAB20E4C-5930-472E-9727-A2B6187C3619}')
    _idlflags_ = ['oleautomation']
AgCrdnGridValuesFixedStep._com_interfaces_ = [_IAgCrdnGridValuesFixedStep, IAgCrdnGridValuesFixedStep, IAgCrdnGridValuesMethod]

class IAgCrdnEventTimeOffset(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Event at fixed offset from specified reference event.'
    _iid_ = GUID('{FB4CECE9-C0BC-4847-9AE6-B5E85536B6E9}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventTimeOffset._methods_ = [
    COMMETHOD(['propget', helpstring('This property is deprecated. Use TimeOffset2 instead. The time offset from the ReferenceTimeInstant.')], HRESULT, 'TimeOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('This property is deprecated. Use TimeOffset2 instead. The time offset from the ReferenceTimeInstant.')], HRESULT, 'TimeOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The reference time instant.')], HRESULT, 'ReferenceTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The reference time instant.')], HRESULT, 'ReferenceTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The time offset from the ReferenceTimeInstant. The value is in "TimeUnit" dimension.')], HRESULT, 'TimeOffset2',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The time offset from the ReferenceTimeInstant. The value is in "TimeUnit" dimension.')], HRESULT, 'TimeOffset2',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEventTimeOffset implementation
##class IAgCrdnEventTimeOffset_Impl(object):
##    def _get(self):
##        'This property is deprecated. Use TimeOffset2 instead. The time offset from the ReferenceTimeInstant.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'This property is deprecated. Use TimeOffset2 instead. The time offset from the ReferenceTimeInstant.'
##    TimeOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The reference time instant.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference time instant.'
##    ReferenceTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The time offset from the ReferenceTimeInstant. The value is in "TimeUnit" dimension.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The time offset from the ReferenceTimeInstant. The value is in "TimeUnit" dimension.'
##    TimeOffset2 = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnPointPlugin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A VGT point plugin.'
    _iid_ = GUID('{AE5062E5-6D60-4065-AEC0-850D37363040}')
    _idlflags_ = ['oleautomation']
IAgCrdnPointPlugin._methods_ = [
    COMMETHOD(['propget', helpstring('A programmatic ID associated with the component.')], HRESULT, 'ProgID',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Plugin's Display Name associated with the COM plugin.")], HRESULT, 'DisplayName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('An array of names of the properties that can be used to configure the plugin.')], HRESULT, 'AvailableProperties',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Reset the plugin.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring('The method is used to set the plugin properties. The method throws an exception if the specified property does not exist, invalid value was specified or the specified property is read-only.')], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([helpstring('The method reads a value of the specified plugin property. The method throws an exception if the property does not exist.')], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnPointPlugin implementation
##class IAgCrdnPointPlugin_Impl(object):
##    @property
##    def ProgID(self):
##        'A programmatic ID associated with the component.'
##        #return pRetVal
##
##    @property
##    def DisplayName(self):
##        "Plugin's Display Name associated with the COM plugin."
##        #return pRetVal
##
##    @property
##    def AvailableProperties(self):
##        'An array of names of the properties that can be used to configure the plugin.'
##        #return ppRetVal
##
##    def Reset(self):
##        'Reset the plugin.'
##        #return 
##
##    def SetProperty(self, Name, Value):
##        'The method is used to set the plugin properties. The method throws an exception if the specified property does not exist, invalid value was specified or the specified property is read-only.'
##        #return 
##
##    def GetProperty(self, Name):
##        'The method reads a value of the specified plugin property. The method throws an exception if the property does not exist.'
##        #return pRetVal
##

class AgCrdnVectorScaled(CoClass):
    'Scaled version of the input vector. Set IsNormalized to convert the input vector to a unit vector before scaling it.'
    _reg_clsid_ = GUID('{2084D272-DC49-4C9F-B233-353EB56A1471}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVectorScaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorScaled'
    _iid_ = GUID('{EA0B683F-4FF4-475B-A951-DEC753C9716F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorScaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Scaled version of the input vector. Set IsNormalized to convert the input vector to a unit vector before scaling it.'
    _iid_ = GUID('{6DA9245C-C8CA-4BD3-838A-DA3F0ACC0174}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorScaled._com_interfaces_ = [_IAgCrdnVectorScaled, IAgCrdnVectorScaled, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

class IAgCrdnPlaneFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A Factory object to create VGT planes.'
    _iid_ = GUID('{4D5F9A02-F1C2-453F-80F3-C4060A631B0E}')
    _idlflags_ = ['oleautomation']
IAgCrdnPlaneFactory._methods_ = [
    COMMETHOD([helpstring('Creates a VGT plane using the specified name, description and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'PlaneName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnPlaneType, 'PlaneType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlane)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns true if the type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnPlaneType, 'Type' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnPlaneFactory implementation
##class IAgCrdnPlaneFactory_Impl(object):
##    def Create(self, PlaneName, Description, PlaneType):
##        'Creates a VGT plane using the specified name, description and type.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, Type):
##        'Returns true if the type is supported.'
##        #return pRetVal
##


# values for enumeration 'AgECrdnSignalPathReferenceSystem'
eCrdnSignalPathReferenceSystemUseAccessDefault = -1
eCrdnSignalPathReferenceSystemCentralBodyInertial = 0
eCrdnSignalPathReferenceSystemSolarSystemBarycenter = 1
eCrdnSignalPathReferenceSystemCustom = 2
AgECrdnSignalPathReferenceSystem = c_int # enum
class AgCrdnEventInterval(CoClass):
    'A single time interval.'
    _reg_clsid_ = GUID('{C48F3469-B27A-4E77-A0D9-30265B50B548}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventInterval(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventInterval'
    _iid_ = GUID('{8310B06A-6F21-4D10-BDF5-0AFFC153E7B2}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnEventInterval._com_interfaces_ = [_IAgCrdnEventInterval, IAgCrdnEventInterval, IAgCrdn]

class AgCrdnGridValuesMethod(CoClass):
    'A grid values method.'
    _reg_clsid_ = GUID('{0E76E3BE-C05F-4D91-968A-15AD02B73783}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnGridValuesMethod._com_interfaces_ = [_IAgCrdnGridValuesMethod, IAgCrdnGridValuesMethod]

IAgCrdnVector._methods_ = [
    COMMETHOD(['propget', helpstring('Returns a type of the vector object.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVector implementation
##class IAgCrdnVector_Impl(object):
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##

_IAgCrdnVectorScaled._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(7001), helpstring('A vector being scaled.'), 'propget'], HRESULT, 'ReferenceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(7002), helpstring('A scaling multiple.'), 'propget'], HRESULT, 'Scale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(7002), helpstring('A scaling multiple.'), 'propput'], HRESULT, 'Scale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(7003), helpstring('Controls whether to convert the reference vector to a unit vector before scalling.'), 'propget'], HRESULT, 'IsNormalized',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(7003), helpstring('Controls whether to convert the reference vector to a unit vector before scalling.'), 'propput'], HRESULT, 'IsNormalized',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorScaled implementation
##class _IAgCrdnVectorScaled_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def ReferenceVector(self):
##        'A vector being scaled.'
##        #return ppRetVal
##
##    def _get(self):
##        'A scaling multiple.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A scaling multiple.'
##    Scale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Controls whether to convert the reference vector to a unit vector before scalling.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Controls whether to convert the reference vector to a unit vector before scalling.'
##    IsNormalized = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnVectorEccentricity(CoClass):
    'A vector directed from the center of the specified central body toward the nearest point of an elliptical orbit created from the motion of the specified point.'
    _reg_clsid_ = GUID('{F08649CF-F8C7-421E-A838-0CCDE3B46F78}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnVectorEccentricity(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A vector directed from the center of the specified central body toward the nearest point of an elliptical orbit created from the motion of the specified point.'
    _iid_ = GUID('{4441E2E8-0693-4D33-AFA6-D21DC4EDCA08}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorEccentricity._com_interfaces_ = [_IAgCrdnVectorEccentricity, IAgCrdnVectorEccentricity, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

class AgCrdnEventIntervalBetweenTimeInstants(CoClass):
    'Interval between specified start and stop time instants. If start instant occurs after stop, then interval is undefined.'
    _reg_clsid_ = GUID('{172EFDB1-C6C6-472C-99C4-E09B28F29F5D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventIntervalBetweenTimeInstants(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalBetweenTimeInstants'
    _iid_ = GUID('{C4C30B96-2547-40D4-B903-2104C1B5AD47}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventIntervalBetweenTimeInstants(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Interval between specified start and stop time instants. If start instant occurs after stop, then interval is undefined.'
    _iid_ = GUID('{A85EDA97-303D-4074-8FD7-6A01099577F8}')
    _idlflags_ = ['oleautomation']
AgCrdnEventIntervalBetweenTimeInstants._com_interfaces_ = [_IAgCrdnEventIntervalBetweenTimeInstants, IAgCrdnEventIntervalBetweenTimeInstants, IAgCrdnEventInterval, IAgCrdn]

class AgCrdnLightTimeDelay(CoClass):
    'Manage Light Time Delay options..'
    _reg_clsid_ = GUID('{8EA46825-D788-4993-8248-BD6F203F83A4}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnLightTimeDelay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnLightTimeDelay'
    _iid_ = GUID('{76A31198-2DED-4104-960C-B5D22CA0A8FC}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnLightTimeDelay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Manage Light Time Delay options..'
    _iid_ = GUID('{C93A2DDB-D31B-4DFE-A50E-EE78724174B8}')
    _idlflags_ = ['oleautomation']
AgCrdnLightTimeDelay._com_interfaces_ = [_IAgCrdnLightTimeDelay, IAgCrdnLightTimeDelay]

class _IAgCrdnGridCoordinateDefinition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnGridCoordinateDefinition'
    _iid_ = GUID('{520AF2D5-A8BB-4F8C-84EF-8A6ADFCBB790}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnGridCoordinateDefinition._methods_ = [
    COMMETHOD([dispid(31412), helpstring('Grid values method type.'), 'propget'], HRESULT, 'MethodType',
              ( ['out', 'retval'], POINTER(AgECrdnVolumetricGridValuesMethodType), 'pRetVal' )),
    COMMETHOD([dispid(31410), helpstring('Sets/Returns the grid values interface.'), 'propget'], HRESULT, 'GridValuesMethod',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridValuesMethod)), 'ppRetVal' )),
    COMMETHOD([dispid(31409), helpstring('Sets grid values type to fixed step.')], HRESULT, 'SetGridValuesFixedStep',
              ( ['in'], c_double, 'Min' ),
              ( ['in'], c_double, 'Max' ),
              ( ['in'], VARIANT_BOOL, 'IncludeMinMax' ),
              ( ['in'], c_double, 'RefValue' ),
              ( ['in'], c_double, 'FixedStep' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridValuesFixedStep)), 'ppRetVal' )),
    COMMETHOD([dispid(31411), helpstring('Sets grid values type to fixed number of steps.')], HRESULT, 'SetGridValuesFixedNumberOfSteps',
              ( ['in'], c_double, 'Min' ),
              ( ['in'], c_double, 'Max' ),
              ( ['in'], c_int, 'NumSteps' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridValuesFixedNumberOfSteps)), 'ppRetVal' )),
    COMMETHOD([dispid(31413), helpstring('Sets grid values type to custom values.')], HRESULT, 'SetGridValuesCustom',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Values' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridValuesCustom)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnGridCoordinateDefinition implementation
##class _IAgCrdnGridCoordinateDefinition_Impl(object):
##    @property
##    def MethodType(self):
##        'Grid values method type.'
##        #return pRetVal
##
##    @property
##    def GridValuesMethod(self):
##        'Sets/Returns the grid values interface.'
##        #return ppRetVal
##
##    def SetGridValuesFixedStep(self, Min, Max, IncludeMinMax, RefValue, FixedStep):
##        'Sets grid values type to fixed step.'
##        #return ppRetVal
##
##    def SetGridValuesFixedNumberOfSteps(self, Min, Max, NumSteps):
##        'Sets grid values type to fixed number of steps.'
##        #return ppRetVal
##
##    def SetGridValuesCustom(self, Values):
##        'Sets grid values type to custom values.'
##        #return ppRetVal
##

class IAgCrdnVolumeFromTimeSatisfaction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'An volume from time satisfaction volume interface.'
    _iid_ = GUID('{E4B03775-990C-4D79-BDAD-E121E0526953}')
    _idlflags_ = ['oleautomation']
IAgCrdnVolumeFromTimeSatisfaction._methods_ = [
    COMMETHOD(['propget', helpstring('The interval list within which the global minimum or maximum is sought. The default is the overall availability of host object.')], HRESULT, 'TimeSatisfaction',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The interval list within which the global minimum or maximum is sought. The default is the overall availability of host object.')], HRESULT, 'TimeSatisfaction',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeFromTimeSatisfaction implementation
##class IAgCrdnVolumeFromTimeSatisfaction_Impl(object):
##    def _get(self):
##        'The interval list within which the global minimum or maximum is sought. The default is the overall availability of host object.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The interval list within which the global minimum or maximum is sought. The default is the overall availability of host object.'
##    TimeSatisfaction = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnAxesAngularOffset(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Axes created by rotating the Reference axes about the Spin vector through the specified rotation angle plus the additional rotational offset.'
    _iid_ = GUID('{F6A0F14A-7803-43CA-A898-2634735B8728}')
    _idlflags_ = ['oleautomation']
IAgCrdnAxesAngularOffset._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a spin vector.')], HRESULT, 'SpinVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a rotational angle.')], HRESULT, 'RotationAngle',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference axes.')], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify an additional rotational offset.')], HRESULT, 'FixedOffsetAngle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify an additional rotational offset.')], HRESULT, 'FixedOffsetAngle',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAxesAngularOffset implementation
##class IAgCrdnAxesAngularOffset_Impl(object):
##    @property
##    def SpinVector(self):
##        'Specify a spin vector.'
##        #return ppRetVal
##
##    @property
##    def RotationAngle(self):
##        'Specify a rotational angle.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify an additional rotational offset.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an additional rotational offset.'
##    FixedOffsetAngle = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnVectorFixedInAxes(CoClass):
    'Vector fixed in reference axes.'
    _reg_clsid_ = GUID('{0A8DF503-7DBD-437D-A0D4-239DC25DCC06}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVectorFixedInAxes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorFixedInAxes'
    _iid_ = GUID('{E66E9194-6578-42FC-8485-CD757BFC3B3F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorFixedInAxes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Vector fixed in the reference axes using the selected coordinate type.'
    _iid_ = GUID('{681BC23D-31F2-4A99-AB6A-4084147B57F1}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorFixedInAxes._com_interfaces_ = [_IAgCrdnVectorFixedInAxes, IAgCrdnVectorFixedInAxes, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

class IAgCrdnEventIntervalTimeOffset(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Interval defined by shifting specified reference interval by fixed time offset.'
    _iid_ = GUID('{87552842-F6B9-49A4-BC7F-E4E9061BE83B}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventIntervalTimeOffset._methods_ = [
    COMMETHOD(['propget', helpstring('The reference interval.')], HRESULT, 'ReferenceInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The reference interval.')], HRESULT, 'ReferenceInterval',
              ( ['in'], POINTER(IAgCrdnEventInterval), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The time offset value.')], HRESULT, 'TimeOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The time offset value.')], HRESULT, 'TimeOffset',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalTimeOffset implementation
##class IAgCrdnEventIntervalTimeOffset_Impl(object):
##    def _get(self):
##        'The reference interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference interval.'
##    ReferenceInterval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The time offset value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The time offset value.'
##    TimeOffset = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnLastIntervalsFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The filter selects a portion of last intervals.'
    _iid_ = GUID('{462F1294-5223-456D-A3E1-DCA54AC0DF1B}')
    _idlflags_ = ['oleautomation']
IAgCrdnLastIntervalsFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Maximum number of intervals.')], HRESULT, 'MaximumNumberOfIntervals',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Maximum number of intervals.')], HRESULT, 'MaximumNumberOfIntervals',
              ( ['in'], c_int, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnLastIntervalsFilter implementation
##class IAgCrdnLastIntervalsFilter_Impl(object):
##    def _get(self):
##        'Maximum number of intervals.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Maximum number of intervals.'
##    MaximumNumberOfIntervals = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnEventIntervalCollection(CoClass):
    'A collection of related interval lists.'
    _reg_clsid_ = GUID('{01A0ACBB-3552-498E-958A-14177BF4F77C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventIntervalCollection._com_interfaces_ = [_IAgCrdnEventIntervalCollection, IAgCrdnEventIntervalCollection, IAgCrdn]

class AgCrdnVolume(CoClass):
    'A volume interface. The methods and properties of the interface provide Volume functions.'
    _reg_clsid_ = GUID('{9098A1CE-1A53-4A8D-8812-B2984DAD1CC3}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVolume(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolume'
    _iid_ = GUID('{9A9BAF58-07F3-41DA-9A8A-9E1F3ACE5E7B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnVolume._com_interfaces_ = [_IAgCrdnVolume, IAgCrdnVolume, IAgCrdn]

class IAgCrdnAxesGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Access or create VGT axes associated with an object or a central body.'
    _iid_ = GUID('{4575EEB5-14EB-42A2-AC6D-ADC7BCA7B019}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
class IAgCrdnAxesFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A Factory object to create axes.'
    _iid_ = GUID('{C9B581C8-924B-4B02-8200-AFDB9E5CCBE0}')
    _idlflags_ = ['oleautomation']
IAgCrdnAxesGroup._methods_ = [
    COMMETHOD([dispid(9201), helpstring('Removes a specified Axes.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'AxesName' )),
    COMMETHOD([dispid(9202), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(9203), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9205), helpstring('Returns a Factory object used to create custom axes.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns an axes by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([dispid(9208), helpstring('Provides access to common tasks that allow users quickly carry out tasks such as creating known axes, etc.'), 'propget'], HRESULT, 'CommonTasks',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesCommonTasks)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAxesGroup implementation
##class IAgCrdnAxesGroup_Impl(object):
##    def Remove(self, AxesName):
##        'Removes a specified Axes.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a Factory object used to create custom axes.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns an axes by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##
##    @property
##    def CommonTasks(self):
##        'Provides access to common tasks that allow users quickly carry out tasks such as creating known axes, etc.'
##        #return ppRetVal
##

class AgCrdnVectorLineOfNodes(CoClass):
    'Unit vector along the line of nodes - the line of intersection of the osculating orbit plane and the inertial equator of the specified central body.'
    _reg_clsid_ = GUID('{A0397735-E571-42A8-9FBA-36751FF632B7}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVectorLineOfNodes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorLineOfNodes'
    _iid_ = GUID('{6B17F4B8-CCF4-485F-84FC-D0F4FF563E06}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorLineOfNodes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Unit vector along the line of nodes - the line of intersection of the osculating orbit plane and the inertial equator of the specified central body.'
    _iid_ = GUID('{DECE7ECE-8E15-44F7-81FF-2446156C8870}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorLineOfNodes._com_interfaces_ = [_IAgCrdnVectorLineOfNodes, IAgCrdnVectorLineOfNodes, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

class AgCrdnEventIntervalCollectionCondition(CoClass):
    'Interval list containing intervals during which specified condition is satisfied. Determination is performed within interval list using Sampling and Convergence parameters.'
    _reg_clsid_ = GUID('{6C4DEF48-1EA1-46B9-AB15-0D77576ABBF3}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventIntervalCollectionCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalCollectionCondition'
    _iid_ = GUID('{96B1B03B-7949-4A38-A9D6-7839FB7FF943}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventIntervalCollectionCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Interval list containing intervals during which specified condition is satisfied. Determination is performed within interval list using Sampling and Convergence parameters.'
    _iid_ = GUID('{147862FB-718E-4D18-8EE0-7E9FFBCEBAD9}')
    _idlflags_ = ['oleautomation']
AgCrdnEventIntervalCollectionCondition._com_interfaces_ = [_IAgCrdnEventIntervalCollectionCondition, IAgCrdnEventIntervalCollectionCondition, IAgCrdnEventIntervalCollection, IAgCrdn]

class AgCrdnVolumeCombined(CoClass):
    'A combined volume interface.'
    _reg_clsid_ = GUID('{EBE84503-AB27-4015-9341-A806313409B9}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVolumeCombined(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeCombined'
    _iid_ = GUID('{CBD3A811-206C-4C3F-A202-028F6D0AD56D}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVolumeCombined(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A combined volume interface.'
    _iid_ = GUID('{0D3642FD-5252-4C80-AB0D-C87809F06862}')
    _idlflags_ = ['oleautomation']
AgCrdnVolumeCombined._com_interfaces_ = [_IAgCrdnVolumeCombined, IAgCrdnVolumeCombined, IAgCrdnVolume, IAgCrdn]

class _IAgCrdnVolumeGridFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeGridFactory'
    _iid_ = GUID('{93FA9C57-46F2-4457-A7E1-7B2E9DD0AA68}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnVolumeGridType'
eCrdnVolumeGridTypeUnknown = -1
eCrdnVolumeGridTypeCartesian = 0
eCrdnVolumeGridTypeCylindrical = 1
eCrdnVolumeGridTypeSpherical = 2
eCrdnVolumeGridTypeConstrained = 3
eCrdnVolumeGridTypeLatLonAlt = 4
eCrdnVolumeGridTypeBearingAlt = 5
AgECrdnVolumeGridType = c_int # enum
_IAgCrdnVolumeGridFactory._methods_ = [
    COMMETHOD([dispid(31601), helpstring('Creates and registers a volume grid using specified name and description.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnVolumeGridType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD([dispid(31602), helpstring('Creates and registers a cartesian volume grid using specified name and description.')], HRESULT, 'CreateVolumeGridCartesian',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD([dispid(31603), helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnVolumeGridType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(31604), helpstring('Creates and registers a cylindrical volume grid using specified name and description.')], HRESULT, 'CreateVolumeGridCylindrical',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD([dispid(31605), helpstring('Creates and registers a spherical volume grid using specified name and description.')], HRESULT, 'CreateVolumeGridSpherical',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD([dispid(31606), helpstring('Creates and registers a volume grid that can be constrained by conditions using specified name and description.')], HRESULT, 'CreateVolumeGridConstrained',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD([dispid(31607), helpstring('Creates and registers cartographic volume grid using specified name and description.')], HRESULT, 'CreateVolumeGridLatLonAlt',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD([dispid(31608), helpstring('Creates and registers a volume grid of type surface bearing using specified name and description.')], HRESULT, 'CreateVolumeGridBearingAlt',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnVolumeGridFactory implementation
##class _IAgCrdnVolumeGridFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Creates and registers a volume grid using specified name and description.'
##        #return ppRetVal
##
##    def CreateVolumeGridCartesian(self, Name, Description):
##        'Creates and registers a cartesian volume grid using specified name and description.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##
##    def CreateVolumeGridCylindrical(self, Name, Description):
##        'Creates and registers a cylindrical volume grid using specified name and description.'
##        #return ppRetVal
##
##    def CreateVolumeGridSpherical(self, Name, Description):
##        'Creates and registers a spherical volume grid using specified name and description.'
##        #return ppRetVal
##
##    def CreateVolumeGridConstrained(self, Name, Description):
##        'Creates and registers a volume grid that can be constrained by conditions using specified name and description.'
##        #return ppRetVal
##
##    def CreateVolumeGridLatLonAlt(self, Name, Description):
##        'Creates and registers cartographic volume grid using specified name and description.'
##        #return ppRetVal
##
##    def CreateVolumeGridBearingAlt(self, Name, Description):
##        'Creates and registers a volume grid of type surface bearing using specified name and description.'
##        #return ppRetVal
##

class IAgCrdnVectorAngularVelocity(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Angular velocity vector of one set of axes computed with respect to the reference set.'
    _iid_ = GUID('{43107159-4A44-4A79-B0E9-6BC78FDF8D0F}')
    _idlflags_ = ['oleautomation']
IAgCrdnVectorAngularVelocity._methods_ = [
    COMMETHOD(['propget', helpstring('Specify the axes.')], HRESULT, 'Axes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference axes.')], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Time step used in numerical evaluation of derivatives using central differencing.')], HRESULT, 'DifferencingTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Time step used in numerical evaluation of derivatives using central differencing.')], HRESULT, 'DifferencingTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorAngularVelocity implementation
##class IAgCrdnVectorAngularVelocity_Impl(object):
##    @property
##    def Axes(self):
##        'Specify the axes.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'Time step used in numerical evaluation of derivatives using central differencing.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Time step used in numerical evaluation of derivatives using central differencing.'
##    DifferencingTimeStep = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnPointLocateInSystemResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnPoint.LocateInSystem method.'
    _iid_ = GUID('{AE05DA02-FBD3-419C-B595-A437CE6F2912}')
    _idlflags_ = ['oleautomation']
IAgCrdnPointLocateInSystemResult._methods_ = [
    COMMETHOD(['propget', helpstring('True indicates the method call was successful.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The point position in the specified coordinate system.')], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPointLocateInSystemResult implementation
##class IAgCrdnPointLocateInSystemResult_Impl(object):
##    @property
##    def IsValid(self):
##        'True indicates the method call was successful.'
##        #return pRetVal
##
##    @property
##    def Position(self):
##        'The point position in the specified coordinate system.'
##        #return ppRetVal
##

class AgCrdnVectorOrbitAngularMomentum(CoClass):
    'Vector perpendicular to the plane of an elliptical orbit created from the motion of the specified point with respect to the center of the specified central body.'
    _reg_clsid_ = GUID('{C8620C71-3095-4619-A7AD-43AD462AA87B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVectorOrbitAngularMomentum(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorOrbitAngularMomentum'
    _iid_ = GUID('{572ED90D-BA21-4AD4-9377-C982216DD2A1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorOrbitAngularMomentum(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Vector perpendicular to the plane of an elliptical orbit created from the motion of the specified point with respect to the center of the specified central body.'
    _iid_ = GUID('{73D75810-5870-441C-8A18-4AC3C63C9EF7}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorOrbitAngularMomentum._com_interfaces_ = [_IAgCrdnVectorOrbitAngularMomentum, IAgCrdnVectorOrbitAngularMomentum, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

class IAgCrdnAngleFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A Factory object to create angles.'
    _iid_ = GUID('{AE8D2B4B-280F-4ADD-B10D-2CEC8F9B1C96}')
    _idlflags_ = ['oleautomation']
IAgCrdnAngleFactory._methods_ = [
    COMMETHOD([helpstring('Creates a VGT angle using specified name, description and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'AngleName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnAngleType, 'AngleType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngle)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns true if the type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnAngleType, 'Type' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAngleFactory implementation
##class IAgCrdnAngleFactory_Impl(object):
##    def Create(self, AngleName, Description, AngleType):
##        'Creates a VGT angle using specified name, description and type.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, Type):
##        'Returns true if the type is supported.'
##        #return pRetVal
##

class _IAgCrdnSamplingBasic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnSamplingBasic'
    _iid_ = GUID('{2A3C7FC3-DCF4-465C-A918-8E5CA4D8C63B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnSamplingBasic._methods_ = [
    COMMETHOD([dispid(23701), helpstring('Get the sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propget'], HRESULT, 'SamplingMethod',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSamplingMethod)), 'ppRetVal' )),
    COMMETHOD([dispid(23701), helpstring('Get the sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propput'], HRESULT, 'SamplingMethod',
              ( ['in'], POINTER(IAgCrdnSamplingMethod), 'ppRetVal' )),
    COMMETHOD([dispid(23702), helpstring('Creates sampling definitions, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propget'], HRESULT, 'MethodFactory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSamplingMethodFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnSamplingBasic implementation
##class _IAgCrdnSamplingBasic_Impl(object):
##    def _get(self):
##        'Get the sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    SamplingMethod = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MethodFactory(self):
##        'Creates sampling definitions, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnGridCoordinateDefinition._methods_ = [
    COMMETHOD(['propget', helpstring('Grid values method type.')], HRESULT, 'MethodType',
              ( ['out', 'retval'], POINTER(AgECrdnVolumetricGridValuesMethodType), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Sets/Returns the grid values interface.')], HRESULT, 'GridValuesMethod',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridValuesMethod)), 'ppRetVal' )),
    COMMETHOD([helpstring('Sets grid values type to fixed step.')], HRESULT, 'SetGridValuesFixedStep',
              ( ['in'], c_double, 'Min' ),
              ( ['in'], c_double, 'Max' ),
              ( ['in'], VARIANT_BOOL, 'IncludeMinMax' ),
              ( ['in'], c_double, 'RefValue' ),
              ( ['in'], c_double, 'FixedStep' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridValuesFixedStep)), 'ppRetVal' )),
    COMMETHOD([helpstring('Sets grid values type to fixed number of steps.')], HRESULT, 'SetGridValuesFixedNumberOfSteps',
              ( ['in'], c_double, 'Min' ),
              ( ['in'], c_double, 'Max' ),
              ( ['in'], c_int, 'NumSteps' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridValuesFixedNumberOfSteps)), 'ppRetVal' )),
    COMMETHOD([helpstring('Sets grid values type to custom values.')], HRESULT, 'SetGridValuesCustom',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Values' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridValuesCustom)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnGridCoordinateDefinition implementation
##class IAgCrdnGridCoordinateDefinition_Impl(object):
##    @property
##    def MethodType(self):
##        'Grid values method type.'
##        #return pRetVal
##
##    @property
##    def GridValuesMethod(self):
##        'Sets/Returns the grid values interface.'
##        #return ppRetVal
##
##    def SetGridValuesFixedStep(self, Min, Max, IncludeMinMax, RefValue, FixedStep):
##        'Sets grid values type to fixed step.'
##        #return ppRetVal
##
##    def SetGridValuesFixedNumberOfSteps(self, Min, Max, NumSteps):
##        'Sets grid values type to fixed number of steps.'
##        #return ppRetVal
##
##    def SetGridValuesCustom(self, Values):
##        'Sets grid values type to custom values.'
##        #return ppRetVal
##

class AgCrdnEventIntervalCollectionFactory(CoClass):
    'The factory creates collections of event interval lists.'
    _reg_clsid_ = GUID('{7B88C1CC-262D-4E46-8F65-5817C15C7A7C}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventIntervalCollectionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalCollectionFactory'
    _iid_ = GUID('{3E49CC9A-3E99-4EDE-8300-F84014B5145F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventIntervalCollectionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The factory creates collections of event interval lists.'
    _iid_ = GUID('{DEBF915F-F274-4947-9228-6C21811E28BB}')
    _idlflags_ = ['oleautomation']
AgCrdnEventIntervalCollectionFactory._com_interfaces_ = [_IAgCrdnEventIntervalCollectionFactory, IAgCrdnEventIntervalCollectionFactory]

class IAgCrdnSignalDelayBasic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Signal delay definition determines how long it takes for a signal to propagate from one location to another.'
    _iid_ = GUID('{C57A69FE-370C-4D41-B821-25EFD70B87ED}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgECrdnSpeedOptions'
eCrdnLightTransmissionSpeed = 1
eCrdnCustomTransmissionSpeed = 2
AgECrdnSpeedOptions = c_int # enum
IAgCrdnSignalDelayBasic._methods_ = [
    COMMETHOD(['propget', helpstring('Get the type of signal path reference system which can be set to use STK Access default (see STK Help for further details), Solar system barycenter inertial reference, central body inertial reference or custom reference system...')], HRESULT, 'SignalPathReferenceSystem',
              ( ['out', 'retval'], POINTER(AgECrdnSignalPathReferenceSystem), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the type of signal path reference system which can be set to use STK Access default (see STK Help for further details), Solar system barycenter inertial reference, central body inertial reference or custom reference system...')], HRESULT, 'SignalPathReferenceSystem',
              ( ['in'], AgECrdnSignalPathReferenceSystem, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the custom reference system which is used as a reference for signal path if the signal path reference option is set to Custom.')], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the custom reference system which is used as a reference for signal path if the signal path reference option is set to Custom.')], HRESULT, 'ReferenceSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Get the speed option which determines whether to use the speed of light or a custom speed value.')], HRESULT, 'SpeedOption',
              ( ['out', 'retval'], POINTER(AgECrdnSpeedOptions), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the speed option which determines whether to use the speed of light or a custom speed value.')], HRESULT, 'SpeedOption',
              ( ['in'], AgECrdnSpeedOptions, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the signal propagation speed value which is used if the speed option is set to Custom.')], HRESULT, 'TransferSpeed',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the signal propagation speed value which is used if the speed option is set to Custom.')], HRESULT, 'TransferSpeed',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the time delay convergence which determines the accuracy of computed propagation time between the two locations.')], HRESULT, 'TimeDelayConvergence',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the time delay convergence which determines the accuracy of computed propagation time between the two locations.')], HRESULT, 'TimeDelayConvergence',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnSignalDelayBasic implementation
##class IAgCrdnSignalDelayBasic_Impl(object):
##    def _get(self):
##        'Get the type of signal path reference system which can be set to use STK Access default (see STK Help for further details), Solar system barycenter inertial reference, central body inertial reference or custom reference system...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the type of signal path reference system which can be set to use STK Access default (see STK Help for further details), Solar system barycenter inertial reference, central body inertial reference or custom reference system...'
##    SignalPathReferenceSystem = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the custom reference system which is used as a reference for signal path if the signal path reference option is set to Custom.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the custom reference system which is used as a reference for signal path if the signal path reference option is set to Custom.'
##    ReferenceSystem = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the speed option which determines whether to use the speed of light or a custom speed value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the speed option which determines whether to use the speed of light or a custom speed value.'
##    SpeedOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the signal propagation speed value which is used if the speed option is set to Custom.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the signal propagation speed value which is used if the speed option is set to Custom.'
##    TransferSpeed = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the time delay convergence which determines the accuracy of computed propagation time between the two locations.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the time delay convergence which determines the accuracy of computed propagation time between the two locations.'
##    TimeDelayConvergence = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnVolumeFromCalc(CoClass):
    'An volume from calc volume interface.'
    _reg_clsid_ = GUID('{F0410110-7AC2-45F8-888E-9BF050C5991D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVolumeFromCalc(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeFromCalc'
    _iid_ = GUID('{DC911540-53D2-43D2-9459-70937C58E4FF}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnVolumeFromCalc._com_interfaces_ = [_IAgCrdnVolumeFromCalc, IAgCrdnVolumeFromCalc, IAgCrdnVolume, IAgCrdn]

class _IAgCrdnVectorFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorFactory'
    _iid_ = GUID('{950401C6-7058-49A7-B79C-4E48900258E7}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorDisplacement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Vector defined by its start and end points.'
    _iid_ = GUID('{FE75DA7B-95CA-40D5-9157-DFDBFF37AFE0}')
    _idlflags_ = ['oleautomation']
class IAgCrdnVectorCross(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The vector cross product of two vectors.'
    _iid_ = GUID('{1A3B7AC3-2641-4F15-B911-665AD2CACAEA}')
    _idlflags_ = ['oleautomation']
_IAgCrdnVectorFactory._methods_ = [
    COMMETHOD([dispid(8301), helpstring('Creates a VGT vector using specified name, description and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'VectorName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnVectorType, 'VectorType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(8302), helpstring('Returns true if the type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnVectorType, 'Type' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(8303), helpstring('Creates a displacement vector.')], HRESULT, 'CreateDisplacementVector',
              ( ['in'], BSTR, 'VectorName' ),
              ( ['in'], POINTER(IAgCrdnPoint), 'OriginPoint' ),
              ( ['in'], POINTER(IAgCrdnPoint), 'DestPoint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorDisplacement)), 'ppRetVal' )),
    COMMETHOD([dispid(8307), helpstring('An array of display names associated with available vector plugins. The elements of the array are strings. Display names are used to create VGT vectors based on COM plugins using CreateVectorPluginFromDisplayName method.'), 'propget'], HRESULT, 'AvailableVectorPluginDisplayNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(8306), helpstring('Create a vector component based on a COM vector plugin. For information how to implement and register VGT plugins, see')], HRESULT, 'CreateVectorPluginFromDisplayName',
              ( ['in'], BSTR, 'VectorName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'DisplayName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(8308), helpstring('Creates a cross product C = A x B.')], HRESULT, 'CreateCrossProductVector',
              ( ['in'], BSTR, 'VectorName' ),
              ( ['in'], POINTER(IAgCrdnVector), 'VectorA' ),
              ( ['in'], POINTER(IAgCrdnVector), 'VectorB' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorCross)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnVectorFactory implementation
##class _IAgCrdnVectorFactory_Impl(object):
##    def Create(self, VectorName, Description, VectorType):
##        'Creates a VGT vector using specified name, description and type.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, Type):
##        'Returns true if the type is supported.'
##        #return pRetVal
##
##    def CreateDisplacementVector(self, VectorName, OriginPoint, DestPoint):
##        'Creates a displacement vector.'
##        #return ppRetVal
##
##    @property
##    def AvailableVectorPluginDisplayNames(self):
##        'An array of display names associated with available vector plugins. The elements of the array are strings. Display names are used to create VGT vectors based on COM plugins using CreateVectorPluginFromDisplayName method.'
##        #return ppRetVal
##
##    def CreateVectorPluginFromDisplayName(self, VectorName, Description, DisplayName):
##        'Create a vector component based on a COM vector plugin. For information how to implement and register VGT plugins, see'
##        #return ppRetVal
##
##    def CreateCrossProductVector(self, VectorName, VectorA, VectorB):
##        'Creates a cross product C = A x B.'
##        #return ppRetVal
##

class _IAgCrdnCalcScalarElapsedTime(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCalcScalarElapsedTime'
    _iid_ = GUID('{7C040AC7-7AAC-4686-818C-0E418EFA8568}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnCalcScalarElapsedTime._methods_ = [
    COMMETHOD([dispid(12805), helpstring('Returns the scalar calculation type.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnCalcScalarType), 'pRetVal' )),
    COMMETHOD([dispid(12803), helpstring('Evaluates the scalar calculation at the specified time instant.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12806), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...')], HRESULT, 'QuickEvaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12804), helpstring('Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12807), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...')], HRESULT, 'QuickEvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16303), helpstring('The reference time instant.'), 'propget'], HRESULT, 'ReferenceTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(16303), helpstring('The reference time instant.'), 'propput'], HRESULT, 'ReferenceTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(12808), helpstring('Returns a list of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(12809), helpstring("Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propget'], HRESULT, 'UnitOfMeasure',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(12810), helpstring('Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12811), helpstring('Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12812), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12813), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnCalcScalarElapsedTime implementation
##class _IAgCrdnCalcScalarElapsedTime_Impl(object):
##    @property
##    def Type(self):
##        'Returns the scalar calculation type.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant.'
##        #return ppRetVal
##
##    def QuickEvaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.'
##        #return ppRetVal
##
##    def QuickEvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...'
##        #return ppRetVal
##
##    def _get(self):
##        'The reference time instant.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference time instant.'
##    ReferenceTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def GetAvailability(self):
##        'Returns a list of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def UnitOfMeasure(self):
##        "Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def QuickEvaluateArray(self, Times):
##        'Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateArray(self, Times):
##        'Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##

class _IAgCrdnEventIntervalCollectionLighting(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalCollectionLighting'
    _iid_ = GUID('{4FED7BC5-A624-4BD0-874B-708A36CFA60E}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnEventIntervalCollectionLighting._methods_ = [
    COMMETHOD([dispid(22204), helpstring('Return the type of collection of interval lists.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalCollectionType), 'pRetVal' )),
    COMMETHOD([dispid(22201), helpstring('Get the labels associated with the interval lists in the collection.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(22202), helpstring('Return computed collection of interval lists.')], HRESULT, 'FindIntervalCollection',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalsVectorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(22203), helpstring('Determine if specified time falls within any of the computed interval lists in the collection.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollectionOccurredResult)), 'ppRetVal' )),
    COMMETHOD([dispid(20301), helpstring('The location point to compute sunlight, penumbra and umbra.'), 'propget'], HRESULT, 'Location',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(20301), helpstring('The location point to compute sunlight, penumbra and umbra.'), 'propput'], HRESULT, 'Location',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(20302), helpstring('A custom list of eclipsing bodies. This list is used if UseObjectEclipsingBodies is set to false.'), 'propget'], HRESULT, 'EclipsingBodies',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(20302), helpstring('A custom list of eclipsing bodies. This list is used if UseObjectEclipsingBodies is set to false.'), 'propput'], HRESULT, 'EclipsingBodies',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(20303), helpstring('When true, configure eclipsing bodies list based on that of parent STK Object.'), 'propget'], HRESULT, 'UseObjectEclipsingBodies',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(20303), helpstring('When true, configure eclipsing bodies list based on that of parent STK Object.'), 'propput'], HRESULT, 'UseObjectEclipsingBodies',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalCollectionLighting implementation
##class _IAgCrdnEventIntervalCollectionLighting_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of collection of interval lists.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the labels associated with the interval lists in the collection.'
##        #return ppRetVal
##
##    def FindIntervalCollection(self):
##        'Return computed collection of interval lists.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within any of the computed interval lists in the collection.'
##        #return ppRetVal
##
##    def _get(self):
##        'The location point to compute sunlight, penumbra and umbra.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The location point to compute sunlight, penumbra and umbra.'
##    Location = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A custom list of eclipsing bodies. This list is used if UseObjectEclipsingBodies is set to false.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A custom list of eclipsing bodies. This list is used if UseObjectEclipsingBodies is set to false.'
##    EclipsingBodies = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'When true, configure eclipsing bodies list based on that of parent STK Object.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'When true, configure eclipsing bodies list based on that of parent STK Object.'
##    UseObjectEclipsingBodies = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnParameterSetAttitude(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Attitude parameter set contains various representations of attitude of one set of axes relative to another.'
    _iid_ = GUID('{B9F1CDE2-233B-42EE-A1C6-416CDDC535E9}')
    _idlflags_ = ['oleautomation']
IAgCrdnParameterSetAttitude._methods_ = [
    COMMETHOD(['propget', helpstring('Get the axes for which attitude representations are computed.')], HRESULT, 'Axes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the axes for which attitude representations are computed.')], HRESULT, 'Axes',
              ( ['in'], POINTER(IAgCrdnAxes), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Get the reference axes relative to which attitude representations are computed.')], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the reference axes relative to which attitude representations are computed.')], HRESULT, 'ReferenceAxes',
              ( ['in'], POINTER(IAgCrdnAxes), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnParameterSetAttitude implementation
##class IAgCrdnParameterSetAttitude_Impl(object):
##    def _get(self):
##        'Get the axes for which attitude representations are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the axes for which attitude representations are computed.'
##    Axes = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the reference axes relative to which attitude representations are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the reference axes relative to which attitude representations are computed.'
##    ReferenceAxes = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnPointCBFixedOffset(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Point specified by fixed components with respect to central body.'
    _iid_ = GUID('{C1BC8E47-7A99-4C64-A78E-E255A6DD3D06}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgECrdnReferenceShapeType'
eCrdnReferenceShapeEllipsoid = 1
eCrdnReferenceShapeTerrain = 2
eCrdnReferenceShapeMSL = 3
AgECrdnReferenceShapeType = c_int # enum
IAgCrdnPointCBFixedOffset._methods_ = [
    COMMETHOD(['propget', helpstring('Get the central body.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the central body.')], HRESULT, 'CentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Choose the point height's reference. Available options are central body ellipsoid (WSG84), terrain or Mean Sea Level.")], HRESULT, 'ReferenceShape',
              ( ['out', 'retval'], POINTER(AgECrdnReferenceShapeType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Choose the point height's reference. Available options are central body ellipsoid (WSG84), terrain or Mean Sea Level.")], HRESULT, 'ReferenceShape',
              ( ['in'], AgECrdnReferenceShapeType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A position of the point fixed on the central body.')], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgPosition)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPointCBFixedOffset implementation
##class IAgCrdnPointCBFixedOffset_Impl(object):
##    def _get(self):
##        'Get the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the central body.'
##    CentralBody = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Choose the point height's reference. Available options are central body ellipsoid (WSG84), terrain or Mean Sea Level."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Choose the point height's reference. Available options are central body ellipsoid (WSG84), terrain or Mean Sea Level."
##    ReferenceShape = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Position(self):
##        'A position of the point fixed on the central body.'
##        #return ppRetVal
##

class AgCrdnVectorOrbitNormal(CoClass):
    'Unit vector perpendicular to the plane of an elliptical orbit created from the motion of the specified point with respect to the center of the specified central body.'
    _reg_clsid_ = GUID('{9CA64E7F-72F9-4BCD-9269-555508559F21}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnVectorOrbitNormal(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Unit vector perpendicular to the plane of an elliptical orbit created from the motion of the specified point with respect to the center of the specified central body.'
    _iid_ = GUID('{E0D9A87F-AF7E-4878-9FFC-546F5E72C6E7}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorOrbitNormal._com_interfaces_ = [_IAgCrdnVectorOrbitNormal, IAgCrdnVectorOrbitNormal, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

class IAgCrdnVolumeGridBearingAlt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A volume grid bearing alt (Surface Bearing) interface.'
    _iid_ = GUID('{596939D4-D287-4A58-AEF0-B8D43AC6B784}')
    _idlflags_ = ['oleautomation']
IAgCrdnVolumeGridBearingAlt._methods_ = [
    COMMETHOD(['propget', helpstring('Get the central body for the volume grid. Both the central body reference shape and its CBF (central body centered fixed) system are used by this volume grid.')], HRESULT, 'ReferenceCentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the central body for the volume grid. Both the central body reference shape and its CBF (central body centered fixed) system are used by this volume grid.')], HRESULT, 'ReferenceCentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns AlongBearing Coordinates parameters for the surface bearing.')], HRESULT, 'AlongBearingCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns CrossBearing Coordinates parameters for the surface bearing.')], HRESULT, 'CrossBearingCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns altitude Coordinates parameters for the surface bearing.')], HRESULT, 'AltitudeCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether to use the auto fit bounds. Set to true to use the auto fit bounds..')], HRESULT, 'AutoFitBounds',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether to use the auto fit bounds. Set to true to use the auto fit bounds..')], HRESULT, 'AutoFitBounds',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify the Bearing Angle.')], HRESULT, 'BearingAngle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify the Bearing Angle.')], HRESULT, 'BearingAngle',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get lat/lon for reference location')], HRESULT, 'ReferenceLocation',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get lat/lon for reference location')], HRESULT, 'ReferenceLocation',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeGridBearingAlt implementation
##class IAgCrdnVolumeGridBearingAlt_Impl(object):
##    def _get(self):
##        'Get the central body for the volume grid. Both the central body reference shape and its CBF (central body centered fixed) system are used by this volume grid.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the central body for the volume grid. Both the central body reference shape and its CBF (central body centered fixed) system are used by this volume grid.'
##    ReferenceCentralBody = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def AlongBearingCoordinates(self):
##        'Returns AlongBearing Coordinates parameters for the surface bearing.'
##        #return ppRetVal
##
##    @property
##    def CrossBearingCoordinates(self):
##        'Returns CrossBearing Coordinates parameters for the surface bearing.'
##        #return ppRetVal
##
##    @property
##    def AltitudeCoordinates(self):
##        'Returns altitude Coordinates parameters for the surface bearing.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify whether to use the auto fit bounds. Set to true to use the auto fit bounds..'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use the auto fit bounds. Set to true to use the auto fit bounds..'
##    AutoFitBounds = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify the Bearing Angle.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify the Bearing Angle.'
##    BearingAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get lat/lon for reference location'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get lat/lon for reference location'
##    ReferenceLocation = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnEventIntervalCollectionLighting(CoClass):
    'Defined by computing sunlight, penumbra and umbra intervals as seen at specified location using specified selection of eclipsing bodies.'
    _reg_clsid_ = GUID('{C1E078C3-A47F-4A4A-A3F6-05002130F944}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnEventIntervalCollectionLighting(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Defined by computing sunlight, penumbra and umbra intervals as seen at specified location using specified selection of eclipsing bodies.'
    _iid_ = GUID('{DF1F03E1-FE58-4E9D-BD06-97731CC06D47}')
    _idlflags_ = ['oleautomation']
AgCrdnEventIntervalCollectionLighting._com_interfaces_ = [_IAgCrdnEventIntervalCollectionLighting, IAgCrdnEventIntervalCollectionLighting, IAgCrdnEventIntervalCollection, IAgCrdn]

class AgCrdnVolumeFromCondition(CoClass):
    'A volume from conditioninterface.'
    _reg_clsid_ = GUID('{4E493D3F-30B7-4557-ABEE-E4BA850B7F67}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVolumeFromCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeFromCondition'
    _iid_ = GUID('{D9A9B8BD-A993-4EED-BD8A-87ACAF3787AB}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnVolumeFromCondition._com_interfaces_ = [_IAgCrdnVolumeFromCondition, IAgCrdnVolumeFromCondition, IAgCrdnVolume, IAgCrdn]

class IAgCrdnFirstIntervalsFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The filter selects a portion of first intervals.'
    _iid_ = GUID('{8FCCB82D-0FAF-4455-9B7F-58EE56C9687C}')
    _idlflags_ = ['oleautomation']
IAgCrdnFirstIntervalsFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Maximum number of intervals.')], HRESULT, 'MaximumNumberOfIntervals',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Maximum number of intervals.')], HRESULT, 'MaximumNumberOfIntervals',
              ( ['in'], c_int, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnFirstIntervalsFilter implementation
##class IAgCrdnFirstIntervalsFilter_Impl(object):
##    def _get(self):
##        'Maximum number of intervals.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Maximum number of intervals.'
##    MaximumNumberOfIntervals = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnVectorPeriapsis(CoClass):
    'Vector from the center of the specified central body to the nearest point of an elliptical orbit created from the motion of the specified point.'
    _reg_clsid_ = GUID('{6E6719C0-3FB3-4CC3-A0BF-9C807E3CB9C3}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVectorPeriapsis(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorPeriapsis'
    _iid_ = GUID('{08756195-06FB-488B-AC72-CE0C5CD31787}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorPeriapsis(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Vector from the center of the specified central body to the nearest point of an elliptical orbit created from the motion of the specified point.'
    _iid_ = GUID('{8230AE2E-44DD-462F-AD5E-E361DE4B9D7B}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorPeriapsis._com_interfaces_ = [_IAgCrdnVectorPeriapsis, IAgCrdnVectorPeriapsis, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

class IAgCrdnEventSignaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Event recorded on specified clock via signal transmission from original time instant recorded on different clock.'
    _iid_ = GUID('{F1050833-737E-46B9-A3EA-6DBD1A83FE61}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventSignaled._methods_ = [
    COMMETHOD(['propget', helpstring('The original time instant.')], HRESULT, 'OriginalTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The original time instant.')], HRESULT, 'OriginalTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The direction of the signal, whether you are Transmitting or Receiving from the BaseClockLocation.')], HRESULT, 'SignalSense',
              ( ['out', 'retval'], POINTER(AgECrdnSignalSense), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The direction of the signal, whether you are Transmitting or Receiving from the BaseClockLocation.')], HRESULT, 'SignalSense',
              ( ['in'], AgECrdnSignalSense, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The base clock location, which is a point from VGT.')], HRESULT, 'BaseClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The base clock location, which is a point from VGT.')], HRESULT, 'BaseClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The target clock location, which is a point from VGT.')], HRESULT, 'TargetClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The target clock location, which is a point from VGT.')], HRESULT, 'TargetClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.')], HRESULT, 'SignalDelay',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSignalDelay)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.')], HRESULT, 'SignalDelay',
              ( ['in'], POINTER(IAgCrdnSignalDelay), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventSignaled implementation
##class IAgCrdnEventSignaled_Impl(object):
##    def _get(self):
##        'The original time instant.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original time instant.'
##    OriginalTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The direction of the signal, whether you are Transmitting or Receiving from the BaseClockLocation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The direction of the signal, whether you are Transmitting or Receiving from the BaseClockLocation.'
##    SignalSense = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The base clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The base clock location, which is a point from VGT.'
##    BaseClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The target clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The target clock location, which is a point from VGT.'
##    TargetClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##    SignalDelay = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnEventIntervalCollectionSignaled(CoClass):
    'Determines what interval list collection is recorded at target clock location by performing signal transmission of original interval list collection between base and target clock locations...'
    _reg_clsid_ = GUID('{95A0D64B-7986-49B7-8733-1341C9B16F15}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnEventIntervalCollectionSignaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Determines what interval list collection is recorded at target clock location by performing signal transmission of original interval list collection between base and target clock locations...'
    _iid_ = GUID('{2843017E-C869-47AD-8925-5A0506FCA9A3}')
    _idlflags_ = ['oleautomation']
AgCrdnEventIntervalCollectionSignaled._com_interfaces_ = [_IAgCrdnEventIntervalCollectionSignaled, IAgCrdnEventIntervalCollectionSignaled, IAgCrdnEventIntervalCollection, IAgCrdn]

class AgCrdnVolumeFromGrid(CoClass):
    'An over time volume interface.'
    _reg_clsid_ = GUID('{0D7CF142-5F3D-4D61-9479-8F59422749BA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVolumeFromGrid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeFromGrid'
    _iid_ = GUID('{9C11661A-9022-4FAD-999D-9CB9AE78829E}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnVolumeFromGrid._com_interfaces_ = [_IAgCrdnVolumeFromGrid, IAgCrdnVolumeFromGrid, IAgCrdnVolume, IAgCrdn]

class _IAgCrdnCalcScalarDataElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCalcScalarDataElement'
    _iid_ = GUID('{6793731D-9F01-45DA-B33B-7BAC84A74683}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnInterp(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents a base class for interpolation definitions.'
    _iid_ = GUID('{FE56D705-F750-4E1A-A44B-DB81B2D7A25F}')
    _idlflags_ = ['oleautomation']
_IAgCrdnCalcScalarDataElement._methods_ = [
    COMMETHOD([dispid(12805), helpstring('Returns the scalar calculation type.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnCalcScalarType), 'pRetVal' )),
    COMMETHOD([dispid(12803), helpstring('Evaluates the scalar calculation at the specified time instant.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12806), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...')], HRESULT, 'QuickEvaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12804), helpstring('Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12807), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...')], HRESULT, 'QuickEvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16109), helpstring('The name of the data provider.'), 'propget'], HRESULT, 'DataProvider',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16110), helpstring('The name of the data element within the data provider.'), 'propget'], HRESULT, 'ElementName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16116), helpstring('A group name the data element is a part of. If the element is not a part of a group, the property will return an empty string.'), 'propget'], HRESULT, 'Group',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16106), helpstring('Specify whether to use Lagrange or Hermite interpolation. See STK help on interpolation.'), 'propget'], HRESULT, 'Interpolation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnInterp)), 'ppRetVal' )),
    COMMETHOD([dispid(16106), helpstring('Specify whether to use Lagrange or Hermite interpolation. See STK help on interpolation.'), 'propput'], HRESULT, 'Interpolation',
              ( ['in'], POINTER(IAgCrdnInterp), 'ppRetVal' )),
    COMMETHOD([dispid(16107), helpstring('Relative tolerance uses a combination of relative and absolute changes in scalar values between samples. Curvature tolerance also uses changes in slope between samples.'), 'propget'], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD([dispid(16107), helpstring('Relative tolerance uses a combination of relative and absolute changes in scalar values between samples. Curvature tolerance also uses changes in slope between samples.'), 'propput'], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD([dispid(16102), helpstring('If set to true, selected data provider is presampled over its entire availability span using sampling method specified in Advanced options...'), 'propget'], HRESULT, 'UseSamples',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16102), helpstring('If set to true, selected data provider is presampled over its entire availability span using sampling method specified in Advanced options...'), 'propput'], HRESULT, 'UseSamples',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(16108), helpstring('Determines if computed samples are saved/loaded, otherwise if using samples they are recomputed on load.'), 'propget'], HRESULT, 'SaveDataOption',
              ( ['out', 'retval'], POINTER(AgECrdnSaveDataOption), 'pRetVal' )),
    COMMETHOD([dispid(16108), helpstring('Determines if computed samples are saved/loaded, otherwise if using samples they are recomputed on load.'), 'propput'], HRESULT, 'SaveDataOption',
              ( ['in'], AgECrdnSaveDataOption, 'pRetVal' )),
    COMMETHOD([dispid(16113), helpstring('Set the data provider and the element name.')], HRESULT, 'Set',
              ( ['in'], BSTR, 'DataProvider' ),
              ( ['in'], BSTR, 'ElementName' )),
    COMMETHOD([dispid(16118), helpstring('Set the data provider name, the element name, and data provider type name.')], HRESULT, 'SetWithGroup',
              ( ['in'], BSTR, 'DataProvider' ),
              ( ['in'], BSTR, 'TypeName' ),
              ( ['in'], BSTR, 'ElementName' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(16119), helpstring('Sets the value to display in a report or graph when the actual value is not a valid real number'), 'propget'], HRESULT, 'InvalidDataIndicator',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16119), helpstring('Sets the value to display in a report or graph when the actual value is not a valid real number'), 'propput'], HRESULT, 'InvalidDataIndicator',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(12808), helpstring('Returns a list of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(12809), helpstring("Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propget'], HRESULT, 'UnitOfMeasure',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(12810), helpstring('Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12811), helpstring('Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12812), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12813), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnCalcScalarDataElement implementation
##class _IAgCrdnCalcScalarDataElement_Impl(object):
##    @property
##    def Type(self):
##        'Returns the scalar calculation type.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant.'
##        #return ppRetVal
##
##    def QuickEvaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.'
##        #return ppRetVal
##
##    def QuickEvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...'
##        #return ppRetVal
##
##    @property
##    def DataProvider(self):
##        'The name of the data provider.'
##        #return pRetVal
##
##    @property
##    def ElementName(self):
##        'The name of the data element within the data provider.'
##        #return pRetVal
##
##    @property
##    def Group(self):
##        'A group name the data element is a part of. If the element is not a part of a group, the property will return an empty string.'
##        #return pRetVal
##
##    def _get(self):
##        'Specify whether to use Lagrange or Hermite interpolation. See STK help on interpolation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Specify whether to use Lagrange or Hermite interpolation. See STK help on interpolation.'
##    Interpolation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Relative tolerance uses a combination of relative and absolute changes in scalar values between samples. Curvature tolerance also uses changes in slope between samples.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Relative tolerance uses a combination of relative and absolute changes in scalar values between samples. Curvature tolerance also uses changes in slope between samples.'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'If set to true, selected data provider is presampled over its entire availability span using sampling method specified in Advanced options...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'If set to true, selected data provider is presampled over its entire availability span using sampling method specified in Advanced options...'
##    UseSamples = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Determines if computed samples are saved/loaded, otherwise if using samples they are recomputed on load.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Determines if computed samples are saved/loaded, otherwise if using samples they are recomputed on load.'
##    SaveDataOption = property(_get, _set, doc = _set.__doc__)
##
##    def Set(self, DataProvider, ElementName):
##        'Set the data provider and the element name.'
##        #return 
##
##    def SetWithGroup(self, DataProvider, TypeName, ElementName):
##        'Set the data provider name, the element name, and data provider type name.'
##        #return 
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def _get(self):
##        'Sets the value to display in a report or graph when the actual value is not a valid real number'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Sets the value to display in a report or graph when the actual value is not a valid real number'
##    InvalidDataIndicator = property(_get, _set, doc = _set.__doc__)
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def GetAvailability(self):
##        'Returns a list of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def UnitOfMeasure(self):
##        "Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def QuickEvaluateArray(self, Times):
##        'Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateArray(self, Times):
##        'Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##

class _IAgCrdnAxesCustomScript(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesCustomScript'
    _iid_ = GUID('{DD00EB00-6326-4346-AD8A-295692E0B1F3}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnAxesCustomScript._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1701), helpstring('Returns a type of the axes object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAxesType), 'pRetVal' )),
    COMMETHOD([dispid(1706), helpstring('Find an angular velocity and orientation in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1707), helpstring('Find an orientation in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1708), helpstring('Returns an object that allows modifying the axes labels.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(2701), helpstring('Specify a reference axes.'), 'propget'], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(2702), helpstring('Can be MATLAB (*.m or *.dll), VB Script (*.vbs) or Perl (*.pl) script file.'), 'propget'], HRESULT, 'Filename',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(2702), helpstring('Can be MATLAB (*.m or *.dll), VB Script (*.vbs) or Perl (*.pl) script file.'), 'propput'], HRESULT, 'Filename',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1709), helpstring('Returns the X axis of the component.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1710), helpstring('Returns the Y axis of the component.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1711), helpstring('Returns the Z axis of the component.'), 'propget'], HRESULT, 'Z',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1712), helpstring('Transforms the input vector from this axes into the output axes.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1713), helpstring("Transforms the input vector and vector's rate from this axes into the output axes.")], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'RateInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAxesCustomScript implementation
##class _IAgCrdnAxesCustomScript_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the axes object.'
##        #return pRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Find an angular velocity and orientation in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Find an orientation in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        'Returns an object that allows modifying the axes labels.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'Can be MATLAB (*.m or *.dll), VB Script (*.vbs) or Perl (*.pl) script file.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Can be MATLAB (*.m or *.dll), VB Script (*.vbs) or Perl (*.pl) script file.'
##    Filename = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    @property
##    def X(self):
##        'Returns the X axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Y(self):
##        'Returns the Y axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Z(self):
##        'Returns the Z axis of the component.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputAxes, VectorInMyAxes):
##        'Transforms the input vector from this axes into the output axes.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputAxes, VectorInMyAxes, RateInMyAxes):
##        "Transforms the input vector and vector's rate from this axes into the output axes."
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnEventSmartEpoch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventSmartEpoch'
    _iid_ = GUID('{54A7C574-9048-4A4A-80DA-265D8C0DD183}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnSmartEpochState'
eCrdnSmartEpochStateExplicit = 0
eCrdnSmartEpochStateImplicit = 3
AgECrdnSmartEpochState = c_int # enum
_IAgCrdnEventSmartEpoch._methods_ = [
    COMMETHOD([dispid(12911), helpstring('Return the type of time instant.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventType), 'pRetVal' )),
    COMMETHOD([dispid(12905), helpstring("Return time instant that corresponds to today's GMT midnight."), 'propget'], HRESULT, 'Today',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12906), helpstring("Return time instant that corresponds to tomorrow's GMT midnight."), 'propget'], HRESULT, 'Tomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12907), helpstring("Return time instant that corresponds to today's GMT noon."), 'propget'], HRESULT, 'NoonToday',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12908), helpstring("Return time instant that corresponds to tomorrow's GMT noon."), 'propget'], HRESULT, 'NoonTomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12909), helpstring('Return computed time instance if it occurs.')], HRESULT, 'FindOccurrence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventFindOccurrenceResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12912), helpstring('Return true if computed time instance occurs before or at specified time, return false otherwise.')], HRESULT, 'OccursBefore',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(24907), helpstring('Represents the time instant if the state is set to explicit.'), 'propget'], HRESULT, 'TimeInstant',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(24904), helpstring('A reference event object used to compute time instant if the state is set to implicit.'), 'propget'], HRESULT, 'ReferenceEvent',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(24903), helpstring('State of the event.'), 'propget'], HRESULT, 'State',
              ( ['out', 'retval'], POINTER(AgECrdnSmartEpochState), 'pRetVal' )),
    COMMETHOD([dispid(24903), helpstring('State of the event.'), 'propput'], HRESULT, 'State',
              ( ['in'], AgECrdnSmartEpochState, 'pRetVal' )),
    COMMETHOD([dispid(24908), helpstring("Sets explicit time instant and the smart epoch's state to Explicit.")], HRESULT, 'SetExplicitTime',
              ( ['in'], VARIANT, 'Epoch' )),
    COMMETHOD([dispid(24909), helpstring("Sets the reference event and the smart epoch's state to Implicit.")], HRESULT, 'SetImplicitTime',
              ( ['in'], POINTER(IAgCrdnEvent), 'EventEpoch' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventSmartEpoch implementation
##class _IAgCrdnEventSmartEpoch_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time instant.'
##        #return pRetVal
##
##    @property
##    def Today(self):
##        "Return time instant that corresponds to today's GMT midnight."
##        #return ppRetVal
##
##    @property
##    def Tomorrow(self):
##        "Return time instant that corresponds to tomorrow's GMT midnight."
##        #return ppRetVal
##
##    @property
##    def NoonToday(self):
##        "Return time instant that corresponds to today's GMT noon."
##        #return ppRetVal
##
##    @property
##    def NoonTomorrow(self):
##        "Return time instant that corresponds to tomorrow's GMT noon."
##        #return ppRetVal
##
##    def FindOccurrence(self):
##        'Return computed time instance if it occurs.'
##        #return ppRetVal
##
##    def OccursBefore(self, Epoch):
##        'Return true if computed time instance occurs before or at specified time, return false otherwise.'
##        #return pRetVal
##
##    @property
##    def TimeInstant(self):
##        'Represents the time instant if the state is set to explicit.'
##        #return pRetVal
##
##    @property
##    def ReferenceEvent(self):
##        'A reference event object used to compute time instant if the state is set to implicit.'
##        #return ppRetVal
##
##    def _get(self):
##        'State of the event.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'State of the event.'
##    State = property(_get, _set, doc = _set.__doc__)
##
##    def SetExplicitTime(self, Epoch):
##        "Sets explicit time instant and the smart epoch's state to Explicit."
##        #return 
##
##    def SetImplicitTime(self, EventEpoch):
##        "Sets the reference event and the smart epoch's state to Implicit."
##        #return 
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnVectorReflection(CoClass):
    'Incident vector reflected using a plane whose normal is the normal vector, scaled by a factor. The selected vector or its opposite can be reflected on just one or on both sides of the plane.'
    _reg_clsid_ = GUID('{E20B7B8E-4FFE-480F-ADD8-4B4E3782FAAC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVectorReflection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorReflection'
    _iid_ = GUID('{15CCD2B4-131E-4742-BCD7-3FB7F6894EB2}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorReflection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A vector (incident vector) reflected using a plane whose normal is the normal vector, scaled by a factor. The selected vector or its opposite can be reflected on just one or on both sides of the plane.'
    _iid_ = GUID('{5997268F-57DB-44DD-84C7-A64297F08243}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorReflection._com_interfaces_ = [_IAgCrdnVectorReflection, IAgCrdnVectorReflection, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

class _IAgCrdnVolumeInview(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeInview'
    _iid_ = GUID('{A69CB73B-0F94-4307-855A-50893AF14723}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnVolumeInview._methods_ = [
    COMMETHOD([dispid(33201), helpstring('A constraint object of the access.'), 'propget'], HRESULT, 'ConstraintObject',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(33201), helpstring('A constraint object of the access.'), 'propput'], HRESULT, 'ConstraintObject',
              ( ['in'], VARIANT, 'pRetVal' )),
    COMMETHOD([dispid(33202), helpstring('Returns Light Time Delay options parameters.'), 'propget'], HRESULT, 'LightTimeDelay',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnLightTimeDelay)), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVolumeInview implementation
##class _IAgCrdnVolumeInview_Impl(object):
##    def _get(self):
##        'A constraint object of the access.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A constraint object of the access.'
##    ConstraintObject = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LightTimeDelay(self):
##        'Returns Light Time Delay options parameters.'
##        #return ppRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnEventIntervalFactory(CoClass):
    'The factory creates event intervals.'
    _reg_clsid_ = GUID('{CA10105B-E7A8-44E8-9530-E48D68A96F6E}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventIntervalFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalFactory'
    _iid_ = GUID('{931BB564-056A-4E4C-83B0-5E80E2B476A5}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventIntervalFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The factory creates event intervals.'
    _iid_ = GUID('{C09F48D8-E8E4-4FAA-B3A0-FE9E4B660A0D}')
    _idlflags_ = ['oleautomation']
AgCrdnEventIntervalFactory._com_interfaces_ = [_IAgCrdnEventIntervalFactory, IAgCrdnEventIntervalFactory]

class AgCrdnVolumeFromTimeSatisfaction(CoClass):
    'An volume from time satisfaction volume interface.'
    _reg_clsid_ = GUID('{85DF8619-0FDC-4B24-A83F-5B7F395CFF40}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVolumeFromTimeSatisfaction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeFromTimeSatisfaction'
    _iid_ = GUID('{520120B0-55AB-4980-8C05-5D6CED7C5B71}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnVolumeFromTimeSatisfaction._com_interfaces_ = [_IAgCrdnVolumeFromTimeSatisfaction, IAgCrdnVolumeFromTimeSatisfaction, IAgCrdnVolume, IAgCrdn]

class _IAgCrdnVectorTwoPlanesIntersection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorTwoPlanesIntersection'
    _iid_ = GUID('{4503FA69-BAB2-4C17-ABF0-EB75F4F4D090}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPlaneRefTo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents a reference to a VGT plane.'
    _iid_ = GUID('{9C321218-16DA-4D15-BEA8-56A2245B7E7D}')
    _idlflags_ = ['oleautomation']
_IAgCrdnVectorTwoPlanesIntersection._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6701), helpstring('Specify the first of the two planes which intersection defines the vector.'), 'propget'], HRESULT, 'PlaneA',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(6702), helpstring('Specify the second of the two planes which intersection defines the vector.'), 'propget'], HRESULT, 'PlaneB',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorTwoPlanesIntersection implementation
##class _IAgCrdnVectorTwoPlanesIntersection_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def PlaneA(self):
##        'Specify the first of the two planes which intersection defines the vector.'
##        #return ppRetVal
##
##    @property
##    def PlaneB(self):
##        'Specify the second of the two planes which intersection defines the vector.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnEventArrayExtrema(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Determines times of local minimum and/or maximum of specified scalar calculation. Determination is performed within interval list using Sampling and Convergence parameters.'
    _iid_ = GUID('{0593F5F4-2714-494D-AD0B-C82FE134922E}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventArrayExtrema._methods_ = [
    COMMETHOD(['propget', helpstring('The extremum type (either minimum or maximum) from the time instant.')], HRESULT, 'ExtremumType',
              ( ['out', 'retval'], POINTER(AgECrdnExtremumConstants), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The extremum type (either minimum or maximum) from the time instant.')], HRESULT, 'ExtremumType',
              ( ['in'], AgECrdnExtremumConstants, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Indicates whether to perform local or global search. The default is false.')], HRESULT, 'IsGlobal',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Indicates whether to perform local or global search. The default is false.')], HRESULT, 'IsGlobal',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The scalar calculation.')], HRESULT, 'Calculation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The scalar calculation.')], HRESULT, 'Calculation',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A custom interval list or a single interval. It is by default set to overall availability of host object. This determines time limits within which global minimum or maximum is sought.')], HRESULT, 'CustomTimeLimits',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A custom interval list or a single interval. It is by default set to overall availability of host object. This determines time limits within which global minimum or maximum is sought.')], HRESULT, 'CustomTimeLimits',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Indicate whether to use specified custom interval list (see CustomTimeLimits).')], HRESULT, 'UseCustomTimeLimits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Indicate whether to use specified custom interval list (see CustomTimeLimits).')], HRESULT, 'UseCustomTimeLimits',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether computed time of extrema is saved/loaded, otherwise it is recomputed on load if necessary.')], HRESULT, 'SaveDataOption',
              ( ['out', 'retval'], POINTER(AgECrdnSaveDataOption), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether computed time of extrema is saved/loaded, otherwise it is recomputed on load if necessary.')], HRESULT, 'SaveDataOption',
              ( ['in'], AgECrdnSaveDataOption, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The Convergence definition, which uses time tolerance to determine when time of extremum is found.')], HRESULT, 'Convergence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConverge)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The Convergence definition, which uses time tolerance to determine when time of extremum is found.')], HRESULT, 'Convergence',
              ( ['in'], POINTER(IAgCrdnConverge), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventArrayExtrema implementation
##class IAgCrdnEventArrayExtrema_Impl(object):
##    def _get(self):
##        'The extremum type (either minimum or maximum) from the time instant.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The extremum type (either minimum or maximum) from the time instant.'
##    ExtremumType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Indicates whether to perform local or global search. The default is false.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Indicates whether to perform local or global search. The default is false.'
##    IsGlobal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The scalar calculation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The scalar calculation.'
##    Calculation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A custom interval list or a single interval. It is by default set to overall availability of host object. This determines time limits within which global minimum or maximum is sought.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A custom interval list or a single interval. It is by default set to overall availability of host object. This determines time limits within which global minimum or maximum is sought.'
##    CustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Indicate whether to use specified custom interval list (see CustomTimeLimits).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Indicate whether to use specified custom interval list (see CustomTimeLimits).'
##    UseCustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether computed time of extrema is saved/loaded, otherwise it is recomputed on load if necessary.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether computed time of extrema is saved/loaded, otherwise it is recomputed on load if necessary.'
##    SaveDataOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##    Convergence = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnPointGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Access or create VGT points associated with an object or a central body.'
    _iid_ = GUID('{C37A21E9-3889-4755-BCB0-B61E0D26A494}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
class IAgCrdnPointFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A Factory object to create points.'
    _iid_ = GUID('{297EBA15-4759-413C-BC71-CBADD3D2188A}')
    _idlflags_ = ['oleautomation']
class IAgCrdnPointCommonTasks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Provides methods to create non-persistent VGT point components. Non-persistent components do not have names, do not get saved/loaded and are not shown in the VGT browser.'
    _iid_ = GUID('{342624B6-CE5F-4591-8CDF-66925F1175E1}')
    _idlflags_ = ['oleautomation']
IAgCrdnPointGroup._methods_ = [
    COMMETHOD([dispid(9001), helpstring('Removes a specified point by name.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'PointName' )),
    COMMETHOD([dispid(9002), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(9003), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the group.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9005), helpstring('Returns a Factory object used to create custom points.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns a point by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([dispid(9008), helpstring('Provides access to common tasks that allow users quickly carry out tasks such as creating known point types, etc.'), 'propget'], HRESULT, 'CommonTasks',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointCommonTasks)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPointGroup implementation
##class IAgCrdnPointGroup_Impl(object):
##    def Remove(self, PointName):
##        'Removes a specified point by name.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the group.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a Factory object used to create custom points.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns a point by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##
##    @property
##    def CommonTasks(self):
##        'Provides access to common tasks that allow users quickly carry out tasks such as creating known point types, etc.'
##        #return ppRetVal
##

class AgCrdnVectorDirectionToStar(CoClass):
    'Defined with respect to a star object. For a star object to be available, you must first create one.'
    _reg_clsid_ = GUID('{D835B323-0085-43DC-956C-B4AB3FBABB26}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnVectorDirectionToStar(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Defined with respect to a star object. For a star object to be available, you must first create one.'
    _iid_ = GUID('{9F5CB9A3-3304-4D66-A2C3-3512F2E0DCDB}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorDirectionToStar._com_interfaces_ = [_IAgCrdnVectorDirectionToStar, IAgCrdnVectorDirectionToStar, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

class IAgCrdnGapsFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The filter merges intervals unless they are separated by gaps of at least/most certain duration.'
    _iid_ = GUID('{983ABDBD-BC24-461A-B6CB-03D628A52CA2}')
    _idlflags_ = ['oleautomation']
IAgCrdnGapsFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Choose a duration type (at least/at most).')], HRESULT, 'DurationKind',
              ( ['out', 'retval'], POINTER(AgECrdnIntervalDurationKind), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Choose a duration type (at least/at most).')], HRESULT, 'DurationKind',
              ( ['in'], AgECrdnIntervalDurationKind, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Duration of the gap.')], HRESULT, 'GapDuration',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Duration of the gap.')], HRESULT, 'GapDuration',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnGapsFilter implementation
##class IAgCrdnGapsFilter_Impl(object):
##    def _get(self):
##        'Choose a duration type (at least/at most).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Choose a duration type (at least/at most).'
##    DurationKind = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Duration of the gap.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Duration of the gap.'
##    GapDuration = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnEventIntervalFixed(CoClass):
    'Interval defined between two explicitly specified start and stop times. Stop date/time is required to be at or after start.'
    _reg_clsid_ = GUID('{178B0661-8EAF-4C79-80BE-012171D73704}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventIntervalFixed(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalFixed'
    _iid_ = GUID('{B650978B-229B-49A0-9F40-BD54103D61AA}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventIntervalFixed(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Interval defined between two explicitly specified start and stop times. Stop date/time is required to be at or after start.'
    _iid_ = GUID('{BCAFE1B0-724A-43E4-9FF9-EFD7D1E01A91}')
    _idlflags_ = ['oleautomation']
AgCrdnEventIntervalFixed._com_interfaces_ = [_IAgCrdnEventIntervalFixed, IAgCrdnEventIntervalFixed, IAgCrdnEventInterval, IAgCrdn]

class AgCrdnVolumeGrid(CoClass):
    'A volume grid interface. The methods and properties of the interface provide Volumetric Grid functions.'
    _reg_clsid_ = GUID('{4D796AAC-7CE9-453C-B1E7-2B5E0C23BEFC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVolumeGrid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeGrid'
    _iid_ = GUID('{A1B09DEB-3317-4693-AE28-B4F3E075006E}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnVolumeGrid._com_interfaces_ = [_IAgCrdnVolumeGrid, IAgCrdnVolumeGrid, IAgCrdn]

class _IAgCrdnEventIntervalSignaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalSignaled'
    _iid_ = GUID('{404BA9C6-75DF-453B-8D1C-62253F555B09}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnEventIntervalSignaled._methods_ = [
    COMMETHOD([dispid(13411), helpstring('Return the type of interval.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalType), 'pRetVal' )),
    COMMETHOD([dispid(13404), helpstring('The start description.'), 'propget'], HRESULT, 'LabelStartDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13405), helpstring('The stop description.'), 'propget'], HRESULT, 'LabelStopDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13406), helpstring('A label associated with the interval start.'), 'propget'], HRESULT, 'LabelStart',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13407), helpstring('A label associated with the interval stop.'), 'propget'], HRESULT, 'LabelStop',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13408), helpstring('Return computed interval if it exists.')], HRESULT, 'FindInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13409), helpstring('Determine if specified time falls within computed interval if it exists.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(15001), helpstring('The original interval.'), 'propget'], HRESULT, 'OriginalInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(15001), helpstring('The original interval.'), 'propput'], HRESULT, 'OriginalInterval',
              ( ['in'], POINTER(IAgCrdnEventInterval), 'ppRetVal' )),
    COMMETHOD([dispid(15010), helpstring('The direction of the signal, whether you are Transmitting or Receiving from the BaseClockLocation.'), 'propget'], HRESULT, 'SignalSense',
              ( ['out', 'retval'], POINTER(AgECrdnSignalSense), 'pRetVal' )),
    COMMETHOD([dispid(15010), helpstring('The direction of the signal, whether you are Transmitting or Receiving from the BaseClockLocation.'), 'propput'], HRESULT, 'SignalSense',
              ( ['in'], AgECrdnSignalSense, 'pRetVal' )),
    COMMETHOD([dispid(15008), helpstring('The base clock location, which is a point from VGT.'), 'propget'], HRESULT, 'BaseClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(15008), helpstring('The base clock location, which is a point from VGT.'), 'propput'], HRESULT, 'BaseClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(15009), helpstring('The target clock location, which is a point from VGT.'), 'propget'], HRESULT, 'TargetClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(15009), helpstring('The target clock location, which is a point from VGT.'), 'propput'], HRESULT, 'TargetClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(15006), helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'), 'propget'], HRESULT, 'SignalDelay',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSignalDelay)), 'ppRetVal' )),
    COMMETHOD([dispid(15006), helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'), 'propput'], HRESULT, 'SignalDelay',
              ( ['in'], POINTER(IAgCrdnSignalDelay), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalSignaled implementation
##class _IAgCrdnEventIntervalSignaled_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval.'
##        #return pRetVal
##
##    @property
##    def LabelStartDescription(self):
##        'The start description.'
##        #return pRetVal
##
##    @property
##    def LabelStopDescription(self):
##        'The stop description.'
##        #return pRetVal
##
##    @property
##    def LabelStart(self):
##        'A label associated with the interval start.'
##        #return pRetVal
##
##    @property
##    def LabelStop(self):
##        'A label associated with the interval stop.'
##        #return pRetVal
##
##    def FindInterval(self):
##        'Return computed interval if it exists.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval if it exists.'
##        #return pRetVal
##
##    def _get(self):
##        'The original interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original interval.'
##    OriginalInterval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The direction of the signal, whether you are Transmitting or Receiving from the BaseClockLocation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The direction of the signal, whether you are Transmitting or Receiving from the BaseClockLocation.'
##    SignalSense = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The base clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The base clock location, which is a point from VGT.'
##    BaseClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The target clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The target clock location, which is a point from VGT.'
##    TargetClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##    SignalDelay = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnVectorFixedAtTimeInstant(CoClass):
    'Vector fixed relative to reference axes based on another vector evaluated at specified time instant.'
    _reg_clsid_ = GUID('{9DA2BBA3-811B-4A65-8974-CCE81E7698BF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVectorFixedAtTimeInstant(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorFixedAtTimeInstant'
    _iid_ = GUID('{4145DB79-5240-4D23-AA51-54BCA4B82DB8}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorFixedAtTimeInstant(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Vector fixed relative to reference axes based on another vector evaluated at specified time instant.'
    _iid_ = GUID('{F4C852D0-FA44-4400-957E-94AF113DF4D1}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorFixedAtTimeInstant._com_interfaces_ = [_IAgCrdnVectorFixedAtTimeInstant, IAgCrdnVectorFixedAtTimeInstant, IAgCrdn, IAgCrdnTimeProperties, IAgCrdnVector]


# values for enumeration 'AgECrdnPointType'
eCrdnPointTypeUnknown = -1
eCrdnPointTypeBPlane = 0
eCrdnPointTypeGrazing = 1
eCrdnPointTypeCovarianceGrazing = 2
eCrdnPointTypeFromFile = 3
eCrdnPointTypeFixedInSystem = 4
eCrdnPointTypeGlint = 5
eCrdnPointTypePlaneIntersection = 6
eCrdnPointTypeModelAttachment = 7
eCrdnPointTypePlaneProjection = 8
eCrdnPointTypeOnSurface = 9
eCrdnPointTypeLagrangeLibration = 10
eCrdnPointTypeTemplate = 11
eCrdnPointTypeCentralBodyIntersect = 12
eCrdnPointTypeAtTimeInstant = 13
eCrdnPointTypePlugin = 14
eCrdnPointTypeFile = 3
eCrdnPointTypeFixedOnCentralBody = 15
AgECrdnPointType = c_int # enum
class IAgCrdnPointLocateInSystemWithRateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnPoint.LocateInSystemWithRate method.'
    _iid_ = GUID('{45EC8D0C-93CD-4A11-A7C2-E25E80398CB3}')
    _idlflags_ = ['oleautomation']
_IAgCrdnPointGrazing._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1801), helpstring('Returns a type of the point object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([dispid(1802), helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1803), helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(4701), helpstring('Specify a central body.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4702), helpstring('Specify a reference point which will serve as the starting location for the line along which the grazing point will be computed.'), 'propget'], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4703), helpstring('Specify a direction vector to be used in conjunction with the position vector from the selected central body to the reference point to define a plane in which the line will lie.'), 'propget'], HRESULT, 'DirectionVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4704), helpstring('The point of closest approach to the central body surface occurs at the specified altitude.'), 'propget'], HRESULT, 'Altitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(4704), helpstring('The point of closest approach to the central body surface occurs at the specified altitude.'), 'propput'], HRESULT, 'Altitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPointGrazing implementation
##class _IAgCrdnPointGrazing_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Specify a reference point which will serve as the starting location for the line along which the grazing point will be computed.'
##        #return ppRetVal
##
##    @property
##    def DirectionVector(self):
##        'Specify a direction vector to be used in conjunction with the position vector from the selected central body to the reference point to define a plane in which the line will lie.'
##        #return ppRetVal
##
##    def _get(self):
##        'The point of closest approach to the central body surface occurs at the specified altitude.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The point of closest approach to the central body surface occurs at the specified altitude.'
##    Altitude = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnEventIntervalCollection._methods_ = [
    COMMETHOD(['propget', helpstring('Return the type of collection of interval lists.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalCollectionType), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the labels associated with the interval lists in the collection.')], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Return computed collection of interval lists.')], HRESULT, 'FindIntervalCollection',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalsVectorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Determine if specified time falls within any of the computed interval lists in the collection.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollectionOccurredResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalCollection implementation
##class IAgCrdnEventIntervalCollection_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of collection of interval lists.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the labels associated with the interval lists in the collection.'
##        #return ppRetVal
##
##    def FindIntervalCollection(self):
##        'Return computed collection of interval lists.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within any of the computed interval lists in the collection.'
##        #return ppRetVal
##

class AgCrdnEventIntervalFixedDuration(CoClass):
    'Interval of fixed duration specified using start and stop offsets relative to specified reference time instant.'
    _reg_clsid_ = GUID('{D35699AB-8974-48D9-8969-88ABBF42EB49}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventIntervalFixedDuration(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalFixedDuration'
    _iid_ = GUID('{9739B28E-E67E-4995-9383-D89F53A57D92}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventIntervalFixedDuration(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Interval of fixed duration specified using start and stop offsets relative to specified reference time instant.'
    _iid_ = GUID('{DF16D0F8-9CAA-4B58-992E-08ED9871EEDF}')
    _idlflags_ = ['oleautomation']
AgCrdnEventIntervalFixedDuration._com_interfaces_ = [_IAgCrdnEventIntervalFixedDuration, IAgCrdnEventIntervalFixedDuration, IAgCrdnEventInterval, IAgCrdn]

class AgCrdnVolumeGridBearingAlt(CoClass):
    'A volume grid bearing alt (Surface Bearing) interface.'
    _reg_clsid_ = GUID('{AD047811-E685-4318-8A7D-92D40BEA5761}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVolumeGridBearingAlt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeGridBearingAlt'
    _iid_ = GUID('{5CFB81ED-5057-45F0-9AAE-448A9348C6F0}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnVolumeGridBearingAlt._com_interfaces_ = [_IAgCrdnVolumeGridBearingAlt, IAgCrdnVolumeGridBearingAlt, IAgCrdnVolumeGrid, IAgCrdn]

class IAgCrdnAxesFixedAtEpoch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Axes based on another set fixed at a specified epoch.'
    _iid_ = GUID('{E0DCEE9C-7A5B-4B11-9F3A-DB252AF8064D}')
    _idlflags_ = ['oleautomation']
IAgCrdnAxesFixedAtEpoch._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a source axes.')], HRESULT, 'SourceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference axes.')], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify an epoch.')], HRESULT, 'Epoch',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify an epoch.')], HRESULT, 'Epoch',
              ( ['in'], VARIANT, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAxesFixedAtEpoch implementation
##class IAgCrdnAxesFixedAtEpoch_Impl(object):
##    @property
##    def SourceAxes(self):
##        'Specify a source axes.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify an epoch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an epoch.'
##    Epoch = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnVectorConing(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Vector created by revolving the Reference vector around the About vector with the specified rate.'
    _iid_ = GUID('{ABF7C2FA-53CA-4FC3-B6E4-C7903A27CD7F}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgECrdnSweepMode'
eCrdnSweepModeBidirectional = 1
eCrdnSweepModeUnidirectional = 2
AgECrdnSweepMode = c_int # enum
IAgCrdnVectorConing._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a vector around which the the reference vector is revolved.')], HRESULT, 'AboutVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference vector.')], HRESULT, 'ReferenceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a start angle.')], HRESULT, 'StartClockAngle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a start angle.')], HRESULT, 'StartClockAngle',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a stop angle.')], HRESULT, 'StopClockAngle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a stop angle.')], HRESULT, 'StopClockAngle',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify an epoch at which the coning vector is aligned with the reference vector.')], HRESULT, 'StartEpoch',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify an epoch at which the coning vector is aligned with the reference vector.')], HRESULT, 'StartEpoch',
              ( ['in'], VARIANT, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a rotation rate.')], HRESULT, 'ClockAngleRate',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a rotation rate.')], HRESULT, 'ClockAngleRate',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify either unidirectional or bidirectional mode.')], HRESULT, 'Mode',
              ( ['out', 'retval'], POINTER(AgECrdnSweepMode), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify either unidirectional or bidirectional mode.')], HRESULT, 'Mode',
              ( ['in'], AgECrdnSweepMode, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorConing implementation
##class IAgCrdnVectorConing_Impl(object):
##    @property
##    def AboutVector(self):
##        'Specify a vector around which the the reference vector is revolved.'
##        #return ppRetVal
##
##    @property
##    def ReferenceVector(self):
##        'Specify a reference vector.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a start angle.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a start angle.'
##    StartClockAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a stop angle.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a stop angle.'
##    StopClockAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify an epoch at which the coning vector is aligned with the reference vector.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an epoch at which the coning vector is aligned with the reference vector.'
##    StartEpoch = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a rotation rate.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a rotation rate.'
##    ClockAngleRate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify either unidirectional or bidirectional mode.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify either unidirectional or bidirectional mode.'
##    Mode = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnEventEpoch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventEpoch'
    _iid_ = GUID('{A446D8F3-4D1D-4025-AC82-9C4625C1C9E9}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnEventEpoch._methods_ = [
    COMMETHOD([dispid(12911), helpstring('Return the type of time instant.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventType), 'pRetVal' )),
    COMMETHOD([dispid(12905), helpstring("Return time instant that corresponds to today's GMT midnight."), 'propget'], HRESULT, 'Today',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12906), helpstring("Return time instant that corresponds to tomorrow's GMT midnight."), 'propget'], HRESULT, 'Tomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12907), helpstring("Return time instant that corresponds to today's GMT noon."), 'propget'], HRESULT, 'NoonToday',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12908), helpstring("Return time instant that corresponds to tomorrow's GMT noon."), 'propget'], HRESULT, 'NoonTomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12909), helpstring('Return computed time instance if it occurs.')], HRESULT, 'FindOccurrence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventFindOccurrenceResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12912), helpstring('Return true if computed time instance occurs before or at specified time, return false otherwise.')], HRESULT, 'OccursBefore',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(13101), helpstring('An explicit date/time, set using any STK date format.'), 'propget'], HRESULT, 'Epoch',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(13101), helpstring('An explicit date/time, set using any STK date format.'), 'propput'], HRESULT, 'Epoch',
              ( ['in'], VARIANT, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventEpoch implementation
##class _IAgCrdnEventEpoch_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time instant.'
##        #return pRetVal
##
##    @property
##    def Today(self):
##        "Return time instant that corresponds to today's GMT midnight."
##        #return ppRetVal
##
##    @property
##    def Tomorrow(self):
##        "Return time instant that corresponds to tomorrow's GMT midnight."
##        #return ppRetVal
##
##    @property
##    def NoonToday(self):
##        "Return time instant that corresponds to today's GMT noon."
##        #return ppRetVal
##
##    @property
##    def NoonTomorrow(self):
##        "Return time instant that corresponds to tomorrow's GMT noon."
##        #return ppRetVal
##
##    def FindOccurrence(self):
##        'Return computed time instance if it occurs.'
##        #return ppRetVal
##
##    def OccursBefore(self, Epoch):
##        'Return true if computed time instance occurs before or at specified time, return false otherwise.'
##        #return pRetVal
##
##    def _get(self):
##        'An explicit date/time, set using any STK date format.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'An explicit date/time, set using any STK date format.'
##    Epoch = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnParameterSetGroundTrajectory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Ground trajectory parameter set contains various representations of trajectory of a point relative to central body reference shape.'
    _iid_ = GUID('{C08238EA-F46B-45C6-84CB-362F3EE55AD0}')
    _idlflags_ = ['oleautomation']
IAgCrdnParameterSetGroundTrajectory._methods_ = [
    COMMETHOD(['propget', helpstring('Get the point for which ground trajectory representations are computed.')], HRESULT, 'Location',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the point for which ground trajectory representations are computed.')], HRESULT, 'Location',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Get the central body relative to which ground trajectory representations are computed. Both the central body reference shape and its CBF (central body centered fixed) system are used by this parameter set.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the central body relative to which ground trajectory representations are computed. Both the central body reference shape and its CBF (central body centered fixed) system are used by this parameter set.')], HRESULT, 'CentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnParameterSetGroundTrajectory implementation
##class IAgCrdnParameterSetGroundTrajectory_Impl(object):
##    def _get(self):
##        'Get the point for which ground trajectory representations are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the point for which ground trajectory representations are computed.'
##    Location = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the central body relative to which ground trajectory representations are computed. Both the central body reference shape and its CBF (central body centered fixed) system are used by this parameter set.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the central body relative to which ground trajectory representations are computed. Both the central body reference shape and its CBF (central body centered fixed) system are used by this parameter set.'
##    CentralBody = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AgECrdnPointBPlaneType'
eCrdnPointBPlaneAsymptote = 1
eCrdnPointBPlaneATwoBody = 2
AgECrdnPointBPlaneType = c_int # enum

# values for enumeration 'AgECrdnDirectionType'
eCrdnDirectionIncomingAsymptote = 1
eCrdnDirectionOutgoingAsymptote = 2
AgECrdnDirectionType = c_int # enum
_IAgCrdnPointBPlane._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1801), helpstring('Returns a type of the point object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([dispid(1802), helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1803), helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(4401), helpstring('Specify a target central body.'), 'propget'], HRESULT, 'TargetBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4402), helpstring('Specify a trajectory point.'), 'propget'], HRESULT, 'Trajectory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4403), helpstring('Specify a point type.'), 'propget'], HRESULT, 'PointType',
              ( ['out', 'retval'], POINTER(AgECrdnPointBPlaneType), 'pRetVal' )),
    COMMETHOD([dispid(4403), helpstring('Specify a point type.'), 'propput'], HRESULT, 'PointType',
              ( ['in'], AgECrdnPointBPlaneType, 'pRetVal' )),
    COMMETHOD([dispid(4404), helpstring('Specify a direction (incoming or outgoing).'), 'propget'], HRESULT, 'Direction',
              ( ['out', 'retval'], POINTER(AgECrdnDirectionType), 'pRetVal' )),
    COMMETHOD([dispid(4404), helpstring('Specify a direction (incoming or outgoing).'), 'propput'], HRESULT, 'Direction',
              ( ['in'], AgECrdnDirectionType, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPointBPlane implementation
##class _IAgCrdnPointBPlane_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##
##    @property
##    def TargetBody(self):
##        'Specify a target central body.'
##        #return ppRetVal
##
##    @property
##    def Trajectory(self):
##        'Specify a trajectory point.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a point type.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a point type.'
##    PointType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a direction (incoming or outgoing).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a direction (incoming or outgoing).'
##    Direction = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnSystemAssembled._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a point of origin.')], HRESULT, 'OriginPoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference axes.')], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnSystemAssembled implementation
##class IAgCrdnSystemAssembled_Impl(object):
##    @property
##    def OriginPoint(self):
##        'Specify a point of origin.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##

class _IAgCrdnAxesModelAttach(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesModelAttach'
    _iid_ = GUID('{56F94105-D5D2-47B1-BD82-EEB3D7AF65EA}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnAxesModelAttach._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1701), helpstring('Returns a type of the axes object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAxesType), 'pRetVal' )),
    COMMETHOD([dispid(1706), helpstring('Find an angular velocity and orientation in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1707), helpstring('Find an orientation in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1708), helpstring('Returns an object that allows modifying the axes labels.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(3001), helpstring('Specify a pointable element of the 3D model associated with the object.'), 'propget'], HRESULT, 'PointableElementName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(3001), helpstring('Specify a pointable element of the 3D model associated with the object.'), 'propput'], HRESULT, 'PointableElementName',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1709), helpstring('Returns the X axis of the component.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1710), helpstring('Returns the Y axis of the component.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1711), helpstring('Returns the Z axis of the component.'), 'propget'], HRESULT, 'Z',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1712), helpstring('Transforms the input vector from this axes into the output axes.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1713), helpstring("Transforms the input vector and vector's rate from this axes into the output axes.")], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'RateInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAxesModelAttach implementation
##class _IAgCrdnAxesModelAttach_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the axes object.'
##        #return pRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Find an angular velocity and orientation in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Find an orientation in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        'Returns an object that allows modifying the axes labels.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a pointable element of the 3D model associated with the object.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a pointable element of the 3D model associated with the object.'
##    PointableElementName = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    @property
##    def X(self):
##        'Returns the X axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Y(self):
##        'Returns the Y axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Z(self):
##        'Returns the Z axis of the component.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputAxes, VectorInMyAxes):
##        'Transforms the input vector from this axes into the output axes.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputAxes, VectorInMyAxes, RateInMyAxes):
##        "Transforms the input vector and vector's rate from this axes into the output axes."
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnVectorLinearCombination(CoClass):
    'Linear combination of two input vectors.'
    _reg_clsid_ = GUID('{23EB9CC8-F688-4858-838D-46DB3C1B6704}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVectorLinearCombination(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorLinearCombination'
    _iid_ = GUID('{291BB6FD-FB56-4FB8-8E59-05BCD45C9B50}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorLinearCombination(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Linear combination of two input vectors.'
    _iid_ = GUID('{31609BFF-FB51-44F0-BB0D-F3B91E0DB1FD}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorLinearCombination._com_interfaces_ = [_IAgCrdnVectorLinearCombination, IAgCrdnVectorLinearCombination, IAgCrdn, IAgCrdnTimeProperties, IAgCrdnVector]

IAgCrdnVolumeGrid._methods_ = [
]
################################################################
## code template for IAgCrdnVolumeGrid implementation
##class IAgCrdnVolumeGrid_Impl(object):

class IAgCrdnEventIntervalListFile(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Interval list loaded from specified interval file - ASCII file with .int extension. See STK help.'
    _iid_ = GUID('{CDD73F4B-2DFC-4369-92D1-8E8DA2E530DF}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventIntervalListFile._methods_ = [
    COMMETHOD(['propget', helpstring('The path of an external file that contains the time interval list.')], HRESULT, 'Filename',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The path of an external file that contains the time interval list.')], HRESULT, 'Filename',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([helpstring('Reloads the interval list file.')], HRESULT, 'Reload'),
    COMMETHOD([helpstring('Computes the interval list file span.')], HRESULT, 'GetFileSpan',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalListFile implementation
##class IAgCrdnEventIntervalListFile_Impl(object):
##    def _get(self):
##        'The path of an external file that contains the time interval list.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The path of an external file that contains the time interval list.'
##    Filename = property(_get, _set, doc = _set.__doc__)
##
##    def Reload(self):
##        'Reloads the interval list file.'
##        #return 
##
##    def GetFileSpan(self):
##        'Computes the interval list file span.'
##        #return ppRetVal
##

class AgCrdnEventIntervalFromIntervalList(CoClass):
    'Interval created from specified interval list by using one of several selection methods.'
    _reg_clsid_ = GUID('{DB1B5B7C-F282-47EE-87EE-D86BAA59F6C9}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventIntervalFromIntervalList(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalFromIntervalList'
    _iid_ = GUID('{17FFB697-50CA-418F-B6FD-2C6855D1D1CD}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventIntervalFromIntervalList(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Interval created from specified interval list by using one of several selection methods.'
    _iid_ = GUID('{C10D6D58-A095-45A4-B72E-D9DD35D06E6B}')
    _idlflags_ = ['oleautomation']
AgCrdnEventIntervalFromIntervalList._com_interfaces_ = [_IAgCrdnEventIntervalFromIntervalList, IAgCrdnEventIntervalFromIntervalList, IAgCrdnEventInterval, IAgCrdn]

class AgCrdnVolumeGridCartesian(CoClass):
    'A volume grid Cartesian interface.'
    _reg_clsid_ = GUID('{651A9954-BEC2-4C48-A93B-8B7E3DD3064E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnVolumeGridCartesian(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A volume grid Cartesian interface.'
    _iid_ = GUID('{E5212616-3F37-4C40-9E0B-F925F199D4DE}')
    _idlflags_ = ['oleautomation']
AgCrdnVolumeGridCartesian._com_interfaces_ = [_IAgCrdnVolumeGridCartesian, IAgCrdnVolumeGridCartesian, IAgCrdnVolumeGrid, IAgCrdn]

class IAgCrdnPlaneGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Represents a single entry point to manipulate VGT Planes associated with an object.'
    _iid_ = GUID('{7763447A-FA3E-4735-BB9B-BD65364AD155}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
IAgCrdnPlaneGroup._methods_ = [
    COMMETHOD([dispid(9301), helpstring('Removes a specified Plane.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'PlaneName' )),
    COMMETHOD([dispid(9302), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(9303), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the group.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9305), helpstring('Returns a Factory object used to create custom planes.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns an Plane by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlane)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPlaneGroup implementation
##class IAgCrdnPlaneGroup_Impl(object):
##    def Remove(self, PlaneName):
##        'Removes a specified Plane.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the group.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a Factory object used to create custom planes.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns an Plane by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

class _IAgCrdnVectorCustomScript(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorCustomScript'
    _iid_ = GUID('{95039913-EAFE-4419-A2D0-207E99107A9C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnVectorCustomScript._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6401), helpstring('Specify a reference axes.'), 'propget'], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(6402), helpstring('Specify a script file.'), 'propget'], HRESULT, 'ScriptFile',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(6402), helpstring('Specify a script file.'), 'propput'], HRESULT, 'ScriptFile',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(6403), helpstring('Specify an initialization script file (optional). The initialization script is run once, at the beginning of the calculation.'), 'propget'], HRESULT, 'InitializationScriptFile',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(6403), helpstring('Specify an initialization script file (optional). The initialization script is run once, at the beginning of the calculation.'), 'propput'], HRESULT, 'InitializationScriptFile',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorCustomScript implementation
##class _IAgCrdnVectorCustomScript_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a script file.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a script file.'
##    ScriptFile = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify an initialization script file (optional). The initialization script is run once, at the beginning of the calculation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an initialization script file (optional). The initialization script is run once, at the beginning of the calculation.'
##    InitializationScriptFile = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnVectorProjectAlongVector(CoClass):
    'A projection of a source vector in the direction of another vector.'
    _reg_clsid_ = GUID('{B50A22BA-9CE0-404C-9C09-AEC5AA63094F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVectorProjectAlongVector(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorProjectAlongVector'
    _iid_ = GUID('{1CD36FD6-90EC-4E11-B2CD-E94B522CDF1F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorProjectAlongVector(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A projection of a source vector in the direction of another vector.'
    _iid_ = GUID('{858B354B-829F-4E6C-A190-00BC3D029D1A}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorProjectAlongVector._com_interfaces_ = [_IAgCrdnVectorProjectAlongVector, IAgCrdnVectorProjectAlongVector, IAgCrdn, IAgCrdnTimeProperties, IAgCrdnVector]

class _IAgCrdnCalcScalarSurfaceDistanceBetweenPoints(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCalcScalarSurfaceDistanceBetweenPoints'
    _iid_ = GUID('{7B27E927-748D-4AC8-831E-61E29E955BAB}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnCalcScalarSurfaceDistanceBetweenPoints._methods_ = [
    COMMETHOD([dispid(2401), helpstring('Returns the scalar calculation type.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnCalcScalarType), 'pRetVal' )),
    COMMETHOD([dispid(2402), helpstring('Evaluates the scalar calculation at the specified time instant.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2403), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representi...')], HRESULT, 'QuickEvaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(2404), helpstring('Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2405), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one repr...')], HRESULT, 'QuickEvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(3901), helpstring('Starting point on the central body ellipsoid (or projection of point at altitude onto the ellipsoid).'), 'propget'], HRESULT, 'Point1',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(3901), helpstring('Starting point on the central body ellipsoid (or projection of point at altitude onto the ellipsoid).'), 'propput'], HRESULT, 'Point1',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(3902), helpstring('Terminating point on the central body ellipsoid (or projection of point at altitude onto the ellipsoid).'), 'propget'], HRESULT, 'Point2',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(3902), helpstring('Terminating point on the central body ellipsoid (or projection of point at altitude onto the ellipsoid).'), 'propput'], HRESULT, 'Point2',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(3903), helpstring('Central body on which the surface distance between points is to be calculated.'), 'propget'], HRESULT, 'SurfaceCentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(3903), helpstring('Central body on which the surface distance between points is to be calculated.'), 'propput'], HRESULT, 'SurfaceCentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(3904), helpstring('Time step used in numerical evaluation of scalar calculation time rate of change (derivatives using central differencing).'), 'propget'], HRESULT, 'DifferencingTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(3904), helpstring('Time step used in numerical evaluation of scalar calculation time rate of change (derivatives using central differencing).'), 'propput'], HRESULT, 'DifferencingTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(2501), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(2502), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(2502), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(2503), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(2504), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(2505), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(2506), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(2507), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(2508), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(2509), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(2510), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(2511), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(2512), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(2513), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(2514), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(2515), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(2516), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(2517), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(2406), helpstring('Returns a list of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(2407), helpstring("Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propget'], HRESULT, 'UnitOfMeasure',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(2518), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(12810), helpstring('Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12811), helpstring('Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12812), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12813), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnCalcScalarSurfaceDistanceBetweenPoints implementation
##class _IAgCrdnCalcScalarSurfaceDistanceBetweenPoints_Impl(object):
##    @property
##    def Type(self):
##        'Returns the scalar calculation type.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant.'
##        #return ppRetVal
##
##    def QuickEvaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representi...'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.'
##        #return ppRetVal
##
##    def QuickEvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one repr...'
##        #return ppRetVal
##
##    def _get(self):
##        'Starting point on the central body ellipsoid (or projection of point at altitude onto the ellipsoid).'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Starting point on the central body ellipsoid (or projection of point at altitude onto the ellipsoid).'
##    Point1 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Terminating point on the central body ellipsoid (or projection of point at altitude onto the ellipsoid).'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Terminating point on the central body ellipsoid (or projection of point at altitude onto the ellipsoid).'
##    Point2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Central body on which the surface distance between points is to be calculated.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Central body on which the surface distance between points is to be calculated.'
##    SurfaceCentralBody = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Time step used in numerical evaluation of scalar calculation time rate of change (derivatives using central differencing).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Time step used in numerical evaluation of scalar calculation time rate of change (derivatives using central differencing).'
##    DifferencingTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def GetAvailability(self):
##        'Returns a list of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def UnitOfMeasure(self):
##        "Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def QuickEvaluateArray(self, Times):
##        'Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateArray(self, Times):
##        'Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##

class AgCrdnEventIntervalList(CoClass):
    'An ordered list of time intervals.'
    _reg_clsid_ = GUID('{ADE49926-8DE8-4B6F-96DE-312D1C0E2AC4}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventIntervalList(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalList'
    _iid_ = GUID('{A0B50B60-B42E-4346-90A2-12D06F348A94}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnEventIntervalList._com_interfaces_ = [_IAgCrdnEventIntervalList, IAgCrdnEventIntervalList, IAgCrdn]

class AgCrdnVolumeGridConstrained(CoClass):
    'A volume grid constrained interface.'
    _reg_clsid_ = GUID('{68BDF64A-4F1D-429C-A98B-F9C2F36E9C9F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVolumeGridConstrained(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeGridConstrained'
    _iid_ = GUID('{BD3AB594-49AC-4CAA-A8F0-359855FCE7A2}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVolumeGridConstrained(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A volume grid constrained interface.'
    _iid_ = GUID('{1A7C195F-C976-40A1-BFE0-A6672EAE8DEE}')
    _idlflags_ = ['oleautomation']
AgCrdnVolumeGridConstrained._com_interfaces_ = [_IAgCrdnVolumeGridConstrained, IAgCrdnVolumeGridConstrained, IAgCrdnVolumeGrid, IAgCrdn]

class IAgCrdnIntegralBasic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Integral definition determines how scalar calculation is numerically integrated.'
    _iid_ = GUID('{3C992A8B-5045-492C-8C10-DCC7D9D48BC8}')
    _idlflags_ = ['oleautomation']
IAgCrdnIntegralBasic._methods_ = [
    COMMETHOD(['propget', helpstring('Get the integral type which determines the method of integration and can be set to trapezoidal, Simplson or adaptive Lobatto.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnIntegralType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the integral type which determines the method of integration and can be set to trapezoidal, Simplson or adaptive Lobatto.')], HRESULT, 'Type',
              ( ['in'], AgECrdnIntegralType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the tolerance which determines how accurate integral is computed by finding relative difference between refined and unrefined integral evaluations. Only available if Adaptive Lobatto is selected as the integral type.')], HRESULT, 'Tolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the tolerance which determines how accurate integral is computed by finding relative difference between refined and unrefined integral evaluations. Only available if Adaptive Lobatto is selected as the integral type.')], HRESULT, 'Tolerance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the number of iteration which determines how many refinement iterations are allowed. Only available if Adaptive Lobatto is selected as the integral type.')], HRESULT, 'MaximumIterations',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the number of iteration which determines how many refinement iterations are allowed. Only available if Adaptive Lobatto is selected as the integral type.')], HRESULT, 'MaximumIterations',
              ( ['in'], c_int, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnIntegralBasic implementation
##class IAgCrdnIntegralBasic_Impl(object):
##    def _get(self):
##        'Get the integral type which determines the method of integration and can be set to trapezoidal, Simplson or adaptive Lobatto.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the integral type which determines the method of integration and can be set to trapezoidal, Simplson or adaptive Lobatto.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the tolerance which determines how accurate integral is computed by finding relative difference between refined and unrefined integral evaluations. Only available if Adaptive Lobatto is selected as the integral type.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the tolerance which determines how accurate integral is computed by finding relative difference between refined and unrefined integral evaluations. Only available if Adaptive Lobatto is selected as the integral type.'
##    Tolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the number of iteration which determines how many refinement iterations are allowed. Only available if Adaptive Lobatto is selected as the integral type.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the number of iteration which determines how many refinement iterations are allowed. Only available if Adaptive Lobatto is selected as the integral type.'
##    MaximumIterations = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnVectorScalarLinearCombination(CoClass):
    'Linear combination of two input vectors using scalars.'
    _reg_clsid_ = GUID('{465BD593-EBF6-44D8-8A88-EF37B7E5C67D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVectorScalarLinearCombination(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorScalarLinearCombination'
    _iid_ = GUID('{DD17CCBB-1F73-4E24-A800-45962AC17E27}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorScalarLinearCombination(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Linear combination of two input vectors using scalars.'
    _iid_ = GUID('{99C901AF-BB66-425E-8C71-191A7A1EFE2A}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorScalarLinearCombination._com_interfaces_ = [_IAgCrdnVectorScalarLinearCombination, IAgCrdnVectorScalarLinearCombination, IAgCrdn, IAgCrdnTimeProperties, IAgCrdnVector]


# values for enumeration 'AgECrdnVolumeCombinedOperationType'
eCrdnVolumeCombinedOperationTypeAND = 1
eCrdnVolumeCombinedOperationTypeOR = 2
eCrdnVolumeCombinedOperationTypeXOR = 3
eCrdnVolumeCombinedOperationTypeMINUS = 4
AgECrdnVolumeCombinedOperationType = c_int # enum
IAgCrdnVolumeCombined._methods_ = [
    COMMETHOD(['propget', helpstring('Sets/Returns volume combined operation.')], HRESULT, 'CombineOperation',
              ( ['out', 'retval'], POINTER(AgECrdnVolumeCombinedOperationType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Sets/Returns volume combined operation.')], HRESULT, 'CombineOperation',
              ( ['in'], AgECrdnVolumeCombinedOperationType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the spatial condition vectore size.')], HRESULT, 'ConditionCount',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([helpstring('Get all spatial conditions.')], HRESULT, 'GetAllConditions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Set all spatial conditions.')], HRESULT, 'SetAllConditions',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Conditions' )),
    COMMETHOD([helpstring('Set spatial conditions at a postion.')], HRESULT, 'SetCondition',
              ( ['in'], POINTER(IAgCrdnVolume), 'Ref' ),
              ( ['in'], c_int, 'Pos' )),
    COMMETHOD([helpstring('Get spatial conditions at a postion.')], HRESULT, 'GetCondition',
              ( ['in'], c_int, 'Pos' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([helpstring('Remove spatial conditions at a postion.')], HRESULT, 'RemoveCondition',
              ( ['in'], c_int, 'Pos' )),
]
################################################################
## code template for IAgCrdnVolumeCombined implementation
##class IAgCrdnVolumeCombined_Impl(object):
##    def _get(self):
##        'Sets/Returns volume combined operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Sets/Returns volume combined operation.'
##    CombineOperation = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ConditionCount(self):
##        'Returns the spatial condition vectore size.'
##        #return pRetVal
##
##    def GetAllConditions(self):
##        'Get all spatial conditions.'
##        #return ppRetVal
##
##    def SetAllConditions(self, Conditions):
##        'Set all spatial conditions.'
##        #return 
##
##    def SetCondition(self, Ref, Pos):
##        'Set spatial conditions at a postion.'
##        #return 
##
##    def GetCondition(self, Pos):
##        'Get spatial conditions at a postion.'
##        #return ppRetVal
##
##    def RemoveCondition(self, Pos):
##        'Remove spatial conditions at a postion.'
##        #return 
##

class _IAgCrdnVectorScalarScaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorScalarScaled'
    _iid_ = GUID('{06378377-106D-48F3-AA44-F9BE72916880}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnVectorScaledDimensionInheritance'
eCrdnVectorScaledDimensionInheritanceNone = 0
eCrdnVectorScaledDimensionInheritanceFromScalar = 1
eCrdnVectorScaledDimensionInheritanceFromVector = 2
AgECrdnVectorScaledDimensionInheritance = c_int # enum
_IAgCrdnVectorScalarScaled._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(26601), helpstring('An input vector scaled by the scalar. Can be any VGT vector.'), 'propget'], HRESULT, 'InputVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(26601), helpstring('An input vector scaled by the scalar. Can be any VGT vector.'), 'propput'], HRESULT, 'InputVector',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD([dispid(26602), helpstring('A variable scale applied to the input vector. Can be based on any Scalar calculation.'), 'propget'], HRESULT, 'InputScalar',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(26602), helpstring('A variable scale applied to the input vector. Can be based on any Scalar calculation.'), 'propput'], HRESULT, 'InputScalar',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD([dispid(26603), helpstring('A constant scale applied to the input vector.'), 'propget'], HRESULT, 'ScaleFactor',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(26603), helpstring('A constant scale applied to the input vector.'), 'propput'], HRESULT, 'ScaleFactor',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(26604), helpstring('Whether to normalize the input vector before applying constant and variable scales.'), 'propget'], HRESULT, 'Normalize',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(26604), helpstring('Whether to normalize the input vector before applying constant and variable scales.'), 'propput'], HRESULT, 'Normalize',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(26605), helpstring('Whether or not to inherit dimension from the input vector or the scalar.'), 'propget'], HRESULT, 'DimensionInheritance',
              ( ['out', 'retval'], POINTER(AgECrdnVectorScaledDimensionInheritance), 'pRetVal' )),
    COMMETHOD([dispid(26605), helpstring('Whether or not to inherit dimension from the input vector or the scalar.'), 'propput'], HRESULT, 'DimensionInheritance',
              ( ['in'], AgECrdnVectorScaledDimensionInheritance, 'pRetVal' )),
    COMMETHOD([dispid(26606), helpstring('A dimension assigned to the output vector.'), 'propget'], HRESULT, 'Dimension',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26606), helpstring('A dimension assigned to the output vector.'), 'propput'], HRESULT, 'Dimension',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorScalarScaled implementation
##class _IAgCrdnVectorScalarScaled_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'An input vector scaled by the scalar. Can be any VGT vector.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'An input vector scaled by the scalar. Can be any VGT vector.'
##    InputVector = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A variable scale applied to the input vector. Can be based on any Scalar calculation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A variable scale applied to the input vector. Can be based on any Scalar calculation.'
##    InputScalar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A constant scale applied to the input vector.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A constant scale applied to the input vector.'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether to normalize the input vector before applying constant and variable scales.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to normalize the input vector before applying constant and variable scales.'
##    Normalize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether or not to inherit dimension from the input vector or the scalar.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether or not to inherit dimension from the input vector or the scalar.'
##    DimensionInheritance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A dimension assigned to the output vector.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A dimension assigned to the output vector.'
##    Dimension = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnVolume._methods_ = [
]
################################################################
## code template for IAgCrdnVolume implementation
##class IAgCrdnVolume_Impl(object):

class AgCrdnEventIntervalListCondition(CoClass):
    'Interval list containing intervals during which specified condition is satisfied. Determination is performed within interval list using Sampling and Convergence parameters.'
    _reg_clsid_ = GUID('{0E93F884-CC73-445D-9FE5-DC5B5F2E3F2A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventIntervalListCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalListCondition'
    _iid_ = GUID('{D53464DF-6D97-47C6-B455-85443047A6A1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnEventIntervalListCondition._com_interfaces_ = [_IAgCrdnEventIntervalListCondition, IAgCrdnEventIntervalListCondition, IAgCrdnEventIntervalList, IAgCrdn]

class AgCrdnVolumeGridCylindrical(CoClass):
    'A volume grid cylindrical interface.'
    _reg_clsid_ = GUID('{C1F5D2CF-4831-4C9F-84D4-A0A7F1A56CF7}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnVolumeGridCylindrical(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A volume grid cylindrical interface.'
    _iid_ = GUID('{D2DA83C9-CD3D-4C77-ABEE-4A9FD4EAEB38}')
    _idlflags_ = ['oleautomation']
AgCrdnVolumeGridCylindrical._com_interfaces_ = [_IAgCrdnVolumeGridCylindrical, IAgCrdnVolumeGridCylindrical, IAgCrdnVolumeGrid, IAgCrdn]

class _IAgCrdnDerivativeBasic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnDerivativeBasic'
    _iid_ = GUID('{A387E6A5-ACBE-4D35-B38E-3AE7DE45AA16}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnDerivativeBasic._methods_ = [
    COMMETHOD([dispid(24402), helpstring('Get the time step used for numerical evaluation of derivatives using central differencing.'), 'propget'], HRESULT, 'TimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(24402), helpstring('Get the time step used for numerical evaluation of derivatives using central differencing.'), 'propput'], HRESULT, 'TimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnDerivativeBasic implementation
##class _IAgCrdnDerivativeBasic_Impl(object):
##    def _get(self):
##        'Get the time step used for numerical evaluation of derivatives using central differencing.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the time step used for numerical evaluation of derivatives using central differencing.'
##    TimeStep = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnSystemCommonTasks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnSystemCommonTasks'
    _iid_ = GUID('{6CCB8283-F2E7-4FCD-9B9C-02C92075690E}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnSystemCommonTasks._methods_ = [
    COMMETHOD([dispid(11902), helpstring('Creates a non-persistent East-North-Up (ENU) reference frame with the origin at the specified geodetic location.')], HRESULT, 'CreateEastNorthUpCartographic',
              ( ['in'], VARIANT, 'Latitude' ),
              ( ['in'], VARIANT, 'Longitude' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemAssembled)), 'ppRetVal' )),
    COMMETHOD([dispid(11904), helpstring('Creates a non-persistent system component assembled from an origin point and a set of reference axes.')], HRESULT, 'CreateAssembled',
              ( ['in'], POINTER(IAgCrdnPoint), 'OriginPoint' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'ReferenceAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemAssembled)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnSystemCommonTasks implementation
##class _IAgCrdnSystemCommonTasks_Impl(object):
##    def CreateEastNorthUpCartographic(self, Latitude, Longitude, Altitude):
##        'Creates a non-persistent East-North-Up (ENU) reference frame with the origin at the specified geodetic location.'
##        #return ppRetVal
##
##    def CreateAssembled(self, OriginPoint, ReferenceAxes):
##        'Creates a non-persistent system component assembled from an origin point and a set of reference axes.'
##        #return ppRetVal
##

class AgCrdnVectorScalarScaled(CoClass):
    'Scaled version of the input vector using scalar.'
    _reg_clsid_ = GUID('{849D2F74-B1D4-4EE8-9C34-716AFA9F189E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnVectorScalarScaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Scaled version of the input vector using scalar.'
    _iid_ = GUID('{717D7D9D-8B09-4917-8C5D-7187172ED6EB}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorScalarScaled._com_interfaces_ = [_IAgCrdnVectorScalarScaled, IAgCrdnVectorScalarScaled, IAgCrdn, IAgCrdnTimeProperties, IAgCrdnVector]

class IAgCrdnEventIntervalListFiltered(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Defined by filtering intervals from original interval list using specified filtering method.'
    _iid_ = GUID('{9C3731E0-3707-4C6D-A588-62944AD229CB}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventIntervalListFiltered._methods_ = [
    COMMETHOD(['propget', helpstring('The original interval list.')], HRESULT, 'OriginalIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The original interval list.')], HRESULT, 'OriginalIntervals',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Get the prune filter factory.')], HRESULT, 'FilterFactory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPruneFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The pruning filter.')], HRESULT, 'Filter',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPruneFilter)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The pruning filter.')], HRESULT, 'Filter',
              ( ['in'], POINTER(IAgCrdnPruneFilter), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalListFiltered implementation
##class IAgCrdnEventIntervalListFiltered_Impl(object):
##    def _get(self):
##        'The original interval list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original interval list.'
##    OriginalIntervals = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def FilterFactory(self):
##        'Get the prune filter factory.'
##        #return ppRetVal
##
##    def _get(self):
##        'The pruning filter.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The pruning filter.'
##    Filter = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnEventIntervalListFactory(CoClass):
    'The factory creates event interval lists.'
    _reg_clsid_ = GUID('{5988F872-F35D-4A69-BD14-2931567B2E13}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventIntervalListFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalListFactory'
    _iid_ = GUID('{F3A8A2DD-3634-4A3C-A1FE-C4D2B546A524}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnEventIntervalListFactory._com_interfaces_ = [_IAgCrdnEventIntervalListFactory, IAgCrdnEventIntervalListFactory]

class AgCrdnVolumeGridLatLonAlt(CoClass):
    'A volume grid lat lon alt (Cartogrographic) interface.'
    _reg_clsid_ = GUID('{6B5DA385-6958-4728-8E93-9EDC34545D09}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVolumeGridLatLonAlt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeGridLatLonAlt'
    _iid_ = GUID('{F4254FED-D01A-431E-B491-6DDABEE16D7F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVolumeGridLatLonAlt(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A volume grid lat lon alt (Cartogrographic) interface.'
    _iid_ = GUID('{0D9FDE14-4912-4512-B961-F587BF69C3BA}')
    _idlflags_ = ['oleautomation']
AgCrdnVolumeGridLatLonAlt._com_interfaces_ = [_IAgCrdnVolumeGridLatLonAlt, IAgCrdnVolumeGridLatLonAlt, IAgCrdnVolumeGrid, IAgCrdn]

class IAgCrdnRoot(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents a VGT root object.'
    _iid_ = GUID('{75B84CA5-141F-4BC5-992A-6CBADAE0D4CA}')
    _idlflags_ = ['oleautomation']
class IAgCrdnProvider(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Allows accessing existing Vector Geometry Tool components.'
    _iid_ = GUID('{EC6FBBAF-4C41-4599-BD45-56433E380770}')
    _idlflags_ = ['oleautomation']
class IAgCrdnWellKnownSystems(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Well-known coordinate reference systems.'
    _iid_ = GUID('{E7BFD4DF-41EE-4B0A-BEB7-B794EC04E940}')
    _idlflags_ = ['oleautomation']
class IAgCrdnWellKnownAxes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Well-known Axes.'
    _iid_ = GUID('{C5082AA3-7A3B-4693-98EE-C7D1F5C43FA7}')
    _idlflags_ = ['oleautomation']
IAgCrdnRoot._methods_ = [
    COMMETHOD([helpstring('Returns a template provider. The method takes a class name (i.e. "Satellite", "Facility", etc.)')], HRESULT, 'GetTemplateProvider',
              ( ['in'], BSTR, 'ClassName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnProvider)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns an instance provider. The method takes a short instance path to an STK object or a central body.(i.e. "Satellite/Satellite1", "CentralBody/Earth", etc.)')], HRESULT, 'GetProvider',
              ( ['in'], BSTR, 'InstPath' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnProvider)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the most commonly used systems (e.g. Sun Fixed, Earth Fixed, etc.).')], HRESULT, 'WellKnownSystems',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnWellKnownSystems)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the most commonly used axes (e.g. Sun ICRF, Earth Inertial, etc.).')], HRESULT, 'WellKnownAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnWellKnownAxes)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnRoot implementation
##class IAgCrdnRoot_Impl(object):
##    def GetTemplateProvider(self, ClassName):
##        'Returns a template provider. The method takes a class name (i.e. "Satellite", "Facility", etc.)'
##        #return ppRetVal
##
##    def GetProvider(self, InstPath):
##        'Returns an instance provider. The method takes a short instance path to an STK object or a central body.(i.e. "Satellite/Satellite1", "CentralBody/Earth", etc.)'
##        #return ppRetVal
##
##    @property
##    def WellKnownSystems(self):
##        'Returns the most commonly used systems (e.g. Sun Fixed, Earth Fixed, etc.).'
##        #return ppRetVal
##
##    @property
##    def WellKnownAxes(self):
##        'Returns the most commonly used axes (e.g. Sun ICRF, Earth Inertial, etc.).'
##        #return ppRetVal
##

_IAgCrdnPointGlint._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1801), helpstring('Returns a type of the point object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([dispid(1802), helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1803), helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(4801), helpstring('Specify a central body.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4802), helpstring('Specify a source point.'), 'propget'], HRESULT, 'SourcePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4803), helpstring('Specify an observer point.'), 'propget'], HRESULT, 'ObserverPoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPointGlint implementation
##class _IAgCrdnPointGlint_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def SourcePoint(self):
##        'Specify a source point.'
##        #return ppRetVal
##
##    @property
##    def ObserverPoint(self):
##        'Specify an observer point.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnSystemOnSurface(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A system with an origin on the surface of the central body with topocentric axes rotated on a clock angle. Specify the central body, angle, and the latitude, longitude, and altitude of the origin.'
    _iid_ = GUID('{44B483FF-3C51-4B5A-BF1D-AEFFEAA2738C}')
    _idlflags_ = ['oleautomation']
IAgCrdnSystemOnSurface._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a central body.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('An angle by which the topocentric axes is rotated.')], HRESULT, 'AzimuthAngle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('An angle by which the topocentric axes is rotated.')], HRESULT, 'AzimuthAngle',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether to use the Mean Sea Level as the reference shape.')], HRESULT, 'UseMSL',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether to use the Mean Sea Level as the reference shape.')], HRESULT, 'UseMSL',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Specify the position of the system's origin.")], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnLLAPosition)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnSystemOnSurface implementation
##class IAgCrdnSystemOnSurface_Impl(object):
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    def _get(self):
##        'An angle by which the topocentric axes is rotated.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'An angle by which the topocentric axes is rotated.'
##    AzimuthAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use the Mean Sea Level as the reference shape.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use the Mean Sea Level as the reference shape.'
##    UseMSL = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Position(self):
##        "Specify the position of the system's origin."
##        #return ppRetVal
##


# values for enumeration 'AgECrdnSurfaceType'
eCrdnSurfaceDetic = 1
eCrdnSurfaceCentric = 2
AgECrdnSurfaceType = c_int # enum
_IAgCrdnPointOnSurface._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1801), helpstring('Returns a type of the point object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([dispid(1802), helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1803), helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(5101), helpstring('Specify a central body.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(5102), helpstring('Specify a reference point.'), 'propget'], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(5103), helpstring('Specify a reference shape.'), 'propget'], HRESULT, 'ReferenceShape',
              ( ['out', 'retval'], POINTER(AgECrdnReferenceShapeType), 'pRetVal' )),
    COMMETHOD([dispid(5103), helpstring('Specify a reference shape.'), 'propput'], HRESULT, 'ReferenceShape',
              ( ['in'], AgECrdnReferenceShapeType, 'pRetVal' )),
    COMMETHOD([dispid(5104), helpstring('Specify a surface type.'), 'propget'], HRESULT, 'SurfaceType',
              ( ['out', 'retval'], POINTER(AgECrdnSurfaceType), 'pRetVal' )),
    COMMETHOD([dispid(5104), helpstring('Specify a surface type.'), 'propput'], HRESULT, 'SurfaceType',
              ( ['in'], AgECrdnSurfaceType, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPointOnSurface implementation
##class _IAgCrdnPointOnSurface_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Specify a reference point.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a reference shape.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a reference shape.'
##    ReferenceShape = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a surface type.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a surface type.'
##    SurfaceType = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnVectorVelocityAcceleration(CoClass):
    'Velocity vector of a point in a coordinate system.'
    _reg_clsid_ = GUID('{F8D2BB56-256B-4ECE-BA98-42890EF5B223}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVectorVelocityAcceleration(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorVelocityAcceleration'
    _iid_ = GUID('{3D19C67B-13CA-4C73-B462-38970AF86FC0}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorVelocityAcceleration(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Velocity vector of a point in a coordinate system.'
    _iid_ = GUID('{79CE4395-6ED0-4D34-9CF1-809FBCB07624}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorVelocityAcceleration._com_interfaces_ = [_IAgCrdnVectorVelocityAcceleration, IAgCrdnVectorVelocityAcceleration, IAgCrdn, IAgCrdnTimeProperties, IAgCrdnVector]

class AgCrdnEventIntervalListFile(CoClass):
    'Interval list loaded from specified interval file - ASCII file with .int extension. See STK help.'
    _reg_clsid_ = GUID('{60AA6E76-6CA8-4A06-93BA-7D136EE3C6DC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventIntervalListFile._com_interfaces_ = [_IAgCrdnEventIntervalListFile, IAgCrdnEventIntervalListFile, IAgCrdnEventIntervalList, IAgCrdn]

class AgCrdnVolumeGridResult(CoClass):
    'An interafcce that genereates Volume Grid results.'
    _reg_clsid_ = GUID('{19BC13AC-3035-4106-A36A-ADF4B7A4F3E4}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVolumeGridResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeGridResult'
    _iid_ = GUID('{4CEF6B2E-6B2B-4F4C-A06C-5E9AF26A9231}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVolumeGridResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'An interafcce that genereates Volume Grid results.'
    _iid_ = GUID('{39D7FD06-C18A-4B35-BB2E-5801E89FACD4}')
    _idlflags_ = ['oleautomation']
AgCrdnVolumeGridResult._com_interfaces_ = [_IAgCrdnVolumeGridResult, IAgCrdnVolumeGridResult]

class IAgCrdnAxesBPlane(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'B-Plane axes using the selected target body and reference vector.'
    _iid_ = GUID('{E6277F29-A5D7-46F6-99C7-9698E30F9960}')
    _idlflags_ = ['oleautomation']
IAgCrdnAxesBPlane._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a trajectory point.')], HRESULT, 'Trajectory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference vector.')], HRESULT, 'ReferenceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a target central body.')], HRESULT, 'TargetBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a direction (incoming or outgoing).')], HRESULT, 'Direction',
              ( ['out', 'retval'], POINTER(AgECrdnDirectionType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a direction (incoming or outgoing).')], HRESULT, 'Direction',
              ( ['in'], AgECrdnDirectionType, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAxesBPlane implementation
##class IAgCrdnAxesBPlane_Impl(object):
##    @property
##    def Trajectory(self):
##        'Specify a trajectory point.'
##        #return ppRetVal
##
##    @property
##    def ReferenceVector(self):
##        'Specify a reference vector.'
##        #return ppRetVal
##
##    @property
##    def TargetBody(self):
##        'Specify a target central body.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a direction (incoming or outgoing).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a direction (incoming or outgoing).'
##    Direction = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnParameterSetOrbit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Orbit parameter set contains various trajectory representations of an orbiting point.'
    _iid_ = GUID('{262D287A-26BB-40F7-8AD4-671A27D59A1D}')
    _idlflags_ = ['oleautomation']
IAgCrdnParameterSetOrbit._methods_ = [
    COMMETHOD(['propget', helpstring('Get the point for which orbital parameters are computed.')], HRESULT, 'OrbitingPoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the point for which orbital parameters are computed.')], HRESULT, 'OrbitingPoint',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Get the reference system in which orbital parameters are computed. Only used if the option to specify reference system is selected.')], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the reference system in which orbital parameters are computed. Only used if the option to specify reference system is selected.')], HRESULT, 'ReferenceSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Get the gravitational parameter for the mass relative to which orbital parameters are computed. Only used if the option to specify gravitational parameter is selected.')], HRESULT, 'GravitationalParameter',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the gravitational parameter for the mass relative to which orbital parameters are computed. Only used if the option to specify gravitational parameter is selected.')], HRESULT, 'GravitationalParameter',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the central body relative to which orbital parameters are computed.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the central body relative to which orbital parameters are computed.')], HRESULT, 'CentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the option that determines whether to specify the gravitational parameter value or to inherit it from the central body.')], HRESULT, 'UseCentralBodyGravitationalParameter',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the option that determines whether to specify the gravitational parameter value or to inherit it from the central body.')], HRESULT, 'UseCentralBodyGravitationalParameter',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the option that determines whether to specify the reference coordinate system or to the inherit inertial reference system from the central body.')], HRESULT, 'UseCentralBodyInertial',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the option that determines whether to specify the reference coordinate system or to the inherit inertial reference system from the central body.')], HRESULT, 'UseCentralBodyInertial',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnParameterSetOrbit implementation
##class IAgCrdnParameterSetOrbit_Impl(object):
##    def _get(self):
##        'Get the point for which orbital parameters are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the point for which orbital parameters are computed.'
##    OrbitingPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the reference system in which orbital parameters are computed. Only used if the option to specify reference system is selected.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the reference system in which orbital parameters are computed. Only used if the option to specify reference system is selected.'
##    ReferenceSystem = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the gravitational parameter for the mass relative to which orbital parameters are computed. Only used if the option to specify gravitational parameter is selected.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the gravitational parameter for the mass relative to which orbital parameters are computed. Only used if the option to specify gravitational parameter is selected.'
##    GravitationalParameter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the central body relative to which orbital parameters are computed.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the central body relative to which orbital parameters are computed.'
##    CentralBody = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the option that determines whether to specify the gravitational parameter value or to inherit it from the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the option that determines whether to specify the gravitational parameter value or to inherit it from the central body.'
##    UseCentralBodyGravitationalParameter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the option that determines whether to specify the reference coordinate system or to the inherit inertial reference system from the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the option that determines whether to specify the reference coordinate system or to the inherit inertial reference system from the central body.'
##    UseCentralBodyInertial = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnVectorPlugin(CoClass):
    'A VGT vector plugin.'
    _reg_clsid_ = GUID('{32007747-8BE0-452A-B002-5BCBA7FF1FA3}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVectorPlugin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorPlugin'
    _iid_ = GUID('{8B2275E0-BCD6-40D7-8729-4D9406CCB462}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVectorPlugin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A VGT vector plugin.'
    _iid_ = GUID('{B8A213A9-C314-401E-BFBE-BF6BB1E73B49}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorPlugin._com_interfaces_ = [_IAgCrdnVectorPlugin, IAgCrdnVectorPlugin, IAgCrdn, IAgCrdnTimeProperties, IAgCrdnVector]

IAgCrdnCalcScalar._methods_ = [
    COMMETHOD(['propget', helpstring('Returns the scalar calculation type.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnCalcScalarType), 'pRetVal' )),
    COMMETHOD([helpstring('Evaluates the scalar calculation at the specified time instant.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...')], HRESULT, 'QuickEvaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...')], HRESULT, 'QuickEvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns a list of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc.")], HRESULT, 'UnitOfMeasure',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([helpstring('Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnCalcScalar implementation
##class IAgCrdnCalcScalar_Impl(object):
##    @property
##    def Type(self):
##        'Returns the scalar calculation type.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant.'
##        #return ppRetVal
##
##    def QuickEvaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.'
##        #return ppRetVal
##
##    def QuickEvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...'
##        #return ppRetVal
##
##    def GetAvailability(self):
##        'Returns a list of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def UnitOfMeasure(self):
##        "Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##
##    def QuickEvaluateArray(self, Times):
##        'Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateArray(self, Times):
##        'Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##

_IAgCrdnVolumeFromCondition._methods_ = [
    COMMETHOD([dispid(33101), helpstring('The condition component.'), 'propget'], HRESULT, 'Condition',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(33101), helpstring('The condition component.'), 'propput'], HRESULT, 'Condition',
              ( ['in'], POINTER(IAgCrdnCondition), 'ppRetVal' )),
    COMMETHOD([dispid(33102), helpstring('Indicate whether to use specified custom time limits (see CustomTimeLimits).'), 'propget'], HRESULT, 'UseCustomTimeLimits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(33102), helpstring('Indicate whether to use specified custom time limits (see CustomTimeLimits).'), 'propput'], HRESULT, 'UseCustomTimeLimits',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(33103), helpstring('A custom interval list or a single interval. It is by default set to overall availability of host object. This determines time limits within extrema are sought. The time limits will be used if UseCustomTimeLimits is set to true.'), 'propget'], HRESULT, 'CustomTimeLimits',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(33103), helpstring('A custom interval list or a single interval. It is by default set to overall availability of host object. This determines time limits within extrema are sought. The time limits will be used if UseCustomTimeLimits is set to true.'), 'propput'], HRESULT, 'CustomTimeLimits',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD([dispid(33104), helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propget'], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD([dispid(33104), helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propput'], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD([dispid(33105), helpstring('The Convergence definition, which uses time tolerance to determine when times of extrema are found.'), 'propget'], HRESULT, 'Convergence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConverge)), 'ppRetVal' )),
    COMMETHOD([dispid(33105), helpstring('The Convergence definition, which uses time tolerance to determine when times of extrema are found.'), 'propput'], HRESULT, 'Convergence',
              ( ['in'], POINTER(IAgCrdnConverge), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVolumeFromCondition implementation
##class _IAgCrdnVolumeFromCondition_Impl(object):
##    def _get(self):
##        'The condition component.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The condition component.'
##    Condition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Indicate whether to use specified custom time limits (see CustomTimeLimits).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Indicate whether to use specified custom time limits (see CustomTimeLimits).'
##    UseCustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A custom interval list or a single interval. It is by default set to overall availability of host object. This determines time limits within extrema are sought. The time limits will be used if UseCustomTimeLimits is set to true.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A custom interval list or a single interval. It is by default set to overall availability of host object. This determines time limits within extrema are sought. The time limits will be used if UseCustomTimeLimits is set to true.'
##    CustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Convergence definition, which uses time tolerance to determine when times of extrema are found.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Convergence definition, which uses time tolerance to determine when times of extrema are found.'
##    Convergence = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnAngleGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Access or create VGT angles associated with an object or a central body.'
    _iid_ = GUID('{DDF7E8DE-9591-4576-BDB2-625DF4284BF9}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
IAgCrdnAngleGroup._methods_ = [
    COMMETHOD([dispid(9101), helpstring('Removes a specified Angle.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'AngleName' )),
    COMMETHOD([dispid(9102), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(9103), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the group.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9105), helpstring('Returns a Factory object used to create custom angles.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns an angle by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngle)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAngleGroup implementation
##class IAgCrdnAngleGroup_Impl(object):
##    def Remove(self, AngleName):
##        'Removes a specified Angle.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the group.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a Factory object used to create custom angles.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns an angle by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

class AgCrdnEventIntervalListFiltered(CoClass):
    'Defined by filtering intervals from original interval list using specified filtering method.'
    _reg_clsid_ = GUID('{4C74D839-21EF-402A-A276-63C6B43E1DAC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventIntervalListFiltered._com_interfaces_ = [_IAgCrdnEventIntervalListFiltered, IAgCrdnEventIntervalListFiltered, IAgCrdnEventIntervalList, IAgCrdn]

class AgCrdnVolumeGridSpherical(CoClass):
    'A volume grid spherical interface.'
    _reg_clsid_ = GUID('{091EA6CE-30C5-4C85-8948-7BC97F8A79B2}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnVolumeGridSpherical(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A volume grid spherical interface.'
    _iid_ = GUID('{DCD0A443-1A4F-4E56-9077-2A439A78FFFE}')
    _idlflags_ = ['oleautomation']
AgCrdnVolumeGridSpherical._com_interfaces_ = [_IAgCrdnVolumeGridSpherical, IAgCrdnVolumeGridSpherical, IAgCrdnVolumeGrid, IAgCrdn]

IAgCrdnVolumeGridCartesian._methods_ = [
    COMMETHOD(['propget', helpstring('Get the reference system in which Cartesian parameters are computed.')], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the reference system in which Cartesian parameters are computed.')], HRESULT, 'ReferenceSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns X Coordinates parameters for the Cartesian system.')], HRESULT, 'XCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns Y Coordinates parameters for the Cartesian system.')], HRESULT, 'YCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns Z Coordinates parameters for the Cartesian system.')], HRESULT, 'ZCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeGridCartesian implementation
##class IAgCrdnVolumeGridCartesian_Impl(object):
##    def _get(self):
##        'Get the reference system in which Cartesian parameters are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the reference system in which Cartesian parameters are computed.'
##    ReferenceSystem = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def XCoordinates(self):
##        'Returns X Coordinates parameters for the Cartesian system.'
##        #return ppRetVal
##
##    @property
##    def YCoordinates(self):
##        'Returns Y Coordinates parameters for the Cartesian system.'
##        #return ppRetVal
##
##    @property
##    def ZCoordinates(self):
##        'Returns Z Coordinates parameters for the Cartesian system.'
##        #return ppRetVal
##

class AgCrdnVectorFactory(CoClass):
    'A Factory object to create vectors.'
    _reg_clsid_ = GUID('{9396A732-C578-4F6F-90DA-BFFEF8EA0288}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnVectorFactory._com_interfaces_ = [_IAgCrdnVectorFactory, IAgCrdnVectorFactory]


# values for enumeration 'AgECrdnStartStopOption'
eCrdnStartStopOptionCountStartOnly = 1
eCrdnStartStopOptionCountStopOnly = 2
eCrdnStartStopOptionCountStartStop = 3
AgECrdnStartStopOption = c_int # enum
class IAgCrdnEventStartStopTime(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Event is either start or stop time selected from a reference interval.'
    _iid_ = GUID('{1745B133-0030-43E5-B8C2-D9C7D664C1C7}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventStartStopTime._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether to use start (true) or stop (false).')], HRESULT, 'UseStart',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Indicates whether to use start (true) or stop (false).')], HRESULT, 'UseStart',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The reference interval.')], HRESULT, 'ReferenceEventInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The reference interval.')], HRESULT, 'ReferenceEventInterval',
              ( ['in'], POINTER(IAgCrdnEventInterval), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventStartStopTime implementation
##class IAgCrdnEventStartStopTime_Impl(object):
##    def _get(self):
##        'Indicates whether to use start (true) or stop (false).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Indicates whether to use start (true) or stop (false).'
##    UseStart = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The reference interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference interval.'
##    ReferenceEventInterval = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnInterpBasic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Interpolation definition determines how to obtain values in between tabulated samples. See STK help on interpolation for further details.'
    _iid_ = GUID('{9313F744-EB98-422E-B397-3628B2C69288}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgECrdnInterpolatorType'
eCrdnInterpolatorInvalid = -1
eCrdnInterpolatorTypeLagrange = 1
eCrdnInterpolatorTypeHermite = 2
AgECrdnInterpolatorType = c_int # enum
IAgCrdnInterpBasic._methods_ = [
    COMMETHOD(['propget', helpstring('Get the interpolation type, which can be Lagrange or Hermite interpolation. See STK help on interpolation for further details.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnInterpolatorType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the interpolation type, which can be Lagrange or Hermite interpolation. See STK help on interpolation for further details.')], HRESULT, 'Type',
              ( ['in'], AgECrdnInterpolatorType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the interpolation order, which determines the order of interpolation polynomial and is related to how many samples are used during interpolation. See STK help on interpolation for further details.')], HRESULT, 'Order',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the interpolation order, which determines the order of interpolation polynomial and is related to how many samples are used during interpolation. See STK help on interpolation for further details.')], HRESULT, 'Order',
              ( ['in'], c_int, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnInterpBasic implementation
##class IAgCrdnInterpBasic_Impl(object):
##    def _get(self):
##        'Get the interpolation type, which can be Lagrange or Hermite interpolation. See STK help on interpolation for further details.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the interpolation type, which can be Lagrange or Hermite interpolation. See STK help on interpolation for further details.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the interpolation order, which determines the order of interpolation polynomial and is related to how many samples are used during interpolation. See STK help on interpolation for further details.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the interpolation order, which determines the order of interpolation polynomial and is related to how many samples are used during interpolation. See STK help on interpolation for further details.'
##    Order = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnEventIntervalListFixed(CoClass):
    'Interval list defined by time ordered non-overlapping intervals each explicitly specified by its start and stop times. Stop date/time is required to be at or after start for each interval.'
    _reg_clsid_ = GUID('{6C2DB5BD-43F1-49D3-B5A8-9FD5D67F452E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventIntervalListFixed(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalListFixed'
    _iid_ = GUID('{D62FB700-753F-4C2A-8740-6B577262CFCE}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventIntervalListFixed(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Interval list defined by time ordered non-overlapping intervals each explicitly specified by its start and stop times. Stop date/time is required to be at or after start for each interval.'
    _iid_ = GUID('{534AE4C1-5149-4916-813B-C62E4823DB25}')
    _idlflags_ = ['oleautomation']
AgCrdnEventIntervalListFixed._com_interfaces_ = [_IAgCrdnEventIntervalListFixed, IAgCrdnEventIntervalListFixed, IAgCrdnEventIntervalList, IAgCrdn]

class AgCrdnVolumeInview(CoClass):
    'An Inview volume interface.'
    _reg_clsid_ = GUID('{2F2A695E-445A-40B9-B9CB-40EE126F83B8}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnVolumeInview(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'An Inview volume interface.'
    _iid_ = GUID('{D4EC9566-D108-44DC-A75F-E9137F2F3B35}')
    _idlflags_ = ['oleautomation']
AgCrdnVolumeInview._com_interfaces_ = [_IAgCrdnVolumeInview, IAgCrdnVolumeInview, IAgCrdnVolume, IAgCrdn]

IAgCrdnVectorCross._methods_ = [
    COMMETHOD(['propget', helpstring('Specify one of the two vectors which define the vector cross product.')], HRESULT, 'From',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify the second of the two vectors which define the vector cross product.')], HRESULT, 'To',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Whether to convert the cross product of two vectors to a unit vector.')], HRESULT, 'IsNormalized',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Whether to convert the cross product of two vectors to a unit vector.')], HRESULT, 'IsNormalized',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Returns a unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc.")], HRESULT, 'Dimension',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Returns a unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc.")], HRESULT, 'Dimension',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorCross implementation
##class IAgCrdnVectorCross_Impl(object):
##    @property
##    def From(self):
##        'Specify one of the two vectors which define the vector cross product.'
##        #return ppRetVal
##
##    @property
##    def To(self):
##        'Specify the second of the two vectors which define the vector cross product.'
##        #return ppRetVal
##
##    def _get(self):
##        'Whether to convert the cross product of two vectors to a unit vector.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to convert the cross product of two vectors to a unit vector.'
##    IsNormalized = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Returns a unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Returns a unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##    Dimension = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnGridValuesCustom(CoClass):
    'Fixed step grid values.'
    _reg_clsid_ = GUID('{73FF3FD7-F9FF-4C80-BD13-3ABF3AD81C47}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnGridValuesCustom(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnGridValuesCustom'
    _iid_ = GUID('{84FFBEA2-0915-4EB5-A3E7-5DC11D5E6763}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnGridValuesCustom._com_interfaces_ = [_IAgCrdnGridValuesCustom, IAgCrdnGridValuesCustom, IAgCrdnGridValuesMethod]

class AgCrdnAxesFactory(CoClass):
    'A Factory object to create axes.'
    _reg_clsid_ = GUID('{8FB0C324-FEB4-49CA-99D8-69862EE56CA3}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesFactory._com_interfaces_ = [_IAgCrdnAxesFactory, IAgCrdnAxesFactory]

class _IAgCrdnConditionCombined(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnConditionCombined'
    _iid_ = GUID('{B853CFC2-F21A-44C4-A332-BD6B442142E2}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnConditionCombinedOperationType'
eCrdnConditionCombinedOperationTypeAND = 1
eCrdnConditionCombinedOperationTypeOR = 2
eCrdnConditionCombinedOperationTypeXOR = 3
eCrdnConditionCombinedOperationTypeMINUS = 4
AgECrdnConditionCombinedOperationType = c_int # enum
_IAgCrdnConditionCombined._methods_ = [
    COMMETHOD([dispid(18104), helpstring('Returns the type of condition.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnConditionType), 'pRetVal' )),
    COMMETHOD([dispid(18102), helpstring('Returns result of evaluating continuously varying condition metric at the specified time, used for detecting condition crossings.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(18103), helpstring('Returns result of evaluating continuously varying condition metric and its rate of change at the specified time, used for detecting condition crossings.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(21803), helpstring('Sets/Returns scalar condition combined operation.'), 'propget'], HRESULT, 'CombineOperation',
              ( ['out', 'retval'], POINTER(AgECrdnConditionCombinedOperationType), 'pRetVal' )),
    COMMETHOD([dispid(21803), helpstring('Sets/Returns scalar condition combined operation.'), 'propput'], HRESULT, 'CombineOperation',
              ( ['in'], AgECrdnConditionCombinedOperationType, 'pRetVal' )),
    COMMETHOD([dispid(21804), helpstring('Returns the scalar condition vectore size.'), 'propget'], HRESULT, 'ConditionCount',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21805), helpstring('Get all scalar conditions.')], HRESULT, 'GetAllConditions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21806), helpstring('Set all scalar conditions.')], HRESULT, 'SetAllConditions',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Conditions' )),
    COMMETHOD([dispid(21807), helpstring('Get scalar conditions at a postion.')], HRESULT, 'GetCondition',
              ( ['in'], c_int, 'Pos' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(21808), helpstring('Set scalar conditions at a postion.')], HRESULT, 'SetCondition',
              ( ['in'], POINTER(IAgCrdnCondition), 'Ref' ),
              ( ['in'], c_int, 'Pos' )),
    COMMETHOD([dispid(21809), helpstring('Remove scalar condition at a postion.')], HRESULT, 'RemoveCondition',
              ( ['in'], c_int, 'Pos' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(21810), helpstring('Adds a condition at the end of the list.')], HRESULT, 'AddCondition',
              ( ['in'], POINTER(IAgCrdnCondition), 'Ref' )),
]
################################################################
## code template for _IAgCrdnConditionCombined implementation
##class _IAgCrdnConditionCombined_Impl(object):
##    @property
##    def Type(self):
##        'Returns the type of condition.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Returns result of evaluating continuously varying condition metric at the specified time, used for detecting condition crossings.'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Returns result of evaluating continuously varying condition metric and its rate of change at the specified time, used for detecting condition crossings.'
##        #return ppRetVal
##
##    def _get(self):
##        'Sets/Returns scalar condition combined operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Sets/Returns scalar condition combined operation.'
##    CombineOperation = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ConditionCount(self):
##        'Returns the scalar condition vectore size.'
##        #return pRetVal
##
##    def GetAllConditions(self):
##        'Get all scalar conditions.'
##        #return ppRetVal
##
##    def SetAllConditions(self, Conditions):
##        'Set all scalar conditions.'
##        #return 
##
##    def GetCondition(self, Pos):
##        'Get scalar conditions at a postion.'
##        #return ppRetVal
##
##    def SetCondition(self, Ref, Pos):
##        'Set scalar conditions at a postion.'
##        #return 
##
##    def RemoveCondition(self, Pos):
##        'Remove scalar condition at a postion.'
##        #return 
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def AddCondition(self, Ref):
##        'Adds a condition at the end of the list.'
##        #return 
##

class IAgCrdnIntervalsFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The filter selects intervals of at least/most certain duration.'
    _iid_ = GUID('{C1C50016-68DE-4166-AA51-11D6D0687798}')
    _idlflags_ = ['oleautomation']
IAgCrdnIntervalsFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Choose a duration type (at least/at most).')], HRESULT, 'DurationKind',
              ( ['out', 'retval'], POINTER(AgECrdnIntervalDurationKind), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Choose a duration type (at least/at most).')], HRESULT, 'DurationKind',
              ( ['in'], AgECrdnIntervalDurationKind, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The interval duration.')], HRESULT, 'IntervalDuration',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The interval duration.')], HRESULT, 'IntervalDuration',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnIntervalsFilter implementation
##class IAgCrdnIntervalsFilter_Impl(object):
##    def _get(self):
##        'Choose a duration type (at least/at most).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Choose a duration type (at least/at most).'
##    DurationKind = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The interval duration.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The interval duration.'
##    IntervalDuration = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnEventIntervalListMerged(CoClass):
    'Interval list created by merging two constituent interval lists using specified logical operation. It is possible to select either interval list or interval types for either or both constituents.'
    _reg_clsid_ = GUID('{8C4553E3-D10C-46F3-98B5-1A63FB3200E6}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventIntervalListMerged(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalListMerged'
    _iid_ = GUID('{1F335B30-06DB-4C63-B278-70034B4CC93C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventIntervalListMerged(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Interval list created by merging two constituent interval lists using specified logical operation. It is possible to select either interval list or interval types for either or both constituents.'
    _iid_ = GUID('{7EBE6812-2259-46C9-8452-1C82E965F1E2}')
    _idlflags_ = ['oleautomation']
AgCrdnEventIntervalListMerged._com_interfaces_ = [_IAgCrdnEventIntervalListMerged, IAgCrdnEventIntervalListMerged, IAgCrdnEventIntervalList, IAgCrdn]

class AgCrdnVolumeLighting(CoClass):
    'A lighting volume interface.'
    _reg_clsid_ = GUID('{901F0620-68BB-4E11-9A79-9864E4A22A73}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVolumeLighting(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeLighting'
    _iid_ = GUID('{55AB8542-1ADE-47D2-A27C-D9661B5BD544}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVolumeLighting(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A lighting volume interface.'
    _iid_ = GUID('{2BD23C45-F637-4AE8-AB18-FADD8EEC2559}')
    _idlflags_ = ['oleautomation']
AgCrdnVolumeLighting._com_interfaces_ = [_IAgCrdnVolumeLighting, IAgCrdnVolumeLighting, IAgCrdnVolume, IAgCrdn]

_IAgCrdnGridValuesCustom._methods_ = [
    COMMETHOD([dispid(33401), helpstring('Grid values method type.'), 'propget'], HRESULT, 'MethodType',
              ( ['out', 'retval'], POINTER(AgECrdnVolumetricGridValuesMethodType), 'pRetVal' )),
    COMMETHOD([dispid(33701), helpstring('Custom set of coordinate values.'), 'propget'], HRESULT, 'Values',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(33701), helpstring('Custom set of coordinate values.'), 'propput'], HRESULT, 'Values',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnGridValuesCustom implementation
##class _IAgCrdnGridValuesCustom_Impl(object):
##    @property
##    def MethodType(self):
##        'Grid values method type.'
##        #return pRetVal
##
##    def _get(self):
##        'Custom set of coordinate values.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Custom set of coordinate values.'
##    Values = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnEventIntervalListScaled(CoClass):
    "Interval List defined by scaling every interval in original interval list using either absolute or relative scale. If resulting interval's start becomes after its stop, the interval is removed from scaled list..."
    _reg_clsid_ = GUID('{04C38FBF-A36F-4999-8BB2-533DECCA213E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventIntervalListScaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalListScaled'
    _iid_ = GUID('{441C52E1-6C82-46F2-AD95-548A13422B8C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventIntervalListScaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Interval List defined by scaling every interval in original interval list using either absolute or relative scale. If resulting interval's start becomes after its stop, the interval is removed from scaled list..."
    _iid_ = GUID('{EE42809A-71E5-4175-8B74-3AEBC934D9FC}')
    _idlflags_ = ['oleautomation']
AgCrdnEventIntervalListScaled._com_interfaces_ = [_IAgCrdnEventIntervalListScaled, IAgCrdnEventIntervalListScaled, IAgCrdnEventIntervalList, IAgCrdn]

class AgCrdnVolumeOverTime(CoClass):
    'An over time volume interface.'
    _reg_clsid_ = GUID('{1B0F2374-257B-4624-8918-5BD1D7BE1462}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVolumeOverTime(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeOverTime'
    _iid_ = GUID('{0E20B24F-35C0-422A-A898-71AB55871FF6}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnVolumeOverTime(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'An over time volume interface.'
    _iid_ = GUID('{424054E9-E380-4A75-AD97-738C9E2FAE75}')
    _idlflags_ = ['oleautomation']
AgCrdnVolumeOverTime._com_interfaces_ = [_IAgCrdnVolumeOverTime, IAgCrdnVolumeOverTime, IAgCrdnVolume, IAgCrdn]

class AgCrdnSystemFactory(CoClass):
    'A Factory class to create VGT systems.'
    _reg_clsid_ = GUID('{74A75333-CA57-487B-886D-04A70A302013}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnSystemFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A Factory interface to create VGT systems.'
    _iid_ = GUID('{8CCFED8A-AA26-455D-BFF2-DBE1442D8260}')
    _idlflags_ = ['oleautomation']
AgCrdnSystemFactory._com_interfaces_ = [_IAgCrdnSystemFactory, IAgCrdnSystemFactory]

class _IAgCrdnConditionSet(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnConditionSet'
    _iid_ = GUID('{AA0903D2-653F-4476-AB53-A8CFAD6548D2}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnConditionSetEvaluateWithRateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents the results returned by ConditionSet.EvaluateWithRate.'
    _iid_ = GUID('{D077B2C6-087F-4891-87C7-2DB5C8F3E1FB}')
    _idlflags_ = ['oleautomation']
_IAgCrdnConditionSet._methods_ = [
    COMMETHOD([dispid(29601), helpstring('Returns the type of condition set.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnConditionSetType), 'pRetVal' )),
    COMMETHOD([dispid(29603), helpstring('Returns an array of results of evaluating continuously varying condition metrics, one for each condition in the set, at the specified time, used for detecting condition crossings.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionSetEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(29604), helpstring('Returns an array of results of evaluating continuously varying condition metrics and their rates of change, one for each condition in the set, at the specified time, used for detecting condition crossings.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionSetEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnConditionSet implementation
##class _IAgCrdnConditionSet_Impl(object):
##    @property
##    def Type(self):
##        'Returns the type of condition set.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Returns an array of results of evaluating continuously varying condition metrics, one for each condition in the set, at the specified time, used for detecting condition crossings.'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Returns an array of results of evaluating continuously varying condition metrics and their rates of change, one for each condition in the set, at the specified time, used for detecting condition crossings.'
##        #return ppRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnAngleFindResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The computed angle. The value of the angle is in "AngleUnit" dimension.')], HRESULT, 'Angle',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The first of the two vectors the angle is measured.')], HRESULT, 'VectorFrom',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The second of the two vectors the angle is measured.')], HRESULT, 'VectorTo',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The vector the angle is rotated about.')], HRESULT, 'VectorAbout',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAngleFindResult implementation
##class IAgCrdnAngleFindResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Angle(self):
##        'The computed angle. The value of the angle is in "AngleUnit" dimension.'
##        #return pRetVal
##
##    @property
##    def VectorFrom(self):
##        'The first of the two vectors the angle is measured.'
##        #return ppRetVal
##
##    @property
##    def VectorTo(self):
##        'The second of the two vectors the angle is measured.'
##        #return ppRetVal
##
##    @property
##    def VectorAbout(self):
##        'The vector the angle is rotated about.'
##        #return ppRetVal
##

_IAgCrdnEventIntervalListScaled._methods_ = [
    COMMETHOD([dispid(13509), helpstring('Return the type of interval list.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalListType), 'pRetVal' )),
    COMMETHOD([dispid(13502), helpstring('Get the label descriptions associated with the interval list.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13503), helpstring('Get the labels associated with the interval list.'), 'propget'], HRESULT, 'Descriptions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13507), helpstring('Return computed interval list that can be empty.')], HRESULT, 'FindIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalListResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13508), helpstring('Determine if specified time falls within computed interval list.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17705), helpstring('The original interval list.'), 'propget'], HRESULT, 'OriginalIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(17705), helpstring('The original interval list.'), 'propput'], HRESULT, 'OriginalIntervals',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD([dispid(17706), helpstring("The absolute increment value which creates a new interval list by expanding (or shortening if negative) every interval in the original interval list by shifting interval's start/stop times equally by half of specified increment value."), 'propget'], HRESULT, 'AbsoluteIncrement',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17706), helpstring("The absolute increment value which creates a new interval list by expanding (or shortening if negative) every interval in the original interval list by shifting interval's start/stop times equally by half of specified increment value."), 'propput'], HRESULT, 'AbsoluteIncrement',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17707), helpstring('The relative increment value from which absolute increment is obtained by multiplying relative value by interval duration...'), 'propget'], HRESULT, 'RelativeIncrement',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17707), helpstring('The relative increment value from which absolute increment is obtained by multiplying relative value by interval duration...'), 'propput'], HRESULT, 'RelativeIncrement',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17708), helpstring('Specify whether to use absolute or relative increment.'), 'propget'], HRESULT, 'UseAbsoluteIncrement',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17708), helpstring('Specify whether to use absolute or relative increment.'), 'propput'], HRESULT, 'UseAbsoluteIncrement',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalListScaled implementation
##class _IAgCrdnEventIntervalListScaled_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval list.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the label descriptions associated with the interval list.'
##        #return ppRetVal
##
##    @property
##    def Descriptions(self):
##        'Get the labels associated with the interval list.'
##        #return ppRetVal
##
##    def FindIntervals(self):
##        'Return computed interval list that can be empty.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval list.'
##        #return pRetVal
##
##    def _get(self):
##        'The original interval list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original interval list.'
##    OriginalIntervals = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "The absolute increment value which creates a new interval list by expanding (or shortening if negative) every interval in the original interval list by shifting interval's start/stop times equally by half of specified increment value."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "The absolute increment value which creates a new interval list by expanding (or shortening if negative) every interval in the original interval list by shifting interval's start/stop times equally by half of specified increment value."
##    AbsoluteIncrement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The relative increment value from which absolute increment is obtained by multiplying relative value by interval duration...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The relative increment value from which absolute increment is obtained by multiplying relative value by interval duration...'
##    RelativeIncrement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use absolute or relative increment.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use absolute or relative increment.'
##    UseAbsoluteIncrement = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnEventEpoch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Event set at specified date/time.'
    _iid_ = GUID('{0DAC5013-AFB1-40E0-A958-D48FDC514EDD}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventEpoch._methods_ = [
    COMMETHOD(['propget', helpstring('An explicit date/time, set using any STK date format.')], HRESULT, 'Epoch',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('An explicit date/time, set using any STK date format.')], HRESULT, 'Epoch',
              ( ['in'], VARIANT, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEventEpoch implementation
##class IAgCrdnEventEpoch_Impl(object):
##    def _get(self):
##        'An explicit date/time, set using any STK date format.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'An explicit date/time, set using any STK date format.'
##    Epoch = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnVolumeGridGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Access or create VGT volume grids associated with an object or a central body.'
    _iid_ = GUID('{62BFAA70-7C0A-4915-9E23-B2942E13424F}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
class IAgCrdnVolumeGridFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The factory is used to create instances of volume grids.'
    _iid_ = GUID('{E4EC1B42-A11A-4D33-AAB8-F0E2A49E713E}')
    _idlflags_ = ['oleautomation']
IAgCrdnVolumeGridGroup._methods_ = [
    COMMETHOD([dispid(31501), helpstring('Removes a specified element.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'EventName' )),
    COMMETHOD([dispid(31502), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(31503), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the group.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31505), helpstring('Returns a factory object used to create volume grid components.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGridFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns an element by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeGridGroup implementation
##class IAgCrdnVolumeGridGroup_Impl(object):
##    def Remove(self, EventName):
##        'Removes a specified element.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the group.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a factory object used to create volume grid components.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns an element by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

class _IAgCrdnAxesAngularOffset(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesAngularOffset'
    _iid_ = GUID('{C4D90572-5305-4829-84F4-14F2254CF5EE}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnAxesAngularOffset._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1701), helpstring('Returns a type of the axes object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAxesType), 'pRetVal' )),
    COMMETHOD([dispid(1706), helpstring('Find an angular velocity and orientation in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1707), helpstring('Find an orientation in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1708), helpstring('Returns an object that allows modifying the axes labels.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(2401), helpstring('Specify a spin vector.'), 'propget'], HRESULT, 'SpinVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(2402), helpstring('Specify a rotational angle.'), 'propget'], HRESULT, 'RotationAngle',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(2403), helpstring('Specify a reference axes.'), 'propget'], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(2404), helpstring('Specify an additional rotational offset.'), 'propget'], HRESULT, 'FixedOffsetAngle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(2404), helpstring('Specify an additional rotational offset.'), 'propput'], HRESULT, 'FixedOffsetAngle',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1709), helpstring('Returns the X axis of the component.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1710), helpstring('Returns the Y axis of the component.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1711), helpstring('Returns the Z axis of the component.'), 'propget'], HRESULT, 'Z',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1712), helpstring('Transforms the input vector from this axes into the output axes.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1713), helpstring("Transforms the input vector and vector's rate from this axes into the output axes.")], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'RateInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAxesAngularOffset implementation
##class _IAgCrdnAxesAngularOffset_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the axes object.'
##        #return pRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Find an angular velocity and orientation in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Find an orientation in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        'Returns an object that allows modifying the axes labels.'
##        #return ppRetVal
##
##    @property
##    def SpinVector(self):
##        'Specify a spin vector.'
##        #return ppRetVal
##
##    @property
##    def RotationAngle(self):
##        'Specify a rotational angle.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify an additional rotational offset.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an additional rotational offset.'
##    FixedOffsetAngle = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    @property
##    def X(self):
##        'Returns the X axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Y(self):
##        'Returns the Y axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Z(self):
##        'Returns the Z axis of the component.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputAxes, VectorInMyAxes):
##        'Transforms the input vector from this axes into the output axes.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputAxes, VectorInMyAxes, RateInMyAxes):
##        "Transforms the input vector and vector's rate from this axes into the output axes."
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

_IAgCrdnVectorOrbitAngularMomentum._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(7801), helpstring('Specify a central body.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(7802), helpstring('Eliptical orbit is fit to the current motion of the reference point according to the selected mean theory.'), 'propget'], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(7803), helpstring('Specify the mean element theory type for approximating motion.'), 'propget'], HRESULT, 'MeanElementType',
              ( ['out', 'retval'], POINTER(AgECrdnMeanElementTheory), 'pRetVal' )),
    COMMETHOD([dispid(7803), helpstring('Specify the mean element theory type for approximating motion.'), 'propput'], HRESULT, 'MeanElementType',
              ( ['in'], AgECrdnMeanElementTheory, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorOrbitAngularMomentum implementation
##class _IAgCrdnVectorOrbitAngularMomentum_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Eliptical orbit is fit to the current motion of the reference point according to the selected mean theory.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify the mean element theory type for approximating motion.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify the mean element theory type for approximating motion.'
##    MeanElementType = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnPointSamplingInterval(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointSamplingInterval'
    _iid_ = GUID('{7AA0F683-0858-411E-A303-E80E27E3EF5A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnPointSamplingInterval._methods_ = [
    COMMETHOD([dispid(30003), helpstring('A time array associated with the interval.'), 'propget'], HRESULT, 'Times',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(30004), helpstring("An array of 3-tuples each tuple representing the point's cartesian position (x,y,z)."), 'propget'], HRESULT, 'Positions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(30005), helpstring('An array of velocities.'), 'propget'], HRESULT, 'Velocities',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(30001), helpstring('The start time of the interval.'), 'propget'], HRESULT, 'Start',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(30002), helpstring('The stop time of the interval.'), 'propget'], HRESULT, 'Stop',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnPointSamplingInterval implementation
##class _IAgCrdnPointSamplingInterval_Impl(object):
##    @property
##    def Times(self):
##        'A time array associated with the interval.'
##        #return ppRetVal
##
##    @property
##    def Positions(self):
##        "An array of 3-tuples each tuple representing the point's cartesian position (x,y,z)."
##        #return ppRetVal
##
##    @property
##    def Velocities(self):
##        'An array of velocities.'
##        #return ppRetVal
##
##    @property
##    def Start(self):
##        'The start time of the interval.'
##        #return pRetVal
##
##    @property
##    def Stop(self):
##        'The stop time of the interval.'
##        #return pRetVal
##

IAgCrdnVectorFixedInAxes._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a reference axes.')], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify the vector direction.')], HRESULT, 'Direction',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDirection)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVectorFixedInAxes implementation
##class IAgCrdnVectorFixedInAxes_Impl(object):
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    @property
##    def Direction(self):
##        'Specify the vector direction.'
##        #return ppRetVal
##

IAgCrdnPointFile._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a path to a file. The file must exist. Specifying an invalid path will generate an exception.')], HRESULT, 'Filename',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a path to a file. The file must exist. Specifying an invalid path will generate an exception.')], HRESULT, 'Filename',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnPointFile implementation
##class IAgCrdnPointFile_Impl(object):
##    def _get(self):
##        'Specify a path to a file. The file must exist. Specifying an invalid path will generate an exception.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a path to a file. The file must exist. Specifying an invalid path will generate an exception.'
##    Filename = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnAxesLabels(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesLabels'
    _iid_ = GUID('{29895BEF-9C71-4D8B-91D5-AC46E47EA2E5}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnAxesLabels._methods_ = [
    COMMETHOD([dispid(1601), helpstring('Specify an X axis label.'), 'propget'], HRESULT, 'LabelX',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(1601), helpstring('Specify an X axis label.'), 'propput'], HRESULT, 'LabelX',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(1602), helpstring('Specify a Y axis label.'), 'propget'], HRESULT, 'LabelY',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(1602), helpstring('Specify a Y axis label.'), 'propput'], HRESULT, 'LabelY',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(1603), helpstring('Specify a Z axis label.'), 'propget'], HRESULT, 'LabelZ',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(1603), helpstring('Specify a Z axis label.'), 'propput'], HRESULT, 'LabelZ',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnAxesLabels implementation
##class _IAgCrdnAxesLabels_Impl(object):
##    def _get(self):
##        'Specify an X axis label.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an X axis label.'
##    LabelX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a Y axis label.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a Y axis label.'
##    LabelY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a Z axis label.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a Z axis label.'
##    LabelZ = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnVectorDisplacement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorDisplacement'
    _iid_ = GUID('{D4A8A7FB-B868-4390-AE7F-60C988E21E57}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnVectorDisplacement._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6601), helpstring("Specify the vector's origin point."), 'propget'], HRESULT, 'Origin',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(6602), helpstring("Specify the vector's destination point."), 'propget'], HRESULT, 'Destination',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(6603), helpstring('Controls whether to take a light speed delay into account.'), 'propget'], HRESULT, 'Apparent',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(6603), helpstring('Controls whether to take a light speed delay into account.'), 'propput'], HRESULT, 'Apparent',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(6604), helpstring('Set to true if you do not want to calculate the abberation correction. This property is read-only if Apparent is set to false.'), 'propget'], HRESULT, 'IgnoreAbberation',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(6604), helpstring('Set to true if you do not want to calculate the abberation correction. This property is read-only if Apparent is set to false.'), 'propput'], HRESULT, 'IgnoreAbberation',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(6605), helpstring('Specify a sense of signal transmission. This property is read-only if Apparent is set to false.'), 'propget'], HRESULT, 'SignalSense',
              ( ['out', 'retval'], POINTER(AgECrdnSignalSense), 'pRetVal' )),
    COMMETHOD([dispid(6605), helpstring('Specify a sense of signal transmission. This property is read-only if Apparent is set to false.'), 'propput'], HRESULT, 'SignalSense',
              ( ['in'], AgECrdnSignalSense, 'pRetVal' )),
    COMMETHOD([dispid(6606), helpstring('Specify a frame in which the light time delay is computed. This property is read-only if Apparent is set to false.'), 'propget'], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorDisplacement implementation
##class _IAgCrdnVectorDisplacement_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Origin(self):
##        "Specify the vector's origin point."
##        #return ppRetVal
##
##    @property
##    def Destination(self):
##        "Specify the vector's destination point."
##        #return ppRetVal
##
##    def _get(self):
##        'Controls whether to take a light speed delay into account.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Controls whether to take a light speed delay into account.'
##    Apparent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Set to true if you do not want to calculate the abberation correction. This property is read-only if Apparent is set to false.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Set to true if you do not want to calculate the abberation correction. This property is read-only if Apparent is set to false.'
##    IgnoreAbberation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a sense of signal transmission. This property is read-only if Apparent is set to false.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a sense of signal transmission. This property is read-only if Apparent is set to false.'
##    SignalSense = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ReferenceSystem(self):
##        'Specify a frame in which the light time delay is computed. This property is read-only if Apparent is set to false.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnAngleRefTo._methods_ = [
    COMMETHOD([helpstring('Sets a new angle.')], HRESULT, 'SetPath',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD([helpstring('Sets a new angle.')], HRESULT, 'SetAngle',
              ( ['in'], POINTER(IAgCrdnAngle), 'Angle' )),
    COMMETHOD([helpstring('Returns the actual angle object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.')], HRESULT, 'GetAngle',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngle)), 'ppRetVal' )),
    COMMETHOD([helpstring('Tests whether the input component and the target component form a cyclic dependency.')], HRESULT, 'HasCyclicDependency',
              ( ['in'], POINTER(IAgCrdnAngle), 'Angle' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAngleRefTo implementation
##class IAgCrdnAngleRefTo_Impl(object):
##    def SetPath(self, Path):
##        'Sets a new angle.'
##        #return 
##
##    def SetAngle(self, Angle):
##        'Sets a new angle.'
##        #return 
##
##    def GetAngle(self):
##        'Returns the actual angle object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.'
##        #return ppRetVal
##
##    def HasCyclicDependency(self, Angle):
##        'Tests whether the input component and the target component form a cyclic dependency.'
##        #return pRetVal
##

IAgCrdnAxesPlugin._methods_ = [
    COMMETHOD(['propget', helpstring('A programmatic ID associated with the component.')], HRESULT, 'ProgID',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Plugin's Display Name associated with the COM plugin.")], HRESULT, 'DisplayName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('An array of names of the properties that can be used to configure the plugin.')], HRESULT, 'AvailableProperties',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Reset the plugin.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring('The method is used to set the plugin properties. The method throws an exception if the specified property does not exist, invalid value was specified or the specified property is read-only.')], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([helpstring('The method reads a value of the specified plugin property. The method throws an exception if the property does not exist.')], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAxesPlugin implementation
##class IAgCrdnAxesPlugin_Impl(object):
##    @property
##    def ProgID(self):
##        'A programmatic ID associated with the component.'
##        #return pRetVal
##
##    @property
##    def DisplayName(self):
##        "Plugin's Display Name associated with the COM plugin."
##        #return pRetVal
##
##    @property
##    def AvailableProperties(self):
##        'An array of names of the properties that can be used to configure the plugin.'
##        #return ppRetVal
##
##    def Reset(self):
##        'Reset the plugin.'
##        #return 
##
##    def SetProperty(self, Name, Value):
##        'The method is used to set the plugin properties. The method throws an exception if the specified property does not exist, invalid value was specified or the specified property is read-only.'
##        #return 
##
##    def GetProperty(self, Name):
##        'The method reads a value of the specified plugin property. The method throws an exception if the property does not exist.'
##        #return pRetVal
##

IAgCrdnEventIntervalGroup._methods_ = [
    COMMETHOD([dispid(15601), helpstring('Removes an element by name.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'EventIntervalName' )),
    COMMETHOD([dispid(15602), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(15603), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the group.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15605), helpstring('Returns a Factory object used to create custom event intervals.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns an element by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalGroup implementation
##class IAgCrdnEventIntervalGroup_Impl(object):
##    def Remove(self, EventIntervalName):
##        'Removes an element by name.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the group.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a Factory object used to create custom event intervals.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns an element by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

IAgCrdnEventExtremum._methods_ = [
    COMMETHOD(['propget', helpstring('The extremum type (either minimum or maximum) for the time instant.')], HRESULT, 'ExtremumType',
              ( ['out', 'retval'], POINTER(AgECrdnExtremumConstants), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The extremum type (either minimum or maximum) for the time instant.')], HRESULT, 'ExtremumType',
              ( ['in'], AgECrdnExtremumConstants, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The scalar calculation.')], HRESULT, 'Calculation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The scalar calculation.')], HRESULT, 'Calculation',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A custom interval list or a single interval. By default it is set to overall availability of host object. This determines time limits within which global minimum or maximum is sought. The time limits will be used if UseCustomTimeLimits is set to true.')], HRESULT, 'CustomTimeLimits',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A custom interval list or a single interval. By default it is set to overall availability of host object. This determines time limits within which global minimum or maximum is sought. The time limits will be used if UseCustomTimeLimits is set to true.')], HRESULT, 'CustomTimeLimits',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether to use specified custom interval list (see CustomTimeLimits).')], HRESULT, 'UseCustomTimeLimits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether to use specified custom interval list (see CustomTimeLimits).')], HRESULT, 'UseCustomTimeLimits',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Determines if computed time of extremum is saved/loaded, otherwise it is recomputed on load if necessary.')], HRESULT, 'SaveDataOption',
              ( ['out', 'retval'], POINTER(AgECrdnSaveDataOption), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Determines if computed time of extremum is saved/loaded, otherwise it is recomputed on load if necessary.')], HRESULT, 'SaveDataOption',
              ( ['in'], AgECrdnSaveDataOption, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A Convergence definition, which uses time tolerance to determine when time of extremum is found.')], HRESULT, 'Convergence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConverge)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A Convergence definition, which uses time tolerance to determine when time of extremum is found.')], HRESULT, 'Convergence',
              ( ['in'], POINTER(IAgCrdnConverge), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventExtremum implementation
##class IAgCrdnEventExtremum_Impl(object):
##    def _get(self):
##        'The extremum type (either minimum or maximum) for the time instant.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The extremum type (either minimum or maximum) for the time instant.'
##    ExtremumType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The scalar calculation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The scalar calculation.'
##    Calculation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A custom interval list or a single interval. By default it is set to overall availability of host object. This determines time limits within which global minimum or maximum is sought. The time limits will be used if UseCustomTimeLimits is set to true.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A custom interval list or a single interval. By default it is set to overall availability of host object. This determines time limits within which global minimum or maximum is sought. The time limits will be used if UseCustomTimeLimits is set to true.'
##    CustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use specified custom interval list (see CustomTimeLimits).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use specified custom interval list (see CustomTimeLimits).'
##    UseCustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Determines if computed time of extremum is saved/loaded, otherwise it is recomputed on load if necessary.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Determines if computed time of extremum is saved/loaded, otherwise it is recomputed on load if necessary.'
##    SaveDataOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##    Convergence = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnCalcScalarPlugin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Use a scalar calculation plugin.'
    _iid_ = GUID('{8FA2E8E8-2173-4CEC-8F53-D4CA79A7C9AE}')
    _idlflags_ = ['oleautomation']
IAgCrdnCalcScalarPlugin._methods_ = [
    COMMETHOD(['propget', helpstring('A programmatic ID associated with the component.')], HRESULT, 'ProgID',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("The plugin's Display Name associated with the COM plugin.")], HRESULT, 'DisplayName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('An array of names of the properties that can be used to configure the plugin.')], HRESULT, 'AvailableProperties',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Reset the plugin.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring('The method is used to set the plugin properties. The method throws an exception if the specified property does not exist, an invalid value was specified or the specified property is read-only.')], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([helpstring('The method reads a value of the specified plugin property. The method throws an exception if the property does not exist.')], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnCalcScalarPlugin implementation
##class IAgCrdnCalcScalarPlugin_Impl(object):
##    @property
##    def ProgID(self):
##        'A programmatic ID associated with the component.'
##        #return pRetVal
##
##    @property
##    def DisplayName(self):
##        "The plugin's Display Name associated with the COM plugin."
##        #return pRetVal
##
##    @property
##    def AvailableProperties(self):
##        'An array of names of the properties that can be used to configure the plugin.'
##        #return ppRetVal
##
##    def Reset(self):
##        'Reset the plugin.'
##        #return 
##
##    def SetProperty(self, Name, Value):
##        'The method is used to set the plugin properties. The method throws an exception if the specified property does not exist, an invalid value was specified or the specified property is read-only.'
##        #return 
##
##    def GetProperty(self, Name):
##        'The method reads a value of the specified plugin property. The method throws an exception if the property does not exist.'
##        #return pRetVal
##


# values for enumeration 'AgECrdnQuadrantType'
eCrdnQuadrantXY = 1
eCrdnQuadrantYX = 2
eCrdnQuadrantXZ = 3
eCrdnQuadrantZX = 4
eCrdnQuadrantYZ = 5
eCrdnQuadrantZY = 6
AgECrdnQuadrantType = c_int # enum
_IAgCrdnPlaneQuadrant._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(2201), helpstring('Returns a type of the plane object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPlaneType), 'pRetVal' )),
    COMMETHOD([dispid(2202), helpstring("Computes the plane's axes vectors in a specified reference axes.")], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2203), helpstring("Computes the plane's axes vectors and their rates in a specified reference axes.")], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2204), helpstring('Computes the position and X and Y axes in the specified coordinate system.')], HRESULT, 'FindInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2205), helpstring('Computes the position, X and Y axes and their rates of change in the specified coordinate system.')], HRESULT, 'FindInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2206), helpstring("Allows configuring the plane's X and Y axes labels."), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(4101), helpstring('Specify a reference system.'), 'propget'], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4102), helpstring('Specify a quadrant.'), 'propget'], HRESULT, 'Quadrant',
              ( ['out', 'retval'], POINTER(AgECrdnQuadrantType), 'pRetVal' )),
    COMMETHOD([dispid(4102), helpstring('Specify a quadrant.'), 'propput'], HRESULT, 'Quadrant',
              ( ['in'], AgECrdnQuadrantType, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPlaneQuadrant implementation
##class _IAgCrdnPlaneQuadrant_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the plane object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        "Computes the plane's axes vectors in a specified reference axes."
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        "Computes the plane's axes vectors and their rates in a specified reference axes."
##        #return ppRetVal
##
##    def FindInSystem(self, Epoch, System):
##        'Computes the position and X and Y axes in the specified coordinate system.'
##        #return ppRetVal
##
##    def FindInSystemWithRate(self, Epoch, System):
##        'Computes the position, X and Y axes and their rates of change in the specified coordinate system.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        "Allows configuring the plane's X and Y axes labels."
##        #return ppRetVal
##
##    @property
##    def ReferenceSystem(self):
##        'Specify a reference system.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a quadrant.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a quadrant.'
##    Quadrant = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnAxesAttitudeFile(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesAttitudeFile'
    _iid_ = GUID('{417843C4-43BB-4059-8117-0B1F422A88BE}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnAxesAttitudeFile._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1701), helpstring('Returns a type of the axes object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAxesType), 'pRetVal' )),
    COMMETHOD([dispid(1706), helpstring('Find an angular velocity and orientation in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1707), helpstring('Find an orientation in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1708), helpstring('Returns an object that allows modifying the axes labels.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(2801), helpstring('Specify a path to a file. The file must exist. Specifying an invalid path will generate an exception.'), 'propget'], HRESULT, 'Filename',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(2801), helpstring('Specify a path to a file. The file must exist. Specifying an invalid path will generate an exception.'), 'propput'], HRESULT, 'Filename',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1709), helpstring('Returns the X axis of the component.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1710), helpstring('Returns the Y axis of the component.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1711), helpstring('Returns the Z axis of the component.'), 'propget'], HRESULT, 'Z',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1712), helpstring('Transforms the input vector from this axes into the output axes.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1713), helpstring("Transforms the input vector and vector's rate from this axes into the output axes.")], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'RateInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAxesAttitudeFile implementation
##class _IAgCrdnAxesAttitudeFile_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the axes object.'
##        #return pRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Find an angular velocity and orientation in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Find an orientation in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        'Returns an object that allows modifying the axes labels.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a path to a file. The file must exist. Specifying an invalid path will generate an exception.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a path to a file. The file must exist. Specifying an invalid path will generate an exception.'
##    Filename = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    @property
##    def X(self):
##        'Returns the X axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Y(self):
##        'Returns the Y axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Z(self):
##        'Returns the Z axis of the component.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputAxes, VectorInMyAxes):
##        'Transforms the input vector from this axes into the output axes.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputAxes, VectorInMyAxes, RateInMyAxes):
##        "Transforms the input vector and vector's rate from this axes into the output axes."
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnPointSamplingIntervalCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointSamplingIntervalCollection'
    _iid_ = GUID('{9F3A4CD3-1770-47B2-937D-44DCB7B2CD73}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnPointSamplingInterval(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The interface represents an interval with the time, position and velocity arrays.'
    _iid_ = GUID('{38475E97-53BD-4E11-AC30-9AC653994F51}')
    _idlflags_ = ['oleautomation']
_IAgCrdnPointSamplingIntervalCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('Number of elements in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Accesses an element at the specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointSamplingInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnPointSamplingIntervalCollection implementation
##class _IAgCrdnPointSamplingIntervalCollection_Impl(object):
##    @property
##    def Count(self):
##        'Number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Accesses an element at the specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

IAgCrdnPlane._methods_ = [
    COMMETHOD(['propget', helpstring('Returns a type of the plane object.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPlaneType), 'pRetVal' )),
    COMMETHOD([helpstring("Computes the plane's axes vectors in a specified reference axes.")], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([helpstring("Computes the plane's axes vectors and their rates in a specified reference axes.")], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes the position and X and Y axes in the specified coordinate system.')], HRESULT, 'FindInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInSystemResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes the position, X and Y axes and their rates of change in the specified coordinate system.')], HRESULT, 'FindInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Allows configuring the plane's X and Y axes labels.")], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneLabels)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPlane implementation
##class IAgCrdnPlane_Impl(object):
##    @property
##    def Type(self):
##        'Returns a type of the plane object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        "Computes the plane's axes vectors in a specified reference axes."
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        "Computes the plane's axes vectors and their rates in a specified reference axes."
##        #return ppRetVal
##
##    def FindInSystem(self, Epoch, System):
##        'Computes the position and X and Y axes in the specified coordinate system.'
##        #return ppRetVal
##
##    def FindInSystemWithRate(self, Epoch, System):
##        'Computes the position, X and Y axes and their rates of change in the specified coordinate system.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        "Allows configuring the plane's X and Y axes labels."
##        #return ppRetVal
##

IAgCrdnVectorLineOfNodes._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a central body.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference point.')], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVectorLineOfNodes implementation
##class IAgCrdnVectorLineOfNodes_Impl(object):
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Specify a reference point.'
##        #return ppRetVal
##

class IAgCrdnIntegral(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents a base class for integral definitions.'
    _iid_ = GUID('{9F4DA27D-391E-44CB-814F-3031F80635FF}')
    _idlflags_ = ['oleautomation']
IAgCrdnIntegral._methods_ = [
]
################################################################
## code template for IAgCrdnIntegral implementation
##class IAgCrdnIntegral_Impl(object):

IAgCrdnEvent._methods_ = [
    COMMETHOD(['propget', helpstring('Return the type of time instant.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventType), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Return time instant that corresponds to today's GMT midnight.")], HRESULT, 'Today',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Return time instant that corresponds to tomorrow's GMT midnight.")], HRESULT, 'Tomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Return time instant that corresponds to today's GMT noon.")], HRESULT, 'NoonToday',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Return time instant that corresponds to tomorrow's GMT noon.")], HRESULT, 'NoonTomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([helpstring('Return computed time instance if it occurs.')], HRESULT, 'FindOccurrence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventFindOccurrenceResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Return true if computed time instance occurs before or at specified time, return false otherwise.')], HRESULT, 'OccursBefore',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEvent implementation
##class IAgCrdnEvent_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time instant.'
##        #return pRetVal
##
##    @property
##    def Today(self):
##        "Return time instant that corresponds to today's GMT midnight."
##        #return ppRetVal
##
##    @property
##    def Tomorrow(self):
##        "Return time instant that corresponds to tomorrow's GMT midnight."
##        #return ppRetVal
##
##    @property
##    def NoonToday(self):
##        "Return time instant that corresponds to today's GMT noon."
##        #return ppRetVal
##
##    @property
##    def NoonTomorrow(self):
##        "Return time instant that corresponds to tomorrow's GMT noon."
##        #return ppRetVal
##
##    def FindOccurrence(self):
##        'Return computed time instance if it occurs.'
##        #return ppRetVal
##
##    def OccursBefore(self, Epoch):
##        'Return true if computed time instance occurs before or at specified time, return false otherwise.'
##        #return pRetVal
##

class IAgCrdnConditionSetFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The factory creates condition set components.'
    _iid_ = GUID('{3941CB08-D1BC-4A27-8AAA-FFBF4AB7E313}')
    _idlflags_ = ['oleautomation']
IAgCrdnConditionSetFactory._methods_ = [
    COMMETHOD([helpstring('Creates and registers a condition set using specified name, description, and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnConditionSetType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionSet)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a scalar thresholds condition set.')], HRESULT, 'CreateScalarThresholds',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionSet)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnConditionSetType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnConditionSetFactory implementation
##class IAgCrdnConditionSetFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Creates and registers a condition set using specified name, description, and type.'
##        #return ppRetVal
##
##    def CreateScalarThresholds(self, Name, Description):
##        'Create a scalar thresholds condition set.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##

IAgCrdnEventIntervalFixed._methods_ = [
    COMMETHOD(['propget', helpstring('The start time of the interval.')], HRESULT, 'StartTime',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The stop time of the interval.')], HRESULT, 'StopTime',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([helpstring("Set interval's start and stop times.")], HRESULT, 'SetInterval',
              ( ['in'], VARIANT, 'StartEpoch' ),
              ( ['in'], VARIANT, 'StopEpoch' )),
]
################################################################
## code template for IAgCrdnEventIntervalFixed implementation
##class IAgCrdnEventIntervalFixed_Impl(object):
##    @property
##    def StartTime(self):
##        'The start time of the interval.'
##        #return pRetVal
##
##    @property
##    def StopTime(self):
##        'The stop time of the interval.'
##        #return pRetVal
##
##    def SetInterval(self, StartEpoch, StopEpoch):
##        "Set interval's start and stop times."
##        #return 
##

class _IAgCrdnPointCBFixedOffset(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointCBFixedOffset'
    _iid_ = GUID('{CD2DB27C-415A-4CF4-A167-765D868357DD}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnPointCBFixedOffset._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1801), helpstring('Returns a type of the point object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([dispid(1802), helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1803), helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(30601), helpstring('Get the central body.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(30601), helpstring('Get the central body.'), 'propput'], HRESULT, 'CentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(30602), helpstring("Choose the point height's reference. Available options are central body ellipsoid (WSG84), terrain or Mean Sea Level."), 'propget'], HRESULT, 'ReferenceShape',
              ( ['out', 'retval'], POINTER(AgECrdnReferenceShapeType), 'pRetVal' )),
    COMMETHOD([dispid(30602), helpstring("Choose the point height's reference. Available options are central body ellipsoid (WSG84), terrain or Mean Sea Level."), 'propput'], HRESULT, 'ReferenceShape',
              ( ['in'], AgECrdnReferenceShapeType, 'pRetVal' )),
    COMMETHOD([dispid(30603), helpstring('A position of the point fixed on the central body.'), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgPosition)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPointCBFixedOffset implementation
##class _IAgCrdnPointCBFixedOffset_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##
##    def _get(self):
##        'Get the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the central body.'
##    CentralBody = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Choose the point height's reference. Available options are central body ellipsoid (WSG84), terrain or Mean Sea Level."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Choose the point height's reference. Available options are central body ellipsoid (WSG84), terrain or Mean Sea Level."
##    ReferenceShape = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Position(self):
##        'A position of the point fixed on the central body.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnSystemRefTo._methods_ = [
    COMMETHOD([helpstring('Sets a new system.')], HRESULT, 'SetPath',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD([helpstring('Sets a new system.')], HRESULT, 'SetSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'System' )),
    COMMETHOD([helpstring('Returns the actual system object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.')], HRESULT, 'GetSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([helpstring('Tests whether the input component and the target component form a cyclic dependency.')], HRESULT, 'HasCyclicDependency',
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnSystemRefTo implementation
##class IAgCrdnSystemRefTo_Impl(object):
##    def SetPath(self, Path):
##        'Sets a new system.'
##        #return 
##
##    def SetSystem(self, System):
##        'Sets a new system.'
##        #return 
##
##    def GetSystem(self):
##        'Returns the actual system object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.'
##        #return ppRetVal
##
##    def HasCyclicDependency(self, System):
##        'Tests whether the input component and the target component form a cyclic dependency.'
##        #return pRetVal
##

IAgCrdnAngleBetweenVectors._methods_ = [
    COMMETHOD(['propget', helpstring('Specify the first of the two vectors the angle is measured.')], HRESULT, 'FromVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify the second of the two vectors the angle is measured.')], HRESULT, 'ToVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAngleBetweenVectors implementation
##class IAgCrdnAngleBetweenVectors_Impl(object):
##    @property
##    def FromVector(self):
##        'Specify the first of the two vectors the angle is measured.'
##        #return ppRetVal
##
##    @property
##    def ToVector(self):
##        'Specify the second of the two vectors the angle is measured.'
##        #return ppRetVal
##

class IAgCrdnCalcScalarSurfaceDistanceBetweenPoints(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Surface distance along the specified central body ellipsoid between two points (or their respective projections if specified at altitude).'
    _iid_ = GUID('{90FFFBF2-81B2-43D2-BFD7-FFB049D195C6}')
    _idlflags_ = ['oleautomation']
IAgCrdnCalcScalarSurfaceDistanceBetweenPoints._methods_ = [
    COMMETHOD(['propget', helpstring('Starting point on the central body ellipsoid (or projection of point at altitude onto the ellipsoid).')], HRESULT, 'Point1',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Starting point on the central body ellipsoid (or projection of point at altitude onto the ellipsoid).')], HRESULT, 'Point1',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Terminating point on the central body ellipsoid (or projection of point at altitude onto the ellipsoid).')], HRESULT, 'Point2',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Terminating point on the central body ellipsoid (or projection of point at altitude onto the ellipsoid).')], HRESULT, 'Point2',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Central body on which the surface distance between points is to be calculated.')], HRESULT, 'SurfaceCentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Central body on which the surface distance between points is to be calculated.')], HRESULT, 'SurfaceCentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Time step used in numerical evaluation of scalar calculation time rate of change (derivatives using central differencing).')], HRESULT, 'DifferencingTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Time step used in numerical evaluation of scalar calculation time rate of change (derivatives using central differencing).')], HRESULT, 'DifferencingTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnCalcScalarSurfaceDistanceBetweenPoints implementation
##class IAgCrdnCalcScalarSurfaceDistanceBetweenPoints_Impl(object):
##    def _get(self):
##        'Starting point on the central body ellipsoid (or projection of point at altitude onto the ellipsoid).'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Starting point on the central body ellipsoid (or projection of point at altitude onto the ellipsoid).'
##    Point1 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Terminating point on the central body ellipsoid (or projection of point at altitude onto the ellipsoid).'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Terminating point on the central body ellipsoid (or projection of point at altitude onto the ellipsoid).'
##    Point2 = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Central body on which the surface distance between points is to be calculated.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Central body on which the surface distance between points is to be calculated.'
##    SurfaceCentralBody = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Time step used in numerical evaluation of scalar calculation time rate of change (derivatives using central differencing).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Time step used in numerical evaluation of scalar calculation time rate of change (derivatives using central differencing).'
##    DifferencingTimeStep = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AgECrdnFileInterpolatorType'
eCrdnFileInterpolatorInvalid = -1
eCrdnFileInterpolatorTypeLagrange = 1
eCrdnFileInterpolatorTypeHermite = 2
eCrdnFileInterpolatorTypeHoldPrevious = 3
eCrdnFileInterpolatorTypeHoldNext = 4
eCrdnFileInterpolatorTypeHoldNearest = 5
AgECrdnFileInterpolatorType = c_int # enum
IAgCrdnAngleFindWithRateResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The computed angle. The value of the angle is in "AngleUnit" dimension.')], HRESULT, 'Angle',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The computed angle rate. The value of the angle rate is in "AngleRateUnit" dimension.')], HRESULT, 'AngleRate',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The first of the two vectors the angle is measured.')], HRESULT, 'VectorFrom',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The second of the two vectors the angle is measured.')], HRESULT, 'VectorTo',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The vector the angle is rotated about.')], HRESULT, 'VectorAbout',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAngleFindWithRateResult implementation
##class IAgCrdnAngleFindWithRateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Angle(self):
##        'The computed angle. The value of the angle is in "AngleUnit" dimension.'
##        #return pRetVal
##
##    @property
##    def AngleRate(self):
##        'The computed angle rate. The value of the angle rate is in "AngleRateUnit" dimension.'
##        #return pRetVal
##
##    @property
##    def VectorFrom(self):
##        'The first of the two vectors the angle is measured.'
##        #return ppRetVal
##
##    @property
##    def VectorTo(self):
##        'The second of the two vectors the angle is measured.'
##        #return ppRetVal
##
##    @property
##    def VectorAbout(self):
##        'The vector the angle is rotated about.'
##        #return ppRetVal
##

IAgCrdnPointFixedInSystem._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a reference system.')], HRESULT, 'Reference',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Specify the point's position. The position is relative with respect to the specified reference system.")], HRESULT, 'FixedPoint',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgPosition)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPointFixedInSystem implementation
##class IAgCrdnPointFixedInSystem_Impl(object):
##    @property
##    def Reference(self):
##        'Specify a reference system.'
##        #return ppRetVal
##
##    @property
##    def FixedPoint(self):
##        "Specify the point's position. The position is relative with respect to the specified reference system."
##        #return ppRetVal
##

class _IAgCrdnParameterSetTrajectory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnParameterSetTrajectory'
    _iid_ = GUID('{3BA59FC3-4D4D-4A0F-BF98-7FCCB4FD161E}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnParameterSetTrajectory._methods_ = [
    COMMETHOD([dispid(21203), helpstring('Get the type of parameter set.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnParameterSetType), 'pRetVal' )),
    COMMETHOD([dispid(21201), helpstring('Get the labels identifying hierarchy of representations within parameter set.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21206), helpstring('Get the names identifying types of dimensions of individual scalars within parameter set.'), 'propget'], HRESULT, 'Dimensions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21202), helpstring('Get the names identifying individual scalars within parameter set.'), 'propget'], HRESULT, 'ScalarNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21204), helpstring('Return results of computing individual scalars within parameter set at the specified time.')], HRESULT, 'Calculate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21205), helpstring('Return results of computing individual scalars and their time derivatives within parameter set at the specified time.')], HRESULT, 'CalculateWithDerivative',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21701), helpstring('Get the point for which trajectory representations are computed.'), 'propget'], HRESULT, 'Point',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(21701), helpstring('Get the point for which trajectory representations are computed.'), 'propput'], HRESULT, 'Point',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(21702), helpstring('Get the reference system relative to which trajectory representations are computed.'), 'propget'], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(21702), helpstring('Get the reference system relative to which trajectory representations are computed.'), 'propput'], HRESULT, 'ReferenceSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnParameterSetTrajectory implementation
##class _IAgCrdnParameterSetTrajectory_Impl(object):
##    @property
##    def Type(self):
##        'Get the type of parameter set.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the labels identifying hierarchy of representations within parameter set.'
##        #return ppRetVal
##
##    @property
##    def Dimensions(self):
##        'Get the names identifying types of dimensions of individual scalars within parameter set.'
##        #return ppRetVal
##
##    @property
##    def ScalarNames(self):
##        'Get the names identifying individual scalars within parameter set.'
##        #return ppRetVal
##
##    def Calculate(self, Epoch):
##        'Return results of computing individual scalars within parameter set at the specified time.'
##        #return ppRetVal
##
##    def CalculateWithDerivative(self, Epoch):
##        'Return results of computing individual scalars and their time derivatives within parameter set at the specified time.'
##        #return ppRetVal
##
##    def _get(self):
##        'Get the point for which trajectory representations are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the point for which trajectory representations are computed.'
##    Point = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the reference system relative to which trajectory representations are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the reference system relative to which trajectory representations are computed.'
##    ReferenceSystem = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

_IAgCrdnAngleBetweenVectors._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(2001), helpstring('Returns a type of the angle object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAngleType), 'pRetVal' )),
    COMMETHOD([dispid(2002), helpstring('Finds an angle at the specified epoch.')], HRESULT, 'FindAngle',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindAngleResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2003), helpstring('Finds an angle and angle rate.')], HRESULT, 'FindAngleWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindAngleWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2004), helpstring('Finds the angle value and three vectors that define the angle in a specified input axes.')], HRESULT, 'FindCoordinates',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2005), helpstring('Finds the angle value, the angle rate and three vectors that define the angle in a specified input axes.')], HRESULT, 'FindCoordinatesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(3501), helpstring('Specify the first of the two vectors the angle is measured.'), 'propget'], HRESULT, 'FromVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(3502), helpstring('Specify the second of the two vectors the angle is measured.'), 'propget'], HRESULT, 'ToVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAngleBetweenVectors implementation
##class _IAgCrdnAngleBetweenVectors_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the angle object.'
##        #return pRetVal
##
##    def FindAngle(self, Epoch):
##        'Finds an angle at the specified epoch.'
##        #return ppRetVal
##
##    def FindAngleWithRate(self, Epoch):
##        'Finds an angle and angle rate.'
##        #return ppRetVal
##
##    def FindCoordinates(self, Epoch, Axes):
##        'Finds the angle value and three vectors that define the angle in a specified input axes.'
##        #return ppRetVal
##
##    def FindCoordinatesWithRate(self, Epoch, Axes):
##        'Finds the angle value, the angle rate and three vectors that define the angle in a specified input axes.'
##        #return ppRetVal
##
##    @property
##    def FromVector(self):
##        'Specify the first of the two vectors the angle is measured.'
##        #return ppRetVal
##
##    @property
##    def ToVector(self):
##        'Specify the second of the two vectors the angle is measured.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnPointLagrangeLibration(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointLagrangeLibration'
    _iid_ = GUID('{208C918B-7597-4B67-BEA9-62E9B1A000A4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnLagrangeLibrationPointType'
eCrdnLagrangeLibrationPointTypeL1 = 1
eCrdnLagrangeLibrationPointTypeL2 = 2
eCrdnLagrangeLibrationPointTypeL3 = 3
eCrdnLagrangeLibrationPointTypeL4 = 4
eCrdnLagrangeLibrationPointTypeL5 = 5
AgECrdnLagrangeLibrationPointType = c_int # enum
class IAgCrdnCentralBodyCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'A collection of central body names.'
    _iid_ = GUID('{BA4417EA-D6DA-456D-803E-75543BF30A3B}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
_IAgCrdnPointLagrangeLibration._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1801), helpstring('Returns a type of the point object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([dispid(1802), helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1803), helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(5401), helpstring('Specify a central body.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(5402), helpstring('Specify a lagrange point (L1, L2, etc.)'), 'propget'], HRESULT, 'PointType',
              ( ['out', 'retval'], POINTER(AgECrdnLagrangeLibrationPointType), 'pRetVal' )),
    COMMETHOD([dispid(5402), helpstring('Specify a lagrange point (L1, L2, etc.)'), 'propput'], HRESULT, 'PointType',
              ( ['in'], AgECrdnLagrangeLibrationPointType, 'pRetVal' )),
    COMMETHOD([dispid(5403), helpstring('Specify multiple secondary central bodies.'), 'propget'], HRESULT, 'SecondaryCentralBodies',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPointLagrangeLibration implementation
##class _IAgCrdnPointLagrangeLibration_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a lagrange point (L1, L2, etc.)'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a lagrange point (L1, L2, etc.)'
##    PointType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SecondaryCentralBodies(self):
##        'Specify multiple secondary central bodies.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnVectorOrbitAngularMomentum._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a central body.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Eliptical orbit is fit to the current motion of the reference point according to the selected mean theory.')], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify the mean element theory type for approximating motion.')], HRESULT, 'MeanElementType',
              ( ['out', 'retval'], POINTER(AgECrdnMeanElementTheory), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify the mean element theory type for approximating motion.')], HRESULT, 'MeanElementType',
              ( ['in'], AgECrdnMeanElementTheory, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorOrbitAngularMomentum implementation
##class IAgCrdnVectorOrbitAngularMomentum_Impl(object):
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Eliptical orbit is fit to the current motion of the reference point according to the selected mean theory.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify the mean element theory type for approximating motion.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify the mean element theory type for approximating motion.'
##    MeanElementType = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnEventFactory._methods_ = [
    COMMETHOD(['propget', helpstring('Returns Today time instant.')], HRESULT, 'Today',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns Tomorrow time instant.')], HRESULT, 'Tomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates and registers an event using specified name, description, and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnEventType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates an event set at a specified date/time.')], HRESULT, 'CreateEventEpoch',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates an event that determines the time of global minimum or maximum of specified scalar calculation.')], HRESULT, 'CreateEventExtremum',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates an event that is either the start or stop time selected from a reference interval.')], HRESULT, 'CreateEventStartStopTime',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates an event recorded on a specified clock via signal transmission from an original time instant recorded on different clock.')], HRESULT, 'CreateEventSignaled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates an event at fixed offset from specified reference event.')], HRESULT, 'CreateEventTimeOffset',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a smart epoch from STK epoch.')], HRESULT, 'CreateSmartEpochFromTime',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventSmartEpoch)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a smart epoch from an event.')], HRESULT, 'CreateSmartEpochFromEvent',
              ( ['in'], POINTER(IAgCrdnEvent), 'RefEvent' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventSmartEpoch)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnEventType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEventFactory implementation
##class IAgCrdnEventFactory_Impl(object):
##    @property
##    def Today(self):
##        'Returns Today time instant.'
##        #return ppRetVal
##
##    @property
##    def Tomorrow(self):
##        'Returns Tomorrow time instant.'
##        #return ppRetVal
##
##    def Create(self, Name, Description, Type):
##        'Creates and registers an event using specified name, description, and type.'
##        #return ppRetVal
##
##    def CreateEventEpoch(self, Name, Description):
##        'Creates an event set at a specified date/time.'
##        #return ppRetVal
##
##    def CreateEventExtremum(self, Name, Description):
##        'Creates an event that determines the time of global minimum or maximum of specified scalar calculation.'
##        #return ppRetVal
##
##    def CreateEventStartStopTime(self, Name, Description):
##        'Creates an event that is either the start or stop time selected from a reference interval.'
##        #return ppRetVal
##
##    def CreateEventSignaled(self, Name, Description):
##        'Creates an event recorded on a specified clock via signal transmission from an original time instant recorded on different clock.'
##        #return ppRetVal
##
##    def CreateEventTimeOffset(self, Name, Description):
##        'Creates an event at fixed offset from specified reference event.'
##        #return ppRetVal
##
##    def CreateSmartEpochFromTime(self, Epoch):
##        'Creates a smart epoch from STK epoch.'
##        #return ppRetVal
##
##    def CreateSmartEpochFromEvent(self, RefEvent):
##        'Creates a smart epoch from an event.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##

class _IAgCrdnEventArrayFixedTimes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventArrayFixedTimes'
    _iid_ = GUID('{7E78DB73-BB4E-4EE8-94C3-1EB905201E26}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnEventArrayFixedTimes._methods_ = [
    COMMETHOD([dispid(18302), helpstring('Return the type of time array.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventArrayType), 'pRetVal' )),
    COMMETHOD([dispid(18301), helpstring('Return computed array of times.')], HRESULT, 'FindTimes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnFindTimesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(30501), helpstring('The array of times.'), 'propget'], HRESULT, 'ArrayTimes',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(30502), helpstring('Sets array of times.')], HRESULT, 'SetArrayTimes',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventArrayFixedTimes implementation
##class _IAgCrdnEventArrayFixedTimes_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time array.'
##        #return pRetVal
##
##    def FindTimes(self):
##        'Return computed array of times.'
##        #return ppRetVal
##
##    @property
##    def ArrayTimes(self):
##        'The array of times.'
##        #return ppRetVal
##
##    def SetArrayTimes(self, Times):
##        'Sets array of times.'
##        #return 
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnEventIntervalFixedDuration._methods_ = [
    COMMETHOD(['propget', helpstring('The reference time instant.')], HRESULT, 'ReferenceTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The reference time instant.')], HRESULT, 'ReferenceTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The start time offset value.')], HRESULT, 'StartOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The start time offset value.')], HRESULT, 'StartOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The stop time offset value.')], HRESULT, 'StopOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The stop time offset value.')], HRESULT, 'StopOffset',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalFixedDuration implementation
##class IAgCrdnEventIntervalFixedDuration_Impl(object):
##    def _get(self):
##        'The reference time instant.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference time instant.'
##    ReferenceTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The start time offset value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The start time offset value.'
##    StartOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The stop time offset value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The stop time offset value.'
##    StopOffset = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AgECrdnEventListMergeOperation'
eCrdnEventListMergeOperationAND = 0
eCrdnEventListMergeOperationOR = 1
eCrdnEventListMergeOperationXOR = 2
eCrdnEventListMergeOperationMINUS = 3
AgECrdnEventListMergeOperation = c_int # enum
IAgCrdnAngleBetweenPlanes._methods_ = [
    COMMETHOD(['propget', helpstring('Specify the first of the two planes the angle is measured.')], HRESULT, 'FromPlane',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify the second of the two planes the angle is measured.')], HRESULT, 'ToPlane',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneRefTo)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAngleBetweenPlanes implementation
##class IAgCrdnAngleBetweenPlanes_Impl(object):
##    @property
##    def FromPlane(self):
##        'Specify the first of the two planes the angle is measured.'
##        #return ppRetVal
##
##    @property
##    def ToPlane(self):
##        'Specify the second of the two planes the angle is measured.'
##        #return ppRetVal
##

IAgCrdnPointGrazing._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a central body.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference point which will serve as the starting location for the line along which the grazing point will be computed.')], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a direction vector to be used in conjunction with the position vector from the selected central body to the reference point to define a plane in which the line will lie.')], HRESULT, 'DirectionVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The point of closest approach to the central body surface occurs at the specified altitude.')], HRESULT, 'Altitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The point of closest approach to the central body surface occurs at the specified altitude.')], HRESULT, 'Altitude',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnPointGrazing implementation
##class IAgCrdnPointGrazing_Impl(object):
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Specify a reference point which will serve as the starting location for the line along which the grazing point will be computed.'
##        #return ppRetVal
##
##    @property
##    def DirectionVector(self):
##        'Specify a direction vector to be used in conjunction with the position vector from the selected central body to the reference point to define a plane in which the line will lie.'
##        #return ppRetVal
##
##    def _get(self):
##        'The point of closest approach to the central body surface occurs at the specified altitude.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The point of closest approach to the central body surface occurs at the specified altitude.'
##    Altitude = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnAxesSamplingResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesSamplingResult'
    _iid_ = GUID('{E227C3E6-D68B-4384-99A0-DF06B91FD26F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnAxesSamplingIntervalCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A collection of intervals where each interval contains the time, orientation and velocity arrays.'
    _iid_ = GUID('{204EDA76-8E12-4E0C-9B32-D42DAD61EE8B}')
    _idlflags_ = ['oleautomation']
_IAgCrdnAxesSamplingResult._methods_ = [
    COMMETHOD([dispid(30201), helpstring('Indicates whether the result object is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(30202), helpstring('A collection of sampling intervals.'), 'propget'], HRESULT, 'Intervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesSamplingIntervalCollection)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnAxesSamplingResult implementation
##class _IAgCrdnAxesSamplingResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Intervals(self):
##        'A collection of sampling intervals.'
##        #return ppRetVal
##

class _IAgCrdnDerivative(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnDerivative'
    _iid_ = GUID('{02571950-2396-4596-B35F-0AEF51B02AAB}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnDerivative._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnDerivative implementation
##class _IAgCrdnDerivative_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnVolumeGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Access or create spatial conditions associated with a volume grid.'
    _iid_ = GUID('{B0B316A6-2D1B-47E8-9930-5E55A259787C}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
IAgCrdnVolumeGroup._methods_ = [
    COMMETHOD([dispid(32301), helpstring('Removes a specified element.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'EventName' )),
    COMMETHOD([dispid(32302), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(32303), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the group.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32305), helpstring('Returns a factory object used to create spatial condition components.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns an element by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeGroup implementation
##class IAgCrdnVolumeGroup_Impl(object):
##    def Remove(self, EventName):
##        'Removes a specified element.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the group.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a factory object used to create spatial condition components.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns an element by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

IAgCrdnPlaneRefTo._methods_ = [
    COMMETHOD([helpstring('Sets a new plane using a specified path.')], HRESULT, 'SetPath',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD([helpstring('Sets a new plane.')], HRESULT, 'SetPlane',
              ( ['in'], POINTER(IAgCrdnPlane), 'Plane' )),
    COMMETHOD([helpstring('Returns the actual plane object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.')], HRESULT, 'GetPlane',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlane)), 'ppRetVal' )),
    COMMETHOD([helpstring('Tests whether the input component and the target component form a cyclic dependency.')], HRESULT, 'HasCyclicDependency',
              ( ['in'], POINTER(IAgCrdnPlane), 'Plane' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnPlaneRefTo implementation
##class IAgCrdnPlaneRefTo_Impl(object):
##    def SetPath(self, Path):
##        'Sets a new plane using a specified path.'
##        #return 
##
##    def SetPlane(self, Plane):
##        'Sets a new plane.'
##        #return 
##
##    def GetPlane(self):
##        'Returns the actual plane object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.'
##        #return ppRetVal
##
##    def HasCyclicDependency(self, Plane):
##        'Tests whether the input component and the target component form a cyclic dependency.'
##        #return pRetVal
##

class _IAgCrdnCalcScalarFunction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCalcScalarFunction'
    _iid_ = GUID('{BA8E4911-2281-4EA1-9814-815CD825630C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnCalcScalarFunction._methods_ = [
    COMMETHOD([dispid(12805), helpstring('Returns the scalar calculation type.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnCalcScalarType), 'pRetVal' )),
    COMMETHOD([dispid(12803), helpstring('Evaluates the scalar calculation at the specified time instant.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12806), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...')], HRESULT, 'QuickEvaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12804), helpstring('Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12807), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...')], HRESULT, 'QuickEvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16501), helpstring('Specify whether to use the input scalar calculation or the time elapsed from the input time instant. Set to true to use the scalar.'), 'propget'], HRESULT, 'UseScalar',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16501), helpstring('Specify whether to use the input scalar calculation or the time elapsed from the input time instant. Set to true to use the scalar.'), 'propput'], HRESULT, 'UseScalar',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(16520), helpstring('The input scalar calculation (used if UseScalar is true).'), 'propget'], HRESULT, 'InputScalar',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(16520), helpstring('The input scalar calculation (used if UseScalar is true).'), 'propput'], HRESULT, 'InputScalar',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD([dispid(16521), helpstring('The input time instant (used if UseScalar is false).'), 'propget'], HRESULT, 'InputTime',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(16521), helpstring('The input time instant (used if UseScalar is false).'), 'propput'], HRESULT, 'InputTime',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD([dispid(16510), helpstring('The constant coefficient A.'), 'propget'], HRESULT, 'A',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16510), helpstring('The constant coefficient A.'), 'propput'], HRESULT, 'A',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16511), helpstring('The constant coefficient B.'), 'propget'], HRESULT, 'B',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16511), helpstring('The constant coefficient B.'), 'propput'], HRESULT, 'B',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16512), helpstring('The constant coefficient C.'), 'propget'], HRESULT, 'C',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16512), helpstring('The constant coefficient C.'), 'propput'], HRESULT, 'C',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16513), helpstring('The constant coefficient D.'), 'propget'], HRESULT, 'D',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16513), helpstring('The constant coefficient D.'), 'propput'], HRESULT, 'D',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16505), helpstring('The array of constant coefficients, whose dimension and units are determined by those of input and output.'), 'propget'], HRESULT, 'Coefficients',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16505), helpstring('The array of constant coefficients, whose dimension and units are determined by those of input and output.'), 'propput'], HRESULT, 'Coefficients',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(16523), helpstring('The function which will use the input scalar or time instant in some combination with the constant coefficients A, B, C, D.'), 'propget'], HRESULT, 'SelectedFunction',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16523), helpstring('The function which will use the input scalar or time instant in some combination with the constant coefficients A, B, C, D.'), 'propput'], HRESULT, 'SelectedFunction',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(16517), helpstring('Get the available function names.'), 'propget'], HRESULT, 'AvailableFunctions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16524), helpstring('Specify whether to inherit the output dimension from the input scalar or time instant.'), 'propget'], HRESULT, 'InheritDimensionFromInput',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16524), helpstring('Specify whether to inherit the output dimension from the input scalar or time instant.'), 'propput'], HRESULT, 'InheritDimensionFromInput',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(16522), helpstring('The output dimension. Use any of STK supported dimensions. This value will be used if InheritDimensionFromInput is false.'), 'propget'], HRESULT, 'OutputDimension',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16522), helpstring('The output dimension. Use any of STK supported dimensions. This value will be used if InheritDimensionFromInput is false.'), 'propput'], HRESULT, 'OutputDimension',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(16519), helpstring('Specify a unit for the selected output dimension. This is not used for internal computations or reporting/graphing but is needed to unambiguously interpret units of associated coefficients.'), 'propget'], HRESULT, 'OutputUnit',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16519), helpstring('Specify a unit for the selected output dimension. This is not used for internal computations or reporting/graphing but is needed to unambiguously interpret units of associated coefficients.'), 'propput'], HRESULT, 'OutputUnit',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(16525), helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propget'], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD([dispid(16525), helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propput'], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD([dispid(16526), helpstring('The Convergence definition, which uses time tolerance to determine when time of extremum is found.'), 'propget'], HRESULT, 'Convergence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConverge)), 'ppRetVal' )),
    COMMETHOD([dispid(16526), helpstring('The Convergence definition, which uses time tolerance to determine when time of extremum is found.'), 'propput'], HRESULT, 'Convergence',
              ( ['in'], POINTER(IAgCrdnConverge), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(12808), helpstring('Returns a list of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(12809), helpstring("Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propget'], HRESULT, 'UnitOfMeasure',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(12810), helpstring('Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12811), helpstring('Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12812), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12813), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnCalcScalarFunction implementation
##class _IAgCrdnCalcScalarFunction_Impl(object):
##    @property
##    def Type(self):
##        'Returns the scalar calculation type.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant.'
##        #return ppRetVal
##
##    def QuickEvaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.'
##        #return ppRetVal
##
##    def QuickEvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify whether to use the input scalar calculation or the time elapsed from the input time instant. Set to true to use the scalar.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use the input scalar calculation or the time elapsed from the input time instant. Set to true to use the scalar.'
##    UseScalar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The input scalar calculation (used if UseScalar is true).'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The input scalar calculation (used if UseScalar is true).'
##    InputScalar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The input time instant (used if UseScalar is false).'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The input time instant (used if UseScalar is false).'
##    InputTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The constant coefficient A.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The constant coefficient A.'
##    A = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The constant coefficient B.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The constant coefficient B.'
##    B = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The constant coefficient C.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The constant coefficient C.'
##    C = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The constant coefficient D.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The constant coefficient D.'
##    D = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The array of constant coefficients, whose dimension and units are determined by those of input and output.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The array of constant coefficients, whose dimension and units are determined by those of input and output.'
##    Coefficients = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The function which will use the input scalar or time instant in some combination with the constant coefficients A, B, C, D.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The function which will use the input scalar or time instant in some combination with the constant coefficients A, B, C, D.'
##    SelectedFunction = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def AvailableFunctions(self):
##        'Get the available function names.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify whether to inherit the output dimension from the input scalar or time instant.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to inherit the output dimension from the input scalar or time instant.'
##    InheritDimensionFromInput = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The output dimension. Use any of STK supported dimensions. This value will be used if InheritDimensionFromInput is false.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The output dimension. Use any of STK supported dimensions. This value will be used if InheritDimensionFromInput is false.'
##    OutputDimension = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a unit for the selected output dimension. This is not used for internal computations or reporting/graphing but is needed to unambiguously interpret units of associated coefficients.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a unit for the selected output dimension. This is not used for internal computations or reporting/graphing but is needed to unambiguously interpret units of associated coefficients.'
##    OutputUnit = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def _get(self):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##    Convergence = property(_get, _set, doc = _set.__doc__)
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def GetAvailability(self):
##        'Returns a list of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def UnitOfMeasure(self):
##        "Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def QuickEvaluateArray(self, Times):
##        'Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateArray(self, Times):
##        'Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##

IAgCrdnVectorOrbitNormal._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a central body.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Eliptical orbit is fit to the current motion of the reference point according to the selected mean theory.')], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify the mean element theory type for approximating motion.')], HRESULT, 'MeanElementType',
              ( ['out', 'retval'], POINTER(AgECrdnMeanElementTheory), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify the mean element theory type for approximating motion.')], HRESULT, 'MeanElementType',
              ( ['in'], AgECrdnMeanElementTheory, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorOrbitNormal implementation
##class IAgCrdnVectorOrbitNormal_Impl(object):
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Eliptical orbit is fit to the current motion of the reference point according to the selected mean theory.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify the mean element theory type for approximating motion.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify the mean element theory type for approximating motion.'
##    MeanElementType = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnCalcScalarCustom(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCalcScalarCustom'
    _iid_ = GUID('{E8F09ECE-BEEB-4D26-BEAF-E2AD42F55C7A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnCalcScalarCustom._methods_ = [
    COMMETHOD([dispid(12805), helpstring('Returns the scalar calculation type.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnCalcScalarType), 'pRetVal' )),
    COMMETHOD([dispid(12803), helpstring('Evaluates the scalar calculation at the specified time instant.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12806), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...')], HRESULT, 'QuickEvaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12804), helpstring('Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12807), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...')], HRESULT, 'QuickEvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(31701), helpstring('A path to MATLAB (.m or .dll), Perl or VBScript file.'), 'propget'], HRESULT, 'Filename',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(31701), helpstring('A path to MATLAB (.m or .dll), Perl or VBScript file.'), 'propput'], HRESULT, 'Filename',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(31702), helpstring('Reload the file specified with Filename property.')], HRESULT, 'Reload'),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(12808), helpstring('Returns a list of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(12809), helpstring("Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propget'], HRESULT, 'UnitOfMeasure',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(12810), helpstring('Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12811), helpstring('Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12812), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12813), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnCalcScalarCustom implementation
##class _IAgCrdnCalcScalarCustom_Impl(object):
##    @property
##    def Type(self):
##        'Returns the scalar calculation type.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant.'
##        #return ppRetVal
##
##    def QuickEvaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.'
##        #return ppRetVal
##
##    def QuickEvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...'
##        #return ppRetVal
##
##    def _get(self):
##        'A path to MATLAB (.m or .dll), Perl or VBScript file.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A path to MATLAB (.m or .dll), Perl or VBScript file.'
##    Filename = property(_get, _set, doc = _set.__doc__)
##
##    def Reload(self):
##        'Reload the file specified with Filename property.'
##        #return 
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def GetAvailability(self):
##        'Returns a list of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def UnitOfMeasure(self):
##        "Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def QuickEvaluateArray(self, Times):
##        'Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateArray(self, Times):
##        'Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##

IAgCrdnEventIntervalBetweenTimeInstants._methods_ = [
    COMMETHOD(['propget', helpstring('The start time instant of the interval.')], HRESULT, 'StartTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The start time instant of the interval.')], HRESULT, 'StartTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The stop time instant of the interval.')], HRESULT, 'StopTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The stop time instant of the interval.')], HRESULT, 'StopTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalBetweenTimeInstants implementation
##class IAgCrdnEventIntervalBetweenTimeInstants_Impl(object):
##    def _get(self):
##        'The start time instant of the interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The start time instant of the interval.'
##    StartTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The stop time instant of the interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The stop time instant of the interval.'
##    StopTimeInstant = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AgECrdnIntervalSelection'
eCrdnIntervalSelectionFromStart = 1
eCrdnIntervalSelectionFromEnd = 2
eCrdnIntervalSelectionMaxDuration = 4
eCrdnIntervalSelectionMinDuration = 5
eCrdnIntervalSelectionMaxGap = 9
eCrdnIntervalSelectionMinGap = 10
eCrdnIntervalSelectionSpan = 100
AgECrdnIntervalSelection = c_int # enum
_IAgCrdnEventIntervalFromIntervalList._methods_ = [
    COMMETHOD([dispid(13411), helpstring('Return the type of interval.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalType), 'pRetVal' )),
    COMMETHOD([dispid(13404), helpstring('The start description.'), 'propget'], HRESULT, 'LabelStartDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13405), helpstring('The stop description.'), 'propget'], HRESULT, 'LabelStopDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13406), helpstring('A label associated with the interval start.'), 'propget'], HRESULT, 'LabelStart',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13407), helpstring('A label associated with the interval stop.'), 'propget'], HRESULT, 'LabelStop',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13408), helpstring('Return computed interval if it exists.')], HRESULT, 'FindInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13409), helpstring('Determine if specified time falls within computed interval if it exists.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(27801), helpstring('The reference interval list.'), 'propget'], HRESULT, 'ReferenceIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(27801), helpstring('The reference interval list.'), 'propput'], HRESULT, 'ReferenceIntervals',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD([dispid(27802), helpstring('The method used to select an interval from the reference interval list.'), 'propget'], HRESULT, 'IntervalSelection',
              ( ['out', 'retval'], POINTER(AgECrdnIntervalSelection), 'pRetVal' )),
    COMMETHOD([dispid(27802), helpstring('The method used to select an interval from the reference interval list.'), 'propput'], HRESULT, 'IntervalSelection',
              ( ['in'], AgECrdnIntervalSelection, 'pRetVal' )),
    COMMETHOD([dispid(27803), helpstring('An interval number. Applicable only if IntervalSelection is IntervalSelectionFromStart or IntervalSelectionFromEnd'), 'propget'], HRESULT, 'IntervalNumber',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27803), helpstring('An interval number. Applicable only if IntervalSelection is IntervalSelectionFromStart or IntervalSelectionFromEnd'), 'propput'], HRESULT, 'IntervalNumber',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalFromIntervalList implementation
##class _IAgCrdnEventIntervalFromIntervalList_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval.'
##        #return pRetVal
##
##    @property
##    def LabelStartDescription(self):
##        'The start description.'
##        #return pRetVal
##
##    @property
##    def LabelStopDescription(self):
##        'The stop description.'
##        #return pRetVal
##
##    @property
##    def LabelStart(self):
##        'A label associated with the interval start.'
##        #return pRetVal
##
##    @property
##    def LabelStop(self):
##        'A label associated with the interval stop.'
##        #return pRetVal
##
##    def FindInterval(self):
##        'Return computed interval if it exists.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval if it exists.'
##        #return pRetVal
##
##    def _get(self):
##        'The reference interval list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference interval list.'
##    ReferenceIntervals = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The method used to select an interval from the reference interval list.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The method used to select an interval from the reference interval list.'
##    IntervalSelection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'An interval number. Applicable only if IntervalSelection is IntervalSelectionFromStart or IntervalSelectionFromEnd'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'An interval number. Applicable only if IntervalSelection is IntervalSelectionFromStart or IntervalSelectionFromEnd'
##    IntervalNumber = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnAngleDihedral._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a first vector to measure the angle.')], HRESULT, 'FromVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a second vector to measure the angle.')], HRESULT, 'ToVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a vector about.')], HRESULT, 'PoleAbout',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether the rotation is counter-clockwise.')], HRESULT, 'CounterClockwiseRotation',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether the rotation is counter-clockwise.')], HRESULT, 'CounterClockwiseRotation',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether the axis of rotation for the angle is aligned with Positive or Negative direction of the about vector.')], HRESULT, 'SignedAngle',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether the axis of rotation for the angle is aligned with Positive or Negative direction of the about vector.')], HRESULT, 'SignedAngle',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAngleDihedral implementation
##class IAgCrdnAngleDihedral_Impl(object):
##    @property
##    def FromVector(self):
##        'Specify a first vector to measure the angle.'
##        #return ppRetVal
##
##    @property
##    def ToVector(self):
##        'Specify a second vector to measure the angle.'
##        #return ppRetVal
##
##    @property
##    def PoleAbout(self):
##        'Specify a vector about.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify whether the rotation is counter-clockwise.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether the rotation is counter-clockwise.'
##    CounterClockwiseRotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether the axis of rotation for the angle is aligned with Positive or Negative direction of the about vector.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether the axis of rotation for the angle is aligned with Positive or Negative direction of the about vector.'
##    SignedAngle = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnEventIntervalFromIntervalList._methods_ = [
    COMMETHOD(['propget', helpstring('The reference interval list.')], HRESULT, 'ReferenceIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The reference interval list.')], HRESULT, 'ReferenceIntervals',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The method used to select an interval from the reference interval list.')], HRESULT, 'IntervalSelection',
              ( ['out', 'retval'], POINTER(AgECrdnIntervalSelection), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The method used to select an interval from the reference interval list.')], HRESULT, 'IntervalSelection',
              ( ['in'], AgECrdnIntervalSelection, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('An interval number. Applicable only if IntervalSelection is IntervalSelectionFromStart or IntervalSelectionFromEnd')], HRESULT, 'IntervalNumber',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('An interval number. Applicable only if IntervalSelection is IntervalSelectionFromStart or IntervalSelectionFromEnd')], HRESULT, 'IntervalNumber',
              ( ['in'], c_int, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalFromIntervalList implementation
##class IAgCrdnEventIntervalFromIntervalList_Impl(object):
##    def _get(self):
##        'The reference interval list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference interval list.'
##    ReferenceIntervals = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The method used to select an interval from the reference interval list.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The method used to select an interval from the reference interval list.'
##    IntervalSelection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'An interval number. Applicable only if IntervalSelection is IntervalSelectionFromStart or IntervalSelectionFromEnd'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'An interval number. Applicable only if IntervalSelection is IntervalSelectionFromStart or IntervalSelectionFromEnd'
##    IntervalNumber = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnAxesSamplingInterval(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesSamplingInterval'
    _iid_ = GUID('{161D1930-DC69-48B8-801A-9039953D0882}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnAxesSamplingInterval._methods_ = [
    COMMETHOD([dispid(30303), helpstring('A time array associated with the interval.'), 'propget'], HRESULT, 'Times',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(30304), helpstring('An array of 4-tuples each tuple representing the orientation of the axes as a quaternion (q1,q2,q3,q4).'), 'propget'], HRESULT, 'Quaternions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(30305), helpstring('An array of angular velocities.'), 'propget'], HRESULT, 'Velocities',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(30301), helpstring('The start time of the interval.'), 'propget'], HRESULT, 'Start',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(30302), helpstring('The stop time of the interval.'), 'propget'], HRESULT, 'Stop',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnAxesSamplingInterval implementation
##class _IAgCrdnAxesSamplingInterval_Impl(object):
##    @property
##    def Times(self):
##        'A time array associated with the interval.'
##        #return ppRetVal
##
##    @property
##    def Quaternions(self):
##        'An array of 4-tuples each tuple representing the orientation of the axes as a quaternion (q1,q2,q3,q4).'
##        #return ppRetVal
##
##    @property
##    def Velocities(self):
##        'An array of angular velocities.'
##        #return ppRetVal
##
##    @property
##    def Start(self):
##        'The start time of the interval.'
##        #return pRetVal
##
##    @property
##    def Stop(self):
##        'The stop time of the interval.'
##        #return pRetVal
##

class IAgCrdnCalcScalarVectorMagnitude(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Scalar equal to the magnitude of a specified vector.'
    _iid_ = GUID('{438E4E85-6018-4105-AE10-B774229297E1}')
    _idlflags_ = ['oleautomation']
IAgCrdnCalcScalarVectorMagnitude._methods_ = [
    COMMETHOD(['propget', helpstring('Specify any vector in VGT. Note that its magnitude is reference axes independent which is why it is not specified.')], HRESULT, 'InputVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Specify any vector in VGT. Note that its magnitude is reference axes independent which is why it is not specified.')], HRESULT, 'InputVector',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnCalcScalarVectorMagnitude implementation
##class IAgCrdnCalcScalarVectorMagnitude_Impl(object):
##    def _get(self):
##        'Specify any vector in VGT. Note that its magnitude is reference axes independent which is why it is not specified.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Specify any vector in VGT. Note that its magnitude is reference axes independent which is why it is not specified.'
##    InputVector = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnAxesFixedAtEpoch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesFixedAtEpoch'
    _iid_ = GUID('{C821ECC0-875E-4727-BF38-4336EE7B9632}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnAxesFixedAtEpoch._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1701), helpstring('Returns a type of the axes object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAxesType), 'pRetVal' )),
    COMMETHOD([dispid(1706), helpstring('Find an angular velocity and orientation in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1707), helpstring('Find an orientation in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1708), helpstring('Returns an object that allows modifying the axes labels.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(2501), helpstring('Specify a source axes.'), 'propget'], HRESULT, 'SourceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(2502), helpstring('Specify a reference axes.'), 'propget'], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(2503), helpstring('Specify an epoch.'), 'propget'], HRESULT, 'Epoch',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(2503), helpstring('Specify an epoch.'), 'propput'], HRESULT, 'Epoch',
              ( ['in'], VARIANT, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1709), helpstring('Returns the X axis of the component.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1710), helpstring('Returns the Y axis of the component.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1711), helpstring('Returns the Z axis of the component.'), 'propget'], HRESULT, 'Z',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1712), helpstring('Transforms the input vector from this axes into the output axes.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1713), helpstring("Transforms the input vector and vector's rate from this axes into the output axes.")], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'RateInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAxesFixedAtEpoch implementation
##class _IAgCrdnAxesFixedAtEpoch_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the axes object.'
##        #return pRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Find an angular velocity and orientation in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Find an orientation in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        'Returns an object that allows modifying the axes labels.'
##        #return ppRetVal
##
##    @property
##    def SourceAxes(self):
##        'Specify a source axes.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify an epoch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an epoch.'
##    Epoch = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    @property
##    def X(self):
##        'Returns the X axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Y(self):
##        'Returns the Y axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Z(self):
##        'Returns the Z axis of the component.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputAxes, VectorInMyAxes):
##        'Transforms the input vector from this axes into the output axes.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputAxes, VectorInMyAxes, RateInMyAxes):
##        "Transforms the input vector and vector's rate from this axes into the output axes."
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##


# values for enumeration 'AgECrdnThreshConvergeSense'
eCrdnThreshConvergeSenseSimple = 0
eCrdnThreshConvergeSenseAbove = 1
eCrdnThreshConvergeSenseBelow = 2
AgECrdnThreshConvergeSense = c_int # enum
class IAgCrdnAxesAlignedAndConstrained(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Axes aligned using two pairs of vectors. One vector in each pair is fixed in these axes and the other vector serves as an independent reference.'
    _iid_ = GUID('{D8145FD4-79C7-4A6D-BA2C-5247ABF7A063}')
    _idlflags_ = ['oleautomation']
IAgCrdnAxesAlignedAndConstrained._methods_ = [
    COMMETHOD(['propget', helpstring('Specify an alignment reference vector.')], HRESULT, 'AlignmentReferenceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a constraint reference vector.')], HRESULT, 'ConstraintReferenceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a desired alignment direction and the applicable parameters.')], HRESULT, 'AlignmentDirection',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDirection)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a desired constraint direction and the applicable parameters.')], HRESULT, 'ConstraintDirection',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDirection)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAxesAlignedAndConstrained implementation
##class IAgCrdnAxesAlignedAndConstrained_Impl(object):
##    @property
##    def AlignmentReferenceVector(self):
##        'Specify an alignment reference vector.'
##        #return ppRetVal
##
##    @property
##    def ConstraintReferenceVector(self):
##        'Specify a constraint reference vector.'
##        #return ppRetVal
##
##    @property
##    def AlignmentDirection(self):
##        'Specify a desired alignment direction and the applicable parameters.'
##        #return ppRetVal
##
##    @property
##    def ConstraintDirection(self):
##        'Specify a desired constraint direction and the applicable parameters.'
##        #return ppRetVal
##

_IAgCrdnVolumeGridResult._methods_ = [
    COMMETHOD([dispid(31202), helpstring('Epoch of returned volumetric data.'), 'propget'], HRESULT, 'Epoch',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(31203), helpstring('Number of grid point coordinates representing first dimension of volume grid.'), 'propget'], HRESULT, 'SizeI',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31204), helpstring('Number of grid point coordinates representing second dimension of volume grid.'), 'propget'], HRESULT, 'SizeJ',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31205), helpstring('Number of grid point coordinates representing third dimension of volume grid.'), 'propget'], HRESULT, 'SizeK',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(31206), helpstring('Vector of scalar values representing volumetric data.'), 'propget'], HRESULT, 'VolumeMetricDataVector',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(31207), helpstring('Vector of Cartesian coordinates of all volume grid points.'), 'propget'], HRESULT, 'VolumeMetricPositionVector',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(31208), helpstring('Vector of native coordinates of all volume grid points.'), 'propget'], HRESULT, 'VolumeMetricNativePositionVector',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(31209), helpstring('Vector of Cartesian coordinates representing gradient vectors at all volume grid points.'), 'propget'], HRESULT, 'VolumeMetricGradientVector',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnVolumeGridResult implementation
##class _IAgCrdnVolumeGridResult_Impl(object):
##    @property
##    def Epoch(self):
##        'Epoch of returned volumetric data.'
##        #return pRetVal
##
##    @property
##    def SizeI(self):
##        'Number of grid point coordinates representing first dimension of volume grid.'
##        #return pRetVal
##
##    @property
##    def SizeJ(self):
##        'Number of grid point coordinates representing second dimension of volume grid.'
##        #return pRetVal
##
##    @property
##    def SizeK(self):
##        'Number of grid point coordinates representing third dimension of volume grid.'
##        #return pRetVal
##
##    @property
##    def VolumeMetricDataVector(self):
##        'Vector of scalar values representing volumetric data.'
##        #return ppRetVal
##
##    @property
##    def VolumeMetricPositionVector(self):
##        'Vector of Cartesian coordinates of all volume grid points.'
##        #return ppRetVal
##
##    @property
##    def VolumeMetricNativePositionVector(self):
##        'Vector of native coordinates of all volume grid points.'
##        #return ppRetVal
##
##    @property
##    def VolumeMetricGradientVector(self):
##        'Vector of Cartesian coordinates representing gradient vectors at all volume grid points.'
##        #return ppRetVal
##

class _IAgCrdnVectorConing(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorConing'
    _iid_ = GUID('{A548CCAF-99BC-4827-BC3C-2C29143221D8}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnVectorConing._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6201), helpstring('Specify a vector around which the the reference vector is revolved.'), 'propget'], HRESULT, 'AboutVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(6202), helpstring('Specify a reference vector.'), 'propget'], HRESULT, 'ReferenceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(6203), helpstring('Specify a start angle.'), 'propget'], HRESULT, 'StartClockAngle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(6203), helpstring('Specify a start angle.'), 'propput'], HRESULT, 'StartClockAngle',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(6204), helpstring('Specify a stop angle.'), 'propget'], HRESULT, 'StopClockAngle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(6204), helpstring('Specify a stop angle.'), 'propput'], HRESULT, 'StopClockAngle',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(6205), helpstring('Specify an epoch at which the coning vector is aligned with the reference vector.'), 'propget'], HRESULT, 'StartEpoch',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(6205), helpstring('Specify an epoch at which the coning vector is aligned with the reference vector.'), 'propput'], HRESULT, 'StartEpoch',
              ( ['in'], VARIANT, 'pRetVal' )),
    COMMETHOD([dispid(6206), helpstring('Specify a rotation rate.'), 'propget'], HRESULT, 'ClockAngleRate',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(6206), helpstring('Specify a rotation rate.'), 'propput'], HRESULT, 'ClockAngleRate',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(6207), helpstring('Specify either unidirectional or bidirectional mode.'), 'propget'], HRESULT, 'Mode',
              ( ['out', 'retval'], POINTER(AgECrdnSweepMode), 'pRetVal' )),
    COMMETHOD([dispid(6207), helpstring('Specify either unidirectional or bidirectional mode.'), 'propput'], HRESULT, 'Mode',
              ( ['in'], AgECrdnSweepMode, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorConing implementation
##class _IAgCrdnVectorConing_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def AboutVector(self):
##        'Specify a vector around which the the reference vector is revolved.'
##        #return ppRetVal
##
##    @property
##    def ReferenceVector(self):
##        'Specify a reference vector.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a start angle.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a start angle.'
##    StartClockAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a stop angle.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a stop angle.'
##    StopClockAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify an epoch at which the coning vector is aligned with the reference vector.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an epoch at which the coning vector is aligned with the reference vector.'
##    StartEpoch = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a rotation rate.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a rotation rate.'
##    ClockAngleRate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify either unidirectional or bidirectional mode.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify either unidirectional or bidirectional mode.'
##    Mode = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnPointGlint._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a central body.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a source point.')], HRESULT, 'SourcePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify an observer point.')], HRESULT, 'ObserverPoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPointGlint implementation
##class IAgCrdnPointGlint_Impl(object):
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def SourcePoint(self):
##        'Specify a source point.'
##        #return ppRetVal
##
##    @property
##    def ObserverPoint(self):
##        'Specify an observer point.'
##        #return ppRetVal
##

IAgCrdnEventFindOccurrenceResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The epoch at which the event occurs.')], HRESULT, 'Epoch',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEventFindOccurrenceResult implementation
##class IAgCrdnEventFindOccurrenceResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Epoch(self):
##        'The epoch at which the event occurs.'
##        #return pRetVal
##

IAgCrdnVolumeGridFactory._methods_ = [
    COMMETHOD([helpstring('Creates and registers a volume grid using specified name and description.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnVolumeGridType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates and registers a cartesian volume grid using specified name and description.')], HRESULT, 'CreateVolumeGridCartesian',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns whether the specified volume grid type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnVolumeGridType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Creates and registers a cylindrical volume grid using specified name and description.')], HRESULT, 'CreateVolumeGridCylindrical',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates and registers a spherical volume grid using specified name and description.')], HRESULT, 'CreateVolumeGridSpherical',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates and registers a volume grid that can be constrained by conditions using specified name and description.')], HRESULT, 'CreateVolumeGridConstrained',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates and registers cartographic volume grid using specified name and description.')], HRESULT, 'CreateVolumeGridLatLonAlt',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates and registers a volume grid of type surface bearing using specified name and description.')], HRESULT, 'CreateVolumeGridBearingAlt',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeGridFactory implementation
##class IAgCrdnVolumeGridFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Creates and registers a volume grid using specified name and description.'
##        #return ppRetVal
##
##    def CreateVolumeGridCartesian(self, Name, Description):
##        'Creates and registers a cartesian volume grid using specified name and description.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified volume grid type is supported.'
##        #return pRetVal
##
##    def CreateVolumeGridCylindrical(self, Name, Description):
##        'Creates and registers a cylindrical volume grid using specified name and description.'
##        #return ppRetVal
##
##    def CreateVolumeGridSpherical(self, Name, Description):
##        'Creates and registers a spherical volume grid using specified name and description.'
##        #return ppRetVal
##
##    def CreateVolumeGridConstrained(self, Name, Description):
##        'Creates and registers a volume grid that can be constrained by conditions using specified name and description.'
##        #return ppRetVal
##
##    def CreateVolumeGridLatLonAlt(self, Name, Description):
##        'Creates and registers cartographic volume grid using specified name and description.'
##        #return ppRetVal
##
##    def CreateVolumeGridBearingAlt(self, Name, Description):
##        'Creates and registers a volume grid of type surface bearing using specified name and description.'
##        #return ppRetVal
##

class IAgCrdnConditionCombined(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Defines scalar cinditions combined operation.'
    _iid_ = GUID('{7FB43B48-0809-4E46-9BBA-58C139D30048}')
    _idlflags_ = ['oleautomation']
IAgCrdnConditionCombined._methods_ = [
    COMMETHOD(['propget', helpstring('Sets/Returns scalar condition combined operation.')], HRESULT, 'CombineOperation',
              ( ['out', 'retval'], POINTER(AgECrdnConditionCombinedOperationType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Sets/Returns scalar condition combined operation.')], HRESULT, 'CombineOperation',
              ( ['in'], AgECrdnConditionCombinedOperationType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the scalar condition vectore size.')], HRESULT, 'ConditionCount',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([helpstring('Get all scalar conditions.')], HRESULT, 'GetAllConditions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Set all scalar conditions.')], HRESULT, 'SetAllConditions',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Conditions' )),
    COMMETHOD([helpstring('Get scalar conditions at a postion.')], HRESULT, 'GetCondition',
              ( ['in'], c_int, 'Pos' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD([helpstring('Set scalar conditions at a postion.')], HRESULT, 'SetCondition',
              ( ['in'], POINTER(IAgCrdnCondition), 'Ref' ),
              ( ['in'], c_int, 'Pos' )),
    COMMETHOD([helpstring('Remove scalar condition at a postion.')], HRESULT, 'RemoveCondition',
              ( ['in'], c_int, 'Pos' )),
    COMMETHOD([helpstring('Adds a condition at the end of the list.')], HRESULT, 'AddCondition',
              ( ['in'], POINTER(IAgCrdnCondition), 'Ref' )),
]
################################################################
## code template for IAgCrdnConditionCombined implementation
##class IAgCrdnConditionCombined_Impl(object):
##    def _get(self):
##        'Sets/Returns scalar condition combined operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Sets/Returns scalar condition combined operation.'
##    CombineOperation = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ConditionCount(self):
##        'Returns the scalar condition vectore size.'
##        #return pRetVal
##
##    def GetAllConditions(self):
##        'Get all scalar conditions.'
##        #return ppRetVal
##
##    def SetAllConditions(self, Conditions):
##        'Set all scalar conditions.'
##        #return 
##
##    def GetCondition(self, Pos):
##        'Get scalar conditions at a postion.'
##        #return ppRetVal
##
##    def SetCondition(self, Ref, Pos):
##        'Set scalar conditions at a postion.'
##        #return 
##
##    def RemoveCondition(self, Pos):
##        'Remove scalar condition at a postion.'
##        #return 
##
##    def AddCondition(self, Ref):
##        'Adds a condition at the end of the list.'
##        #return 
##

_IAgCrdnVectorPlugin._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(27001), helpstring('A programmatic ID associated with the component.'), 'propget'], HRESULT, 'ProgID',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(27007), helpstring("Plugin's Display Name associated with the COM plugin."), 'propget'], HRESULT, 'DisplayName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(27005), helpstring('An array of names of the properties that can be used to configure the plugin.'), 'propget'], HRESULT, 'AvailableProperties',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(27003), helpstring('Reset the plugin.')], HRESULT, 'Reset'),
    COMMETHOD([dispid(27004), helpstring('The method is used to set the plugin properties. The method throws an exception if the specified property does not exist, invalid value was specified or the specified property is read-only.')], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(27006), helpstring('The method reads a value of the specified plugin property. The method throws an exception if the property does not exist.')], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorPlugin implementation
##class _IAgCrdnVectorPlugin_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def ProgID(self):
##        'A programmatic ID associated with the component.'
##        #return pRetVal
##
##    @property
##    def DisplayName(self):
##        "Plugin's Display Name associated with the COM plugin."
##        #return pRetVal
##
##    @property
##    def AvailableProperties(self):
##        'An array of names of the properties that can be used to configure the plugin.'
##        #return ppRetVal
##
##    def Reset(self):
##        'Reset the plugin.'
##        #return 
##
##    def SetProperty(self, Name, Value):
##        'The method is used to set the plugin properties. The method throws an exception if the specified property does not exist, invalid value was specified or the specified property is read-only.'
##        #return 
##
##    def GetProperty(self, Name):
##        'The method reads a value of the specified plugin property. The method throws an exception if the property does not exist.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnConditionSetEvaluateWithRateResult(CoClass):
    'Represents the results returned by ConditionSet.EvaluateWithRate.'
    _reg_clsid_ = GUID('{6B6BBA12-606E-4531-A6C0-CBDEBD651E84}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnConditionSetEvaluateWithRateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnConditionSetEvaluateWithRateResult'
    _iid_ = GUID('{5D22194A-CAF9-47D5-9816-B9DD4CEAD6D8}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnConditionSetEvaluateWithRateResult._com_interfaces_ = [_IAgCrdnConditionSetEvaluateWithRateResult, IAgCrdnConditionSetEvaluateWithRateResult]

class AgCrdnPointFactory(CoClass):
    'A Factory object to create points.'
    _reg_clsid_ = GUID('{5AB77FCF-57CE-41A1-8AD3-85FDAF0B7104}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPointFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointFactory'
    _iid_ = GUID('{4014F206-7AF8-4C25-8593-57B741E1F080}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnPointFactory._com_interfaces_ = [_IAgCrdnPointFactory, IAgCrdnPointFactory]

class _IAgCrdnPointPlugin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointPlugin'
    _iid_ = GUID('{1D4B6D94-3A8C-4452-A734-1EF27E4227C1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnPointPlugin._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1801), helpstring('Returns a type of the point object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([dispid(1802), helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1803), helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(26901), helpstring('A programmatic ID associated with the component.'), 'propget'], HRESULT, 'ProgID',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26907), helpstring("Plugin's Display Name associated with the COM plugin."), 'propget'], HRESULT, 'DisplayName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26905), helpstring('An array of names of the properties that can be used to configure the plugin.'), 'propget'], HRESULT, 'AvailableProperties',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(26903), helpstring('Reset the plugin.')], HRESULT, 'Reset'),
    COMMETHOD([dispid(26904), helpstring('The method is used to set the plugin properties. The method throws an exception if the specified property does not exist, invalid value was specified or the specified property is read-only.')], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(26906), helpstring('The method reads a value of the specified plugin property. The method throws an exception if the property does not exist.')], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPointPlugin implementation
##class _IAgCrdnPointPlugin_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##
##    @property
##    def ProgID(self):
##        'A programmatic ID associated with the component.'
##        #return pRetVal
##
##    @property
##    def DisplayName(self):
##        "Plugin's Display Name associated with the COM plugin."
##        #return pRetVal
##
##    @property
##    def AvailableProperties(self):
##        'An array of names of the properties that can be used to configure the plugin.'
##        #return ppRetVal
##
##    def Reset(self):
##        'Reset the plugin.'
##        #return 
##
##    def SetProperty(self, Name, Value):
##        'The method is used to set the plugin properties. The method throws an exception if the specified property does not exist, invalid value was specified or the specified property is read-only.'
##        #return 
##
##    def GetProperty(self, Name):
##        'The method reads a value of the specified plugin property. The method throws an exception if the property does not exist.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

_IAgCrdnVectorProjection._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6901), helpstring('Specify a source vector.'), 'propget'], HRESULT, 'Source',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(6902), helpstring('Specify a reference plane.'), 'propget'], HRESULT, 'ReferencePlane',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorProjection implementation
##class _IAgCrdnVectorProjection_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Source(self):
##        'Specify a source vector.'
##        #return ppRetVal
##
##    @property
##    def ReferencePlane(self):
##        'Specify a reference plane.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##


# values for enumeration 'AgECrdnVolumeLightingConditionsType'
eCrdnVolumeLightingConditionTypeUndefined = 0
eCrdnVolumeLightingConditionTypeSunlight = 1
eCrdnVolumeLightingConditionTypePenumbra = 2
eCrdnVolumeLightingConditionTypeUmbra = 4
AgECrdnVolumeLightingConditionsType = c_int # enum
IAgCrdnVolumeLighting._methods_ = [
    COMMETHOD(['propget', helpstring('A custom list of eclipsing bodies. This list is used if UseObjectEclipsingBodies is set to false.')], HRESULT, 'EclipsingBodies',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A custom list of eclipsing bodies. This list is used if UseObjectEclipsingBodies is set to false.')], HRESULT, 'EclipsingBodies',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('When true, configure eclipsing bodies list based on that of parent STK Object.')], HRESULT, 'UseObjectEclipsingBodies',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('When true, configure eclipsing bodies list based on that of parent STK Object.')], HRESULT, 'UseObjectEclipsingBodies',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Sets/Returns the lighting conditions.')], HRESULT, 'LightingConditions',
              ( ['out', 'retval'], POINTER(AgECrdnVolumeLightingConditionsType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Sets/Returns the lighting conditions.')], HRESULT, 'LightingConditions',
              ( ['in'], AgECrdnVolumeLightingConditionsType, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeLighting implementation
##class IAgCrdnVolumeLighting_Impl(object):
##    def _get(self):
##        'A custom list of eclipsing bodies. This list is used if UseObjectEclipsingBodies is set to false.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A custom list of eclipsing bodies. This list is used if UseObjectEclipsingBodies is set to false.'
##    EclipsingBodies = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'When true, configure eclipsing bodies list based on that of parent STK Object.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'When true, configure eclipsing bodies list based on that of parent STK Object.'
##    UseObjectEclipsingBodies = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Sets/Returns the lighting conditions.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Sets/Returns the lighting conditions.'
##    LightingConditions = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnEvaluateResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The scalar value.')], HRESULT, 'Value',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEvaluateResult implementation
##class IAgCrdnEvaluateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Value(self):
##        'The scalar value.'
##        #return pRetVal
##


# values for enumeration 'AgECrdnSampledReferenceTime'
eCrdnSampledReferenceTimeReferenceEvent = 0
eCrdnSampledReferenceTimeStartOfEachInterval = 1
eCrdnSampledReferenceTimeStopOfEachInterval = 2
eCrdnSampledReferenceTimeStartOfIntervalList = 3
eCrdnSampledReferenceTimeStopOfIntervalList = 4
AgECrdnSampledReferenceTime = c_int # enum
class AgCrdnVolumeGridGroup(CoClass):
    'Access or create VGT volume grids associated with an object or a central body.'
    _reg_clsid_ = GUID('{EE2B818C-6FEF-4B2B-ABC0-6B38EE69E5C8}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnVolumeGridGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnVolumeGridGroup]

class _IAgCrdnAngleRefTo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAngleRefTo'
    _iid_ = GUID('{5D7D691B-7159-4C31-9C92-E8CA0CE55C78}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnAngleRefTo._methods_ = [
    COMMETHOD([dispid(701), helpstring('Returns a path to the referenced VGT component.'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(1101), helpstring('Sets a new angle.')], HRESULT, 'SetPath',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD([dispid(1102), helpstring('Sets a new angle.')], HRESULT, 'SetAngle',
              ( ['in'], POINTER(IAgCrdnAngle), 'Angle' )),
    COMMETHOD([dispid(1103), helpstring('Returns the actual angle object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.')], HRESULT, 'GetAngle',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngle)), 'ppRetVal' )),
    COMMETHOD([dispid(1104), helpstring('Tests whether the input component and the target component form a cyclic dependency.')], HRESULT, 'HasCyclicDependency',
              ( ['in'], POINTER(IAgCrdnAngle), 'Angle' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnAngleRefTo implementation
##class _IAgCrdnAngleRefTo_Impl(object):
##    @property
##    def Path(self):
##        'Returns a path to the referenced VGT component.'
##        #return pRetVal
##
##    def SetPath(self, Path):
##        'Sets a new angle.'
##        #return 
##
##    def SetAngle(self, Angle):
##        'Sets a new angle.'
##        #return 
##
##    def GetAngle(self):
##        'Returns the actual angle object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.'
##        #return ppRetVal
##
##    def HasCyclicDependency(self, Angle):
##        'Tests whether the input component and the target component form a cyclic dependency.'
##        #return pRetVal
##

class AgCrdnPlaneFactory(CoClass):
    'A Factory object to create VGT planes.'
    _reg_clsid_ = GUID('{5606D84B-57A1-471E-B7C5-19E76C4B6CD3}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPlaneFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPlaneFactory'
    _iid_ = GUID('{9EE81B3F-A979-4932-9B34-9A4391D12F8A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnPlaneFactory._com_interfaces_ = [_IAgCrdnPlaneFactory, IAgCrdnPlaneFactory]

class AgCrdnVolumeGroup(CoClass):
    'Access or create spatial conditions associated with a volume grid.'
    _reg_clsid_ = GUID('{8D958E74-BB2E-4B83-8EDC-BF6A9FB43D61}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnVolumeGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnVolumeGroup]

class _IAgCrdnAngle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAngle'
    _iid_ = GUID('{F667E946-2B2E-4CA8-8155-7B45882A1E33}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnAngle._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(2001), helpstring('Returns a type of the angle object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAngleType), 'pRetVal' )),
    COMMETHOD([dispid(2002), helpstring('Finds an angle at the specified epoch.')], HRESULT, 'FindAngle',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindAngleResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2003), helpstring('Finds an angle and angle rate.')], HRESULT, 'FindAngleWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindAngleWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2004), helpstring('Finds the angle value and three vectors that define the angle in a specified input axes.')], HRESULT, 'FindCoordinates',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2005), helpstring('Finds the angle value, the angle rate and three vectors that define the angle in a specified input axes.')], HRESULT, 'FindCoordinatesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAngle implementation
##class _IAgCrdnAngle_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the angle object.'
##        #return pRetVal
##
##    def FindAngle(self, Epoch):
##        'Finds an angle at the specified epoch.'
##        #return ppRetVal
##
##    def FindAngleWithRate(self, Epoch):
##        'Finds an angle and angle rate.'
##        #return ppRetVal
##
##    def FindCoordinates(self, Epoch, Axes):
##        'Finds the angle value and three vectors that define the angle in a specified input axes.'
##        #return ppRetVal
##
##    def FindCoordinatesWithRate(self, Epoch, Axes):
##        'Finds the angle value, the angle rate and three vectors that define the angle in a specified input axes.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

_IAgCrdnPlaneTriad._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(2201), helpstring('Returns a type of the plane object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPlaneType), 'pRetVal' )),
    COMMETHOD([dispid(2202), helpstring("Computes the plane's axes vectors in a specified reference axes.")], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2203), helpstring("Computes the plane's axes vectors and their rates in a specified reference axes.")], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2204), helpstring('Computes the position and X and Y axes in the specified coordinate system.')], HRESULT, 'FindInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2205), helpstring('Computes the position, X and Y axes and their rates of change in the specified coordinate system.')], HRESULT, 'FindInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2206), helpstring("Allows configuring the plane's X and Y axes labels."), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(4301), helpstring('Specify a point A.'), 'propget'], HRESULT, 'PointA',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4302), helpstring('Specify a point B.'), 'propget'], HRESULT, 'PointB',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4303), helpstring('Specify a reference point.'), 'propget'], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4304), helpstring('Specify an angle measured from X (Axis 1) away from Y (Axis 2).'), 'propget'], HRESULT, 'RotationOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(4304), helpstring('Specify an angle measured from X (Axis 1) away from Y (Axis 2).'), 'propput'], HRESULT, 'RotationOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPlaneTriad implementation
##class _IAgCrdnPlaneTriad_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the plane object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        "Computes the plane's axes vectors in a specified reference axes."
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        "Computes the plane's axes vectors and their rates in a specified reference axes."
##        #return ppRetVal
##
##    def FindInSystem(self, Epoch, System):
##        'Computes the position and X and Y axes in the specified coordinate system.'
##        #return ppRetVal
##
##    def FindInSystemWithRate(self, Epoch, System):
##        'Computes the position, X and Y axes and their rates of change in the specified coordinate system.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        "Allows configuring the plane's X and Y axes labels."
##        #return ppRetVal
##
##    @property
##    def PointA(self):
##        'Specify a point A.'
##        #return ppRetVal
##
##    @property
##    def PointB(self):
##        'Specify a point B.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Specify a reference point.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify an angle measured from X (Axis 1) away from Y (Axis 2).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an angle measured from X (Axis 1) away from Y (Axis 2).'
##    RotationOffset = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnAngleFactory(CoClass):
    'A Factory object to create angles.'
    _reg_clsid_ = GUID('{879CA681-BF3D-4CAA-8197-6EF31290EA3A}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnAngleFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAngleFactory'
    _iid_ = GUID('{C00A055F-2AEB-4922-A7F8-2B74CDA79F84}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnAngleFactory._com_interfaces_ = [_IAgCrdnAngleFactory, IAgCrdnAngleFactory]

class AgCrdnVectorGroup(CoClass):
    'Access or create VGT vectors associated with an object or a central body.'
    _reg_clsid_ = GUID('{B7E6EDCC-89D4-4C81-80FC-630D5535BA1A}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnVectorGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnVectorGroup]

class AgCrdnCalcScalar(CoClass):
    'Any scalar calculation that is not constant by construction.'
    _reg_clsid_ = GUID('{E65458DD-AC1A-4E93-B7C2-7016060197EB}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnCalcScalar(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCalcScalar'
    _iid_ = GUID('{CB7768A9-5E60-4E01-8DFE-5191C4CC68A1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnCalcScalar._com_interfaces_ = [_IAgCrdnCalcScalar, IAgCrdnCalcScalar, IAgCrdn]

IAgCrdnConditionSet._methods_ = [
    COMMETHOD(['propget', helpstring('Returns the type of condition set.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnConditionSetType), 'pRetVal' )),
    COMMETHOD([helpstring('Returns an array of results of evaluating continuously varying condition metrics, one for each condition in the set, at the specified time, used for detecting condition crossings.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionSetEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns an array of results of evaluating continuously varying condition metrics and their rates of change, one for each condition in the set, at the specified time, used for detecting condition crossings.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionSetEvaluateWithRateResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnConditionSet implementation
##class IAgCrdnConditionSet_Impl(object):
##    @property
##    def Type(self):
##        'Returns the type of condition set.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Returns an array of results of evaluating continuously varying condition metrics, one for each condition in the set, at the specified time, used for detecting condition crossings.'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Returns an array of results of evaluating continuously varying condition metrics and their rates of change, one for each condition in the set, at the specified time, used for detecting condition crossings.'
##        #return ppRetVal
##

class _IAgCrdnEventSignaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventSignaled'
    _iid_ = GUID('{359189BE-A12E-47CD-86BA-2FA73A0C86F7}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnEventSignaled._methods_ = [
    COMMETHOD([dispid(12911), helpstring('Return the type of time instant.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventType), 'pRetVal' )),
    COMMETHOD([dispid(12905), helpstring("Return time instant that corresponds to today's GMT midnight."), 'propget'], HRESULT, 'Today',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12906), helpstring("Return time instant that corresponds to tomorrow's GMT midnight."), 'propget'], HRESULT, 'Tomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12907), helpstring("Return time instant that corresponds to today's GMT noon."), 'propget'], HRESULT, 'NoonToday',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12908), helpstring("Return time instant that corresponds to tomorrow's GMT noon."), 'propget'], HRESULT, 'NoonTomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12909), helpstring('Return computed time instance if it occurs.')], HRESULT, 'FindOccurrence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventFindOccurrenceResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12912), helpstring('Return true if computed time instance occurs before or at specified time, return false otherwise.')], HRESULT, 'OccursBefore',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(13610), helpstring('The original time instant.'), 'propget'], HRESULT, 'OriginalTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(13610), helpstring('The original time instant.'), 'propput'], HRESULT, 'OriginalTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD([dispid(13614), helpstring('The direction of the signal, whether you are Transmitting or Receiving from the BaseClockLocation.'), 'propget'], HRESULT, 'SignalSense',
              ( ['out', 'retval'], POINTER(AgECrdnSignalSense), 'pRetVal' )),
    COMMETHOD([dispid(13614), helpstring('The direction of the signal, whether you are Transmitting or Receiving from the BaseClockLocation.'), 'propput'], HRESULT, 'SignalSense',
              ( ['in'], AgECrdnSignalSense, 'pRetVal' )),
    COMMETHOD([dispid(13611), helpstring('The base clock location, which is a point from VGT.'), 'propget'], HRESULT, 'BaseClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(13611), helpstring('The base clock location, which is a point from VGT.'), 'propput'], HRESULT, 'BaseClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(13612), helpstring('The target clock location, which is a point from VGT.'), 'propget'], HRESULT, 'TargetClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(13612), helpstring('The target clock location, which is a point from VGT.'), 'propput'], HRESULT, 'TargetClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(13613), helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'), 'propget'], HRESULT, 'SignalDelay',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSignalDelay)), 'ppRetVal' )),
    COMMETHOD([dispid(13613), helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'), 'propput'], HRESULT, 'SignalDelay',
              ( ['in'], POINTER(IAgCrdnSignalDelay), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventSignaled implementation
##class _IAgCrdnEventSignaled_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time instant.'
##        #return pRetVal
##
##    @property
##    def Today(self):
##        "Return time instant that corresponds to today's GMT midnight."
##        #return ppRetVal
##
##    @property
##    def Tomorrow(self):
##        "Return time instant that corresponds to tomorrow's GMT midnight."
##        #return ppRetVal
##
##    @property
##    def NoonToday(self):
##        "Return time instant that corresponds to today's GMT noon."
##        #return ppRetVal
##
##    @property
##    def NoonTomorrow(self):
##        "Return time instant that corresponds to tomorrow's GMT noon."
##        #return ppRetVal
##
##    def FindOccurrence(self):
##        'Return computed time instance if it occurs.'
##        #return ppRetVal
##
##    def OccursBefore(self, Epoch):
##        'Return true if computed time instance occurs before or at specified time, return false otherwise.'
##        #return pRetVal
##
##    def _get(self):
##        'The original time instant.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original time instant.'
##    OriginalTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The direction of the signal, whether you are Transmitting or Receiving from the BaseClockLocation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The direction of the signal, whether you are Transmitting or Receiving from the BaseClockLocation.'
##    SignalSense = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The base clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The base clock location, which is a point from VGT.'
##    BaseClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The target clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The target clock location, which is a point from VGT.'
##    TargetClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##    SignalDelay = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnPointCentBodyIntersect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Point on central body surface along direction vector originating at source point.'
    _iid_ = GUID('{11CFBB8D-A84A-414E-B09A-82FB0CA20560}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgECrdnIntersectionSurface'
eCrdnIntersectionSurfaceAtCentralBodyEllipsoid = 0
eCrdnIntersectionSurfaceAtAltitudeAboveEllipsoid = 1
eCrdnIntersectionSurfaceAtTerrain = 2
AgECrdnIntersectionSurface = c_int # enum
IAgCrdnPointCentBodyIntersect._methods_ = [
    COMMETHOD(['propget', helpstring('Central body.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Central body.')], HRESULT, 'CentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A reference point. Can be any point from VGT.')], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A reference point. Can be any point from VGT.')], HRESULT, 'ReferencePoint',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A direction vector. Can be any vector from VGT.')], HRESULT, 'DirectionVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A direction vector. Can be any vector from VGT.')], HRESULT, 'DirectionVector',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('An intersection surface.')], HRESULT, 'IntersectionSurface',
              ( ['out', 'retval'], POINTER(AgECrdnIntersectionSurface), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('An intersection surface.')], HRESULT, 'IntersectionSurface',
              ( ['in'], AgECrdnIntersectionSurface, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('An altitude.')], HRESULT, 'Altitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('An altitude.')], HRESULT, 'Altitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Whether to use range constraint.')], HRESULT, 'UseRangeConstraint',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Whether to use range constraint.')], HRESULT, 'UseRangeConstraint',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A minimum range. An exception is thrown if the value exceeds the MaximumRange. Applicable only if the range constraint is not used.')], HRESULT, 'MinimumRange',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('A minimum range. An exception is thrown if the value exceeds the MaximumRange. Applicable only if the range constraint is not used.')], HRESULT, 'MinimumRange',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A maximum range. An exception is thrown if the value is less than the MinimumRange. Applicable only if the range constraint is not used.')], HRESULT, 'MaximumRange',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('A maximum range. An exception is thrown if the value is less than the MinimumRange. Applicable only if the range constraint is not used.')], HRESULT, 'MaximumRange',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Whether the minimum range is used. Applicable only if the range constraint is not used.')], HRESULT, 'UseMinimumRange',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Whether the minimum range is used. Applicable only if the range constraint is not used.')], HRESULT, 'UseMinimumRange',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Whether the maximum range is used. Applicable only if the range constraint is not used.')], HRESULT, 'UseMaximumRange',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Whether the maximum range is used. Applicable only if the range constraint is not used.')], HRESULT, 'UseMaximumRange',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([helpstring('Set minimum and maximum range. An exception is thrown if Minimum exceeds Maximum. An exception is thrown if UseRangeConstraint is set to true. Applicable only if the range constraint is not used.')], HRESULT, 'SetRange',
              ( ['in'], c_double, 'Minimum' ),
              ( ['in'], c_double, 'Maximum' )),
]
################################################################
## code template for IAgCrdnPointCentBodyIntersect implementation
##class IAgCrdnPointCentBodyIntersect_Impl(object):
##    def _get(self):
##        'Central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Central body.'
##    CentralBody = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A reference point. Can be any point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A reference point. Can be any point from VGT.'
##    ReferencePoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A direction vector. Can be any vector from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A direction vector. Can be any vector from VGT.'
##    DirectionVector = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'An intersection surface.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'An intersection surface.'
##    IntersectionSurface = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'An altitude.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'An altitude.'
##    Altitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether to use range constraint.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to use range constraint.'
##    UseRangeConstraint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A minimum range. An exception is thrown if the value exceeds the MaximumRange. Applicable only if the range constraint is not used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A minimum range. An exception is thrown if the value exceeds the MaximumRange. Applicable only if the range constraint is not used.'
##    MinimumRange = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A maximum range. An exception is thrown if the value is less than the MinimumRange. Applicable only if the range constraint is not used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A maximum range. An exception is thrown if the value is less than the MinimumRange. Applicable only if the range constraint is not used.'
##    MaximumRange = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether the minimum range is used. Applicable only if the range constraint is not used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether the minimum range is used. Applicable only if the range constraint is not used.'
##    UseMinimumRange = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether the maximum range is used. Applicable only if the range constraint is not used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether the maximum range is used. Applicable only if the range constraint is not used.'
##    UseMaximumRange = property(_get, _set, doc = _set.__doc__)
##
##    def SetRange(self, Minimum, Maximum):
##        'Set minimum and maximum range. An exception is thrown if Minimum exceeds Maximum. An exception is thrown if UseRangeConstraint is set to true. Applicable only if the range constraint is not used.'
##        #return 
##

class AgCrdnPointGroup(CoClass):
    'Access or create VGT points associated with an object or a central body.'
    _reg_clsid_ = GUID('{B1AAD2AC-1AAA-40A9-B91B-3F8112112EC5}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnPointGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnPointGroup]

_IAgCrdnVolumeGridBearingAlt._methods_ = [
    COMMETHOD([dispid(32201), helpstring('Get the central body for the volume grid. Both the central body reference shape and its CBF (central body centered fixed) system are used by this parameter set.'), 'propget'], HRESULT, 'ReferenceCentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(32201), helpstring('Get the central body for the volume grid. Both the central body reference shape and its CBF (central body centered fixed) system are used by this parameter set.'), 'propput'], HRESULT, 'ReferenceCentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(32202), helpstring('Returns AlongBearing Coordinates parameters for the surface bearing.'), 'propget'], HRESULT, 'AlongBearingCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD([dispid(32203), helpstring('Returns CrossBearing Coordinates parameters for the surface bearing.'), 'propget'], HRESULT, 'CrossBearingCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD([dispid(32204), helpstring('Returns altitude Coordinates parameters for the surface bearing.'), 'propget'], HRESULT, 'AltitudeCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD([dispid(32205), helpstring('Specify whether to use the auto fit bounds. Set to true to use the auto fit bounds..'), 'propget'], HRESULT, 'AutoFitBounds',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(32205), helpstring('Specify whether to use the auto fit bounds. Set to true to use the auto fit bounds..'), 'propput'], HRESULT, 'AutoFitBounds',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(32207), helpstring('Specify the Bearing Angle.'), 'propget'], HRESULT, 'BearingAngle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(32207), helpstring('Specify the Bearing Angle.'), 'propput'], HRESULT, 'BearingAngle',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(32208), helpstring('Get lat/lon for reference location'), 'propget'], HRESULT, 'ReferenceLocation',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(32208), helpstring('Get lat/lon for reference location'), 'propput'], HRESULT, 'ReferenceLocation',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVolumeGridBearingAlt implementation
##class _IAgCrdnVolumeGridBearingAlt_Impl(object):
##    def _get(self):
##        'Get the central body for the volume grid. Both the central body reference shape and its CBF (central body centered fixed) system are used by this parameter set.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the central body for the volume grid. Both the central body reference shape and its CBF (central body centered fixed) system are used by this parameter set.'
##    ReferenceCentralBody = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def AlongBearingCoordinates(self):
##        'Returns AlongBearing Coordinates parameters for the surface bearing.'
##        #return ppRetVal
##
##    @property
##    def CrossBearingCoordinates(self):
##        'Returns CrossBearing Coordinates parameters for the surface bearing.'
##        #return ppRetVal
##
##    @property
##    def AltitudeCoordinates(self):
##        'Returns altitude Coordinates parameters for the surface bearing.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify whether to use the auto fit bounds. Set to true to use the auto fit bounds..'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use the auto fit bounds. Set to true to use the auto fit bounds..'
##    AutoFitBounds = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify the Bearing Angle.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify the Bearing Angle.'
##    BearingAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get lat/lon for reference location'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get lat/lon for reference location'
##    ReferenceLocation = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnCalcScalarAngle(CoClass):
    'Scalar equal to angular displacement obtained from any angle in VGT.'
    _reg_clsid_ = GUID('{8D2C3E23-C3B7-48AB-91F7-C845C6B2D09A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnCalcScalarAngle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCalcScalarAngle'
    _iid_ = GUID('{074125F8-1653-41D5-9D99-A426C521DBFE}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnCalcScalarAngle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Scalar equal to angular displacement obtained from any angle in VGT.'
    _iid_ = GUID('{4318A512-9878-43FF-B164-0468DE5D0489}')
    _idlflags_ = ['oleautomation']
AgCrdnCalcScalarAngle._com_interfaces_ = [_IAgCrdnCalcScalarAngle, IAgCrdnCalcScalarAngle, IAgCrdnCalcScalar, IAgCrdn]

class _IAgCrdnParameterSetOrbit(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnParameterSetOrbit'
    _iid_ = GUID('{FB3136C2-87DC-49B0-A8CB-DEA63E9789E7}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnParameterSetOrbit._methods_ = [
    COMMETHOD([dispid(21203), helpstring('Get the type of parameter set.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnParameterSetType), 'pRetVal' )),
    COMMETHOD([dispid(21201), helpstring('Get the labels identifying hierarchy of representations within parameter set.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21206), helpstring('Get the names identifying types of dimensions of individual scalars within parameter set.'), 'propget'], HRESULT, 'Dimensions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21202), helpstring('Get the names identifying individual scalars within parameter set.'), 'propget'], HRESULT, 'ScalarNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21204), helpstring('Return results of computing individual scalars within parameter set at the specified time.')], HRESULT, 'Calculate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21205), helpstring('Return results of computing individual scalars and their time derivatives within parameter set at the specified time.')], HRESULT, 'CalculateWithDerivative',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(24707), helpstring('Get the point for which orbital parameters are computed.'), 'propget'], HRESULT, 'OrbitingPoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(24707), helpstring('Get the point for which orbital parameters are computed.'), 'propput'], HRESULT, 'OrbitingPoint',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(24702), helpstring('Get the reference system in which orbital parameters are computed. Only used if the option to specify reference system is selected.'), 'propget'], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(24702), helpstring('Get the reference system in which orbital parameters are computed. Only used if the option to specify reference system is selected.'), 'propput'], HRESULT, 'ReferenceSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(24703), helpstring('Get the gravitational parameter for the mass relative to which orbital parameters are computed. Only used if the option to specify gravitational parameter is selected.'), 'propget'], HRESULT, 'GravitationalParameter',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(24703), helpstring('Get the gravitational parameter for the mass relative to which orbital parameters are computed. Only used if the option to specify gravitational parameter is selected.'), 'propput'], HRESULT, 'GravitationalParameter',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(24704), helpstring('Get the central body relative to which orbital parameters are computed.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(24704), helpstring('Get the central body relative to which orbital parameters are computed.'), 'propput'], HRESULT, 'CentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(24709), helpstring('Get the option that determines whether to specify the gravitational parameter value or to inherit it from the central body.'), 'propget'], HRESULT, 'UseCentralBodyGravitationalParameter',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(24709), helpstring('Get the option that determines whether to specify the gravitational parameter value or to inherit it from the central body.'), 'propput'], HRESULT, 'UseCentralBodyGravitationalParameter',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(24708), helpstring('Get the option that determines whether to specify the reference coordinate system or to the inherit inertial reference system from the central body.'), 'propget'], HRESULT, 'UseCentralBodyInertial',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(24708), helpstring('Get the option that determines whether to specify the reference coordinate system or to the inherit inertial reference system from the central body.'), 'propput'], HRESULT, 'UseCentralBodyInertial',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnParameterSetOrbit implementation
##class _IAgCrdnParameterSetOrbit_Impl(object):
##    @property
##    def Type(self):
##        'Get the type of parameter set.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the labels identifying hierarchy of representations within parameter set.'
##        #return ppRetVal
##
##    @property
##    def Dimensions(self):
##        'Get the names identifying types of dimensions of individual scalars within parameter set.'
##        #return ppRetVal
##
##    @property
##    def ScalarNames(self):
##        'Get the names identifying individual scalars within parameter set.'
##        #return ppRetVal
##
##    def Calculate(self, Epoch):
##        'Return results of computing individual scalars within parameter set at the specified time.'
##        #return ppRetVal
##
##    def CalculateWithDerivative(self, Epoch):
##        'Return results of computing individual scalars and their time derivatives within parameter set at the specified time.'
##        #return ppRetVal
##
##    def _get(self):
##        'Get the point for which orbital parameters are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the point for which orbital parameters are computed.'
##    OrbitingPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the reference system in which orbital parameters are computed. Only used if the option to specify reference system is selected.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the reference system in which orbital parameters are computed. Only used if the option to specify reference system is selected.'
##    ReferenceSystem = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the gravitational parameter for the mass relative to which orbital parameters are computed. Only used if the option to specify gravitational parameter is selected.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the gravitational parameter for the mass relative to which orbital parameters are computed. Only used if the option to specify gravitational parameter is selected.'
##    GravitationalParameter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the central body relative to which orbital parameters are computed.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the central body relative to which orbital parameters are computed.'
##    CentralBody = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the option that determines whether to specify the gravitational parameter value or to inherit it from the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the option that determines whether to specify the gravitational parameter value or to inherit it from the central body.'
##    UseCentralBodyGravitationalParameter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the option that determines whether to specify the reference coordinate system or to the inherit inertial reference system from the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the option that determines whether to specify the reference coordinate system or to the inherit inertial reference system from the central body.'
##    UseCentralBodyInertial = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnLLAPosition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnLLAPosition'
    _iid_ = GUID('{CBB42F76-887A-41A0-A641-2C940B3CEDE4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnLLAPosition._methods_ = [
    COMMETHOD([dispid(5701), helpstring('Specify a latitude angle.'), 'propget'], HRESULT, 'Latitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(5701), helpstring('Specify a latitude angle.'), 'propput'], HRESULT, 'Latitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(5702), helpstring('Specify a longitude angle.'), 'propget'], HRESULT, 'Longitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(5702), helpstring('Specify a longitude angle.'), 'propput'], HRESULT, 'Longitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(5703), helpstring('Specify an altitude value.'), 'propget'], HRESULT, 'Altitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(5703), helpstring('Specify an altitude value.'), 'propput'], HRESULT, 'Altitude',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnLLAPosition implementation
##class _IAgCrdnLLAPosition_Impl(object):
##    def _get(self):
##        'Specify a latitude angle.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a latitude angle.'
##    Latitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a longitude angle.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a longitude angle.'
##    Longitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify an altitude value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an altitude value.'
##    Altitude = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnAngleGroup(CoClass):
    'Access or create VGT angles associated with an object or a central body.'
    _reg_clsid_ = GUID('{741C5A80-129D-441D-9511-4641865E9A3D}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAngleGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnAngleGroup]

class AgCrdnCalcScalarConstant(CoClass):
    'Constant scalar value of specified dimension.'
    _reg_clsid_ = GUID('{7B3E3439-15D7-4D65-897A-DC24204D7A82}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnCalcScalarConstant(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCalcScalarConstant'
    _iid_ = GUID('{19DA7D2B-382F-4209-B712-E4F33B2235B2}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnCalcScalarConstant(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Constant scalar value of specified dimension.'
    _iid_ = GUID('{D90A78E7-F838-4A2A-A633-535B1946C3E2}')
    _idlflags_ = ['oleautomation']
AgCrdnCalcScalarConstant._com_interfaces_ = [_IAgCrdnCalcScalarConstant, IAgCrdnCalcScalarConstant, IAgCrdnCalcScalar, IAgCrdn]

class _IAgCrdnLastIntervalsFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnLastIntervalsFilter'
    _iid_ = GUID('{559C0F72-5C62-494A-AEF0-D047D0F3DA0D}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnLastIntervalsFilter._methods_ = [
    COMMETHOD([dispid(22901), helpstring('Returns a type of the filter.'), 'propget'], HRESULT, 'FilterType',
              ( ['out', 'retval'], POINTER(AgECrdnPruneFilter), 'pRetVal' )),
    COMMETHOD([dispid(23301), helpstring('Maximum number of intervals.'), 'propget'], HRESULT, 'MaximumNumberOfIntervals',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23301), helpstring('Maximum number of intervals.'), 'propput'], HRESULT, 'MaximumNumberOfIntervals',
              ( ['in'], c_int, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnLastIntervalsFilter implementation
##class _IAgCrdnLastIntervalsFilter_Impl(object):
##    @property
##    def FilterType(self):
##        'Returns a type of the filter.'
##        #return pRetVal
##
##    def _get(self):
##        'Maximum number of intervals.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Maximum number of intervals.'
##    MaximumNumberOfIntervals = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnEvaluateWithRateResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Computed scalar value.')], HRESULT, 'Value',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A rate of change of the computed scalar value.')], HRESULT, 'Rate',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEvaluateWithRateResult implementation
##class IAgCrdnEvaluateWithRateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Value(self):
##        'Computed scalar value.'
##        #return pRetVal
##
##    @property
##    def Rate(self):
##        'A rate of change of the computed scalar value.'
##        #return pRetVal
##

class _IAgCrdnEventIntervalScaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalScaled'
    _iid_ = GUID('{9052A14F-7DF9-4093-A9C2-6022DD7CB0EA}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnEventIntervalScaled._methods_ = [
    COMMETHOD([dispid(13411), helpstring('Return the type of interval.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalType), 'pRetVal' )),
    COMMETHOD([dispid(13404), helpstring('The start description.'), 'propget'], HRESULT, 'LabelStartDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13405), helpstring('The stop description.'), 'propget'], HRESULT, 'LabelStopDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13406), helpstring('A label associated with the interval start.'), 'propget'], HRESULT, 'LabelStart',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13407), helpstring('A label associated with the interval stop.'), 'propget'], HRESULT, 'LabelStop',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13408), helpstring('Return computed interval if it exists.')], HRESULT, 'FindInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13409), helpstring('Determine if specified time falls within computed interval if it exists.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(14906), helpstring('The original interval.'), 'propget'], HRESULT, 'OriginalInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(14906), helpstring('The original interval.'), 'propput'], HRESULT, 'OriginalInterval',
              ( ['in'], POINTER(IAgCrdnEventInterval), 'ppRetVal' )),
    COMMETHOD([dispid(14907), helpstring('The absolute increment value which creates a interval by expanding (or shortening if negative) the original interval by shifting its start/stop times equally by half of specified increment value.'), 'propget'], HRESULT, 'AbsoluteIncrement',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(14907), helpstring('The absolute increment value which creates a interval by expanding (or shortening if negative) the original interval by shifting its start/stop times equally by half of specified increment value.'), 'propput'], HRESULT, 'AbsoluteIncrement',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(14908), helpstring('The relative increment value from which absolute increment is obtained by multiplying relative value by interval duration...'), 'propget'], HRESULT, 'RelativeIncrement',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(14908), helpstring('The relative increment value from which absolute increment is obtained by multiplying relative value by interval duration...'), 'propput'], HRESULT, 'RelativeIncrement',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(14909), helpstring('Specify whether to use absolute or relative increment.'), 'propget'], HRESULT, 'UseAbsoluteIncrement',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(14909), helpstring('Specify whether to use absolute or relative increment.'), 'propput'], HRESULT, 'UseAbsoluteIncrement',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalScaled implementation
##class _IAgCrdnEventIntervalScaled_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval.'
##        #return pRetVal
##
##    @property
##    def LabelStartDescription(self):
##        'The start description.'
##        #return pRetVal
##
##    @property
##    def LabelStopDescription(self):
##        'The stop description.'
##        #return pRetVal
##
##    @property
##    def LabelStart(self):
##        'A label associated with the interval start.'
##        #return pRetVal
##
##    @property
##    def LabelStop(self):
##        'A label associated with the interval stop.'
##        #return pRetVal
##
##    def FindInterval(self):
##        'Return computed interval if it exists.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval if it exists.'
##        #return pRetVal
##
##    def _get(self):
##        'The original interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original interval.'
##    OriginalInterval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The absolute increment value which creates a interval by expanding (or shortening if negative) the original interval by shifting its start/stop times equally by half of specified increment value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The absolute increment value which creates a interval by expanding (or shortening if negative) the original interval by shifting its start/stop times equally by half of specified increment value.'
##    AbsoluteIncrement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The relative increment value from which absolute increment is obtained by multiplying relative value by interval duration...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The relative increment value from which absolute increment is obtained by multiplying relative value by interval duration...'
##    RelativeIncrement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use absolute or relative increment.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use absolute or relative increment.'
##    UseAbsoluteIncrement = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnCalcScalarCustom(CoClass):
    'A calc scalar based on a scripted algorithm in MATLAB (.m or .dll), Perl or VBScript to define its value and rate.'
    _reg_clsid_ = GUID('{078DA10F-BD29-4AF4-ACC3-A4008F5C95E1}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnCalcScalarCustom(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A calc scalar based on a scripted algorithm in MATLAB (.m or .dll), Perl or VBScript to define its value and rate.'
    _iid_ = GUID('{F9A780DE-1313-4658-ACEB-A7625AE81144}')
    _idlflags_ = ['oleautomation']
AgCrdnCalcScalarCustom._com_interfaces_ = [_IAgCrdnCalcScalarCustom, IAgCrdnCalcScalarCustom, IAgCrdnCalcScalar, IAgCrdn]

class AgCrdnAxesGroup(CoClass):
    'Access or create VGT axes associated with an object or a central body.'
    _reg_clsid_ = GUID('{7893CD35-BD57-406D-BBC3-15C9B4452758}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnAxesGroup]

class IAgCrdnConvergeBasic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Convergence definition includes parameters that determine criteria for accurate detection of extrema or condition crossings for scalar calculations.'
    _iid_ = GUID('{F2763C04-0B38-46F1-8313-2D54E6611280}')
    _idlflags_ = ['oleautomation']
IAgCrdnConvergeBasic._methods_ = [
    COMMETHOD(['propget', helpstring('Get the convergence sense which determines whether the converged value should be limited to just within or just outside of condition boundaries.')], HRESULT, 'Sense',
              ( ['out', 'retval'], POINTER(AgECrdnThreshConvergeSense), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the convergence sense which determines whether the converged value should be limited to just within or just outside of condition boundaries.')], HRESULT, 'Sense',
              ( ['in'], AgECrdnThreshConvergeSense, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the time tolerance which determines the time accuracy of the converged value.')], HRESULT, 'TimeTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the time tolerance which determines the time accuracy of the converged value.')], HRESULT, 'TimeTolerance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the absolute tolerance which determines the distance between the value and the boundaries within which the value is considered converged.')], HRESULT, 'AbsoluteTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the absolute tolerance which determines the distance between the value and the boundaries within which the value is considered converged.')], HRESULT, 'AbsoluteTolerance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the relative tolerance which determines the relative distance between the value and the boundaries within which the value is considered converged.')], HRESULT, 'RelativeTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the relative tolerance which determines the relative distance between the value and the boundaries within which the value is considered converged.')], HRESULT, 'RelativeTolerance',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnConvergeBasic implementation
##class IAgCrdnConvergeBasic_Impl(object):
##    def _get(self):
##        'Get the convergence sense which determines whether the converged value should be limited to just within or just outside of condition boundaries.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the convergence sense which determines whether the converged value should be limited to just within or just outside of condition boundaries.'
##    Sense = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the time tolerance which determines the time accuracy of the converged value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the time tolerance which determines the time accuracy of the converged value.'
##    TimeTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the absolute tolerance which determines the distance between the value and the boundaries within which the value is considered converged.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the absolute tolerance which determines the distance between the value and the boundaries within which the value is considered converged.'
##    AbsoluteTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the relative tolerance which determines the relative distance between the value and the boundaries within which the value is considered converged.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the relative tolerance which determines the relative distance between the value and the boundaries within which the value is considered converged.'
##    RelativeTolerance = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnCalcScalarIntegral(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Integral of input scalar computed with respect to time using one of the specified numerical methods and using one of the specified accumulation types.'
    _iid_ = GUID('{E40885EC-4849-4350-B692-E403BD5114B8}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgECrdnIntegrationWindowType'
eCrdnIntegrationWindowTypeTotal = 0
eCrdnIntegrationWindowTypeCumulativeToCurrent = 1
eCrdnIntegrationWindowTypeCumulativeFromCurrent = 2
eCrdnIntegrationWindowTypeSlidingWindow = 3
AgECrdnIntegrationWindowType = c_int # enum
IAgCrdnCalcScalarIntegral._methods_ = [
    COMMETHOD(['propget', helpstring('The input scalar calculation.')], HRESULT, 'InputScalar',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The input scalar calculation.')], HRESULT, 'InputScalar',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether the resulting integral value is divided by its time span to generate average value instead of integral.')], HRESULT, 'ComputeAsAverage',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether the resulting integral value is divided by its time span to generate average value instead of integral.')], HRESULT, 'ComputeAsAverage',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The integration window, or accumulation, type.')], HRESULT, 'IntegrationWindowType',
              ( ['out', 'retval'], POINTER(AgECrdnIntegrationWindowType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The integration window, or accumulation, type.')], HRESULT, 'IntegrationWindowType',
              ( ['in'], AgECrdnIntegrationWindowType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Set the offset with respect to current time to define the start of the sliding window, used when IntegrationWindowType is set to Sliding Window.')], HRESULT, 'StartOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Set the offset with respect to current time to define the start of the sliding window, used when IntegrationWindowType is set to Sliding Window.')], HRESULT, 'StartOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Set the offset with respect to current time to define the stop of the sliding window, used when IntegrationWindowType is set to Sliding Window.')], HRESULT, 'StopOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Set the offset with respect to current time to define the stop of the sliding window, used when IntegrationWindowType is set to Sliding Window.')], HRESULT, 'StopOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether to use custom interval list (CustomTimeLimits).')], HRESULT, 'UseCustomTimeLimits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether to use custom interval list (CustomTimeLimits).')], HRESULT, 'UseCustomTimeLimits',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The interval list within which the global minimum or maximum is sought. The default is the overall availability of host object.')], HRESULT, 'CustomTimeLimits',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The interval list within which the global minimum or maximum is sought. The default is the overall availability of host object.')], HRESULT, 'CustomTimeLimits',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Set the value to determine if computed time of extremum is saved/loaded, or recomputed on load if necessary.')], HRESULT, 'SaveDataOption',
              ( ['out', 'retval'], POINTER(AgECrdnSaveDataOption), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Set the value to determine if computed time of extremum is saved/loaded, or recomputed on load if necessary.')], HRESULT, 'SaveDataOption',
              ( ['in'], AgECrdnSaveDataOption, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether to use Lagrange or Hermite interpolation. See STK help on interpolation.')], HRESULT, 'Interpolation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnInterp)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether to use Lagrange or Hermite interpolation. See STK help on interpolation.')], HRESULT, 'Interpolation',
              ( ['in'], POINTER(IAgCrdnInterp), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The numerical integration method.')], HRESULT, 'Integral',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntegral)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The numerical integration method.')], HRESULT, 'Integral',
              ( ['in'], POINTER(IAgCrdnIntegral), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("If true, the integral's integrand value is replaced by a constant 0 so that the integral remains constant over the gaps in integration.")], HRESULT, 'KeepConstantOutsideTimeLimits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("If true, the integral's integrand value is replaced by a constant 0 so that the integral remains constant over the gaps in integration.")], HRESULT, 'KeepConstantOutsideTimeLimits',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([helpstring('Set the offsets with respect to current time to define the start and stop of the sliding window, used when IntegrationWindowType is set to Sliding Window.')], HRESULT, 'SetOffsets',
              ( ['in'], c_double, 'StartOffset' ),
              ( ['in'], c_double, 'StopOffset' )),
]
################################################################
## code template for IAgCrdnCalcScalarIntegral implementation
##class IAgCrdnCalcScalarIntegral_Impl(object):
##    def _get(self):
##        'The input scalar calculation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The input scalar calculation.'
##    InputScalar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether the resulting integral value is divided by its time span to generate average value instead of integral.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether the resulting integral value is divided by its time span to generate average value instead of integral.'
##    ComputeAsAverage = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The integration window, or accumulation, type.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The integration window, or accumulation, type.'
##    IntegrationWindowType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Set the offset with respect to current time to define the start of the sliding window, used when IntegrationWindowType is set to Sliding Window.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Set the offset with respect to current time to define the start of the sliding window, used when IntegrationWindowType is set to Sliding Window.'
##    StartOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Set the offset with respect to current time to define the stop of the sliding window, used when IntegrationWindowType is set to Sliding Window.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Set the offset with respect to current time to define the stop of the sliding window, used when IntegrationWindowType is set to Sliding Window.'
##    StopOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use custom interval list (CustomTimeLimits).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use custom interval list (CustomTimeLimits).'
##    UseCustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The interval list within which the global minimum or maximum is sought. The default is the overall availability of host object.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The interval list within which the global minimum or maximum is sought. The default is the overall availability of host object.'
##    CustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Set the value to determine if computed time of extremum is saved/loaded, or recomputed on load if necessary.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Set the value to determine if computed time of extremum is saved/loaded, or recomputed on load if necessary.'
##    SaveDataOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use Lagrange or Hermite interpolation. See STK help on interpolation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Specify whether to use Lagrange or Hermite interpolation. See STK help on interpolation.'
##    Interpolation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The numerical integration method.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The numerical integration method.'
##    Integral = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "If true, the integral's integrand value is replaced by a constant 0 so that the integral remains constant over the gaps in integration."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "If true, the integral's integrand value is replaced by a constant 0 so that the integral remains constant over the gaps in integration."
##    KeepConstantOutsideTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def SetOffsets(self, StartOffset, StopOffset):
##        'Set the offsets with respect to current time to define the start and stop of the sliding window, used when IntegrationWindowType is set to Sliding Window.'
##        #return 
##

class _IAgCrdnSystemRefTo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnSystemRefTo'
    _iid_ = GUID('{F9520E0C-81DA-4A0D-AE00-FE6F13B21F33}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnSystemRefTo._methods_ = [
    COMMETHOD([dispid(701), helpstring('Returns a path to the referenced VGT component.'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(1201), helpstring('Sets a new system.')], HRESULT, 'SetPath',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD([dispid(1202), helpstring('Sets a new system.')], HRESULT, 'SetSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'System' )),
    COMMETHOD([dispid(1203), helpstring('Returns the actual system object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.')], HRESULT, 'GetSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(1204), helpstring('Tests whether the input component and the target component form a cyclic dependency.')], HRESULT, 'HasCyclicDependency',
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnSystemRefTo implementation
##class _IAgCrdnSystemRefTo_Impl(object):
##    @property
##    def Path(self):
##        'Returns a path to the referenced VGT component.'
##        #return pRetVal
##
##    def SetPath(self, Path):
##        'Sets a new system.'
##        #return 
##
##    def SetSystem(self, System):
##        'Sets a new system.'
##        #return 
##
##    def GetSystem(self):
##        'Returns the actual system object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.'
##        #return ppRetVal
##
##    def HasCyclicDependency(self, System):
##        'Tests whether the input component and the target component form a cyclic dependency.'
##        #return pRetVal
##

_IAgCrdnPointPlaneIntersection._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1801), helpstring('Returns a type of the point object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([dispid(1802), helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1803), helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(5001), helpstring('Specify a direction vector.'), 'propget'], HRESULT, 'DirectionVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(5002), helpstring('Specify a reference plane.'), 'propget'], HRESULT, 'ReferencePlane',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(5003), helpstring('Specify the origin point.'), 'propget'], HRESULT, 'OriginPoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPointPlaneIntersection implementation
##class _IAgCrdnPointPlaneIntersection_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##
##    @property
##    def DirectionVector(self):
##        'Specify a direction vector.'
##        #return ppRetVal
##
##    @property
##    def ReferencePlane(self):
##        'Specify a reference plane.'
##        #return ppRetVal
##
##    @property
##    def OriginPoint(self):
##        'Specify the origin point.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnPointSamplingIntervalCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A collection of intervals where each interval contains the time, position and velocity arrays.'
    _iid_ = GUID('{E89BB7D2-2DC1-49A4-8CC9-BDCBA8C1C91F}')
    _idlflags_ = ['oleautomation']
IAgCrdnPointSamplingResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A collection of sampling intervals.')], HRESULT, 'Intervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointSamplingIntervalCollection)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPointSamplingResult implementation
##class IAgCrdnPointSamplingResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Intervals(self):
##        'A collection of sampling intervals.'
##        #return ppRetVal
##

class IAgCrdnInterval(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The interface represents an interval.'
    _iid_ = GUID('{F12A71B9-7F54-4162-B742-27ACDEF49973}')
    _idlflags_ = ['oleautomation']
IAgCrdnIntervalCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('Return a number of elements in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns an interval at a specified index.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnIntervalCollection implementation
##class IAgCrdnIntervalCollection_Impl(object):
##    @property
##    def Count(self):
##        'Return a number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Returns an interval at a specified index.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator'
##        #return ppRetVal
##


# values for enumeration 'AgECrdnVolumeOverTimeDurationType'
eCrdnVolumeOverTimeDurationTypeStatic = 0
eCrdnVolumeOverTimeDurationTypeCumulativeToCurrent = 1
eCrdnVolumeOverTimeDurationTypeCumulativeFromCurrent = 2
eCrdnVolumeOverTimeDurationTypeSlidingWindow = 3
AgECrdnVolumeOverTimeDurationType = c_int # enum
IAgCrdnVolumeOverTime._methods_ = [
    COMMETHOD(['propget', helpstring('Sets/Returns the lighting conditions.')], HRESULT, 'DurationType',
              ( ['out', 'retval'], POINTER(AgECrdnVolumeOverTimeDurationType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Sets/Returns the lighting conditions.')], HRESULT, 'DurationType',
              ( ['in'], AgECrdnVolumeOverTimeDurationType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Sets/Returns the reference volume.')], HRESULT, 'ReferenceVolume',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Sets/Returns the reference volume.')], HRESULT, 'ReferenceVolume',
              ( ['in'], POINTER(IAgCrdnVolume), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The reference interval list for the over time volume.')], HRESULT, 'ReferenceIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The reference interval list for the over time volume.')], HRESULT, 'ReferenceIntervals',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Set the offset with respect to current time to define the start of the sliding window, used when over time volume is set to Sliding Window.')], HRESULT, 'StartOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Set the offset with respect to current time to define the start of the sliding window, used when over time volume is set to Sliding Window.')], HRESULT, 'StartOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Set the offset with respect to current time to define the stop of the sliding window, used when over time volume is set to Sliding Window.')], HRESULT, 'StopOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Set the offset with respect to current time to define the stop of the sliding window, used when over time volume is set to Sliding Window.')], HRESULT, 'StopOffset',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeOverTime implementation
##class IAgCrdnVolumeOverTime_Impl(object):
##    def _get(self):
##        'Sets/Returns the lighting conditions.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Sets/Returns the lighting conditions.'
##    DurationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Sets/Returns the reference volume.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Sets/Returns the reference volume.'
##    ReferenceVolume = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The reference interval list for the over time volume.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference interval list for the over time volume.'
##    ReferenceIntervals = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Set the offset with respect to current time to define the start of the sliding window, used when over time volume is set to Sliding Window.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Set the offset with respect to current time to define the start of the sliding window, used when over time volume is set to Sliding Window.'
##    StartOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Set the offset with respect to current time to define the stop of the sliding window, used when over time volume is set to Sliding Window.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Set the offset with respect to current time to define the stop of the sliding window, used when over time volume is set to Sliding Window.'
##    StopOffset = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnCalcScalarDataElement(CoClass):
    'Any time-dependent data element from STK data providers available for parent STK object.'
    _reg_clsid_ = GUID('{B42B5FEB-781F-44B4-9A8A-784A97D38E80}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnCalcScalarDataElement(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Any time-dependent data element from STK data providers available for parent STK object.'
    _iid_ = GUID('{17210592-1092-471C-AE93-A692BCE967EC}')
    _idlflags_ = ['oleautomation']
AgCrdnCalcScalarDataElement._com_interfaces_ = [_IAgCrdnCalcScalarDataElement, IAgCrdnCalcScalarDataElement, IAgCrdnCalcScalar, IAgCrdn]

class IAgCrdnConditionScalarBounds(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Defined by determining if input scalar is within specified bounds; returns +1 if satisfied, -1 if not satisfied and 0 if on boundary.'
    _iid_ = GUID('{6CF360C7-967B-4535-A584-06FE767211E4}')
    _idlflags_ = ['oleautomation']
IAgCrdnConditionScalarBounds._methods_ = [
    COMMETHOD(['propget', helpstring('Get the scalar calculation from the condition.')], HRESULT, 'Scalar',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the scalar calculation from the condition.')], HRESULT, 'Scalar',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Get the operation from the condition that determines how the bounds are considered. The operation can be set to define satisfaction when the scalar is above minimum, below maximum, between minimum and maximum or outside minimum and maximum.')], HRESULT, 'Operation',
              ( ['out', 'retval'], POINTER(AgECrdnConditionThresholdOption), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the operation from the condition that determines how the bounds are considered. The operation can be set to define satisfaction when the scalar is above minimum, below maximum, between minimum and maximum or outside minimum and maximum.')], HRESULT, 'Operation',
              ( ['in'], AgECrdnConditionThresholdOption, 'pRetVal' )),
    COMMETHOD([helpstring('Get the minimum bound value from the condition. Call SetMinimum to apply changes.')], HRESULT, 'GetMinimum',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity)), 'ppRetVal' )),
    COMMETHOD([helpstring('Set the minimum bound value for the condition.')], HRESULT, 'SetMinimum',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity), 'Value' )),
    COMMETHOD([helpstring('Get the maximum bound value from the condition. Call SetMaximum to apply changes.')], HRESULT, 'GetMaximum',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity)), 'ppRetVal' )),
    COMMETHOD([helpstring('Set the maximum bound value for the condition.')], HRESULT, 'SetMaximum',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity), 'Value' )),
    COMMETHOD([helpstring('Set the min/max bounds. Throws an exception if the minimum is greater than maximum.')], HRESULT, 'Set',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity), 'Min' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity), 'Max' )),
]
################################################################
## code template for IAgCrdnConditionScalarBounds implementation
##class IAgCrdnConditionScalarBounds_Impl(object):
##    def _get(self):
##        'Get the scalar calculation from the condition.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the scalar calculation from the condition.'
##    Scalar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the operation from the condition that determines how the bounds are considered. The operation can be set to define satisfaction when the scalar is above minimum, below maximum, between minimum and maximum or outside minimum and maximum.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the operation from the condition that determines how the bounds are considered. The operation can be set to define satisfaction when the scalar is above minimum, below maximum, between minimum and maximum or outside minimum and maximum.'
##    Operation = property(_get, _set, doc = _set.__doc__)
##
##    def GetMinimum(self):
##        'Get the minimum bound value from the condition. Call SetMinimum to apply changes.'
##        #return ppRetVal
##
##    def SetMinimum(self, Value):
##        'Set the minimum bound value for the condition.'
##        #return 
##
##    def GetMaximum(self):
##        'Get the maximum bound value from the condition. Call SetMaximum to apply changes.'
##        #return ppRetVal
##
##    def SetMaximum(self, Value):
##        'Set the maximum bound value for the condition.'
##        #return 
##
##    def Set(self, Min, Max):
##        'Set the min/max bounds. Throws an exception if the minimum is greater than maximum.'
##        #return 
##

class AgCrdnPlaneGroup(CoClass):
    'Represents a VGT Plane component.'
    _reg_clsid_ = GUID('{086DDB29-22A1-48E1-96BD-A6DFCB478FEC}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnPlaneGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnPlaneGroup]

class Library(object):
    'AGI STK VGT 11'
    name = 'AgSTKVgtLib'
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)

IAgCrdnConditionSetGroup._methods_ = [
    COMMETHOD([dispid(29401), helpstring('Removes a specified element.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'EventName' )),
    COMMETHOD([dispid(29402), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(29403), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the group.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(29405), helpstring('Returns a factory object used to create condition set components.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionSetFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns an element by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionSet)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnConditionSetGroup implementation
##class IAgCrdnConditionSetGroup_Impl(object):
##    def Remove(self, EventName):
##        'Removes a specified element.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the group.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a factory object used to create condition set components.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns an element by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

IAgCrdnCentralBodyCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns a central body name at a specified index.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([dispid(11604), helpstring('Adds a central body to the collection of central bodies. True indicates success.')], HRESULT, 'Add',
              ( ['in'], BSTR, 'CentralBodyName' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(11605), helpstring('Removes a central body with the specified name from the collection of the central bodies.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'CentralBodyName' )),
]
################################################################
## code template for IAgCrdnCentralBodyCollection implementation
##class IAgCrdnCentralBodyCollection_Impl(object):
##    @property
##    def Count(self):
##        'Returns a number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Returns a central body name at a specified index.'
##        #return pRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator'
##        #return ppRetVal
##
##    def Add(self, CentralBodyName):
##        'Adds a central body to the collection of central bodies. True indicates success.'
##        #return pRetVal
##
##    def Remove(self, CentralBodyName):
##        'Removes a central body with the specified name from the collection of the central bodies.'
##        #return 
##

class AgCrdnCalcScalarDerivative(CoClass):
    'Derivative of an input scalar calculation.'
    _reg_clsid_ = GUID('{6EF0B3E4-DA82-4C63-9BF8-1976CB7C7638}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnCalcScalarDerivative(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCalcScalarDerivative'
    _iid_ = GUID('{B70B81F2-D40D-4848-A9AA-F2B19A54CE84}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnCalcScalarDerivative(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Derivative of an input scalar calculation.'
    _iid_ = GUID('{0D735261-5F8C-417D-8715-E2A60B095A48}')
    _idlflags_ = ['oleautomation']
AgCrdnCalcScalarDerivative._com_interfaces_ = [_IAgCrdnCalcScalarDerivative, IAgCrdnCalcScalarDerivative, IAgCrdnCalcScalar, IAgCrdn]

_IAgCrdnPointFixedInSystem._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1801), helpstring('Returns a type of the point object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([dispid(1802), helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1803), helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(4601), helpstring('Specify a reference system.'), 'propget'], HRESULT, 'Reference',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4602), helpstring("Specify the point's position. The position is relative with respect to the specified reference system."), 'propget'], HRESULT, 'FixedPoint',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgPosition)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPointFixedInSystem implementation
##class _IAgCrdnPointFixedInSystem_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##
##    @property
##    def Reference(self):
##        'Specify a reference system.'
##        #return ppRetVal
##
##    @property
##    def FixedPoint(self):
##        "Specify the point's position. The position is relative with respect to the specified reference system."
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##


# values for enumeration 'AgECrdnDimensionInheritance'
eCrdnDimensionInheritanceNone = 0
eCrdnDimensionInheritanceFromX = 1
eCrdnDimensionInheritanceFromY = 2
AgECrdnDimensionInheritance = c_int # enum
_IAgCrdnVectorScalarLinearCombination._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(28701), helpstring('Vector A can be any VGT vector.'), 'propget'], HRESULT, 'VectorA',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(28701), helpstring('Vector A can be any VGT vector.'), 'propput'], HRESULT, 'VectorA',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD([dispid(28702), helpstring('Scale factor for vector A.'), 'propget'], HRESULT, 'ScaleFactorA',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(28702), helpstring('Scale factor for vector A.'), 'propput'], HRESULT, 'ScaleFactorA',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(28703), helpstring('Whether to normalize vector A.'), 'propget'], HRESULT, 'NormalizeVectorA',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28703), helpstring('Whether to normalize vector A.'), 'propput'], HRESULT, 'NormalizeVectorA',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28704), helpstring('Whether to use a scale from scalar A.'), 'propget'], HRESULT, 'UseScaleFromScalarA',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28704), helpstring('Whether to use a scale from scalar A.'), 'propput'], HRESULT, 'UseScaleFromScalarA',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28705), helpstring('Whether to use a scale from scalar B.'), 'propget'], HRESULT, 'UseScaleFromScalarB',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28705), helpstring('Whether to use a scale from scalar B.'), 'propput'], HRESULT, 'UseScaleFromScalarB',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28706), helpstring('Scalar scale A. Can be any Scalar calculation.'), 'propget'], HRESULT, 'ScalarA',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(28706), helpstring('Scalar scale A. Can be any Scalar calculation.'), 'propput'], HRESULT, 'ScalarA',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD([dispid(28707), helpstring('Scalar scale B. Can be any Scalar calculation.'), 'propget'], HRESULT, 'ScalarB',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(28707), helpstring('Scalar scale B. Can be any Scalar calculation.'), 'propput'], HRESULT, 'ScalarB',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD([dispid(28708), helpstring('Vector B can be any VGT vector.'), 'propget'], HRESULT, 'VectorB',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(28708), helpstring('Vector B can be any VGT vector.'), 'propput'], HRESULT, 'VectorB',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD([dispid(28709), helpstring('Scale factor for vector B.'), 'propget'], HRESULT, 'ScaleFactorB',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(28709), helpstring('Scale factor for vector B.'), 'propput'], HRESULT, 'ScaleFactorB',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(28710), helpstring('Whether to normalize vector B.'), 'propget'], HRESULT, 'NormalizeVectorB',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28710), helpstring('Whether to normalize vector B.'), 'propput'], HRESULT, 'NormalizeVectorB',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28711), helpstring('Determines whether the output dimension is inherited or explicitly specified using OutputDimension.'), 'propget'], HRESULT, 'OutputDimensionInheritance',
              ( ['out', 'retval'], POINTER(AgECrdnDimensionInheritance), 'pRetVal' )),
    COMMETHOD([dispid(28711), helpstring('Determines whether the output dimension is inherited or explicitly specified using OutputDimension.'), 'propput'], HRESULT, 'OutputDimensionInheritance',
              ( ['in'], AgECrdnDimensionInheritance, 'pRetVal' )),
    COMMETHOD([dispid(28712), helpstring('A dimension to interpret the output vector.'), 'propget'], HRESULT, 'OutputDimension',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(28712), helpstring('A dimension to interpret the output vector.'), 'propput'], HRESULT, 'OutputDimension',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorScalarLinearCombination implementation
##class _IAgCrdnVectorScalarLinearCombination_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'Vector A can be any VGT vector.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Vector A can be any VGT vector.'
##    VectorA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Scale factor for vector A.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Scale factor for vector A.'
##    ScaleFactorA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether to normalize vector A.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to normalize vector A.'
##    NormalizeVectorA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether to use a scale from scalar A.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to use a scale from scalar A.'
##    UseScaleFromScalarA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether to use a scale from scalar B.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to use a scale from scalar B.'
##    UseScaleFromScalarB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Scalar scale A. Can be any Scalar calculation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Scalar scale A. Can be any Scalar calculation.'
##    ScalarA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Scalar scale B. Can be any Scalar calculation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Scalar scale B. Can be any Scalar calculation.'
##    ScalarB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Vector B can be any VGT vector.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Vector B can be any VGT vector.'
##    VectorB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Scale factor for vector B.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Scale factor for vector B.'
##    ScaleFactorB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether to normalize vector B.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to normalize vector B.'
##    NormalizeVectorB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Determines whether the output dimension is inherited or explicitly specified using OutputDimension.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Determines whether the output dimension is inherited or explicitly specified using OutputDimension.'
##    OutputDimensionInheritance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A dimension to interpret the output vector.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A dimension to interpret the output vector.'
##    OutputDimension = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnSystemGroup(CoClass):
    'Access or create VGT systems associated with an object or a central body.'
    _reg_clsid_ = GUID('{5EB5CCE7-33BE-4B73-9D02-7BC4BBFFF1E1}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnSystemGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Access or create VGT systems associated with an object or a central body.'
    _iid_ = GUID('{891B3190-8A13-4C42-915D-E35EBACB085E}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']
AgCrdnSystemGroup._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnSystemGroup]

class _IAgCrdnConverge(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnConverge'
    _iid_ = GUID('{525393F6-AA73-48CC-B2E6-6FE874B8A68C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnConverge._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnConverge implementation
##class _IAgCrdnConverge_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnAxesCommonTasks._methods_ = [
    COMMETHOD([helpstring("Creates non-persistent axes fixed in axes on the surface of a central body with the location specified by the origin point. The quaternion defines the axes's orientation.")], HRESULT, 'CreateTopocentricAxesQuaternion',
              ( ['in'], POINTER(IAgCrdnPoint), 'OriginPoint' ),
              ( ['in'], c_double, 'QX' ),
              ( ['in'], c_double, 'QY' ),
              ( ['in'], c_double, 'QZ' ),
              ( ['in'], c_double, 'QS' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFixed)), 'ppRetVal' )),
    COMMETHOD([helpstring("Creates non-persistent axes fixed in axes on the surface of a central body with the location specified by the origin point. The euler angles define the axes's orientation.")], HRESULT, 'CreateTopocentricAxesEulerAngles',
              ( ['in'], POINTER(IAgCrdnPoint), 'OriginPoint' ),
              ( ['in'], comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.AgEEulerOrientationSequence, 'Sequence' ),
              ( ['in'], VARIANT, 'A' ),
              ( ['in'], VARIANT, 'B' ),
              ( ['in'], VARIANT, 'C' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFixed)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates non-persistent fixed axes based on specified axes.')], HRESULT, 'CreateFixed',
              ( ['in'], POINTER(IAgCrdnAxes), 'ReferenceAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFixed)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes and returns tabulated orientations and angular velocities of axes with respect to reference axes using specified sampling parameters.')], HRESULT, 'Sample',
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'ReferenceAxes' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Intervals' ),
              ( ['in'], c_double, 'MinStep' ),
              ( ['in'], c_double, 'MaxStep' ),
              ( ['in'], VARIANT, 'TargetRate' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesSamplingResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAxesCommonTasks implementation
##class IAgCrdnAxesCommonTasks_Impl(object):
##    def CreateTopocentricAxesQuaternion(self, OriginPoint, QX, QY, QZ, QS):
##        "Creates non-persistent axes fixed in axes on the surface of a central body with the location specified by the origin point. The quaternion defines the axes's orientation."
##        #return ppRetVal
##
##    def CreateTopocentricAxesEulerAngles(self, OriginPoint, Sequence, A, B, C):
##        "Creates non-persistent axes fixed in axes on the surface of a central body with the location specified by the origin point. The euler angles define the axes's orientation."
##        #return ppRetVal
##
##    def CreateFixed(self, ReferenceAxes):
##        'Creates non-persistent fixed axes based on specified axes.'
##        #return ppRetVal
##
##    def Sample(self, Axes, ReferenceAxes, Intervals, MinStep, MaxStep, TargetRate):
##        'Computes and returns tabulated orientations and angular velocities of axes with respect to reference axes using specified sampling parameters.'
##        #return ppRetVal
##

class AgCrdnCalcScalarElapsedTime(CoClass):
    'Time elapsed since the reference time instant. Negative if in the past.'
    _reg_clsid_ = GUID('{1F57EB63-985B-4BA9-ABD5-53AA93CCAF5F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnCalcScalarElapsedTime(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Time elapsed since the reference time instant. Negative if in the past.'
    _iid_ = GUID('{8AC55C36-48B4-40B3-A495-E96FAC2FD111}')
    _idlflags_ = ['oleautomation']
AgCrdnCalcScalarElapsedTime._com_interfaces_ = [_IAgCrdnCalcScalarElapsedTime, IAgCrdnCalcScalarElapsedTime, IAgCrdnCalcScalar, IAgCrdn]

class _IAgCrdnEvaluateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEvaluateResult'
    _iid_ = GUID('{D31F841C-054B-4176-88C4-18DDF8EBC267}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnEvaluateResult._methods_ = [
    COMMETHOD([dispid(25501), helpstring('Indicates whether the result object is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(25502), helpstring('The scalar value.'), 'propget'], HRESULT, 'Value',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnEvaluateResult implementation
##class _IAgCrdnEvaluateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Value(self):
##        'The scalar value.'
##        #return pRetVal
##

class AgCrdnProvider(CoClass):
    'Allows accessing existing Vector Geometry Tool components.'
    _reg_clsid_ = GUID('{852F6698-6A7E-41FB-90D7-BB49EA10B2D5}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnProvider(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnProvider'
    _iid_ = GUID('{C9920C10-01B0-45FE-9329-61EC8D3EFC56}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnProvider._com_interfaces_ = [_IAgCrdnProvider, IAgCrdnProvider]

class AgCrdnCalcScalarFactory(CoClass):
    'The factory creates scalar calculation components.'
    _reg_clsid_ = GUID('{53A7AA00-2CE3-4765-99E9-E1E6BEF48A4B}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnCalcScalarFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCalcScalarFactory'
    _iid_ = GUID('{775DF1E3-76CF-4F16-84F4-342F4E23FA40}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnCalcScalarFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The factory creates scalar calculation components.'
    _iid_ = GUID('{B721CC07-4B96-41A8-ADF5-9F593510556A}')
    _idlflags_ = ['oleautomation']
AgCrdnCalcScalarFactory._com_interfaces_ = [_IAgCrdnCalcScalarFactory, IAgCrdnCalcScalarFactory]

class _IAgCrdnEventArrayExtrema(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventArrayExtrema'
    _iid_ = GUID('{B9FD61A7-D2EB-4F44-ACDC-FF8738A9B8D6}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnEventArrayExtrema._methods_ = [
    COMMETHOD([dispid(18302), helpstring('Return the type of time array.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventArrayType), 'pRetVal' )),
    COMMETHOD([dispid(18301), helpstring('Return computed array of times.')], HRESULT, 'FindTimes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnFindTimesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(18501), helpstring('The extremum type (either minimum or maximum) from the time instant.'), 'propget'], HRESULT, 'ExtremumType',
              ( ['out', 'retval'], POINTER(AgECrdnExtremumConstants), 'pRetVal' )),
    COMMETHOD([dispid(18501), helpstring('The extremum type (either minimum or maximum) from the time instant.'), 'propput'], HRESULT, 'ExtremumType',
              ( ['in'], AgECrdnExtremumConstants, 'pRetVal' )),
    COMMETHOD([dispid(18517), helpstring('Indicates whether to perform local or global search. The default is false.'), 'propget'], HRESULT, 'IsGlobal',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(18517), helpstring('Indicates whether to perform local or global search. The default is false.'), 'propput'], HRESULT, 'IsGlobal',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(18516), helpstring('The scalar calculation.'), 'propget'], HRESULT, 'Calculation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(18516), helpstring('The scalar calculation.'), 'propput'], HRESULT, 'Calculation',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD([dispid(18511), helpstring('A custom interval list or a single interval. It is by default set to overall availability of host object. This determines time limits within which global minimum or maximum is sought.'), 'propget'], HRESULT, 'CustomTimeLimits',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(18511), helpstring('A custom interval list or a single interval. It is by default set to overall availability of host object. This determines time limits within which global minimum or maximum is sought.'), 'propput'], HRESULT, 'CustomTimeLimits',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD([dispid(18509), helpstring('Indicate whether to use specified custom interval list (see CustomTimeLimits).'), 'propget'], HRESULT, 'UseCustomTimeLimits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(18509), helpstring('Indicate whether to use specified custom interval list (see CustomTimeLimits).'), 'propput'], HRESULT, 'UseCustomTimeLimits',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(18510), helpstring('Specify whether computed time of extrema is saved/loaded, otherwise it is recomputed on load if necessary.'), 'propget'], HRESULT, 'SaveDataOption',
              ( ['out', 'retval'], POINTER(AgECrdnSaveDataOption), 'pRetVal' )),
    COMMETHOD([dispid(18510), helpstring('Specify whether computed time of extrema is saved/loaded, otherwise it is recomputed on load if necessary.'), 'propput'], HRESULT, 'SaveDataOption',
              ( ['in'], AgECrdnSaveDataOption, 'pRetVal' )),
    COMMETHOD([dispid(18512), helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propget'], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD([dispid(18512), helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propput'], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD([dispid(18515), helpstring('The Convergence definition, which uses time tolerance to determine when time of extremum is found.'), 'propget'], HRESULT, 'Convergence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConverge)), 'ppRetVal' )),
    COMMETHOD([dispid(18515), helpstring('The Convergence definition, which uses time tolerance to determine when time of extremum is found.'), 'propput'], HRESULT, 'Convergence',
              ( ['in'], POINTER(IAgCrdnConverge), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventArrayExtrema implementation
##class _IAgCrdnEventArrayExtrema_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time array.'
##        #return pRetVal
##
##    def FindTimes(self):
##        'Return computed array of times.'
##        #return ppRetVal
##
##    def _get(self):
##        'The extremum type (either minimum or maximum) from the time instant.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The extremum type (either minimum or maximum) from the time instant.'
##    ExtremumType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Indicates whether to perform local or global search. The default is false.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Indicates whether to perform local or global search. The default is false.'
##    IsGlobal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The scalar calculation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The scalar calculation.'
##    Calculation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A custom interval list or a single interval. It is by default set to overall availability of host object. This determines time limits within which global minimum or maximum is sought.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A custom interval list or a single interval. It is by default set to overall availability of host object. This determines time limits within which global minimum or maximum is sought.'
##    CustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Indicate whether to use specified custom interval list (see CustomTimeLimits).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Indicate whether to use specified custom interval list (see CustomTimeLimits).'
##    UseCustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether computed time of extrema is saved/loaded, otherwise it is recomputed on load if necessary.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether computed time of extrema is saved/loaded, otherwise it is recomputed on load if necessary.'
##    SaveDataOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##    Convergence = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnPointSamplingIntervalCollection._methods_ = [
    COMMETHOD(['propget', helpstring('Number of elements in the collection.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Accesses an element at the specified position.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointSamplingInterval)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a COM enumerator.')], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPointSamplingIntervalCollection implementation
##class IAgCrdnPointSamplingIntervalCollection_Impl(object):
##    @property
##    def Count(self):
##        'Number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Accesses an element at the specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

class _IAgCrdnWellKnownEarthSystems(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnWellKnownEarthSystems'
    _iid_ = GUID('{DBDD94C5-07FC-474D-AA9D-353C820F94C2}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnWellKnownEarthSystems._methods_ = [
    COMMETHOD([dispid(9701), helpstring("Earth's Fixed coordinate system."), 'propget'], HRESULT, 'Fixed',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(9702), helpstring("Earth's ICRF."), 'propget'], HRESULT, 'ICRF',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(9703), helpstring("Earth's Inertial coordinate system (as defined in STK)."), 'propget'], HRESULT, 'Inertial',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnWellKnownEarthSystems implementation
##class _IAgCrdnWellKnownEarthSystems_Impl(object):
##    @property
##    def Fixed(self):
##        "Earth's Fixed coordinate system."
##        #return ppRetVal
##
##    @property
##    def ICRF(self):
##        "Earth's ICRF."
##        #return ppRetVal
##
##    @property
##    def Inertial(self):
##        "Earth's Inertial coordinate system (as defined in STK)."
##        #return ppRetVal
##

class IAgCrdnCalcScalarFunction2Var(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Defined by performing a function(x,y) on two scalar arguments.'
    _iid_ = GUID('{5C7CC61B-0CE3-4E53-9EE8-D3E024A5FADF}')
    _idlflags_ = ['oleautomation']
IAgCrdnCalcScalarFunction2Var._methods_ = [
    COMMETHOD(['propget', helpstring('The scalar argument X.')], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The scalar argument X.')], HRESULT, 'X',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The unit used to interpret numerical values of scalar argument X.')], HRESULT, 'UnitX',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The unit used to interpret numerical values of scalar argument X.')], HRESULT, 'UnitX',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The constant coefficient A.')], HRESULT, 'A',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The constant coefficient A.')], HRESULT, 'A',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The scalar argument Y.')], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The scalar argument Y.')], HRESULT, 'Y',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The unit used to interpret numerical values of scalar argument Y.')], HRESULT, 'UnitY',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The unit used to interpret numerical values of scalar argument Y.')], HRESULT, 'UnitY',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The constant coefficient B.')], HRESULT, 'B',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The constant coefficient B.')], HRESULT, 'B',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The constant coefficient C.')], HRESULT, 'C',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The constant coefficient C.')], HRESULT, 'C',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specifies whether the output dimension is inherited or explicitly specified using OutputDimension.')], HRESULT, 'OutputDimensionInheritance',
              ( ['out', 'retval'], POINTER(AgECrdnDimensionInheritance), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specifies whether the output dimension is inherited or explicitly specified using OutputDimension.')], HRESULT, 'OutputDimensionInheritance',
              ( ['in'], AgECrdnDimensionInheritance, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The output dimension. Use any of STK supported dimensions. This value will be used if OutputDimensionInheritance is false.')], HRESULT, 'OutputDimension',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The output dimension. Use any of STK supported dimensions. This value will be used if OutputDimensionInheritance is false.')], HRESULT, 'OutputDimension',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The available functions. A function(x,y) uses some combination of two scalar arguments x and y as well as one to three constant coefficients a, b, c.')], HRESULT, 'AvailableFunctions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The selected function.')], HRESULT, 'SelectedFunction',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The selected function.')], HRESULT, 'SelectedFunction',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The unit for the selected dimension. The unit is not used for internal computations or reporting/graphing but is needed to unambiguously interpret units of associated coefficients.')], HRESULT, 'OutputUnit',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The unit for the selected dimension. The unit is not used for internal computations or reporting/graphing but is needed to unambiguously interpret units of associated coefficients.')], HRESULT, 'OutputUnit',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnCalcScalarFunction2Var implementation
##class IAgCrdnCalcScalarFunction2Var_Impl(object):
##    def _get(self):
##        'The scalar argument X.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The scalar argument X.'
##    X = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The unit used to interpret numerical values of scalar argument X.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The unit used to interpret numerical values of scalar argument X.'
##    UnitX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The constant coefficient A.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The constant coefficient A.'
##    A = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The scalar argument Y.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The scalar argument Y.'
##    Y = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The unit used to interpret numerical values of scalar argument Y.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The unit used to interpret numerical values of scalar argument Y.'
##    UnitY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The constant coefficient B.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The constant coefficient B.'
##    B = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The constant coefficient C.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The constant coefficient C.'
##    C = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specifies whether the output dimension is inherited or explicitly specified using OutputDimension.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specifies whether the output dimension is inherited or explicitly specified using OutputDimension.'
##    OutputDimensionInheritance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The output dimension. Use any of STK supported dimensions. This value will be used if OutputDimensionInheritance is false.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The output dimension. Use any of STK supported dimensions. This value will be used if OutputDimensionInheritance is false.'
##    OutputDimension = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def AvailableFunctions(self):
##        'The available functions. A function(x,y) uses some combination of two scalar arguments x and y as well as one to three constant coefficients a, b, c.'
##        #return ppRetVal
##
##    def _get(self):
##        'The selected function.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The selected function.'
##    SelectedFunction = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The unit for the selected dimension. The unit is not used for internal computations or reporting/graphing but is needed to unambiguously interpret units of associated coefficients.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The unit for the selected dimension. The unit is not used for internal computations or reporting/graphing but is needed to unambiguously interpret units of associated coefficients.'
##    OutputUnit = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnCalcScalarFile(CoClass):
    'Tabulated scalar calculation data loaded from specified file - a file with .csc extension.'
    _reg_clsid_ = GUID('{C05383F4-B639-4436-B410-1221C15C1300}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnCalcScalarFile(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCalcScalarFile'
    _iid_ = GUID('{754EBFD4-0357-4D10-B7BB-6C94C82D35B1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnCalcScalarFile(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Tabulated scalar calculation data loaded from specified file - a file with .csc extension.'
    _iid_ = GUID('{BD2F45BB-8758-4673-93B1-AFF7BB3C0D28}')
    _idlflags_ = ['oleautomation']
AgCrdnCalcScalarFile._com_interfaces_ = [_IAgCrdnCalcScalarFile, IAgCrdnCalcScalarFile, IAgCrdnCalcScalar, IAgCrdn]

class AgCrdnRoot(CoClass):
    'Represents a VGT root.'
    _reg_clsid_ = GUID('{EFB22156-DE1A-4385-BCDD-1A8E9898CA02}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnRoot(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnRoot'
    _iid_ = GUID('{787544BB-090F-4BAB-BE34-117C3CF6A561}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnRoot._com_interfaces_ = [_IAgCrdnRoot, IAgCrdnRoot]

class _IAgCrdnParameterSet(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnParameterSet'
    _iid_ = GUID('{355CF23F-56E2-4006-B1DD-6F582EB38794}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnParameterSet._methods_ = [
    COMMETHOD([dispid(21203), helpstring('Get the type of parameter set.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnParameterSetType), 'pRetVal' )),
    COMMETHOD([dispid(21201), helpstring('Get the labels identifying hierarchy of representations within parameter set.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21206), helpstring('Get the names identifying types of dimensions of individual scalars within parameter set.'), 'propget'], HRESULT, 'Dimensions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21202), helpstring('Get the names identifying individual scalars within parameter set.'), 'propget'], HRESULT, 'ScalarNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21204), helpstring('Return results of computing individual scalars within parameter set at the specified time.')], HRESULT, 'Calculate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21205), helpstring('Return results of computing individual scalars and their time derivatives within parameter set at the specified time.')], HRESULT, 'CalculateWithDerivative',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnParameterSet implementation
##class _IAgCrdnParameterSet_Impl(object):
##    @property
##    def Type(self):
##        'Get the type of parameter set.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the labels identifying hierarchy of representations within parameter set.'
##        #return ppRetVal
##
##    @property
##    def Dimensions(self):
##        'Get the names identifying types of dimensions of individual scalars within parameter set.'
##        #return ppRetVal
##
##    @property
##    def ScalarNames(self):
##        'Get the names identifying individual scalars within parameter set.'
##        #return ppRetVal
##
##    def Calculate(self, Epoch):
##        'Return results of computing individual scalars within parameter set at the specified time.'
##        #return ppRetVal
##
##    def CalculateWithDerivative(self, Epoch):
##        'Return results of computing individual scalars and their time derivatives within parameter set at the specified time.'
##        #return ppRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnCalcScalarFixedAtTimeInstant(CoClass):
    'Constant scalar created by evaluating the input scalar calculation at the specified reference time instant. Undefined if original scalar is not available at specified time or if reference time instant is undefined.'
    _reg_clsid_ = GUID('{B05C9982-01F7-466C-A6BB-8BEB6320AC30}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnCalcScalarFixedAtTimeInstant(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCalcScalarFixedAtTimeInstant'
    _iid_ = GUID('{4E26B9D4-5F7F-4BE0-8475-2B95E299A62A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnCalcScalarFixedAtTimeInstant(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Constant scalar created by evaluating the input scalar calculation at the specified reference time instant. Undefined if original scalar is not available at specified time or if reference time instant is undefined.'
    _iid_ = GUID('{C03D8807-25E2-4999-98C6-079B6029D217}')
    _idlflags_ = ['oleautomation']
AgCrdnCalcScalarFixedAtTimeInstant._com_interfaces_ = [_IAgCrdnCalcScalarFixedAtTimeInstant, IAgCrdnCalcScalarFixedAtTimeInstant, IAgCrdnCalcScalar, IAgCrdn]

class _IAgCrdnPlaneRefTo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPlaneRefTo'
    _iid_ = GUID('{12A213E0-09B3-4DC5-A9A7-970E3AEE5266}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnPlaneRefTo._methods_ = [
    COMMETHOD([dispid(701), helpstring('Returns a path to the referenced VGT component.'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(1301), helpstring('Sets a new plane using a specified path.')], HRESULT, 'SetPath',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD([dispid(1302), helpstring('Sets a new plane.')], HRESULT, 'SetPlane',
              ( ['in'], POINTER(IAgCrdnPlane), 'Plane' )),
    COMMETHOD([dispid(1303), helpstring('Returns the actual plane object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.')], HRESULT, 'GetPlane',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlane)), 'ppRetVal' )),
    COMMETHOD([dispid(1304), helpstring('Tests whether the input component and the target component form a cyclic dependency.')], HRESULT, 'HasCyclicDependency',
              ( ['in'], POINTER(IAgCrdnPlane), 'Plane' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnPlaneRefTo implementation
##class _IAgCrdnPlaneRefTo_Impl(object):
##    @property
##    def Path(self):
##        'Returns a path to the referenced VGT component.'
##        #return pRetVal
##
##    def SetPath(self, Path):
##        'Sets a new plane using a specified path.'
##        #return 
##
##    def SetPlane(self, Plane):
##        'Sets a new plane.'
##        #return 
##
##    def GetPlane(self):
##        'Returns the actual plane object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.'
##        #return ppRetVal
##
##    def HasCyclicDependency(self, Plane):
##        'Tests whether the input component and the target component form a cyclic dependency.'
##        #return pRetVal
##

class AgCrdnWellKnownEarthSystems(CoClass):
    "Well-known Earth's coordinate systems."
    _reg_clsid_ = GUID('{3B38D54C-B092-46B0-AA26-F81A15A83A45}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnWellKnownEarthSystems._com_interfaces_ = [_IAgCrdnWellKnownEarthSystems, IAgCrdnWellKnownEarthSystems]

class AgCrdnCalcScalarFunction(CoClass):
    'Defined by performing the specified function on the input scalar or time instant.'
    _reg_clsid_ = GUID('{1DA72855-C7F8-4A25-BDB1-1E4C74782188}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnCalcScalarFunction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Defined by performing the specified function on the input scalar or time instant.'
    _iid_ = GUID('{EC1ACE74-8EFA-4CB3-9FAD-0FC1C2A7C6FA}')
    _idlflags_ = ['oleautomation']
AgCrdnCalcScalarFunction._com_interfaces_ = [_IAgCrdnCalcScalarFunction, IAgCrdnCalcScalarFunction, IAgCrdnCalcScalar, IAgCrdn]

class AgCrdnWellKnownEarthAxes(CoClass):
    "Well-known Earth's axes."
    _reg_clsid_ = GUID('{CCC40B7F-8910-4F9E-8A23-ACF97D91BA20}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnWellKnownEarthAxes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnWellKnownEarthAxes'
    _iid_ = GUID('{635003C5-DB7B-48B9-A615-BC23F41BE7DD}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnWellKnownEarthAxes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Well-known Earth's axes."
    _iid_ = GUID('{E7969854-A78E-4E79-8E22-69B288A25901}')
    _idlflags_ = ['oleautomation']
AgCrdnWellKnownEarthAxes._com_interfaces_ = [_IAgCrdnWellKnownEarthAxes, IAgCrdnWellKnownEarthAxes]

_IAgCrdnEventIntervalFixedDuration._methods_ = [
    COMMETHOD([dispid(13411), helpstring('Return the type of interval.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalType), 'pRetVal' )),
    COMMETHOD([dispid(13404), helpstring('The start description.'), 'propget'], HRESULT, 'LabelStartDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13405), helpstring('The stop description.'), 'propget'], HRESULT, 'LabelStopDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13406), helpstring('A label associated with the interval start.'), 'propget'], HRESULT, 'LabelStart',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13407), helpstring('A label associated with the interval stop.'), 'propget'], HRESULT, 'LabelStop',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13408), helpstring('Return computed interval if it exists.')], HRESULT, 'FindInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13409), helpstring('Determine if specified time falls within computed interval if it exists.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(14604), helpstring('The reference time instant.'), 'propget'], HRESULT, 'ReferenceTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(14604), helpstring('The reference time instant.'), 'propput'], HRESULT, 'ReferenceTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD([dispid(14605), helpstring('The start time offset value.'), 'propget'], HRESULT, 'StartOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(14605), helpstring('The start time offset value.'), 'propput'], HRESULT, 'StartOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(14606), helpstring('The stop time offset value.'), 'propget'], HRESULT, 'StopOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(14606), helpstring('The stop time offset value.'), 'propput'], HRESULT, 'StopOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalFixedDuration implementation
##class _IAgCrdnEventIntervalFixedDuration_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval.'
##        #return pRetVal
##
##    @property
##    def LabelStartDescription(self):
##        'The start description.'
##        #return pRetVal
##
##    @property
##    def LabelStopDescription(self):
##        'The stop description.'
##        #return pRetVal
##
##    @property
##    def LabelStart(self):
##        'A label associated with the interval start.'
##        #return pRetVal
##
##    @property
##    def LabelStop(self):
##        'A label associated with the interval stop.'
##        #return pRetVal
##
##    def FindInterval(self):
##        'Return computed interval if it exists.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval if it exists.'
##        #return pRetVal
##
##    def _get(self):
##        'The reference time instant.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference time instant.'
##    ReferenceTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The start time offset value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The start time offset value.'
##    StartOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The stop time offset value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The stop time offset value.'
##    StopOffset = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnCentralBody(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCentralBody'
    _iid_ = GUID('{536EA481-2B29-4C4B-A51B-7BDA6901664F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnCentralBody._methods_ = [
    COMMETHOD([dispid(11401), helpstring('A name of the central body.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnCentralBody implementation
##class _IAgCrdnCentralBody_Impl(object):
##    @property
##    def Name(self):
##        'A name of the central body.'
##        #return pRetVal
##

_IAgCrdnVolumeGridConstrained._methods_ = [
    COMMETHOD([dispid(32003), helpstring('Get the reference system in which spherical parameters are computed.'), 'propget'], HRESULT, 'ReferenceGrid',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD([dispid(32003), helpstring('Get the reference system in which spherical parameters are computed.'), 'propput'], HRESULT, 'ReferenceGrid',
              ( ['in'], POINTER(IAgCrdnVolumeGrid), 'ppRetVal' )),
    COMMETHOD([dispid(32002), helpstring('Get the volume constraint on the grid.'), 'propget'], HRESULT, 'Constraint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([dispid(32002), helpstring('Get the volume constraint on the grid.'), 'propput'], HRESULT, 'Constraint',
              ( ['in'], POINTER(IAgCrdnVolume), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVolumeGridConstrained implementation
##class _IAgCrdnVolumeGridConstrained_Impl(object):
##    def _get(self):
##        'Get the reference system in which spherical parameters are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the reference system in which spherical parameters are computed.'
##    ReferenceGrid = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the volume constraint on the grid.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the volume constraint on the grid.'
##    Constraint = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnCalcScalarFunction2Var(CoClass):
    'Defined by performing a function(x,y) on two scalar arguments.'
    _reg_clsid_ = GUID('{2EE19A08-5C22-4077-B7EB-F66DAD168A9A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnCalcScalarFunction2Var(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCalcScalarFunction2Var'
    _iid_ = GUID('{914D41A1-343E-4F5A-836F-74F1CCD97E0A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnCalcScalarFunction2Var._com_interfaces_ = [_IAgCrdnCalcScalarFunction2Var, IAgCrdnCalcScalarFunction2Var, IAgCrdnCalcScalar, IAgCrdn]

class AgCrdnWellKnownSunSystems(CoClass):
    "The Sun's well-known coordinate reference systems."
    _reg_clsid_ = GUID('{66E2C27D-4975-484E-9612-62470DE8232F}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnWellKnownSunSystems._com_interfaces_ = [_IAgCrdnWellKnownSunSystems, IAgCrdnWellKnownSunSystems]

IAgCrdnInterval._methods_ = [
    COMMETHOD(['propget', helpstring("The interval's start time.")], HRESULT, 'Start',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("The interval's stop time.")], HRESULT, 'Stop',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnInterval implementation
##class IAgCrdnInterval_Impl(object):
##    @property
##    def Start(self):
##        "The interval's start time."
##        #return pRetVal
##
##    @property
##    def Stop(self):
##        "The interval's stop time."
##        #return pRetVal
##

class IAgCrdnConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The factory creates condition components.'
    _iid_ = GUID('{3D6D9A5A-2086-4FE6-8942-A1FE9724C660}')
    _idlflags_ = ['oleautomation']
IAgCrdnConditionFactory._methods_ = [
    COMMETHOD([helpstring('Creates and registers a condition using specified name, description and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnConditionType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a condition placing bounds on specified scalar.')], HRESULT, 'CreateConditionScalarBounds',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnConditionType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Creates multiple conditions on specified scalar.')], HRESULT, 'CreateConditionCombined',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnConditionFactory implementation
##class IAgCrdnConditionFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Creates and registers a condition using specified name, description and type.'
##        #return ppRetVal
##
##    def CreateConditionScalarBounds(self, Name, Description):
##        'Creates a condition placing bounds on specified scalar.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##
##    def CreateConditionCombined(self, Name, Description):
##        'Creates multiple conditions on specified scalar.'
##        #return ppRetVal
##

class IAgCrdnDerivative(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents a base class for derivative definitions.'
    _iid_ = GUID('{8C5F72D2-855F-4EB2-B3BD-0FCC6C957ABB}')
    _idlflags_ = ['oleautomation']
IAgCrdnDerivative._methods_ = [
]
################################################################
## code template for IAgCrdnDerivative implementation
##class IAgCrdnDerivative_Impl(object):

class _IAgCrdnParameterSetAttitude(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnParameterSetAttitude'
    _iid_ = GUID('{0FFD0699-8757-4575-B2F8-5DFA7903BD48}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnParameterSetAttitude._methods_ = [
    COMMETHOD([dispid(21203), helpstring('Get the type of parameter set.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnParameterSetType), 'pRetVal' )),
    COMMETHOD([dispid(21201), helpstring('Get the labels identifying hierarchy of representations within parameter set.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21206), helpstring('Get the names identifying types of dimensions of individual scalars within parameter set.'), 'propget'], HRESULT, 'Dimensions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21202), helpstring('Get the names identifying individual scalars within parameter set.'), 'propget'], HRESULT, 'ScalarNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21204), helpstring('Return results of computing individual scalars within parameter set at the specified time.')], HRESULT, 'Calculate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21205), helpstring('Return results of computing individual scalars and their time derivatives within parameter set at the specified time.')], HRESULT, 'CalculateWithDerivative',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21301), helpstring('Get the axes for which attitude representations are computed.'), 'propget'], HRESULT, 'Axes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(21301), helpstring('Get the axes for which attitude representations are computed.'), 'propput'], HRESULT, 'Axes',
              ( ['in'], POINTER(IAgCrdnAxes), 'ppRetVal' )),
    COMMETHOD([dispid(21302), helpstring('Get the reference axes relative to which attitude representations are computed.'), 'propget'], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(21302), helpstring('Get the reference axes relative to which attitude representations are computed.'), 'propput'], HRESULT, 'ReferenceAxes',
              ( ['in'], POINTER(IAgCrdnAxes), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnParameterSetAttitude implementation
##class _IAgCrdnParameterSetAttitude_Impl(object):
##    @property
##    def Type(self):
##        'Get the type of parameter set.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the labels identifying hierarchy of representations within parameter set.'
##        #return ppRetVal
##
##    @property
##    def Dimensions(self):
##        'Get the names identifying types of dimensions of individual scalars within parameter set.'
##        #return ppRetVal
##
##    @property
##    def ScalarNames(self):
##        'Get the names identifying individual scalars within parameter set.'
##        #return ppRetVal
##
##    def Calculate(self, Epoch):
##        'Return results of computing individual scalars within parameter set at the specified time.'
##        #return ppRetVal
##
##    def CalculateWithDerivative(self, Epoch):
##        'Return results of computing individual scalars and their time derivatives within parameter set at the specified time.'
##        #return ppRetVal
##
##    def _get(self):
##        'Get the axes for which attitude representations are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the axes for which attitude representations are computed.'
##    Axes = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the reference axes relative to which attitude representations are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the reference axes relative to which attitude representations are computed.'
##    ReferenceAxes = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnPointSamplingInterval._methods_ = [
    COMMETHOD(['propget', helpstring('A time array associated with the interval.')], HRESULT, 'Times',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("An array of 3-tuples each tuple representing the point's cartesian position (x,y,z).")], HRESULT, 'Positions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('An array of velocities.')], HRESULT, 'Velocities',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The start time of the interval.')], HRESULT, 'Start',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The stop time of the interval.')], HRESULT, 'Stop',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnPointSamplingInterval implementation
##class IAgCrdnPointSamplingInterval_Impl(object):
##    @property
##    def Times(self):
##        'A time array associated with the interval.'
##        #return ppRetVal
##
##    @property
##    def Positions(self):
##        "An array of 3-tuples each tuple representing the point's cartesian position (x,y,z)."
##        #return ppRetVal
##
##    @property
##    def Velocities(self):
##        'An array of velocities.'
##        #return ppRetVal
##
##    @property
##    def Start(self):
##        'The start time of the interval.'
##        #return pRetVal
##
##    @property
##    def Stop(self):
##        'The stop time of the interval.'
##        #return pRetVal
##

class AgCrdnCalcScalarIntegral(CoClass):
    'Integral of input scalar computed with respect to time using one of the specified numerical methods and using one of the specified accumulation types.'
    _reg_clsid_ = GUID('{F2E81A2A-C833-42CE-AABE-070CC15998E5}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnCalcScalarIntegral(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCalcScalarIntegral'
    _iid_ = GUID('{58F240CA-FCBE-435D-8337-CB6743B48979}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnCalcScalarIntegral._com_interfaces_ = [_IAgCrdnCalcScalarIntegral, IAgCrdnCalcScalarIntegral, IAgCrdnCalcScalar, IAgCrdn]

class AgCrdnWellKnownSunAxes(CoClass):
    "Well-known Sun's axes."
    _reg_clsid_ = GUID('{2E6743E8-CF68-4E72-A7C4-40FFEE658BC3}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnWellKnownSunAxes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Well-known Sun's axes."
    _iid_ = GUID('{F2B371DA-53AC-4C40-BC26-CE65B477255E}')
    _idlflags_ = ['oleautomation']
AgCrdnWellKnownSunAxes._com_interfaces_ = [_IAgCrdnWellKnownSunAxes, IAgCrdnWellKnownSunAxes]


# values for enumeration 'AgECrdnVolumeResultVectorRequest'
eCrdnVolumeResultVectorRequestPos = 1
eCrdnVolumeResultVectorRequestNativePos = 2
eCrdnVolumeResultVectorRequestMetric = 16
eCrdnVolumeResultVectorRequestSatisfaction = 32
eCrdnVolumeResultVectorRequestGradient = 256
AgECrdnVolumeResultVectorRequest = c_int # enum
_IAgCrdnVectorReflection._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(8101), helpstring('The reflecting vector.'), 'propget'], HRESULT, 'IncomingVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(8102), helpstring('When set to false, resets the direction of the Incident Vector to default.'), 'propget'], HRESULT, 'UseOppositeOfSelectedVector',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(8102), helpstring('When set to false, resets the direction of the Incident Vector to default.'), 'propput'], HRESULT, 'UseOppositeOfSelectedVector',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(8103), helpstring('The vector defines the reflection surface.'), 'propget'], HRESULT, 'NormalVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(8104), helpstring('Controls whether to reflect the indicent vector on both sides of the plane.'), 'propget'], HRESULT, 'AllowReflectionsOnBackside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(8104), helpstring('Controls whether to reflect the indicent vector on both sides of the plane.'), 'propput'], HRESULT, 'AllowReflectionsOnBackside',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(8105), helpstring("The vector's scale factor."), 'propget'], HRESULT, 'ScaleFactor',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(8105), helpstring("The vector's scale factor."), 'propput'], HRESULT, 'ScaleFactor',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorReflection implementation
##class _IAgCrdnVectorReflection_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def IncomingVector(self):
##        'The reflecting vector.'
##        #return ppRetVal
##
##    def _get(self):
##        'When set to false, resets the direction of the Incident Vector to default.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'When set to false, resets the direction of the Incident Vector to default.'
##    UseOppositeOfSelectedVector = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def NormalVector(self):
##        'The vector defines the reflection surface.'
##        #return ppRetVal
##
##    def _get(self):
##        'Controls whether to reflect the indicent vector on both sides of the plane.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Controls whether to reflect the indicent vector on both sides of the plane.'
##    AllowReflectionsOnBackside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "The vector's scale factor."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "The vector's scale factor."
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnFirstIntervalsFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnFirstIntervalsFilter'
    _iid_ = GUID('{2FBB86EC-8414-415F-B059-6C6D7F7EBFCC}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnFirstIntervalsFilter._methods_ = [
    COMMETHOD([dispid(22901), helpstring('Returns a type of the filter.'), 'propget'], HRESULT, 'FilterType',
              ( ['out', 'retval'], POINTER(AgECrdnPruneFilter), 'pRetVal' )),
    COMMETHOD([dispid(23001), helpstring('Maximum number of intervals.'), 'propget'], HRESULT, 'MaximumNumberOfIntervals',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(23001), helpstring('Maximum number of intervals.'), 'propput'], HRESULT, 'MaximumNumberOfIntervals',
              ( ['in'], c_int, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnFirstIntervalsFilter implementation
##class _IAgCrdnFirstIntervalsFilter_Impl(object):
##    @property
##    def FilterType(self):
##        'Returns a type of the filter.'
##        #return pRetVal
##
##    def _get(self):
##        'Maximum number of intervals.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Maximum number of intervals.'
##    MaximumNumberOfIntervals = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnDerivativeBasic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Derivative definition determines how numerical differencing is used to compute derivatives.'
    _iid_ = GUID('{79DEB489-AB82-40A5-8DEF-66B2CF433AC5}')
    _idlflags_ = ['oleautomation']
IAgCrdnDerivativeBasic._methods_ = [
    COMMETHOD(['propget', helpstring('Get the time step used for numerical evaluation of derivatives using central differencing.')], HRESULT, 'TimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the time step used for numerical evaluation of derivatives using central differencing.')], HRESULT, 'TimeStep',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnDerivativeBasic implementation
##class IAgCrdnDerivativeBasic_Impl(object):
##    def _get(self):
##        'Get the time step used for numerical evaluation of derivatives using central differencing.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the time step used for numerical evaluation of derivatives using central differencing.'
##    TimeStep = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnConditionSetScalarThresholds(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Condition set based on single scalar calculation compared to set of threshold values.'
    _iid_ = GUID('{45A85086-3CBE-4292-BDDE-297920DA12A5}')
    _idlflags_ = ['oleautomation']
IAgCrdnConditionSetScalarThresholds._methods_ = [
    COMMETHOD(['propget', helpstring('The input scalar calculation.')], HRESULT, 'Scalar',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The input scalar calculation.')], HRESULT, 'Scalar',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The input threshold values, flags indicating whether to include conditions above the highest and below the lowest threhsolds, and corresponding labels.')], HRESULT, 'Thresholds',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The input threshold values, flags indicating whether to include conditions above the highest and below the lowest threhsolds, and corresponding labels.')], HRESULT, 'ThresholdLabels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The threshold indicates whether to include conditions above the highest threhsold.')], HRESULT, 'IncludeAboveHighestThreshold',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The threshold indicates whether to include conditions above the highest threhsold.')], HRESULT, 'IncludeAboveHighestThreshold',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The threshold indicates whether to include conditions below the lowest threhsolds.')], HRESULT, 'IncludeBelowLowestThreshold',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The threshold indicates whether to include conditions below the lowest threhsolds.')], HRESULT, 'IncludeBelowLowestThreshold',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([helpstring('Set thresholds and threshold labels.')], HRESULT, 'SetThresholdsAndLabels',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Thresholds' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'ThresholdLabels' )),
]
################################################################
## code template for IAgCrdnConditionSetScalarThresholds implementation
##class IAgCrdnConditionSetScalarThresholds_Impl(object):
##    def _get(self):
##        'The input scalar calculation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The input scalar calculation.'
##    Scalar = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Thresholds(self):
##        'The input threshold values, flags indicating whether to include conditions above the highest and below the lowest threhsolds, and corresponding labels.'
##        #return ppRetVal
##
##    @property
##    def ThresholdLabels(self):
##        'The input threshold values, flags indicating whether to include conditions above the highest and below the lowest threhsolds, and corresponding labels.'
##        #return ppRetVal
##
##    def _get(self):
##        'The threshold indicates whether to include conditions above the highest threhsold.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The threshold indicates whether to include conditions above the highest threhsold.'
##    IncludeAboveHighestThreshold = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The threshold indicates whether to include conditions below the lowest threhsolds.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The threshold indicates whether to include conditions below the lowest threhsolds.'
##    IncludeBelowLowestThreshold = property(_get, _set, doc = _set.__doc__)
##
##    def SetThresholdsAndLabels(self, Thresholds, ThresholdLabels):
##        'Set thresholds and threshold labels.'
##        #return 
##

class _IAgCrdnConvergeBasic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnConvergeBasic'
    _iid_ = GUID('{DA99CC65-F15D-46B8-8431-D9BD4EEC2855}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnConvergeBasic._methods_ = [
    COMMETHOD([dispid(25801), helpstring('Get the convergence sense which determines whether the converged value should be limited to just within or just outside of condition boundaries.'), 'propget'], HRESULT, 'Sense',
              ( ['out', 'retval'], POINTER(AgECrdnThreshConvergeSense), 'pRetVal' )),
    COMMETHOD([dispid(25801), helpstring('Get the convergence sense which determines whether the converged value should be limited to just within or just outside of condition boundaries.'), 'propput'], HRESULT, 'Sense',
              ( ['in'], AgECrdnThreshConvergeSense, 'pRetVal' )),
    COMMETHOD([dispid(25802), helpstring('Get the time tolerance which determines the time accuracy of the converged value.'), 'propget'], HRESULT, 'TimeTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(25802), helpstring('Get the time tolerance which determines the time accuracy of the converged value.'), 'propput'], HRESULT, 'TimeTolerance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(25803), helpstring('Get the absolute tolerance which determines the distance between the value and the boundaries within which the value is considered converged.'), 'propget'], HRESULT, 'AbsoluteTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(25803), helpstring('Get the absolute tolerance which determines the distance between the value and the boundaries within which the value is considered converged.'), 'propput'], HRESULT, 'AbsoluteTolerance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(25804), helpstring('Get the relative tolerance which determines the relative distance between the value and the boundaries within which the value is considered converged.'), 'propget'], HRESULT, 'RelativeTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(25804), helpstring('Get the relative tolerance which determines the relative distance between the value and the boundaries within which the value is considered converged.'), 'propput'], HRESULT, 'RelativeTolerance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnConvergeBasic implementation
##class _IAgCrdnConvergeBasic_Impl(object):
##    def _get(self):
##        'Get the convergence sense which determines whether the converged value should be limited to just within or just outside of condition boundaries.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the convergence sense which determines whether the converged value should be limited to just within or just outside of condition boundaries.'
##    Sense = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the time tolerance which determines the time accuracy of the converged value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the time tolerance which determines the time accuracy of the converged value.'
##    TimeTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the absolute tolerance which determines the distance between the value and the boundaries within which the value is considered converged.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the absolute tolerance which determines the distance between the value and the boundaries within which the value is considered converged.'
##    AbsoluteTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the relative tolerance which determines the relative distance between the value and the boundaries within which the value is considered converged.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the relative tolerance which determines the relative distance between the value and the boundaries within which the value is considered converged.'
##    RelativeTolerance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnCalcScalarPlugin(CoClass):
    'Use a scalar calculation plugin.'
    _reg_clsid_ = GUID('{7D36E658-2E98-4FB0-89E0-9B53E29B69FF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnCalcScalarPlugin(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCalcScalarPlugin'
    _iid_ = GUID('{CDBA106F-8103-4AEB-AC20-A4621FC6A8DD}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnCalcScalarPlugin._com_interfaces_ = [_IAgCrdnCalcScalarPlugin, IAgCrdnCalcScalarPlugin, IAgCrdnCalcScalar, IAgCrdn]

class AgCrdnWellKnownSystems(CoClass):
    'Well-known coordinate reference systems.'
    _reg_clsid_ = GUID('{ED9A2DF7-CC10-4178-8FAE-F2128DBAF49B}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnWellKnownSystems._com_interfaces_ = [_IAgCrdnWellKnownSystems, IAgCrdnWellKnownSystems]

class _IAgCrdnCentralBodyRefTo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCentralBodyRefTo'
    _iid_ = GUID('{970A9A97-F1B9-4454-B979-C217FFD2FFFB}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnCentralBody(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The interface represents a central body.'
    _iid_ = GUID('{C35A2058-0D3F-4F95-AAA4-AE8E6D9A1026}')
    _idlflags_ = ['oleautomation']
_IAgCrdnCentralBodyRefTo._methods_ = [
    COMMETHOD([dispid(701), helpstring('Returns a path to the referenced VGT component.'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(11501), helpstring('Sets a new central body using specified path.')], HRESULT, 'SetPath',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD([dispid(11502), helpstring('Sets a new central body.')], HRESULT, 'SetCentralBody',
              ( ['in'], POINTER(IAgCrdnCentralBody), 'CentralBody' )),
    COMMETHOD([dispid(11503), helpstring('Returns a central body or null if the central body is invalid.')], HRESULT, 'GetCentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBody)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnCentralBodyRefTo implementation
##class _IAgCrdnCentralBodyRefTo_Impl(object):
##    @property
##    def Path(self):
##        'Returns a path to the referenced VGT component.'
##        #return pRetVal
##
##    def SetPath(self, Path):
##        'Sets a new central body using specified path.'
##        #return 
##
##    def SetCentralBody(self, CentralBody):
##        'Sets a new central body.'
##        #return 
##
##    def GetCentralBody(self):
##        'Returns a central body or null if the central body is invalid.'
##        #return ppRetVal
##

class AgCrdnEvaluateResult(CoClass):
    'Represents the results of evaluating a scalar component.'
    _reg_clsid_ = GUID('{49A41D78-EFEB-4440-B3C9-DEE734B13D85}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEvaluateResult._com_interfaces_ = [_IAgCrdnEvaluateResult, IAgCrdnEvaluateResult]

IAgCrdnPoint._methods_ = [
    COMMETHOD(['propget', helpstring('Returns a type of the point object.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPoint implementation
##class IAgCrdnPoint_Impl(object):
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##

class AgCrdnCalcScalarSurfaceDistanceBetweenPoints(CoClass):
    'Surface distance along the specified central body ellipsoid between two points (or their respective projections if specified at altitude).'
    _reg_clsid_ = GUID('{17CE0916-F73B-4006-8FC1-23099EBF5860}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnCalcScalarSurfaceDistanceBetweenPoints._com_interfaces_ = [_IAgCrdnCalcScalarSurfaceDistanceBetweenPoints, IAgCrdnCalcScalarSurfaceDistanceBetweenPoints, IAgCrdnCalcScalar, IAgCrdn]

class AgCrdnWellKnownAxes(CoClass):
    'Represents well-known VGT Axes.'
    _reg_clsid_ = GUID('{31DEE21F-FD43-478D-BBF1-C5F33C6D59CA}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnWellKnownAxes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnWellKnownAxes'
    _iid_ = GUID('{4F4FD026-0478-464F-9FAF-981C2E58F663}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnWellKnownAxes._com_interfaces_ = [_IAgCrdnWellKnownAxes, IAgCrdnWellKnownAxes]


# values for enumeration 'AgECrdnSatisfactionCrossing'
eCrdnSatisfactionCrossingNone = 0
eCrdnSatisfactionCrossingIn = 1
eCrdnSatisfactionCrossingOut = 2
AgECrdnSatisfactionCrossing = c_int # enum
_IAgCrdnVectorProjectAlongVector._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(28601), helpstring('A source vector. Can be any VGT vector.'), 'propget'], HRESULT, 'SourceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(28601), helpstring('A source vector. Can be any VGT vector.'), 'propput'], HRESULT, 'SourceVector',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD([dispid(28602), helpstring('A vector along which the source vector is projected. Can be any VGT vector.'), 'propget'], HRESULT, 'AlongVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(28602), helpstring('A vector along which the source vector is projected. Can be any VGT vector.'), 'propput'], HRESULT, 'AlongVector',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorProjectAlongVector implementation
##class _IAgCrdnVectorProjectAlongVector_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'A source vector. Can be any VGT vector.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A source vector. Can be any VGT vector.'
##    SourceVector = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A vector along which the source vector is projected. Can be any VGT vector.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A vector along which the source vector is projected. Can be any VGT vector.'
##    AlongVector = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

_IAgCrdnWellKnownEarthAxes._methods_ = [
    COMMETHOD([dispid(9801), helpstring("Earth's Fixed axes."), 'propget'], HRESULT, 'Fixed',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(9802), helpstring("Earth's ICRF axes."), 'propget'], HRESULT, 'ICRF',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(9803), helpstring("Earth's Inertial axes (as defined in STK)."), 'propget'], HRESULT, 'Inertial',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(9804), helpstring("The Earth's J2000 axes."), 'propget'], HRESULT, 'J2000',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnWellKnownEarthAxes implementation
##class _IAgCrdnWellKnownEarthAxes_Impl(object):
##    @property
##    def Fixed(self):
##        "Earth's Fixed axes."
##        #return ppRetVal
##
##    @property
##    def ICRF(self):
##        "Earth's ICRF axes."
##        #return ppRetVal
##
##    @property
##    def Inertial(self):
##        "Earth's Inertial axes (as defined in STK)."
##        #return ppRetVal
##
##    @property
##    def J2000(self):
##        "The Earth's J2000 axes."
##        #return ppRetVal
##

class _IAgCrdnVector(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVector'
    _iid_ = GUID('{B19F264E-2A85-49EE-85DB-8479953062E8}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnVector._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVector implementation
##class _IAgCrdnVector_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnCalcScalarVectorMagnitude(CoClass):
    'Scalar equal to the magnitude of a specified vector.'
    _reg_clsid_ = GUID('{195F9D2D-D4DB-4221-A5EB-979A4C1A3AAD}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnCalcScalarVectorMagnitude._com_interfaces_ = [_IAgCrdnCalcScalarVectorMagnitude, IAgCrdnCalcScalarVectorMagnitude, IAgCrdnCalcScalar, IAgCrdn]

class _IAgCrdnPointSamplingResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointSamplingResult'
    _iid_ = GUID('{BDE0E568-A251-4AA2-B520-02E379CA7035}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnPointSamplingResult._methods_ = [
    COMMETHOD([dispid(29901), helpstring('Indicates whether the result object is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(29902), helpstring('A collection of sampling intervals.'), 'propget'], HRESULT, 'Intervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointSamplingIntervalCollection)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnPointSamplingResult implementation
##class _IAgCrdnPointSamplingResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Intervals(self):
##        'A collection of sampling intervals.'
##        #return ppRetVal
##

class IAgCrdnEventArrayConditionCrossings(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Time array containing times at which the specified condition will change its satisfaction status. Determination is performed within the interval list using Sampling and Convergence parameters.'
    _iid_ = GUID('{03BAF2C3-E001-4CA2-8B79-C880A92A2EB9}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventArrayConditionCrossings._methods_ = [
    COMMETHOD(['propget', helpstring('The crossing condition.')], HRESULT, 'SatisfactionCrossing',
              ( ['out', 'retval'], POINTER(AgECrdnSatisfactionCrossing), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The crossing condition.')], HRESULT, 'SatisfactionCrossing',
              ( ['in'], AgECrdnSatisfactionCrossing, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The condition component.')], HRESULT, 'Condition',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The condition component.')], HRESULT, 'Condition',
              ( ['in'], POINTER(IAgCrdnCondition), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify the interval list within which intervals of satisfaction are sought. The default is set to overall availability of host object.')], HRESULT, 'CustomTimeLimits',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Specify the interval list within which intervals of satisfaction are sought. The default is set to overall availability of host object.')], HRESULT, 'CustomTimeLimits',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether to use custom time limits.')], HRESULT, 'UseCustomTimeLimits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether to use custom time limits.')], HRESULT, 'UseCustomTimeLimits',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Determine if computed intervals of satisfaction are saved/loaded, or recomputed on load if necessary.')], HRESULT, 'SaveDataOption',
              ( ['out', 'retval'], POINTER(AgECrdnSaveDataOption), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Determine if computed intervals of satisfaction are saved/loaded, or recomputed on load if necessary.')], HRESULT, 'SaveDataOption',
              ( ['in'], AgECrdnSaveDataOption, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The Convergence definition, which uses time tolerance to determine when time of extremum is found.')], HRESULT, 'Convergence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConverge)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The Convergence definition, which uses time tolerance to determine when time of extremum is found.')], HRESULT, 'Convergence',
              ( ['in'], POINTER(IAgCrdnConverge), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventArrayConditionCrossings implementation
##class IAgCrdnEventArrayConditionCrossings_Impl(object):
##    def _get(self):
##        'The crossing condition.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The crossing condition.'
##    SatisfactionCrossing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The condition component.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The condition component.'
##    Condition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify the interval list within which intervals of satisfaction are sought. The default is set to overall availability of host object.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Specify the interval list within which intervals of satisfaction are sought. The default is set to overall availability of host object.'
##    CustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use custom time limits.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use custom time limits.'
##    UseCustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Determine if computed intervals of satisfaction are saved/loaded, or recomputed on load if necessary.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Determine if computed intervals of satisfaction are saved/loaded, or recomputed on load if necessary.'
##    SaveDataOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##    Convergence = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnMethodCallResult(CoClass):
    'Represents a result of a call to a VGT method.'
    _reg_clsid_ = GUID('{64F15541-C02D-49B2-81E1-FE0A49DF7125}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnMethodCallResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnMethodCallResult'
    _iid_ = GUID('{C08B5B79-651C-4D3E-B63D-A5570D687614}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnMethodCallResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Instances of the interface are used to return the result of a computation.'
    _iid_ = GUID('{00129044-9364-4A92-94AA-469BAC097F69}')
    _idlflags_ = ['oleautomation']
AgCrdnMethodCallResult._com_interfaces_ = [_IAgCrdnMethodCallResult, IAgCrdnMethodCallResult]

class _IAgCrdnEventArrayMerged(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventArrayMerged'
    _iid_ = GUID('{03FF21A3-5901-49D2-A456-C46E31190B37}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnEventArrayMerged._methods_ = [
    COMMETHOD([dispid(18302), helpstring('Return the type of time array.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventArrayType), 'pRetVal' )),
    COMMETHOD([dispid(18301), helpstring('Return computed array of times.')], HRESULT, 'FindTimes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnFindTimesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(19303), helpstring('The first time array.'), 'propget'], HRESULT, 'TimeArrayA',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([dispid(19303), helpstring('The first time array.'), 'propput'], HRESULT, 'TimeArrayA',
              ( ['in'], POINTER(IAgCrdnEventArray), 'ppRetVal' )),
    COMMETHOD([dispid(19304), helpstring('The second time array.'), 'propget'], HRESULT, 'TimeArrayB',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([dispid(19304), helpstring('The second time array.'), 'propput'], HRESULT, 'TimeArrayB',
              ( ['in'], POINTER(IAgCrdnEventArray), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventArrayMerged implementation
##class _IAgCrdnEventArrayMerged_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time array.'
##        #return pRetVal
##
##    def FindTimes(self):
##        'Return computed array of times.'
##        #return ppRetVal
##
##    def _get(self):
##        'The first time array.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The first time array.'
##    TimeArrayA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The second time array.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The second time array.'
##    TimeArrayB = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnCondition(CoClass):
    'Condition returns a non-dimensional metric that is positive if satisfied, negative if not satisfied and 0 if on boundary; this provides computational methods needed for accurate detection of condition crossings.'
    _reg_clsid_ = GUID('{071E5309-F7C5-4199-B02D-A94A5DB14E09}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnCondition'
    _iid_ = GUID('{BD54D9DA-FED8-461C-B558-C8C958D07E73}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnCondition._com_interfaces_ = [_IAgCrdnCondition, IAgCrdnCondition, IAgCrdn]

class AgCrdnInterval(CoClass):
    'Represents an interval.'
    _reg_clsid_ = GUID('{0197DF6D-9ADA-4BC7-9610-41077C3A479F}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnInterval(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnInterval'
    _iid_ = GUID('{BF28E8BE-E0CA-41B8-83CA-7F44DFF12088}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnInterval._com_interfaces_ = [_IAgCrdnInterval, IAgCrdnInterval]

class _IAgCrdnAxesOnSurface(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesOnSurface'
    _iid_ = GUID('{29F42195-2797-4E00-B6F8-4B1FC6DB4B47}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnAxesOnSurface._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1701), helpstring('Returns a type of the axes object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAxesType), 'pRetVal' )),
    COMMETHOD([dispid(1706), helpstring('Find an angular velocity and orientation in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1707), helpstring('Find an orientation in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1708), helpstring('Returns an object that allows modifying the axes labels.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(3201), helpstring('Specify a central body.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(3202), helpstring('Specify a reference point.'), 'propget'], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(3203), helpstring('Specify whether the reference shape is at the Mean Sea Level.'), 'propget'], HRESULT, 'UseMSL',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(3203), helpstring('Specify whether the reference shape is at the Mean Sea Level.'), 'propput'], HRESULT, 'UseMSL',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1709), helpstring('Returns the X axis of the component.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1710), helpstring('Returns the Y axis of the component.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1711), helpstring('Returns the Z axis of the component.'), 'propget'], HRESULT, 'Z',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1712), helpstring('Transforms the input vector from this axes into the output axes.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1713), helpstring("Transforms the input vector and vector's rate from this axes into the output axes.")], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'RateInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAxesOnSurface implementation
##class _IAgCrdnAxesOnSurface_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the axes object.'
##        #return pRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Find an angular velocity and orientation in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Find an orientation in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        'Returns an object that allows modifying the axes labels.'
##        #return ppRetVal
##
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Specify a reference point.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify whether the reference shape is at the Mean Sea Level.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether the reference shape is at the Mean Sea Level.'
##    UseMSL = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    @property
##    def X(self):
##        'Returns the X axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Y(self):
##        'Returns the Y axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Z(self):
##        'Returns the Z axis of the component.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputAxes, VectorInMyAxes):
##        'Transforms the input vector from this axes into the output axes.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputAxes, VectorInMyAxes, RateInMyAxes):
##        "Transforms the input vector and vector's rate from this axes into the output axes."
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnConditionCombined(CoClass):
    'Defines scalar cinditions combined operation.'
    _reg_clsid_ = GUID('{B6DE113D-BD63-4139-BA57-C03AD6D80ED9}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnConditionCombined._com_interfaces_ = [_IAgCrdnConditionCombined, IAgCrdnConditionCombined, IAgCrdnCondition, IAgCrdn]

class AgCrdnIntervalCollection(CoClass):
    'Represents a collection of intervals.'
    _reg_clsid_ = GUID('{A0E6DFF5-F5D0-4C72-BD13-ECE7ACD05096}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnIntervalCollection._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnIntervalCollection]

_IAgCrdnCalcScalarIntegral._methods_ = [
    COMMETHOD([dispid(12805), helpstring('Returns the scalar calculation type.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnCalcScalarType), 'pRetVal' )),
    COMMETHOD([dispid(12803), helpstring('Evaluates the scalar calculation at the specified time instant.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12806), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...')], HRESULT, 'QuickEvaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12804), helpstring('Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12807), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...')], HRESULT, 'QuickEvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16619), helpstring('The input scalar calculation.'), 'propget'], HRESULT, 'InputScalar',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(16619), helpstring('The input scalar calculation.'), 'propput'], HRESULT, 'InputScalar',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD([dispid(16615), helpstring('Specify whether the resulting integral value is divided by its time span to generate average value instead of integral.'), 'propget'], HRESULT, 'ComputeAsAverage',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16615), helpstring('Specify whether the resulting integral value is divided by its time span to generate average value instead of integral.'), 'propput'], HRESULT, 'ComputeAsAverage',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(16614), helpstring('The integration window, or accumulation, type.'), 'propget'], HRESULT, 'IntegrationWindowType',
              ( ['out', 'retval'], POINTER(AgECrdnIntegrationWindowType), 'pRetVal' )),
    COMMETHOD([dispid(16614), helpstring('The integration window, or accumulation, type.'), 'propput'], HRESULT, 'IntegrationWindowType',
              ( ['in'], AgECrdnIntegrationWindowType, 'pRetVal' )),
    COMMETHOD([dispid(16620), helpstring('Set the offset with respect to current time to define the start of the sliding window, used when IntegrationWindowType is set to Sliding Window.'), 'propget'], HRESULT, 'StartOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16620), helpstring('Set the offset with respect to current time to define the start of the sliding window, used when IntegrationWindowType is set to Sliding Window.'), 'propput'], HRESULT, 'StartOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16621), helpstring('Set the offset with respect to current time to define the stop of the sliding window, used when IntegrationWindowType is set to Sliding Window.'), 'propget'], HRESULT, 'StopOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16621), helpstring('Set the offset with respect to current time to define the stop of the sliding window, used when IntegrationWindowType is set to Sliding Window.'), 'propput'], HRESULT, 'StopOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16612), helpstring('Specify whether to use custom interval list (CustomTimeLimits).'), 'propget'], HRESULT, 'UseCustomTimeLimits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16612), helpstring('Specify whether to use custom interval list (CustomTimeLimits).'), 'propput'], HRESULT, 'UseCustomTimeLimits',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(16618), helpstring('The interval list within which the global minimum or maximum is sought. The default is the overall availability of host object.'), 'propget'], HRESULT, 'CustomTimeLimits',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(16618), helpstring('The interval list within which the global minimum or maximum is sought. The default is the overall availability of host object.'), 'propput'], HRESULT, 'CustomTimeLimits',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD([dispid(16613), helpstring('Set the value to determine if computed time of extremum is saved/loaded, or recomputed on load if necessary.'), 'propget'], HRESULT, 'SaveDataOption',
              ( ['out', 'retval'], POINTER(AgECrdnSaveDataOption), 'pRetVal' )),
    COMMETHOD([dispid(16613), helpstring('Set the value to determine if computed time of extremum is saved/loaded, or recomputed on load if necessary.'), 'propput'], HRESULT, 'SaveDataOption',
              ( ['in'], AgECrdnSaveDataOption, 'pRetVal' )),
    COMMETHOD([dispid(16607), helpstring('Specify whether to use Lagrange or Hermite interpolation. See STK help on interpolation.'), 'propget'], HRESULT, 'Interpolation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnInterp)), 'ppRetVal' )),
    COMMETHOD([dispid(16607), helpstring('Specify whether to use Lagrange or Hermite interpolation. See STK help on interpolation.'), 'propput'], HRESULT, 'Interpolation',
              ( ['in'], POINTER(IAgCrdnInterp), 'ppRetVal' )),
    COMMETHOD([dispid(16608), helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propget'], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD([dispid(16608), helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propput'], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD([dispid(16609), helpstring('The numerical integration method.'), 'propget'], HRESULT, 'Integral',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntegral)), 'ppRetVal' )),
    COMMETHOD([dispid(16609), helpstring('The numerical integration method.'), 'propput'], HRESULT, 'Integral',
              ( ['in'], POINTER(IAgCrdnIntegral), 'ppRetVal' )),
    COMMETHOD([dispid(16623), helpstring("If true, the integral's integrand value is replaced by a constant 0 so that the integral remains constant over the gaps in integration."), 'propget'], HRESULT, 'KeepConstantOutsideTimeLimits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16623), helpstring("If true, the integral's integrand value is replaced by a constant 0 so that the integral remains constant over the gaps in integration."), 'propput'], HRESULT, 'KeepConstantOutsideTimeLimits',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(16624), helpstring('Set the offsets with respect to current time to define the start and stop of the sliding window, used when IntegrationWindowType is set to Sliding Window.')], HRESULT, 'SetOffsets',
              ( ['in'], c_double, 'StartOffset' ),
              ( ['in'], c_double, 'StopOffset' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(12808), helpstring('Returns a list of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(12809), helpstring("Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propget'], HRESULT, 'UnitOfMeasure',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(12810), helpstring('Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12811), helpstring('Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12812), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12813), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnCalcScalarIntegral implementation
##class _IAgCrdnCalcScalarIntegral_Impl(object):
##    @property
##    def Type(self):
##        'Returns the scalar calculation type.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant.'
##        #return ppRetVal
##
##    def QuickEvaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.'
##        #return ppRetVal
##
##    def QuickEvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...'
##        #return ppRetVal
##
##    def _get(self):
##        'The input scalar calculation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The input scalar calculation.'
##    InputScalar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether the resulting integral value is divided by its time span to generate average value instead of integral.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether the resulting integral value is divided by its time span to generate average value instead of integral.'
##    ComputeAsAverage = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The integration window, or accumulation, type.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The integration window, or accumulation, type.'
##    IntegrationWindowType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Set the offset with respect to current time to define the start of the sliding window, used when IntegrationWindowType is set to Sliding Window.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Set the offset with respect to current time to define the start of the sliding window, used when IntegrationWindowType is set to Sliding Window.'
##    StartOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Set the offset with respect to current time to define the stop of the sliding window, used when IntegrationWindowType is set to Sliding Window.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Set the offset with respect to current time to define the stop of the sliding window, used when IntegrationWindowType is set to Sliding Window.'
##    StopOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use custom interval list (CustomTimeLimits).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use custom interval list (CustomTimeLimits).'
##    UseCustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The interval list within which the global minimum or maximum is sought. The default is the overall availability of host object.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The interval list within which the global minimum or maximum is sought. The default is the overall availability of host object.'
##    CustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Set the value to determine if computed time of extremum is saved/loaded, or recomputed on load if necessary.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Set the value to determine if computed time of extremum is saved/loaded, or recomputed on load if necessary.'
##    SaveDataOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use Lagrange or Hermite interpolation. See STK help on interpolation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Specify whether to use Lagrange or Hermite interpolation. See STK help on interpolation.'
##    Interpolation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The numerical integration method.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The numerical integration method.'
##    Integral = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "If true, the integral's integrand value is replaced by a constant 0 so that the integral remains constant over the gaps in integration."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "If true, the integral's integrand value is replaced by a constant 0 so that the integral remains constant over the gaps in integration."
##    KeepConstantOutsideTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def SetOffsets(self, StartOffset, StopOffset):
##        'Set the offsets with respect to current time to define the start and stop of the sliding window, used when IntegrationWindowType is set to Sliding Window.'
##        #return 
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def GetAvailability(self):
##        'Returns a list of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def UnitOfMeasure(self):
##        "Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def QuickEvaluateArray(self, Times):
##        'Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateArray(self, Times):
##        'Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##

class _IAgCrdnTemplate(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnTemplate'
    _iid_ = GUID('{734DDAD0-8A01-43BD-869B-79ACBAB62DB0}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnTemplate._methods_ = [
    COMMETHOD([dispid(401), helpstring('Returns whether the current instance is a VGT template.'), 'propget'], HRESULT, 'IsTemplate',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(501), helpstring("Returns a class name (i.e. 'Satellite', 'Facility', etc.)."), 'propget'], HRESULT, 'ClassName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnTemplate implementation
##class _IAgCrdnTemplate_Impl(object):
##    @property
##    def IsTemplate(self):
##        'Returns whether the current instance is a VGT template.'
##        #return pRetVal
##
##    @property
##    def ClassName(self):
##        "Returns a class name (i.e. 'Satellite', 'Facility', etc.)."
##        #return pRetVal
##

IAgCrdnTimeProperties._methods_ = [
    COMMETHOD([helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnTimeProperties implementation
##class IAgCrdnTimeProperties_Impl(object):
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##

class IAgCrdnSystemFindInSystemResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnSystem.FindInSystem method.'
    _iid_ = GUID('{E86A1015-8A3A-48E7-8256-6BB4556C6D3B}')
    _idlflags_ = ['oleautomation']
class IAgCrdnSystemTransformResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnSystem.TransformFrom and IAgCrdnSystem.TransformTo methods.'
    _iid_ = GUID('{A4579666-EB3A-4690-A907-94BFE9CF5FDE}')
    _idlflags_ = ['oleautomation']
class IAgCrdnSystemTransformWithRateResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Contains the results returned with IAgCrdnSystem.TransformFromWithRate and IAgCrdnSystem.TransformToWithRate methods.'
    _iid_ = GUID('{DF5065B7-AB26-463D-969B-5AAC15B62816}')
    _idlflags_ = ['oleautomation']
IAgCrdnSystem._methods_ = [
    COMMETHOD(['propget', helpstring('Returns a type of the system object.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnSystemType), 'pRetVal' )),
    COMMETHOD([helpstring('Find position, velocity, rate and orientation using the specified system.')], HRESULT, 'FindInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemFindInSystemResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Translates the position vector from this system into the output system.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'OutputSystem' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'PositionInMySystem' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemTransformResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Translates the position and rate vectors from this system into the output system.')], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'OutputSystem' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'PositionInMySystem' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VelocityInMySystem' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemTransformWithRateResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnSystem implementation
##class IAgCrdnSystem_Impl(object):
##    @property
##    def Type(self):
##        'Returns a type of the system object.'
##        #return pRetVal
##
##    def FindInSystem(self, Epoch, System):
##        'Find position, velocity, rate and orientation using the specified system.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputSystem, PositionInMySystem):
##        'Translates the position vector from this system into the output system.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputSystem, PositionInMySystem, VelocityInMySystem):
##        'Translates the position and rate vectors from this system into the output system.'
##        #return ppRetVal
##

IAgCrdnAxesAtTimeInstant._methods_ = [
    COMMETHOD(['propget', helpstring('A reference time instant. Can be any Time event.')], HRESULT, 'ReferenceTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A reference time instant. Can be any Time event.')], HRESULT, 'ReferenceTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A base axes defining the orientation. Can be any VGT axes.')], HRESULT, 'SourceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A base axes defining the orientation. Can be any VGT axes.')], HRESULT, 'SourceAxes',
              ( ['in'], POINTER(IAgCrdnAxes), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A reference axes. Can be any VGT axes.')], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A reference axes. Can be any VGT axes.')], HRESULT, 'ReferenceAxes',
              ( ['in'], POINTER(IAgCrdnAxes), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAxesAtTimeInstant implementation
##class IAgCrdnAxesAtTimeInstant_Impl(object):
##    def _get(self):
##        'A reference time instant. Can be any Time event.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A reference time instant. Can be any Time event.'
##    ReferenceTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A base axes defining the orientation. Can be any VGT axes.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A base axes defining the orientation. Can be any VGT axes.'
##    SourceAxes = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A reference axes. Can be any VGT axes.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A reference axes. Can be any VGT axes.'
##    ReferenceAxes = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnPlaneLabels._methods_ = [
    COMMETHOD(['propget', helpstring('Specify an X axis label.')], HRESULT, 'XAxisLabel',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify an X axis label.')], HRESULT, 'XAxisLabel',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a Y axis label.')], HRESULT, 'YAxisLabel',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a Y axis label.')], HRESULT, 'YAxisLabel',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnPlaneLabels implementation
##class IAgCrdnPlaneLabels_Impl(object):
##    def _get(self):
##        'Specify an X axis label.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an X axis label.'
##    XAxisLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a Y axis label.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a Y axis label.'
##    YAxisLabel = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnVectorDerivative(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorDerivative'
    _iid_ = GUID('{C7FBF147-DD17-4BFB-8F51-8BCE0756FDBC}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnVectorDerivative._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6501), helpstring('Specify a base vector.'), 'propget'], HRESULT, 'Vector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(6502), helpstring('Specify a reference axes.'), 'propget'], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(6503), helpstring('Time step used in numerical evaluation of derivatives using central differencing.'), 'propget'], HRESULT, 'DifferencingTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(6503), helpstring('Time step used in numerical evaluation of derivatives using central differencing.'), 'propput'], HRESULT, 'DifferencingTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorDerivative implementation
##class _IAgCrdnVectorDerivative_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Vector(self):
##        'Specify a base vector.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def _get(self):
##        'Time step used in numerical evaluation of derivatives using central differencing.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Time step used in numerical evaluation of derivatives using central differencing.'
##    DifferencingTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

_IAgCrdnPointModelAttach._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1801), helpstring('Returns a type of the point object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([dispid(1802), helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1803), helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(5201), helpstring('Specify a model attachment point.'), 'propget'], HRESULT, 'PointableElementName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(5201), helpstring('Specify a model attachment point.'), 'propput'], HRESULT, 'PointableElementName',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(5202), helpstring('Specify whether to use the model scale.'), 'propget'], HRESULT, 'UseScale',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5202), helpstring('Specify whether to use the model scale.'), 'propput'], HRESULT, 'UseScale',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPointModelAttach implementation
##class _IAgCrdnPointModelAttach_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a model attachment point.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a model attachment point.'
##    PointableElementName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use the model scale.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use the model scale.'
##    UseScale = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnEventIntervalSignaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Determines what interval is recorded at target clock location by performing signal transmission of original interval between base and target clock locations.'
    _iid_ = GUID('{D653ECE5-3591-4050-9AA6-43CD31D13382}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventIntervalSignaled._methods_ = [
    COMMETHOD(['propget', helpstring('The original interval.')], HRESULT, 'OriginalInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The original interval.')], HRESULT, 'OriginalInterval',
              ( ['in'], POINTER(IAgCrdnEventInterval), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The direction of the signal, whether you are Transmitting or Receiving from the BaseClockLocation.')], HRESULT, 'SignalSense',
              ( ['out', 'retval'], POINTER(AgECrdnSignalSense), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The direction of the signal, whether you are Transmitting or Receiving from the BaseClockLocation.')], HRESULT, 'SignalSense',
              ( ['in'], AgECrdnSignalSense, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The base clock location, which is a point from VGT.')], HRESULT, 'BaseClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The base clock location, which is a point from VGT.')], HRESULT, 'BaseClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The target clock location, which is a point from VGT.')], HRESULT, 'TargetClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The target clock location, which is a point from VGT.')], HRESULT, 'TargetClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.')], HRESULT, 'SignalDelay',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSignalDelay)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.')], HRESULT, 'SignalDelay',
              ( ['in'], POINTER(IAgCrdnSignalDelay), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalSignaled implementation
##class IAgCrdnEventIntervalSignaled_Impl(object):
##    def _get(self):
##        'The original interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original interval.'
##    OriginalInterval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The direction of the signal, whether you are Transmitting or Receiving from the BaseClockLocation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The direction of the signal, whether you are Transmitting or Receiving from the BaseClockLocation.'
##    SignalSense = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The base clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The base clock location, which is a point from VGT.'
##    BaseClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The target clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The target clock location, which is a point from VGT.'
##    TargetClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##    SignalDelay = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnRefTo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A base interface for all VGT component references.'
    _iid_ = GUID('{1F7D829D-6D18-42A8-81E0-D244E6CEFCFB}')
    _idlflags_ = ['oleautomation']
IAgCrdnRefTo._methods_ = [
    COMMETHOD(['propget', helpstring('Returns a path to the referenced VGT component.')], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnRefTo implementation
##class IAgCrdnRefTo_Impl(object):
##    @property
##    def Path(self):
##        'Returns a path to the referenced VGT component.'
##        #return pRetVal
##

IAgCrdnPlaneQuadrant._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a reference system.')], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a quadrant.')], HRESULT, 'Quadrant',
              ( ['out', 'retval'], POINTER(AgECrdnQuadrantType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a quadrant.')], HRESULT, 'Quadrant',
              ( ['in'], AgECrdnQuadrantType, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnPlaneQuadrant implementation
##class IAgCrdnPlaneQuadrant_Impl(object):
##    @property
##    def ReferenceSystem(self):
##        'Specify a reference system.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a quadrant.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a quadrant.'
##    Quadrant = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnConditionSetEvaluateWithRateResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Computed values.')], HRESULT, 'Values',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Computed rates.')], HRESULT, 'Rates',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnConditionSetEvaluateWithRateResult implementation
##class IAgCrdnConditionSetEvaluateWithRateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Values(self):
##        'Computed values.'
##        #return ppRetVal
##
##    @property
##    def Rates(self):
##        'Computed rates.'
##        #return ppRetVal
##

_IAgCrdnAxesAtTimeInstant._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1701), helpstring('Returns a type of the axes object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAxesType), 'pRetVal' )),
    COMMETHOD([dispid(1706), helpstring('Find an angular velocity and orientation in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1707), helpstring('Find an orientation in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1708), helpstring('Returns an object that allows modifying the axes labels.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(28201), helpstring('A reference time instant. Can be any Time event.'), 'propget'], HRESULT, 'ReferenceTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(28201), helpstring('A reference time instant. Can be any Time event.'), 'propput'], HRESULT, 'ReferenceTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD([dispid(28202), helpstring('A base axes defining the orientation. Can be any VGT axes.'), 'propget'], HRESULT, 'SourceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(28202), helpstring('A base axes defining the orientation. Can be any VGT axes.'), 'propput'], HRESULT, 'SourceAxes',
              ( ['in'], POINTER(IAgCrdnAxes), 'ppRetVal' )),
    COMMETHOD([dispid(28203), helpstring('A reference axes. Can be any VGT axes.'), 'propget'], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(28203), helpstring('A reference axes. Can be any VGT axes.'), 'propput'], HRESULT, 'ReferenceAxes',
              ( ['in'], POINTER(IAgCrdnAxes), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1709), helpstring('Returns the X axis of the component.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1710), helpstring('Returns the Y axis of the component.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1711), helpstring('Returns the Z axis of the component.'), 'propget'], HRESULT, 'Z',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1712), helpstring('Transforms the input vector from this axes into the output axes.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1713), helpstring("Transforms the input vector and vector's rate from this axes into the output axes.")], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'RateInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAxesAtTimeInstant implementation
##class _IAgCrdnAxesAtTimeInstant_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the axes object.'
##        #return pRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Find an angular velocity and orientation in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Find an orientation in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        'Returns an object that allows modifying the axes labels.'
##        #return ppRetVal
##
##    def _get(self):
##        'A reference time instant. Can be any Time event.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A reference time instant. Can be any Time event.'
##    ReferenceTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A base axes defining the orientation. Can be any VGT axes.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A base axes defining the orientation. Can be any VGT axes.'
##    SourceAxes = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A reference axes. Can be any VGT axes.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A reference axes. Can be any VGT axes.'
##    ReferenceAxes = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    @property
##    def X(self):
##        'Returns the X axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Y(self):
##        'Returns the Y axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Z(self):
##        'Returns the Z axis of the component.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputAxes, VectorInMyAxes):
##        'Transforms the input vector from this axes into the output axes.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputAxes, VectorInMyAxes, RateInMyAxes):
##        "Transforms the input vector and vector's rate from this axes into the output axes."
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

_IAgCrdnPointFile._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1801), helpstring('Returns a type of the point object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([dispid(1802), helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1803), helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(4501), helpstring('Specify a path to a file. The file must exist. Specifying an invalid path will generate an exception.'), 'propget'], HRESULT, 'Filename',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(4501), helpstring('Specify a path to a file. The file must exist. Specifying an invalid path will generate an exception.'), 'propput'], HRESULT, 'Filename',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPointFile implementation
##class _IAgCrdnPointFile_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a path to a file. The file must exist. Specifying an invalid path will generate an exception.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a path to a file. The file must exist. Specifying an invalid path will generate an exception.'
##    Filename = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnSignalDelayBasic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnSignalDelayBasic'
    _iid_ = GUID('{B08E7E7B-8E78-48FF-9143-3E5D1DF8B832}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnSignalDelayBasic._methods_ = [
    COMMETHOD([dispid(24301), helpstring('Get the type of signal path reference system which can be set to use STK Access default (see STK Help for further details), Solar system barycenter inertial reference, central body inertial reference or custom reference system...'), 'propget'], HRESULT, 'SignalPathReferenceSystem',
              ( ['out', 'retval'], POINTER(AgECrdnSignalPathReferenceSystem), 'pRetVal' )),
    COMMETHOD([dispid(24301), helpstring('Get the type of signal path reference system which can be set to use STK Access default (see STK Help for further details), Solar system barycenter inertial reference, central body inertial reference or custom reference system...'), 'propput'], HRESULT, 'SignalPathReferenceSystem',
              ( ['in'], AgECrdnSignalPathReferenceSystem, 'pRetVal' )),
    COMMETHOD([dispid(24302), helpstring('Get the custom reference system which is used as a reference for signal path if the signal path reference option is set to Custom.'), 'propget'], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(24302), helpstring('Get the custom reference system which is used as a reference for signal path if the signal path reference option is set to Custom.'), 'propput'], HRESULT, 'ReferenceSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(24303), helpstring('Get the speed option which determines whether to use the speed of light or a custom speed value.'), 'propget'], HRESULT, 'SpeedOption',
              ( ['out', 'retval'], POINTER(AgECrdnSpeedOptions), 'pRetVal' )),
    COMMETHOD([dispid(24303), helpstring('Get the speed option which determines whether to use the speed of light or a custom speed value.'), 'propput'], HRESULT, 'SpeedOption',
              ( ['in'], AgECrdnSpeedOptions, 'pRetVal' )),
    COMMETHOD([dispid(24304), helpstring('Get the signal propagation speed value which is used if the speed option is set to Custom.'), 'propget'], HRESULT, 'TransferSpeed',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(24304), helpstring('Get the signal propagation speed value which is used if the speed option is set to Custom.'), 'propput'], HRESULT, 'TransferSpeed',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(24305), helpstring('Get the time delay convergence which determines the accuracy of computed propagation time between the two locations.'), 'propget'], HRESULT, 'TimeDelayConvergence',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(24305), helpstring('Get the time delay convergence which determines the accuracy of computed propagation time between the two locations.'), 'propput'], HRESULT, 'TimeDelayConvergence',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnSignalDelayBasic implementation
##class _IAgCrdnSignalDelayBasic_Impl(object):
##    def _get(self):
##        'Get the type of signal path reference system which can be set to use STK Access default (see STK Help for further details), Solar system barycenter inertial reference, central body inertial reference or custom reference system...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the type of signal path reference system which can be set to use STK Access default (see STK Help for further details), Solar system barycenter inertial reference, central body inertial reference or custom reference system...'
##    SignalPathReferenceSystem = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the custom reference system which is used as a reference for signal path if the signal path reference option is set to Custom.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the custom reference system which is used as a reference for signal path if the signal path reference option is set to Custom.'
##    ReferenceSystem = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the speed option which determines whether to use the speed of light or a custom speed value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the speed option which determines whether to use the speed of light or a custom speed value.'
##    SpeedOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the signal propagation speed value which is used if the speed option is set to Custom.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the signal propagation speed value which is used if the speed option is set to Custom.'
##    TransferSpeed = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the time delay convergence which determines the accuracy of computed propagation time between the two locations.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the time delay convergence which determines the accuracy of computed propagation time between the two locations.'
##    TimeDelayConvergence = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnEventArrayStartStopTimes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventArrayStartStopTimes'
    _iid_ = GUID('{90DA99DA-D56E-48A6-A5D8-C5EFC0F946D4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnEventArrayStartStopTimes._methods_ = [
    COMMETHOD([dispid(18302), helpstring('Return the type of time array.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventArrayType), 'pRetVal' )),
    COMMETHOD([dispid(18301), helpstring('Return computed array of times.')], HRESULT, 'FindTimes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnFindTimesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(27601), helpstring('The edge type. At least one of the two edge types must be selected.'), 'propget'], HRESULT, 'StartStopOption',
              ( ['out', 'retval'], POINTER(AgECrdnStartStopOption), 'pRetVal' )),
    COMMETHOD([dispid(27601), helpstring('The edge type. At least one of the two edge types must be selected.'), 'propput'], HRESULT, 'StartStopOption',
              ( ['in'], AgECrdnStartStopOption, 'pRetVal' )),
    COMMETHOD([dispid(27602), helpstring('The reference interval list.'), 'propget'], HRESULT, 'ReferenceIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(27602), helpstring('The reference interval list.'), 'propput'], HRESULT, 'ReferenceIntervals',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventArrayStartStopTimes implementation
##class _IAgCrdnEventArrayStartStopTimes_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time array.'
##        #return pRetVal
##
##    def FindTimes(self):
##        'Return computed array of times.'
##        #return ppRetVal
##
##    def _get(self):
##        'The edge type. At least one of the two edge types must be selected.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The edge type. At least one of the two edge types must be selected.'
##    StartStopOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The reference interval list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference interval list.'
##    ReferenceIntervals = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnPlaneTrajectory._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a trajectory point.')], HRESULT, 'Point',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference system.')], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify an angle measured from X (Axis 1) away from Y (Axis 2).')], HRESULT, 'RotationOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify an angle measured from X (Axis 1) away from Y (Axis 2).')], HRESULT, 'RotationOffset',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnPlaneTrajectory implementation
##class IAgCrdnPlaneTrajectory_Impl(object):
##    @property
##    def Point(self):
##        'Specify a trajectory point.'
##        #return ppRetVal
##
##    @property
##    def ReferenceSystem(self):
##        'Specify a reference system.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify an angle measured from X (Axis 1) away from Y (Axis 2).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an angle measured from X (Axis 1) away from Y (Axis 2).'
##    RotationOffset = property(_get, _set, doc = _set.__doc__)
##

_IAgCrdnEvaluateWithRateResult._methods_ = [
    COMMETHOD([dispid(25601), helpstring('Indicates whether the result object is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(25602), helpstring('Computed scalar value.'), 'propget'], HRESULT, 'Value',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(25603), helpstring('A rate of change of the computed scalar value.'), 'propget'], HRESULT, 'Rate',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnEvaluateWithRateResult implementation
##class _IAgCrdnEvaluateWithRateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Value(self):
##        'Computed scalar value.'
##        #return pRetVal
##
##    @property
##    def Rate(self):
##        'A rate of change of the computed scalar value.'
##        #return pRetVal
##

class IAgCrdnTemplate(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The IAgCrdnTemplate interface enables to obtain information about the STK class that owns the VGT component.'
    _iid_ = GUID('{ACB36377-3892-43BE-9424-3C1DDCF18136}')
    _idlflags_ = ['oleautomation']
IAgCrdnTemplate._methods_ = [
    COMMETHOD(['propget', helpstring("Returns a class name (i.e. 'Satellite', 'Facility', etc.).")], HRESULT, 'ClassName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnTemplate implementation
##class IAgCrdnTemplate_Impl(object):
##    @property
##    def ClassName(self):
##        "Returns a class name (i.e. 'Satellite', 'Facility', etc.)."
##        #return pRetVal
##

IAgCrdnAxesSamplingResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A collection of sampling intervals.')], HRESULT, 'Intervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesSamplingIntervalCollection)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAxesSamplingResult implementation
##class IAgCrdnAxesSamplingResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Intervals(self):
##        'A collection of sampling intervals.'
##        #return ppRetVal
##

class IAgCrdnVectorTwoPlanesIntersection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Defined along the intersection of two planes.'
    _iid_ = GUID('{142042CE-E1C1-48F4-A5CE-435424E9C35B}')
    _idlflags_ = ['oleautomation']
IAgCrdnVectorTwoPlanesIntersection._methods_ = [
    COMMETHOD(['propget', helpstring('Specify the first of the two planes which intersection defines the vector.')], HRESULT, 'PlaneA',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify the second of the two planes which intersection defines the vector.')], HRESULT, 'PlaneB',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneRefTo)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVectorTwoPlanesIntersection implementation
##class IAgCrdnVectorTwoPlanesIntersection_Impl(object):
##    @property
##    def PlaneA(self):
##        'Specify the first of the two planes which intersection defines the vector.'
##        #return ppRetVal
##
##    @property
##    def PlaneB(self):
##        'Specify the second of the two planes which intersection defines the vector.'
##        #return ppRetVal
##

IAgCrdnVectorVelocityAcceleration._methods_ = [
    COMMETHOD(['propget', helpstring('A reference (coordinate) system. Can be any VGT system.')], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A reference (coordinate) system. Can be any VGT system.')], HRESULT, 'ReferenceSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A point which velocity this vector represents. Can be any VGT point.')], HRESULT, 'Point',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A point which velocity this vector represents. Can be any VGT point.')], HRESULT, 'Point',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Time step used in numerical evaluation of derivatives using central differencing.')], HRESULT, 'DifferencingTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Time step used in numerical evaluation of derivatives using central differencing.')], HRESULT, 'DifferencingTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorVelocityAcceleration implementation
##class IAgCrdnVectorVelocityAcceleration_Impl(object):
##    def _get(self):
##        'A reference (coordinate) system. Can be any VGT system.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A reference (coordinate) system. Can be any VGT system.'
##    ReferenceSystem = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A point which velocity this vector represents. Can be any VGT point.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A point which velocity this vector represents. Can be any VGT point.'
##    Point = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Time step used in numerical evaluation of derivatives using central differencing.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Time step used in numerical evaluation of derivatives using central differencing.'
##    DifferencingTimeStep = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnInstance(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnInstance'
    _iid_ = GUID('{B7BB004A-1FDB-4DDF-A930-0A184F6C13A0}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnInstance._methods_ = [
    COMMETHOD([dispid(401), helpstring('Returns whether the current instance is a VGT template.'), 'propget'], HRESULT, 'IsTemplate',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(601), helpstring('Returns a path to the parent object that owns the VGT component.'), 'propget'], HRESULT, 'InstancePath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(602), helpstring('Returns a template object the VGT component was created from or null if the VGT component was not created from a template.'), 'propget'], HRESULT, 'Template',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnInstance implementation
##class _IAgCrdnInstance_Impl(object):
##    @property
##    def IsTemplate(self):
##        'Returns whether the current instance is a VGT template.'
##        #return pRetVal
##
##    @property
##    def InstancePath(self):
##        'Returns a path to the parent object that owns the VGT component.'
##        #return pRetVal
##
##    @property
##    def Template(self):
##        'Returns a template object the VGT component was created from or null if the VGT component was not created from a template.'
##        #return ppRetVal
##

_IAgCrdnCondition._methods_ = [
    COMMETHOD([dispid(18104), helpstring('Returns the type of condition.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnConditionType), 'pRetVal' )),
    COMMETHOD([dispid(18102), helpstring('Returns result of evaluating continuously varying condition metric at the specified time, used for detecting condition crossings.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(18103), helpstring('Returns result of evaluating continuously varying condition metric and its rate of change at the specified time, used for detecting condition crossings.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnCondition implementation
##class _IAgCrdnCondition_Impl(object):
##    @property
##    def Type(self):
##        'Returns the type of condition.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Returns result of evaluating continuously varying condition metric at the specified time, used for detecting condition crossings.'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Returns result of evaluating continuously varying condition metric and its rate of change at the specified time, used for detecting condition crossings.'
##        #return ppRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnWellKnownAxes._methods_ = [
    COMMETHOD(['propget', helpstring("Earth's well-known axes.")], HRESULT, 'Earth',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnWellKnownEarthAxes)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("The Sun's well-known axes.")], HRESULT, 'Sun',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnWellKnownSunAxes)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnWellKnownAxes implementation
##class IAgCrdnWellKnownAxes_Impl(object):
##    @property
##    def Earth(self):
##        "Earth's well-known axes."
##        #return ppRetVal
##
##    @property
##    def Sun(self):
##        "The Sun's well-known axes."
##        #return ppRetVal
##

IAgCrdnCalcScalarFixedAtTimeInstant._methods_ = [
    COMMETHOD(['propget', helpstring('The input scalar component.')], HRESULT, 'InputScalar',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The input scalar component.')], HRESULT, 'InputScalar',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The reference time instant.')], HRESULT, 'ReferenceTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The reference time instant.')], HRESULT, 'ReferenceTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnCalcScalarFixedAtTimeInstant implementation
##class IAgCrdnCalcScalarFixedAtTimeInstant_Impl(object):
##    def _get(self):
##        'The input scalar component.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The input scalar component.'
##    InputScalar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The reference time instant.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference time instant.'
##    ReferenceTimeInstant = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnInstance(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The IAgCrdnInstance interface enables to obtain information about the parent object that owns the VGT component.'
    _iid_ = GUID('{A5C99F29-A41C-48C4-BBD5-6567600827CA}')
    _idlflags_ = ['oleautomation']
IAgCrdnInstance._methods_ = [
    COMMETHOD(['propget', helpstring('Returns a path to the parent object that owns the VGT component.')], HRESULT, 'InstancePath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a template object the VGT component was created from or null if the VGT component was not created from a template.')], HRESULT, 'Template',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnInstance implementation
##class IAgCrdnInstance_Impl(object):
##    @property
##    def InstancePath(self):
##        'Returns a path to the parent object that owns the VGT component.'
##        #return pRetVal
##
##    @property
##    def Template(self):
##        'Returns a template object the VGT component was created from or null if the VGT component was not created from a template.'
##        #return ppRetVal
##

class _IAgCrdnEventArrayFixedStep(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventArrayFixedStep'
    _iid_ = GUID('{CDE53017-4CE4-4D36-B54E-E5CE42AF6F28}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnEventArrayFixedStep._methods_ = [
    COMMETHOD([dispid(18302), helpstring('Return the type of time array.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventArrayType), 'pRetVal' )),
    COMMETHOD([dispid(18301), helpstring('Return computed array of times.')], HRESULT, 'FindTimes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnFindTimesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(27501), helpstring('The bounding interval list.'), 'propget'], HRESULT, 'BoundingIntervalList',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(27501), helpstring('The bounding interval list.'), 'propput'], HRESULT, 'BoundingIntervalList',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD([dispid(27502), helpstring('The sampling time step.'), 'propget'], HRESULT, 'SamplingTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(27502), helpstring('The sampling time step.'), 'propput'], HRESULT, 'SamplingTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(27503), helpstring('Specify whether to include interval edges.'), 'propget'], HRESULT, 'IncludeIntervalEdges',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(27503), helpstring('Specify whether to include interval edges.'), 'propput'], HRESULT, 'IncludeIntervalEdges',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(27505), helpstring('Specify the time reference from which fixed sampling time steps are taken. Note: selecting Start/Stop of each Interval resets the time reference for each interval, whereas other types maintain single reference for entire array.'), 'propget'], HRESULT, 'ReferenceType',
              ( ['out', 'retval'], POINTER(AgECrdnSampledReferenceTime), 'pRetVal' )),
    COMMETHOD([dispid(27505), helpstring('Specify the time reference from which fixed sampling time steps are taken. Note: selecting Start/Stop of each Interval resets the time reference for each interval, whereas other types maintain single reference for entire array.'), 'propput'], HRESULT, 'ReferenceType',
              ( ['in'], AgECrdnSampledReferenceTime, 'pRetVal' )),
    COMMETHOD([dispid(27504), helpstring('The reference time instant. Only applicable if the ReferenceType is set to time instant.'), 'propget'], HRESULT, 'ReferenceTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(27504), helpstring('The reference time instant. Only applicable if the ReferenceType is set to time instant.'), 'propput'], HRESULT, 'ReferenceTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventArrayFixedStep implementation
##class _IAgCrdnEventArrayFixedStep_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time array.'
##        #return pRetVal
##
##    def FindTimes(self):
##        'Return computed array of times.'
##        #return ppRetVal
##
##    def _get(self):
##        'The bounding interval list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The bounding interval list.'
##    BoundingIntervalList = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The sampling time step.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The sampling time step.'
##    SamplingTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to include interval edges.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to include interval edges.'
##    IncludeIntervalEdges = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify the time reference from which fixed sampling time steps are taken. Note: selecting Start/Stop of each Interval resets the time reference for each interval, whereas other types maintain single reference for entire array.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify the time reference from which fixed sampling time steps are taken. Note: selecting Start/Stop of each Interval resets the time reference for each interval, whereas other types maintain single reference for entire array.'
##    ReferenceType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The reference time instant. Only applicable if the ReferenceType is set to time instant.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference time instant. Only applicable if the ReferenceType is set to time instant.'
##    ReferenceTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnIntervalsFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnIntervalsFilter'
    _iid_ = GUID('{3A158D2A-016B-4059-A763-934F1859EB8E}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnIntervalsFilter._methods_ = [
    COMMETHOD([dispid(22901), helpstring('Returns a type of the filter.'), 'propget'], HRESULT, 'FilterType',
              ( ['out', 'retval'], POINTER(AgECrdnPruneFilter), 'pRetVal' )),
    COMMETHOD([dispid(23201), helpstring('Choose a duration type (at least/at most).'), 'propget'], HRESULT, 'DurationKind',
              ( ['out', 'retval'], POINTER(AgECrdnIntervalDurationKind), 'pRetVal' )),
    COMMETHOD([dispid(23201), helpstring('Choose a duration type (at least/at most).'), 'propput'], HRESULT, 'DurationKind',
              ( ['in'], AgECrdnIntervalDurationKind, 'pRetVal' )),
    COMMETHOD([dispid(23202), helpstring('The interval duration.'), 'propget'], HRESULT, 'IntervalDuration',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(23202), helpstring('The interval duration.'), 'propput'], HRESULT, 'IntervalDuration',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnIntervalsFilter implementation
##class _IAgCrdnIntervalsFilter_Impl(object):
##    @property
##    def FilterType(self):
##        'Returns a type of the filter.'
##        #return pRetVal
##
##    def _get(self):
##        'Choose a duration type (at least/at most).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Choose a duration type (at least/at most).'
##    DurationKind = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The interval duration.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The interval duration.'
##    IntervalDuration = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnPointRefTo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointRefTo'
    _iid_ = GUID('{22F80D9E-4098-42CE-B89E-9FCBE079F962}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnPointRefTo._methods_ = [
    COMMETHOD([dispid(701), helpstring('Returns a path to the referenced VGT component.'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(801), helpstring('Sets a new point.')], HRESULT, 'SetPath',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD([dispid(802), helpstring('Sets a new point.')], HRESULT, 'SetPoint',
              ( ['in'], POINTER(IAgCrdnPoint), 'Point' )),
    COMMETHOD([dispid(803), helpstring('Returns the actual point object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.')], HRESULT, 'GetPoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(804), helpstring('Tests whether the input component and the target component form a cyclic dependency.')], HRESULT, 'HasCyclicDependency',
              ( ['in'], POINTER(IAgCrdnPoint), 'Point' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnPointRefTo implementation
##class _IAgCrdnPointRefTo_Impl(object):
##    @property
##    def Path(self):
##        'Returns a path to the referenced VGT component.'
##        #return pRetVal
##
##    def SetPath(self, Path):
##        'Sets a new point.'
##        #return 
##
##    def SetPoint(self, Point):
##        'Sets a new point.'
##        #return 
##
##    def GetPoint(self):
##        'Returns the actual point object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.'
##        #return ppRetVal
##
##    def HasCyclicDependency(self, Point):
##        'Tests whether the input component and the target component form a cyclic dependency.'
##        #return pRetVal
##

class _IAgCrdnPointPlaneProjection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointPlaneProjection'
    _iid_ = GUID('{F6F48BD0-59AD-4E64-8075-7C75626DEEF0}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnPointPlaneProjection._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1801), helpstring('Returns a type of the point object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([dispid(1802), helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1803), helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(5301), helpstring('Specify a source point.'), 'propget'], HRESULT, 'SourcePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(5302), helpstring('Specify a reference plane.'), 'propget'], HRESULT, 'ReferencePlane',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPointPlaneProjection implementation
##class _IAgCrdnPointPlaneProjection_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##
##    @property
##    def SourcePoint(self):
##        'Specify a source point.'
##        #return ppRetVal
##
##    @property
##    def ReferencePlane(self):
##        'Specify a reference plane.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnEventIntervalCollectionGroup._methods_ = [
    COMMETHOD([dispid(20101), helpstring('Removes a specified element.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'EventName' )),
    COMMETHOD([dispid(20102), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(20103), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the group.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20105), helpstring('Returns a factory object used to create calc scalar components.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollectionFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns an element by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalCollectionGroup implementation
##class IAgCrdnEventIntervalCollectionGroup_Impl(object):
##    def Remove(self, EventName):
##        'Removes a specified element.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the group.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a factory object used to create calc scalar components.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns an element by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

IAgCrdnVectorModelAttach._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a pointable element of the 3D model associated with the object.')], HRESULT, 'PointableElementName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a pointable element of the 3D model associated with the object.')], HRESULT, 'PointableElementName',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorModelAttach implementation
##class IAgCrdnVectorModelAttach_Impl(object):
##    def _get(self):
##        'Specify a pointable element of the 3D model associated with the object.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a pointable element of the 3D model associated with the object.'
##    PointableElementName = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnAxesSamplingInterval(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The interface represents an interval with the time, orientation and velocity arrays.'
    _iid_ = GUID('{B10C89E4-3E2E-48AE-A7D8-B6E863EE48FE}')
    _idlflags_ = ['oleautomation']
IAgCrdnAxesSamplingIntervalCollection._methods_ = [
    COMMETHOD(['propget', helpstring('Number of elements in the collection.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Accesses an element at the specified position.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesSamplingInterval)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a COM enumerator.')], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAxesSamplingIntervalCollection implementation
##class IAgCrdnAxesSamplingIntervalCollection_Impl(object):
##    @property
##    def Count(self):
##        'Number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Accesses an element at the specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

IAgCrdnSystemTransformResult._methods_ = [
    COMMETHOD(['propget', helpstring('True indicates the method call was successful.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The transformed vector.')], HRESULT, 'Vector',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnSystemTransformResult implementation
##class IAgCrdnSystemTransformResult_Impl(object):
##    @property
##    def IsValid(self):
##        'True indicates the method call was successful.'
##        #return pRetVal
##
##    @property
##    def Vector(self):
##        'The transformed vector.'
##        #return ppRetVal
##

_IAgCrdnEventIntervalResult._methods_ = [
    COMMETHOD([dispid(14201), helpstring('Indicates whether the result object is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(14202), helpstring('An interval.'), 'propget'], HRESULT, 'Interval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnInterval)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnEventIntervalResult implementation
##class _IAgCrdnEventIntervalResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Interval(self):
##        'An interval.'
##        #return ppRetVal
##

class _IAgCrdnEventIntervalTimeOffset(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalTimeOffset'
    _iid_ = GUID('{5A59DC0E-9491-425F-A0F2-6927DF3DC84B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnEventIntervalTimeOffset._methods_ = [
    COMMETHOD([dispid(13411), helpstring('Return the type of interval.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalType), 'pRetVal' )),
    COMMETHOD([dispid(13404), helpstring('The start description.'), 'propget'], HRESULT, 'LabelStartDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13405), helpstring('The stop description.'), 'propget'], HRESULT, 'LabelStopDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13406), helpstring('A label associated with the interval start.'), 'propget'], HRESULT, 'LabelStart',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13407), helpstring('A label associated with the interval stop.'), 'propget'], HRESULT, 'LabelStop',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13408), helpstring('Return computed interval if it exists.')], HRESULT, 'FindInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13409), helpstring('Determine if specified time falls within computed interval if it exists.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(15101), helpstring('The reference interval.'), 'propget'], HRESULT, 'ReferenceInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(15101), helpstring('The reference interval.'), 'propput'], HRESULT, 'ReferenceInterval',
              ( ['in'], POINTER(IAgCrdnEventInterval), 'ppRetVal' )),
    COMMETHOD([dispid(15102), helpstring('The time offset value.'), 'propget'], HRESULT, 'TimeOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(15102), helpstring('The time offset value.'), 'propput'], HRESULT, 'TimeOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalTimeOffset implementation
##class _IAgCrdnEventIntervalTimeOffset_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval.'
##        #return pRetVal
##
##    @property
##    def LabelStartDescription(self):
##        'The start description.'
##        #return pRetVal
##
##    @property
##    def LabelStopDescription(self):
##        'The stop description.'
##        #return pRetVal
##
##    @property
##    def LabelStart(self):
##        'A label associated with the interval start.'
##        #return pRetVal
##
##    @property
##    def LabelStop(self):
##        'A label associated with the interval stop.'
##        #return pRetVal
##
##    def FindInterval(self):
##        'Return computed interval if it exists.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval if it exists.'
##        #return pRetVal
##
##    def _get(self):
##        'The reference interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference interval.'
##    ReferenceInterval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The time offset value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The time offset value.'
##    TimeOffset = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnWellKnownEarthAxes._methods_ = [
    COMMETHOD(['propget', helpstring("Earth's Fixed axes.")], HRESULT, 'Fixed',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Earth's ICRF axes.")], HRESULT, 'ICRF',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Earth's Inertial axes (as defined in STK).")], HRESULT, 'Inertial',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("The Earth's J2000 axes.")], HRESULT, 'J2000',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnWellKnownEarthAxes implementation
##class IAgCrdnWellKnownEarthAxes_Impl(object):
##    @property
##    def Fixed(self):
##        "Earth's Fixed axes."
##        #return ppRetVal
##
##    @property
##    def ICRF(self):
##        "Earth's ICRF axes."
##        #return ppRetVal
##
##    @property
##    def Inertial(self):
##        "Earth's Inertial axes (as defined in STK)."
##        #return ppRetVal
##
##    @property
##    def J2000(self):
##        "The Earth's J2000 axes."
##        #return ppRetVal
##

class _IAgCrdnEventTimeOffset(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventTimeOffset'
    _iid_ = GUID('{5D345587-5249-4F7E-9454-BBC2193FCEA0}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnEventTimeOffset._methods_ = [
    COMMETHOD([dispid(12911), helpstring('Return the type of time instant.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventType), 'pRetVal' )),
    COMMETHOD([dispid(12905), helpstring("Return time instant that corresponds to today's GMT midnight."), 'propget'], HRESULT, 'Today',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12906), helpstring("Return time instant that corresponds to tomorrow's GMT midnight."), 'propget'], HRESULT, 'Tomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12907), helpstring("Return time instant that corresponds to today's GMT noon."), 'propget'], HRESULT, 'NoonToday',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12908), helpstring("Return time instant that corresponds to tomorrow's GMT noon."), 'propget'], HRESULT, 'NoonTomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12909), helpstring('Return computed time instance if it occurs.')], HRESULT, 'FindOccurrence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventFindOccurrenceResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12912), helpstring('Return true if computed time instance occurs before or at specified time, return false otherwise.')], HRESULT, 'OccursBefore',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(13701), helpstring('This property is deprecated. Use TimeOffset2 instead. The time offset from the ReferenceTimeInstant.'), 'propget'], HRESULT, 'TimeOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(13701), helpstring('This property is deprecated. Use TimeOffset2 instead. The time offset from the ReferenceTimeInstant.'), 'propput'], HRESULT, 'TimeOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(13703), helpstring('The reference time instant.'), 'propget'], HRESULT, 'ReferenceTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(13703), helpstring('The reference time instant.'), 'propput'], HRESULT, 'ReferenceTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(13704), helpstring('The time offset from the ReferenceTimeInstant. The value is in "TimeUnit" dimension.'), 'propget'], HRESULT, 'TimeOffset2',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(13704), helpstring('The time offset from the ReferenceTimeInstant. The value is in "TimeUnit" dimension.'), 'propput'], HRESULT, 'TimeOffset2',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnEventTimeOffset implementation
##class _IAgCrdnEventTimeOffset_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time instant.'
##        #return pRetVal
##
##    @property
##    def Today(self):
##        "Return time instant that corresponds to today's GMT midnight."
##        #return ppRetVal
##
##    @property
##    def Tomorrow(self):
##        "Return time instant that corresponds to tomorrow's GMT midnight."
##        #return ppRetVal
##
##    @property
##    def NoonToday(self):
##        "Return time instant that corresponds to today's GMT noon."
##        #return ppRetVal
##
##    @property
##    def NoonTomorrow(self):
##        "Return time instant that corresponds to tomorrow's GMT noon."
##        #return ppRetVal
##
##    def FindOccurrence(self):
##        'Return computed time instance if it occurs.'
##        #return ppRetVal
##
##    def OccursBefore(self, Epoch):
##        'Return true if computed time instance occurs before or at specified time, return false otherwise.'
##        #return pRetVal
##
##    def _get(self):
##        'This property is deprecated. Use TimeOffset2 instead. The time offset from the ReferenceTimeInstant.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'This property is deprecated. Use TimeOffset2 instead. The time offset from the ReferenceTimeInstant.'
##    TimeOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The reference time instant.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference time instant.'
##    ReferenceTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def _get(self):
##        'The time offset from the ReferenceTimeInstant. The value is in "TimeUnit" dimension.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The time offset from the ReferenceTimeInstant. The value is in "TimeUnit" dimension.'
##    TimeOffset2 = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnConverge._methods_ = [
]
################################################################
## code template for IAgCrdnConverge implementation
##class IAgCrdnConverge_Impl(object):

IAgCrdnPointRefTo._methods_ = [
    COMMETHOD([helpstring('Sets a new point.')], HRESULT, 'SetPath',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD([helpstring('Sets a new point.')], HRESULT, 'SetPoint',
              ( ['in'], POINTER(IAgCrdnPoint), 'Point' )),
    COMMETHOD([helpstring('Returns the actual point object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.')], HRESULT, 'GetPoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([helpstring('Tests whether the input component and the target component form a cyclic dependency.')], HRESULT, 'HasCyclicDependency',
              ( ['in'], POINTER(IAgCrdnPoint), 'Point' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnPointRefTo implementation
##class IAgCrdnPointRefTo_Impl(object):
##    def SetPath(self, Path):
##        'Sets a new point.'
##        #return 
##
##    def SetPoint(self, Point):
##        'Sets a new point.'
##        #return 
##
##    def GetPoint(self):
##        'Returns the actual point object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.'
##        #return ppRetVal
##
##    def HasCyclicDependency(self, Point):
##        'Tests whether the input component and the target component form a cyclic dependency.'
##        #return pRetVal
##

class _IAgCrdnVectorRefTo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorRefTo'
    _iid_ = GUID('{42A01F63-A4FB-489C-AE33-6357C2EC4E94}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnVectorRefTo._methods_ = [
    COMMETHOD([dispid(701), helpstring('Returns a path to the referenced VGT component.'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(901), helpstring('Sets a new vector.')], HRESULT, 'SetPath',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD([dispid(902), helpstring('Sets a new vector.')], HRESULT, 'SetVector',
              ( ['in'], POINTER(IAgCrdnVector), 'Vector' )),
    COMMETHOD([dispid(903), helpstring('Returns the actual vector object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.')], HRESULT, 'GetVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(904), helpstring('Tests whether the input component and the target component form a cyclic dependency.')], HRESULT, 'HasCyclicDependency',
              ( ['in'], POINTER(IAgCrdnVector), 'Vector' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnVectorRefTo implementation
##class _IAgCrdnVectorRefTo_Impl(object):
##    @property
##    def Path(self):
##        'Returns a path to the referenced VGT component.'
##        #return pRetVal
##
##    def SetPath(self, Path):
##        'Sets a new vector.'
##        #return 
##
##    def SetVector(self, Vector):
##        'Sets a new vector.'
##        #return 
##
##    def GetVector(self):
##        'Returns the actual vector object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.'
##        #return ppRetVal
##
##    def HasCyclicDependency(self, Vector):
##        'Tests whether the input component and the target component form a cyclic dependency.'
##        #return pRetVal
##

IAgCrdnCalcScalarFunction._methods_ = [
    COMMETHOD(['propget', helpstring('Specify whether to use the input scalar calculation or the time elapsed from the input time instant. Set to true to use the scalar.')], HRESULT, 'UseScalar',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether to use the input scalar calculation or the time elapsed from the input time instant. Set to true to use the scalar.')], HRESULT, 'UseScalar',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The input scalar calculation (used if UseScalar is true).')], HRESULT, 'InputScalar',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The input scalar calculation (used if UseScalar is true).')], HRESULT, 'InputScalar',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The input time instant (used if UseScalar is false).')], HRESULT, 'InputTime',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The input time instant (used if UseScalar is false).')], HRESULT, 'InputTime',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The constant coefficient A.')], HRESULT, 'A',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The constant coefficient A.')], HRESULT, 'A',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The constant coefficient B.')], HRESULT, 'B',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The constant coefficient B.')], HRESULT, 'B',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The constant coefficient C.')], HRESULT, 'C',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The constant coefficient C.')], HRESULT, 'C',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The constant coefficient D.')], HRESULT, 'D',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The constant coefficient D.')], HRESULT, 'D',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The array of constant coefficients, whose dimension and units are determined by those of input and output.')], HRESULT, 'Coefficients',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The array of constant coefficients, whose dimension and units are determined by those of input and output.')], HRESULT, 'Coefficients',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The function which will use the input scalar or time instant in some combination with the constant coefficients A, B, C, D.')], HRESULT, 'SelectedFunction',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The function which will use the input scalar or time instant in some combination with the constant coefficients A, B, C, D.')], HRESULT, 'SelectedFunction',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the available function names.')], HRESULT, 'AvailableFunctions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether to inherit the output dimension from the input scalar or time instant.')], HRESULT, 'InheritDimensionFromInput',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether to inherit the output dimension from the input scalar or time instant.')], HRESULT, 'InheritDimensionFromInput',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The output dimension. Use any of STK supported dimensions. This value will be used if InheritDimensionFromInput is false.')], HRESULT, 'OutputDimension',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The output dimension. Use any of STK supported dimensions. This value will be used if InheritDimensionFromInput is false.')], HRESULT, 'OutputDimension',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a unit for the selected output dimension. This is not used for internal computations or reporting/graphing but is needed to unambiguously interpret units of associated coefficients.')], HRESULT, 'OutputUnit',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a unit for the selected output dimension. This is not used for internal computations or reporting/graphing but is needed to unambiguously interpret units of associated coefficients.')], HRESULT, 'OutputUnit',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The Convergence definition, which uses time tolerance to determine when time of extremum is found.')], HRESULT, 'Convergence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConverge)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The Convergence definition, which uses time tolerance to determine when time of extremum is found.')], HRESULT, 'Convergence',
              ( ['in'], POINTER(IAgCrdnConverge), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnCalcScalarFunction implementation
##class IAgCrdnCalcScalarFunction_Impl(object):
##    def _get(self):
##        'Specify whether to use the input scalar calculation or the time elapsed from the input time instant. Set to true to use the scalar.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use the input scalar calculation or the time elapsed from the input time instant. Set to true to use the scalar.'
##    UseScalar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The input scalar calculation (used if UseScalar is true).'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The input scalar calculation (used if UseScalar is true).'
##    InputScalar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The input time instant (used if UseScalar is false).'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The input time instant (used if UseScalar is false).'
##    InputTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The constant coefficient A.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The constant coefficient A.'
##    A = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The constant coefficient B.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The constant coefficient B.'
##    B = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The constant coefficient C.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The constant coefficient C.'
##    C = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The constant coefficient D.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The constant coefficient D.'
##    D = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The array of constant coefficients, whose dimension and units are determined by those of input and output.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The array of constant coefficients, whose dimension and units are determined by those of input and output.'
##    Coefficients = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The function which will use the input scalar or time instant in some combination with the constant coefficients A, B, C, D.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The function which will use the input scalar or time instant in some combination with the constant coefficients A, B, C, D.'
##    SelectedFunction = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def AvailableFunctions(self):
##        'Get the available function names.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify whether to inherit the output dimension from the input scalar or time instant.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to inherit the output dimension from the input scalar or time instant.'
##    InheritDimensionFromInput = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The output dimension. Use any of STK supported dimensions. This value will be used if InheritDimensionFromInput is false.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The output dimension. Use any of STK supported dimensions. This value will be used if InheritDimensionFromInput is false.'
##    OutputDimension = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a unit for the selected output dimension. This is not used for internal computations or reporting/graphing but is needed to unambiguously interpret units of associated coefficients.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a unit for the selected output dimension. This is not used for internal computations or reporting/graphing but is needed to unambiguously interpret units of associated coefficients.'
##    OutputUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##    Convergence = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnEventIntervalSmartInterval(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A smart interval.'
    _iid_ = GUID('{9A3CBCCF-8658-40E0-B570-90CE6B8C39AE}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventIntervalSmartInterval._methods_ = [
    COMMETHOD(['propget', helpstring('The reference interval used to compute start/stop times of this interval if the state of the interval is set to implicit.')], HRESULT, 'ReferenceInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The duration of the interval')], HRESULT, 'DurationAsString',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The duration of the interval')], HRESULT, 'DurationAsString',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A state of the smart interval.')], HRESULT, 'State',
              ( ['out', 'retval'], POINTER(AgECrdnSmartIntervalState), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('A state of the smart interval.')], HRESULT, 'State',
              ( ['in'], AgECrdnSmartIntervalState, 'pRetVal' )),
    COMMETHOD([helpstring('Set the reference interval and changes the state to Implicit.')], HRESULT, 'SetImplicitInterval',
              ( ['in'], POINTER(IAgCrdnEventInterval), 'EventInterval' )),
    COMMETHOD([helpstring("Finds a start time of the interval. An exception is thrown if the start time cannot be determined from the interval's current state.")], HRESULT, 'FindStartTime',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([helpstring("Finds a stop time of the interval. An exception is thrown if the stop time cannot be determined from the interval's current state.")], HRESULT, 'FindStopTime',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([helpstring('Returns a copy of the start epoch. Changes to the epoch will not affect the state of the interval.')], HRESULT, 'GetStartEpoch',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventSmartEpoch)), 'ppRetVal' )),
    COMMETHOD([helpstring('Sets a start of the interval using specified epoch component.')], HRESULT, 'SetStartEpoch',
              ( ['in'], POINTER(IAgCrdnEventSmartEpoch), 'StartEpoch' )),
    COMMETHOD([helpstring('Returns a copy of the stop epoch. Changes to the epoch will not affect the state of the interval.')], HRESULT, 'GetStopEpoch',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventSmartEpoch)), 'ppRetVal' )),
    COMMETHOD([helpstring('Sets a stop of the interval using specified epoch component.')], HRESULT, 'SetStopEpoch',
              ( ['in'], POINTER(IAgCrdnEventSmartEpoch), 'StopEpoch' )),
    COMMETHOD([helpstring("Set the interval's start and the stop times changes the interval's state to explicit. Exception is thrown if specified start time is greater than stop time.")], HRESULT, 'SetExplicitInterval',
              ( ['in'], VARIANT, 'Start' ),
              ( ['in'], VARIANT, 'Stop' )),
    COMMETHOD([helpstring("Sets the interval's start and stop epochs as two smart epoch components. Exception is thrown if specified start time is greater than stop time.")], HRESULT, 'SetStartAndStopEpochs',
              ( ['in'], POINTER(IAgCrdnEventSmartEpoch), 'RefStartEpoch' ),
              ( ['in'], POINTER(IAgCrdnEventSmartEpoch), 'RefStopEpoch' )),
    COMMETHOD([helpstring("Sets the interval's start and stop epochs as explicit times. Exception is thrown if specified start time is greater than stop time.")], HRESULT, 'SetStartAndStopTimes',
              ( ['in'], VARIANT, 'StartTime' ),
              ( ['in'], VARIANT, 'StopTime' )),
    COMMETHOD([helpstring("Sets the interval's start epoch and the interval's duration.")], HRESULT, 'SetStartEpochAndDuration',
              ( ['in'], POINTER(IAgCrdnEventSmartEpoch), 'RefStartEpoch' ),
              ( ['in'], BSTR, 'DurationStr' )),
    COMMETHOD([helpstring("Sets the interval's start time and the interval's duration.")], HRESULT, 'SetStartTimeAndDuration',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], BSTR, 'DurationStr' )),
]
################################################################
## code template for IAgCrdnEventIntervalSmartInterval implementation
##class IAgCrdnEventIntervalSmartInterval_Impl(object):
##    @property
##    def ReferenceInterval(self):
##        'The reference interval used to compute start/stop times of this interval if the state of the interval is set to implicit.'
##        #return ppRetVal
##
##    def _get(self):
##        'The duration of the interval'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The duration of the interval'
##    DurationAsString = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A state of the smart interval.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A state of the smart interval.'
##    State = property(_get, _set, doc = _set.__doc__)
##
##    def SetImplicitInterval(self, EventInterval):
##        'Set the reference interval and changes the state to Implicit.'
##        #return 
##
##    def FindStartTime(self):
##        "Finds a start time of the interval. An exception is thrown if the start time cannot be determined from the interval's current state."
##        #return pRetVal
##
##    def FindStopTime(self):
##        "Finds a stop time of the interval. An exception is thrown if the stop time cannot be determined from the interval's current state."
##        #return pRetVal
##
##    def GetStartEpoch(self):
##        'Returns a copy of the start epoch. Changes to the epoch will not affect the state of the interval.'
##        #return ppRetVal
##
##    def SetStartEpoch(self, StartEpoch):
##        'Sets a start of the interval using specified epoch component.'
##        #return 
##
##    def GetStopEpoch(self):
##        'Returns a copy of the stop epoch. Changes to the epoch will not affect the state of the interval.'
##        #return ppRetVal
##
##    def SetStopEpoch(self, StopEpoch):
##        'Sets a stop of the interval using specified epoch component.'
##        #return 
##
##    def SetExplicitInterval(self, Start, Stop):
##        "Set the interval's start and the stop times changes the interval's state to explicit. Exception is thrown if specified start time is greater than stop time."
##        #return 
##
##    def SetStartAndStopEpochs(self, RefStartEpoch, RefStopEpoch):
##        "Sets the interval's start and stop epochs as two smart epoch components. Exception is thrown if specified start time is greater than stop time."
##        #return 
##
##    def SetStartAndStopTimes(self, StartTime, StopTime):
##        "Sets the interval's start and stop epochs as explicit times. Exception is thrown if specified start time is greater than stop time."
##        #return 
##
##    def SetStartEpochAndDuration(self, RefStartEpoch, DurationStr):
##        "Sets the interval's start epoch and the interval's duration."
##        #return 
##
##    def SetStartTimeAndDuration(self, Epoch, DurationStr):
##        "Sets the interval's start time and the interval's duration."
##        #return 
##

IAgCrdnVectorProjection._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a source vector.')], HRESULT, 'Source',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference plane.')], HRESULT, 'ReferencePlane',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneRefTo)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVectorProjection implementation
##class IAgCrdnVectorProjection_Impl(object):
##    @property
##    def Source(self):
##        'Specify a source vector.'
##        #return ppRetVal
##
##    @property
##    def ReferencePlane(self):
##        'Specify a reference plane.'
##        #return ppRetVal
##

IAgCrdnCalcScalarAngle._methods_ = [
    COMMETHOD(['propget', helpstring('The input angle, which is a VGT angle component. Note angle computation in VGT may involve more than just angular displacement value: in VGT angles may be drawn in 3D which requires knowledge and evaluation of supporting vectors.')], HRESULT, 'InputAngle',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngle)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The input angle, which is a VGT angle component. Note angle computation in VGT may involve more than just angular displacement value: in VGT angles may be drawn in 3D which requires knowledge and evaluation of supporting vectors.')], HRESULT, 'InputAngle',
              ( ['in'], POINTER(IAgCrdnAngle), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnCalcScalarAngle implementation
##class IAgCrdnCalcScalarAngle_Impl(object):
##    def _get(self):
##        'The input angle, which is a VGT angle component. Note angle computation in VGT may involve more than just angular displacement value: in VGT angles may be drawn in 3D which requires knowledge and evaluation of supporting vectors.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The input angle, which is a VGT angle component. Note angle computation in VGT may involve more than just angular displacement value: in VGT angles may be drawn in 3D which requires knowledge and evaluation of supporting vectors.'
##    InputAngle = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnAxesSamplingInterval._methods_ = [
    COMMETHOD(['propget', helpstring('A time array associated with the interval.')], HRESULT, 'Times',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('An array of 4-tuples each tuple representing the orientation of the axes as a quaternion (q1,q2,q3,q4).')], HRESULT, 'Quaternions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('An array of angular velocities.')], HRESULT, 'Velocities',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The start time of the interval.')], HRESULT, 'Start',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The stop time of the interval.')], HRESULT, 'Stop',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAxesSamplingInterval implementation
##class IAgCrdnAxesSamplingInterval_Impl(object):
##    @property
##    def Times(self):
##        'A time array associated with the interval.'
##        #return ppRetVal
##
##    @property
##    def Quaternions(self):
##        'An array of 4-tuples each tuple representing the orientation of the axes as a quaternion (q1,q2,q3,q4).'
##        #return ppRetVal
##
##    @property
##    def Velocities(self):
##        'An array of angular velocities.'
##        #return ppRetVal
##
##    @property
##    def Start(self):
##        'The start time of the interval.'
##        #return pRetVal
##
##    @property
##    def Stop(self):
##        'The stop time of the interval.'
##        #return pRetVal
##

_IAgCrdnEventFindOccurrenceResult._methods_ = [
    COMMETHOD([dispid(19801), helpstring('Indicates whether the result object is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(19803), helpstring('The epoch at which the event occurs.'), 'propget'], HRESULT, 'Epoch',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnEventFindOccurrenceResult implementation
##class _IAgCrdnEventFindOccurrenceResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Epoch(self):
##        'The epoch at which the event occurs.'
##        #return pRetVal
##

_IAgCrdnEventIntervalListFactory._methods_ = [
    COMMETHOD([dispid(19601), helpstring('Create and register an interval list using specified name, description, and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnEventIntervalListType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(19619), helpstring('This method is deprecated. Use CreateEventIntervalListFile instead. Create an interval list loaded from specified interval file.')], HRESULT, 'CreateEventIntervalListFromFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'Filepath' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(19620), helpstring('Create an interval list by merging two constituent interval lists using specified logical operation.')], HRESULT, 'CreateEventIntervalListMerged',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(19626), helpstring('Create an interval list by filtering intervals from original interval list using specified filtering method.')], HRESULT, 'CreateEventIntervalListFiltered',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(19622), helpstring('Create an interval list containing intervals during which specified condition is satisfied.')], HRESULT, 'CreateEventIntervalListCondition',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(19623), helpstring('Create an interval list defined by scaling every interval in original interval list using either absolute or relative scale.')], HRESULT, 'CreateEventIntervalListScaled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(19624), helpstring('Create an interval list recorded at the target clock location by performing signal transmission of original interval list between base and target clock locations.')], HRESULT, 'CreateEventIntervalListSignaled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(19625), helpstring('Create an interval list defined by shifting the specified reference interval list by a fixed time offset.')], HRESULT, 'CreateEventIntervalListTimeOffset',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(19617), helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnEventIntervalListType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(19628), helpstring('Create an interval list based on specified interval file.')], HRESULT, 'CreateEventIntervalListFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'Filepath' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(19629), helpstring('Interval list defined by time ordered non-overlapping intervals each explicitly specified by its start and stop times. Stop date/time is required to be at or after start for each interval.')], HRESULT, 'CreateEventIntervalListFixed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnEventIntervalListFactory implementation
##class _IAgCrdnEventIntervalListFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Create and register an interval list using specified name, description, and type.'
##        #return ppRetVal
##
##    def CreateEventIntervalListFromFile(self, Name, Description, Filepath):
##        'This method is deprecated. Use CreateEventIntervalListFile instead. Create an interval list loaded from specified interval file.'
##        #return ppRetVal
##
##    def CreateEventIntervalListMerged(self, Name, Description):
##        'Create an interval list by merging two constituent interval lists using specified logical operation.'
##        #return ppRetVal
##
##    def CreateEventIntervalListFiltered(self, Name, Description):
##        'Create an interval list by filtering intervals from original interval list using specified filtering method.'
##        #return ppRetVal
##
##    def CreateEventIntervalListCondition(self, Name, Description):
##        'Create an interval list containing intervals during which specified condition is satisfied.'
##        #return ppRetVal
##
##    def CreateEventIntervalListScaled(self, Name, Description):
##        'Create an interval list defined by scaling every interval in original interval list using either absolute or relative scale.'
##        #return ppRetVal
##
##    def CreateEventIntervalListSignaled(self, Name, Description):
##        'Create an interval list recorded at the target clock location by performing signal transmission of original interval list between base and target clock locations.'
##        #return ppRetVal
##
##    def CreateEventIntervalListTimeOffset(self, Name, Description):
##        'Create an interval list defined by shifting the specified reference interval list by a fixed time offset.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##
##    def CreateEventIntervalListFile(self, Name, Description, Filepath):
##        'Create an interval list based on specified interval file.'
##        #return ppRetVal
##
##    def CreateEventIntervalListFixed(self, Name, Description):
##        'Interval list defined by time ordered non-overlapping intervals each explicitly specified by its start and stop times. Stop date/time is required to be at or after start for each interval.'
##        #return ppRetVal
##

IAgCrdnVectorPlugin._methods_ = [
    COMMETHOD(['propget', helpstring('A programmatic ID associated with the component.')], HRESULT, 'ProgID',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Plugin's Display Name associated with the COM plugin.")], HRESULT, 'DisplayName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('An array of names of the properties that can be used to configure the plugin.')], HRESULT, 'AvailableProperties',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Reset the plugin.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring('The method is used to set the plugin properties. The method throws an exception if the specified property does not exist, invalid value was specified or the specified property is read-only.')], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([helpstring('The method reads a value of the specified plugin property. The method throws an exception if the property does not exist.')], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorPlugin implementation
##class IAgCrdnVectorPlugin_Impl(object):
##    @property
##    def ProgID(self):
##        'A programmatic ID associated with the component.'
##        #return pRetVal
##
##    @property
##    def DisplayName(self):
##        "Plugin's Display Name associated with the COM plugin."
##        #return pRetVal
##
##    @property
##    def AvailableProperties(self):
##        'An array of names of the properties that can be used to configure the plugin.'
##        #return ppRetVal
##
##    def Reset(self):
##        'Reset the plugin.'
##        #return 
##
##    def SetProperty(self, Name, Value):
##        'The method is used to set the plugin properties. The method throws an exception if the specified property does not exist, invalid value was specified or the specified property is read-only.'
##        #return 
##
##    def GetProperty(self, Name):
##        'The method reads a value of the specified plugin property. The method throws an exception if the property does not exist.'
##        #return pRetVal
##

_IAgCrdnAxesPlugin._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1701), helpstring('Returns a type of the axes object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAxesType), 'pRetVal' )),
    COMMETHOD([dispid(1706), helpstring('Find an angular velocity and orientation in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1707), helpstring('Find an orientation in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1708), helpstring('Returns an object that allows modifying the axes labels.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(26801), helpstring('A programmatic ID associated with the component.'), 'propget'], HRESULT, 'ProgID',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26807), helpstring("Plugin's Display Name associated with the COM plugin."), 'propget'], HRESULT, 'DisplayName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26805), helpstring('An array of names of the properties that can be used to configure the plugin.'), 'propget'], HRESULT, 'AvailableProperties',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(26803), helpstring('Reset the plugin.')], HRESULT, 'Reset'),
    COMMETHOD([dispid(26804), helpstring('The method is used to set the plugin properties. The method throws an exception if the specified property does not exist, invalid value was specified or the specified property is read-only.')], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(26806), helpstring('The method reads a value of the specified plugin property. The method throws an exception if the property does not exist.')], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1709), helpstring('Returns the X axis of the component.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1710), helpstring('Returns the Y axis of the component.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1711), helpstring('Returns the Z axis of the component.'), 'propget'], HRESULT, 'Z',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1712), helpstring('Transforms the input vector from this axes into the output axes.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1713), helpstring("Transforms the input vector and vector's rate from this axes into the output axes.")], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'RateInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAxesPlugin implementation
##class _IAgCrdnAxesPlugin_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the axes object.'
##        #return pRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Find an angular velocity and orientation in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Find an orientation in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        'Returns an object that allows modifying the axes labels.'
##        #return ppRetVal
##
##    @property
##    def ProgID(self):
##        'A programmatic ID associated with the component.'
##        #return pRetVal
##
##    @property
##    def DisplayName(self):
##        "Plugin's Display Name associated with the COM plugin."
##        #return pRetVal
##
##    @property
##    def AvailableProperties(self):
##        'An array of names of the properties that can be used to configure the plugin.'
##        #return ppRetVal
##
##    def Reset(self):
##        'Reset the plugin.'
##        #return 
##
##    def SetProperty(self, Name, Value):
##        'The method is used to set the plugin properties. The method throws an exception if the specified property does not exist, invalid value was specified or the specified property is read-only.'
##        #return 
##
##    def GetProperty(self, Name):
##        'The method reads a value of the specified plugin property. The method throws an exception if the property does not exist.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    @property
##    def X(self):
##        'Returns the X axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Y(self):
##        'Returns the Y axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Z(self):
##        'Returns the Z axis of the component.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputAxes, VectorInMyAxes):
##        'Transforms the input vector from this axes into the output axes.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputAxes, VectorInMyAxes, RateInMyAxes):
##        "Transforms the input vector and vector's rate from this axes into the output axes."
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

_IAgCrdnVolumeFromCalc._methods_ = [
    COMMETHOD([dispid(32901), helpstring('Get the operation from the condition that determines how the bounds are considered. The operation can be set to define satisfaction when the scalar is above minimum, below maximum, between minimum and maximum or outside minimum and maximum.'), 'propget'], HRESULT, 'Operation',
              ( ['out', 'retval'], POINTER(AgECrdnConditionThresholdOption), 'pRetVal' )),
    COMMETHOD([dispid(32901), helpstring('Get the operation from the condition that determines how the bounds are considered. The operation can be set to define satisfaction when the scalar is above minimum, below maximum, between minimum and maximum or outside minimum and maximum.'), 'propput'], HRESULT, 'Operation',
              ( ['in'], AgECrdnConditionThresholdOption, 'pRetVal' )),
    COMMETHOD([dispid(32902), helpstring('Get the minimum bound value from the bounds. Call SetMinimum to apply changes.')], HRESULT, 'GetMinimum',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity)), 'ppRetVal' )),
    COMMETHOD([dispid(32903), helpstring('Set the minimum bound value for the bounds.')], HRESULT, 'SetMinimum',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity), 'Value' )),
    COMMETHOD([dispid(32904), helpstring('Get the maximum bound value from the bounds. Call SetMaximum to apply changes.')], HRESULT, 'GetMaximum',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity)), 'ppRetVal' )),
    COMMETHOD([dispid(32905), helpstring('Set the maximum bound value for the condition.')], HRESULT, 'SetMaximum',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity), 'Value' )),
    COMMETHOD([dispid(32906), helpstring('Set the min/max bounds. Throws an exception if the minimum is greater than maximum.')], HRESULT, 'Set',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity), 'Min' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity), 'Max' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVolumeFromCalc implementation
##class _IAgCrdnVolumeFromCalc_Impl(object):
##    def _get(self):
##        'Get the operation from the condition that determines how the bounds are considered. The operation can be set to define satisfaction when the scalar is above minimum, below maximum, between minimum and maximum or outside minimum and maximum.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the operation from the condition that determines how the bounds are considered. The operation can be set to define satisfaction when the scalar is above minimum, below maximum, between minimum and maximum or outside minimum and maximum.'
##    Operation = property(_get, _set, doc = _set.__doc__)
##
##    def GetMinimum(self):
##        'Get the minimum bound value from the bounds. Call SetMinimum to apply changes.'
##        #return ppRetVal
##
##    def SetMinimum(self, Value):
##        'Set the minimum bound value for the bounds.'
##        #return 
##
##    def GetMaximum(self):
##        'Get the maximum bound value from the bounds. Call SetMaximum to apply changes.'
##        #return ppRetVal
##
##    def SetMaximum(self, Value):
##        'Set the maximum bound value for the condition.'
##        #return 
##
##    def Set(self, Min, Max):
##        'Set the min/max bounds. Throws an exception if the minimum is greater than maximum.'
##        #return 
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnEventArrayFiltered(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventArrayFiltered'
    _iid_ = GUID('{5D9A771F-480D-485E-B4EC-D4F331891639}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgECrdnEventArrayFilterType'
eCrdnEventArrayFilterTypeSkipTimeStep = 0
eCrdnEventArrayFilterTypeSkipCount = 1
AgECrdnEventArrayFilterType = c_int # enum
_IAgCrdnEventArrayFiltered._methods_ = [
    COMMETHOD([dispid(18302), helpstring('Return the type of time array.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventArrayType), 'pRetVal' )),
    COMMETHOD([dispid(18301), helpstring('Return computed array of times.')], HRESULT, 'FindTimes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnFindTimesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(27401), helpstring('The original time array.'), 'propget'], HRESULT, 'OriginalTimeArray',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([dispid(27401), helpstring('The original time array.'), 'propput'], HRESULT, 'OriginalTimeArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'ppRetVal' )),
    COMMETHOD([dispid(27402), helpstring('Skip Time Steps filter type omits from filtered time array any times that fall within specified time step of last accepted time sample. Skip Count filter type omits specified number of time samples since last accepted time sample...'), 'propget'], HRESULT, 'FilterType',
              ( ['out', 'retval'], POINTER(AgECrdnEventArrayFilterType), 'pRetVal' )),
    COMMETHOD([dispid(27402), helpstring('Skip Time Steps filter type omits from filtered time array any times that fall within specified time step of last accepted time sample. Skip Count filter type omits specified number of time samples since last accepted time sample...'), 'propput'], HRESULT, 'FilterType',
              ( ['in'], AgECrdnEventArrayFilterType, 'pRetVal' )),
    COMMETHOD([dispid(27406), helpstring('Specify the number of times skipped between accepted samples when FilterType is set to Skip Count...'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(27406), helpstring('Specify the number of times skipped between accepted samples when FilterType is set to Skip Count...'), 'propput'], HRESULT, 'Count',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(27404), helpstring('The number of steps skipped between accepted samples when FilterType is set to Skip Time Steps.'), 'propget'], HRESULT, 'Step',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(27404), helpstring('The number of steps skipped between accepted samples when FilterType is set to Skip Time Steps.'), 'propput'], HRESULT, 'Step',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(27405), helpstring('If set to true, includes stop times of each interval from original time array.'), 'propget'], HRESULT, 'IncludeIntervalStopTimes',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(27405), helpstring('If set to true, includes stop times of each interval from original time array.'), 'propput'], HRESULT, 'IncludeIntervalStopTimes',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventArrayFiltered implementation
##class _IAgCrdnEventArrayFiltered_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time array.'
##        #return pRetVal
##
##    def FindTimes(self):
##        'Return computed array of times.'
##        #return ppRetVal
##
##    def _get(self):
##        'The original time array.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original time array.'
##    OriginalTimeArray = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Skip Time Steps filter type omits from filtered time array any times that fall within specified time step of last accepted time sample. Skip Count filter type omits specified number of time samples since last accepted time sample...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Skip Time Steps filter type omits from filtered time array any times that fall within specified time step of last accepted time sample. Skip Count filter type omits specified number of time samples since last accepted time sample...'
##    FilterType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify the number of times skipped between accepted samples when FilterType is set to Skip Count...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify the number of times skipped between accepted samples when FilterType is set to Skip Count...'
##    Count = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The number of steps skipped between accepted samples when FilterType is set to Skip Time Steps.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The number of steps skipped between accepted samples when FilterType is set to Skip Time Steps.'
##    Step = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'If set to true, includes stop times of each interval from original time array.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'If set to true, includes stop times of each interval from original time array.'
##    IncludeIntervalStopTimes = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnCalcScalarFactory._methods_ = [
    COMMETHOD(['propget', helpstring('An array of display names associated with available scalar calculation plugins. The elements of the array are strings. Display names are used to create Calc scalars based on COM plugins using CreateCalcScalarPluginFromDisplayName method.')], HRESULT, 'AvailableCalcScalarPluginDisplayNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates and registers a scalar calculation using specified name, description, and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnCalcScalarType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a scalar calculation equal to angular displacement obtained from any angle in VGT.')], HRESULT, 'CreateCalcScalarAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a scalar calculation defined by evaluating the input scalar calculation at the specified reference time instant.')], HRESULT, 'CreateCalcScalarFixedAtTimeInstant',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a scalar calculation of constant value of the specified dimension.')], HRESULT, 'CreateCalcScalarConstant',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a scalar calculation defined from a time-dependent data element from STK data providers available for parent STK object.')], HRESULT, 'CreateCalcScalarDataElement',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'DataProvider' ),
              ( ['in'], BSTR, 'ElementName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a scalar calculation defined from a time-dependent data element from STK data providers available for parent STK object.')], HRESULT, 'CreateCalcScalarDataElementWithGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'DataProvider' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in'], BSTR, 'ElementName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a scalar calculation that is the derivative of an input scalar calculation.')], HRESULT, 'CreateCalcScalarDerivative',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a scalar calculation that is the time elapsed since a reference time instant.')], HRESULT, 'CreateCalcScalarElapsedTime',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create scalar calculation specified by external data file.')], HRESULT, 'CreateCalcScalarFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'Filepath' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a scalar calculation that is defined by performing the specified function on the input scalar or time instant.')], HRESULT, 'CreateCalcScalarFunction',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a scalar calculation that is the integral of an input scalar computed with respect to time using one of the specified numerical methods and using one of the specified accumulation types.')], HRESULT, 'CreateCalcScalarIntegral',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a scalar calculation that is defined by performing a function(x,y) on two scalar arguments.')], HRESULT, 'CreateCalcScalarFunction2Var',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a scalar calculation equal to the magnitude of a specified vector.')], HRESULT, 'CreateCalcScalarVectorMagnitude',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([helpstring("Create a scalar calculation based on a COM plugin. For information how to implement and register VGT plugins, see <topic name='Engine Plugins: COM-based Engine Plugin Components'>COM-based Engine Plugins.</topic>.")], HRESULT, 'CreateCalcScalarPluginFromDisplayName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'DisplayName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnCalcScalarType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Create a calc scalar calculation that uses scripted algorithm in MATLAB (.m or .dll), Perl or VBScript to define its value and rate.')], HRESULT, 'CreateCalcScalarFromCustomScript',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'Filepath' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a calc scalar calculation that is surface distance along the specified central body ellipsoid between two points (or their respective projections if specified at altitude).')], HRESULT, 'CreateCalcScalarSurfaceDistanceBetweenPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnCalcScalarFactory implementation
##class IAgCrdnCalcScalarFactory_Impl(object):
##    @property
##    def AvailableCalcScalarPluginDisplayNames(self):
##        'An array of display names associated with available scalar calculation plugins. The elements of the array are strings. Display names are used to create Calc scalars based on COM plugins using CreateCalcScalarPluginFromDisplayName method.'
##        #return ppRetVal
##
##    def Create(self, Name, Description, Type):
##        'Creates and registers a scalar calculation using specified name, description, and type.'
##        #return ppRetVal
##
##    def CreateCalcScalarAngle(self, Name, Description):
##        'Create a scalar calculation equal to angular displacement obtained from any angle in VGT.'
##        #return ppRetVal
##
##    def CreateCalcScalarFixedAtTimeInstant(self, Name, Description):
##        'Create a scalar calculation defined by evaluating the input scalar calculation at the specified reference time instant.'
##        #return ppRetVal
##
##    def CreateCalcScalarConstant(self, Name, Description):
##        'Create a scalar calculation of constant value of the specified dimension.'
##        #return ppRetVal
##
##    def CreateCalcScalarDataElement(self, Name, Description, DataProvider, ElementName):
##        'Create a scalar calculation defined from a time-dependent data element from STK data providers available for parent STK object.'
##        #return ppRetVal
##
##    def CreateCalcScalarDataElementWithGroup(self, Name, Description, DataProvider, GroupName, ElementName):
##        'Create a scalar calculation defined from a time-dependent data element from STK data providers available for parent STK object.'
##        #return ppRetVal
##
##    def CreateCalcScalarDerivative(self, Name, Description):
##        'Create a scalar calculation that is the derivative of an input scalar calculation.'
##        #return ppRetVal
##
##    def CreateCalcScalarElapsedTime(self, Name, Description):
##        'Create a scalar calculation that is the time elapsed since a reference time instant.'
##        #return ppRetVal
##
##    def CreateCalcScalarFile(self, Name, Description, Filepath):
##        'Create scalar calculation specified by external data file.'
##        #return ppRetVal
##
##    def CreateCalcScalarFunction(self, Name, Description):
##        'Create a scalar calculation that is defined by performing the specified function on the input scalar or time instant.'
##        #return ppRetVal
##
##    def CreateCalcScalarIntegral(self, Name, Description):
##        'Create a scalar calculation that is the integral of an input scalar computed with respect to time using one of the specified numerical methods and using one of the specified accumulation types.'
##        #return ppRetVal
##
##    def CreateCalcScalarFunction2Var(self, Name, Description):
##        'Create a scalar calculation that is defined by performing a function(x,y) on two scalar arguments.'
##        #return ppRetVal
##
##    def CreateCalcScalarVectorMagnitude(self, Name, Description):
##        'Create a scalar calculation equal to the magnitude of a specified vector.'
##        #return ppRetVal
##
##    def CreateCalcScalarPluginFromDisplayName(self, Name, Description, DisplayName):
##        "Create a scalar calculation based on a COM plugin. For information how to implement and register VGT plugins, see <topic name='Engine Plugins: COM-based Engine Plugin Components'>COM-based Engine Plugins.</topic>."
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##
##    def CreateCalcScalarFromCustomScript(self, Name, Description, Filepath):
##        'Create a calc scalar calculation that uses scripted algorithm in MATLAB (.m or .dll), Perl or VBScript to define its value and rate.'
##        #return ppRetVal
##
##    def CreateCalcScalarSurfaceDistanceBetweenPoints(self, Name, Description):
##        'Create a calc scalar calculation that is surface distance along the specified central body ellipsoid between two points (or their respective projections if specified at altitude).'
##        #return ppRetVal
##

IAgCrdnVectorScaled._methods_ = [
    COMMETHOD(['propget', helpstring('A vector being scaled.')], HRESULT, 'ReferenceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A scaling multiple.')], HRESULT, 'Scale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('A scaling multiple.')], HRESULT, 'Scale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Controls whether to convert the reference vector to a unit vector before scalling.')], HRESULT, 'IsNormalized',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Controls whether to convert the reference vector to a unit vector before scalling.')], HRESULT, 'IsNormalized',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorScaled implementation
##class IAgCrdnVectorScaled_Impl(object):
##    @property
##    def ReferenceVector(self):
##        'A vector being scaled.'
##        #return ppRetVal
##
##    def _get(self):
##        'A scaling multiple.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A scaling multiple.'
##    Scale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Controls whether to convert the reference vector to a unit vector before scalling.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Controls whether to convert the reference vector to a unit vector before scalling.'
##    IsNormalized = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnPlaneTriad._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a point A.')], HRESULT, 'PointA',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a point B.')], HRESULT, 'PointB',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference point.')], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify an angle measured from X (Axis 1) away from Y (Axis 2).')], HRESULT, 'RotationOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify an angle measured from X (Axis 1) away from Y (Axis 2).')], HRESULT, 'RotationOffset',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnPlaneTriad implementation
##class IAgCrdnPlaneTriad_Impl(object):
##    @property
##    def PointA(self):
##        'Specify a point A.'
##        #return ppRetVal
##
##    @property
##    def PointB(self):
##        'Specify a point B.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Specify a reference point.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify an angle measured from X (Axis 1) away from Y (Axis 2).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an angle measured from X (Axis 1) away from Y (Axis 2).'
##    RotationOffset = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnVectorRefTo._methods_ = [
    COMMETHOD([helpstring('Sets a new vector.')], HRESULT, 'SetPath',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD([helpstring('Sets a new vector.')], HRESULT, 'SetVector',
              ( ['in'], POINTER(IAgCrdnVector), 'Vector' )),
    COMMETHOD([helpstring('Returns the actual vector object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.')], HRESULT, 'GetVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([helpstring('Tests whether the input component and the target component form a cyclic dependency.')], HRESULT, 'HasCyclicDependency',
              ( ['in'], POINTER(IAgCrdnVector), 'Vector' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorRefTo implementation
##class IAgCrdnVectorRefTo_Impl(object):
##    def SetPath(self, Path):
##        'Sets a new vector.'
##        #return 
##
##    def SetVector(self, Vector):
##        'Sets a new vector.'
##        #return 
##
##    def GetVector(self):
##        'Returns the actual vector object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.'
##        #return ppRetVal
##
##    def HasCyclicDependency(self, Vector):
##        'Tests whether the input component and the target component form a cyclic dependency.'
##        #return pRetVal
##

_IAgCrdnFindTimesResult._methods_ = [
    COMMETHOD([dispid(18201), helpstring('Indicates whether the result object is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(18203), helpstring('A collection of found intervals.'), 'propget'], HRESULT, 'Intervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(18205), helpstring('The start time of the entire interval span.'), 'propget'], HRESULT, 'Start',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(18206), helpstring('The stop time of the entire interval span.'), 'propget'], HRESULT, 'Stop',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(18204), helpstring('An array of found times.'), 'propget'], HRESULT, 'Times',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnFindTimesResult implementation
##class _IAgCrdnFindTimesResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Intervals(self):
##        'A collection of found intervals.'
##        #return ppRetVal
##
##    @property
##    def Start(self):
##        'The start time of the entire interval span.'
##        #return pRetVal
##
##    @property
##    def Stop(self):
##        'The stop time of the entire interval span.'
##        #return pRetVal
##
##    @property
##    def Times(self):
##        'An array of found times.'
##        #return ppRetVal
##

class _IAgCrdnConditionScalarBounds(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnConditionScalarBounds'
    _iid_ = GUID('{AFD205BC-C0CE-4179-9405-C0A5D82D86AA}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnConditionScalarBounds._methods_ = [
    COMMETHOD([dispid(18104), helpstring('Returns the type of condition.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnConditionType), 'pRetVal' )),
    COMMETHOD([dispid(18102), helpstring('Returns result of evaluating continuously varying condition metric at the specified time, used for detecting condition crossings.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(18103), helpstring('Returns result of evaluating continuously varying condition metric and its rate of change at the specified time, used for detecting condition crossings.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(28001), helpstring('Get the scalar calculation from the condition.'), 'propget'], HRESULT, 'Scalar',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(28001), helpstring('Get the scalar calculation from the condition.'), 'propput'], HRESULT, 'Scalar',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD([dispid(28004), helpstring('Get the operation from the condition that determines how the bounds are considered. The operation can be set to define satisfaction when the scalar is above minimum, below maximum, between minimum and maximum or outside minimum and maximum.'), 'propget'], HRESULT, 'Operation',
              ( ['out', 'retval'], POINTER(AgECrdnConditionThresholdOption), 'pRetVal' )),
    COMMETHOD([dispid(28004), helpstring('Get the operation from the condition that determines how the bounds are considered. The operation can be set to define satisfaction when the scalar is above minimum, below maximum, between minimum and maximum or outside minimum and maximum.'), 'propput'], HRESULT, 'Operation',
              ( ['in'], AgECrdnConditionThresholdOption, 'pRetVal' )),
    COMMETHOD([dispid(28006), helpstring('Get the minimum bound value from the condition. Call SetMinimum to apply changes.')], HRESULT, 'GetMinimum',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity)), 'ppRetVal' )),
    COMMETHOD([dispid(28007), helpstring('Set the minimum bound value for the condition.')], HRESULT, 'SetMinimum',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity), 'Value' )),
    COMMETHOD([dispid(28008), helpstring('Get the maximum bound value from the condition. Call SetMaximum to apply changes.')], HRESULT, 'GetMaximum',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity)), 'ppRetVal' )),
    COMMETHOD([dispid(28009), helpstring('Set the maximum bound value for the condition.')], HRESULT, 'SetMaximum',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity), 'Value' )),
    COMMETHOD([dispid(28005), helpstring('Set the min/max bounds. Throws an exception if the minimum is greater than maximum.')], HRESULT, 'Set',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity), 'Min' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgQuantity), 'Max' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnConditionScalarBounds implementation
##class _IAgCrdnConditionScalarBounds_Impl(object):
##    @property
##    def Type(self):
##        'Returns the type of condition.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Returns result of evaluating continuously varying condition metric at the specified time, used for detecting condition crossings.'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Returns result of evaluating continuously varying condition metric and its rate of change at the specified time, used for detecting condition crossings.'
##        #return ppRetVal
##
##    def _get(self):
##        'Get the scalar calculation from the condition.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the scalar calculation from the condition.'
##    Scalar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the operation from the condition that determines how the bounds are considered. The operation can be set to define satisfaction when the scalar is above minimum, below maximum, between minimum and maximum or outside minimum and maximum.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the operation from the condition that determines how the bounds are considered. The operation can be set to define satisfaction when the scalar is above minimum, below maximum, between minimum and maximum or outside minimum and maximum.'
##    Operation = property(_get, _set, doc = _set.__doc__)
##
##    def GetMinimum(self):
##        'Get the minimum bound value from the condition. Call SetMinimum to apply changes.'
##        #return ppRetVal
##
##    def SetMinimum(self, Value):
##        'Set the minimum bound value for the condition.'
##        #return 
##
##    def GetMaximum(self):
##        'Get the maximum bound value from the condition. Call SetMaximum to apply changes.'
##        #return ppRetVal
##
##    def SetMaximum(self, Value):
##        'Set the maximum bound value for the condition.'
##        #return 
##
##    def Set(self, Min, Max):
##        'Set the min/max bounds. Throws an exception if the minimum is greater than maximum.'
##        #return 
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

_IAgCrdnEventIntervalFixed._methods_ = [
    COMMETHOD([dispid(13411), helpstring('Return the type of interval.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalType), 'pRetVal' )),
    COMMETHOD([dispid(13404), helpstring('The start description.'), 'propget'], HRESULT, 'LabelStartDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13405), helpstring('The stop description.'), 'propget'], HRESULT, 'LabelStopDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13406), helpstring('A label associated with the interval start.'), 'propget'], HRESULT, 'LabelStart',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13407), helpstring('A label associated with the interval stop.'), 'propget'], HRESULT, 'LabelStop',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13408), helpstring('Return computed interval if it exists.')], HRESULT, 'FindInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13409), helpstring('Determine if specified time falls within computed interval if it exists.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(14503), helpstring('The start time of the interval.'), 'propget'], HRESULT, 'StartTime',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(14504), helpstring('The stop time of the interval.'), 'propget'], HRESULT, 'StopTime',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(14505), helpstring("Set interval's start and stop times.")], HRESULT, 'SetInterval',
              ( ['in'], VARIANT, 'StartEpoch' ),
              ( ['in'], VARIANT, 'StopEpoch' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalFixed implementation
##class _IAgCrdnEventIntervalFixed_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval.'
##        #return pRetVal
##
##    @property
##    def LabelStartDescription(self):
##        'The start description.'
##        #return pRetVal
##
##    @property
##    def LabelStopDescription(self):
##        'The stop description.'
##        #return pRetVal
##
##    @property
##    def LabelStart(self):
##        'A label associated with the interval start.'
##        #return pRetVal
##
##    @property
##    def LabelStop(self):
##        'A label associated with the interval stop.'
##        #return pRetVal
##
##    def FindInterval(self):
##        'Return computed interval if it exists.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval if it exists.'
##        #return pRetVal
##
##    @property
##    def StartTime(self):
##        'The start time of the interval.'
##        #return pRetVal
##
##    @property
##    def StopTime(self):
##        'The stop time of the interval.'
##        #return pRetVal
##
##    def SetInterval(self, StartEpoch, StopEpoch):
##        "Set interval's start and stop times."
##        #return 
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnSystemTransformWithRateResult._methods_ = [
    COMMETHOD(['propget', helpstring('True indicates the method call was successful.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The transformed vector.')], HRESULT, 'Vector',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("The vector's velocity.")], HRESULT, 'Velocity',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnSystemTransformWithRateResult implementation
##class IAgCrdnSystemTransformWithRateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'True indicates the method call was successful.'
##        #return pRetVal
##
##    @property
##    def Vector(self):
##        'The transformed vector.'
##        #return ppRetVal
##
##    @property
##    def Velocity(self):
##        "The vector's velocity."
##        #return ppRetVal
##

class _IAgCrdnPruneFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPruneFilterFactory'
    _iid_ = GUID('{79B793D7-4773-4821-B010-8C77279E44D2}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnPruneFilterFactory._methods_ = [
    COMMETHOD([dispid(23601), helpstring('Create and initializes a new prune filter using default configuration.')], HRESULT, 'Create',
              ( ['in'], AgECrdnPruneFilter, 'EFilter' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPruneFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnPruneFilterFactory implementation
##class _IAgCrdnPruneFilterFactory_Impl(object):
##    def Create(self, EFilter):
##        'Create and initializes a new prune filter using default configuration.'
##        #return ppRetVal
##

IAgCrdnCalcScalarConstant._methods_ = [
    COMMETHOD(['propget', helpstring('A value which can be in any STK supported unit available for selected dimension.')], HRESULT, 'Value',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('A value which can be in any STK supported unit available for selected dimension.')], HRESULT, 'Value',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The dimension of the constant value, this can be any of the STK supported dimensions.')], HRESULT, 'Dimension',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The dimension of the constant value, this can be any of the STK supported dimensions.')], HRESULT, 'Dimension',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnCalcScalarConstant implementation
##class IAgCrdnCalcScalarConstant_Impl(object):
##    def _get(self):
##        'A value which can be in any STK supported unit available for selected dimension.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A value which can be in any STK supported unit available for selected dimension.'
##    Value = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The dimension of the constant value, this can be any of the STK supported dimensions.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The dimension of the constant value, this can be any of the STK supported dimensions.'
##    Dimension = property(_get, _set, doc = _set.__doc__)
##

class IAgCrdnPointAtTimeInstant(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Point fixed relative to reference system based on another point evaluated at specified time instant.'
    _iid_ = GUID('{3D97F8E6-7CDE-4E1E-A55B-FA6D276842DC}')
    _idlflags_ = ['oleautomation']
IAgCrdnPointAtTimeInstant._methods_ = [
    COMMETHOD(['propget', helpstring('A reference time instant. Can be any Time event.')], HRESULT, 'ReferenceTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A reference time instant. Can be any Time event.')], HRESULT, 'ReferenceTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A source point. Can be any VGT point.')], HRESULT, 'SourcePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A source point. Can be any VGT point.')], HRESULT, 'SourcePoint',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A reference system. Can be any VGT system.')], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A reference system. Can be any VGT system.')], HRESULT, 'ReferenceSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPointAtTimeInstant implementation
##class IAgCrdnPointAtTimeInstant_Impl(object):
##    def _get(self):
##        'A reference time instant. Can be any Time event.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A reference time instant. Can be any Time event.'
##    ReferenceTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A source point. Can be any VGT point.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A source point. Can be any VGT point.'
##    SourcePoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A reference system. Can be any VGT system.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A reference system. Can be any VGT system.'
##    ReferenceSystem = property(_get, _set, doc = _set.__doc__)
##

_IAgCrdnEventInterval._methods_ = [
    COMMETHOD([dispid(13411), helpstring('Return the type of interval.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalType), 'pRetVal' )),
    COMMETHOD([dispid(13404), helpstring('The start description.'), 'propget'], HRESULT, 'LabelStartDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13405), helpstring('The stop description.'), 'propget'], HRESULT, 'LabelStopDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13406), helpstring('A label associated with the interval start.'), 'propget'], HRESULT, 'LabelStart',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13407), helpstring('A label associated with the interval stop.'), 'propget'], HRESULT, 'LabelStop',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13408), helpstring('Return computed interval if it exists.')], HRESULT, 'FindInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13409), helpstring('Determine if specified time falls within computed interval if it exists.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventInterval implementation
##class _IAgCrdnEventInterval_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval.'
##        #return pRetVal
##
##    @property
##    def LabelStartDescription(self):
##        'The start description.'
##        #return pRetVal
##
##    @property
##    def LabelStopDescription(self):
##        'The stop description.'
##        #return pRetVal
##
##    @property
##    def LabelStart(self):
##        'A label associated with the interval start.'
##        #return pRetVal
##
##    @property
##    def LabelStop(self):
##        'A label associated with the interval stop.'
##        #return pRetVal
##
##    def FindInterval(self):
##        'Return computed interval if it exists.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval if it exists.'
##        #return pRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnWellKnownSunAxes._methods_ = [
    COMMETHOD(['propget', helpstring("Sun's Fixed axes.")], HRESULT, 'Fixed',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Sun's ICRF.")], HRESULT, 'ICRF',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Sun's Inertial axes (as defined in STK).")], HRESULT, 'Inertial',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("The Sun's J2000 axes.")], HRESULT, 'J2000',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnWellKnownSunAxes implementation
##class IAgCrdnWellKnownSunAxes_Impl(object):
##    @property
##    def Fixed(self):
##        "Sun's Fixed axes."
##        #return ppRetVal
##
##    @property
##    def ICRF(self):
##        "Sun's ICRF."
##        #return ppRetVal
##
##    @property
##    def Inertial(self):
##        "Sun's Inertial axes (as defined in STK)."
##        #return ppRetVal
##
##    @property
##    def J2000(self):
##        "The Sun's J2000 axes."
##        #return ppRetVal
##

class _IAgCrdnAxesRefTo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesRefTo'
    _iid_ = GUID('{933ACB2B-8DB8-4508-A570-EBF286E01FE3}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnAxesRefTo._methods_ = [
    COMMETHOD([dispid(701), helpstring('Returns a path to the referenced VGT component.'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(1001), helpstring('Sets a new axes.')], HRESULT, 'SetPath',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD([dispid(1002), helpstring('Sets a new axes.')], HRESULT, 'SetAxes',
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' )),
    COMMETHOD([dispid(1003), helpstring('Returns the actual axes object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.')], HRESULT, 'GetAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(1004), helpstring('Tests whether the input component and the target component form a cyclic dependency.')], HRESULT, 'HasCyclicDependency',
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnAxesRefTo implementation
##class _IAgCrdnAxesRefTo_Impl(object):
##    @property
##    def Path(self):
##        'Returns a path to the referenced VGT component.'
##        #return pRetVal
##
##    def SetPath(self, Path):
##        'Sets a new axes.'
##        #return 
##
##    def SetAxes(self, Axes):
##        'Sets a new axes.'
##        #return 
##
##    def GetAxes(self):
##        'Returns the actual axes object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.'
##        #return ppRetVal
##
##    def HasCyclicDependency(self, Axes):
##        'Tests whether the input component and the target component form a cyclic dependency.'
##        #return pRetVal
##

IAgCrdnSignalDelay._methods_ = [
]
################################################################
## code template for IAgCrdnSignalDelay implementation
##class IAgCrdnSignalDelay_Impl(object):

_IAgCrdnEventIntervalListMerged._methods_ = [
    COMMETHOD([dispid(13509), helpstring('Return the type of interval list.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalListType), 'pRetVal' )),
    COMMETHOD([dispid(13502), helpstring('Get the label descriptions associated with the interval list.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13503), helpstring('Get the labels associated with the interval list.'), 'propget'], HRESULT, 'Descriptions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13507), helpstring('Return computed interval list that can be empty.')], HRESULT, 'FindIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalListResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13508), helpstring('Determine if specified time falls within computed interval list.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17508), helpstring('The interval list or interval A.'), 'propget'], HRESULT, 'IntervalListOrIntervalA',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(17509), helpstring('The interval list or interval B.'), 'propget'], HRESULT, 'IntervalListOrIntervalB',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(17503), helpstring('The merge operation.'), 'propget'], HRESULT, 'MergeOperation',
              ( ['out', 'retval'], POINTER(AgECrdnEventListMergeOperation), 'pRetVal' )),
    COMMETHOD([dispid(17503), helpstring('The merge operation.'), 'propput'], HRESULT, 'MergeOperation',
              ( ['in'], AgECrdnEventListMergeOperation, 'pRetVal' )),
    COMMETHOD([dispid(17510), helpstring('Sets the interval list A.')], HRESULT, 'SetIntervalListA',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'RefIntervals' )),
    COMMETHOD([dispid(17511), helpstring('Sets the interval A.')], HRESULT, 'SetIntervalA',
              ( ['in'], POINTER(IAgCrdnEventInterval), 'RefIntervals' )),
    COMMETHOD([dispid(17512), helpstring('Sets the interval list B.')], HRESULT, 'SetIntervalListB',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'RefIntervals' )),
    COMMETHOD([dispid(17513), helpstring('Sets the interval B.')], HRESULT, 'SetIntervalB',
              ( ['in'], POINTER(IAgCrdnEventInterval), 'RefIntervals' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalListMerged implementation
##class _IAgCrdnEventIntervalListMerged_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval list.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the label descriptions associated with the interval list.'
##        #return ppRetVal
##
##    @property
##    def Descriptions(self):
##        'Get the labels associated with the interval list.'
##        #return ppRetVal
##
##    def FindIntervals(self):
##        'Return computed interval list that can be empty.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval list.'
##        #return pRetVal
##
##    @property
##    def IntervalListOrIntervalA(self):
##        'The interval list or interval A.'
##        #return ppRetVal
##
##    @property
##    def IntervalListOrIntervalB(self):
##        'The interval list or interval B.'
##        #return ppRetVal
##
##    def _get(self):
##        'The merge operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The merge operation.'
##    MergeOperation = property(_get, _set, doc = _set.__doc__)
##
##    def SetIntervalListA(self, RefIntervals):
##        'Sets the interval list A.'
##        #return 
##
##    def SetIntervalA(self, RefIntervals):
##        'Sets the interval A.'
##        #return 
##
##    def SetIntervalListB(self, RefIntervals):
##        'Sets the interval list B.'
##        #return 
##
##    def SetIntervalB(self, RefIntervals):
##        'Sets the interval B.'
##        #return 
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnVectorFactory._methods_ = [
    COMMETHOD([helpstring('Creates a VGT vector using specified name, description and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'VectorName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnVectorType, 'VectorType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns true if the type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnVectorType, 'Type' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Creates a displacement vector.')], HRESULT, 'CreateDisplacementVector',
              ( ['in'], BSTR, 'VectorName' ),
              ( ['in'], POINTER(IAgCrdnPoint), 'OriginPoint' ),
              ( ['in'], POINTER(IAgCrdnPoint), 'DestPoint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorDisplacement)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('An array of display names associated with available vector plugins. The elements of the array are strings. Display names are used to create VGT vectors based on COM plugins using CreateVectorPluginFromDisplayName method.')], HRESULT, 'AvailableVectorPluginDisplayNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a vector component based on a COM vector plugin. For information how to implement and register VGT plugins, see')], HRESULT, 'CreateVectorPluginFromDisplayName',
              ( ['in'], BSTR, 'VectorName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'DisplayName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a cross product C = A x B.')], HRESULT, 'CreateCrossProductVector',
              ( ['in'], BSTR, 'VectorName' ),
              ( ['in'], POINTER(IAgCrdnVector), 'VectorA' ),
              ( ['in'], POINTER(IAgCrdnVector), 'VectorB' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorCross)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVectorFactory implementation
##class IAgCrdnVectorFactory_Impl(object):
##    def Create(self, VectorName, Description, VectorType):
##        'Creates a VGT vector using specified name, description and type.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, Type):
##        'Returns true if the type is supported.'
##        #return pRetVal
##
##    def CreateDisplacementVector(self, VectorName, OriginPoint, DestPoint):
##        'Creates a displacement vector.'
##        #return ppRetVal
##
##    @property
##    def AvailableVectorPluginDisplayNames(self):
##        'An array of display names associated with available vector plugins. The elements of the array are strings. Display names are used to create VGT vectors based on COM plugins using CreateVectorPluginFromDisplayName method.'
##        #return ppRetVal
##
##    def CreateVectorPluginFromDisplayName(self, VectorName, Description, DisplayName):
##        'Create a vector component based on a COM vector plugin. For information how to implement and register VGT plugins, see'
##        #return ppRetVal
##
##    def CreateCrossProductVector(self, VectorName, VectorA, VectorB):
##        'Creates a cross product C = A x B.'
##        #return ppRetVal
##

class _IAgCrdnRelativeSatisfactionConditionFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnRelativeSatisfactionConditionFilter'
    _iid_ = GUID('{B519187A-C63E-4063-813A-F5BDA850D918}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnRelativeSatisfactionConditionFilter._methods_ = [
    COMMETHOD([dispid(22901), helpstring('Returns a type of the filter.'), 'propget'], HRESULT, 'FilterType',
              ( ['out', 'retval'], POINTER(AgECrdnPruneFilter), 'pRetVal' )),
    COMMETHOD([dispid(23401), helpstring('This additional condition must be satisfied At Most or At Least specified duration within any interval for it to be considered in filtered list.'), 'propget'], HRESULT, 'Condition',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(23401), helpstring('This additional condition must be satisfied At Most or At Least specified duration within any interval for it to be considered in filtered list.'), 'propput'], HRESULT, 'Condition',
              ( ['in'], POINTER(IAgCrdnCondition), 'ppRetVal' )),
    COMMETHOD([dispid(23402), helpstring('Choose a duration type (at least/at most).'), 'propget'], HRESULT, 'DurationKind',
              ( ['out', 'retval'], POINTER(AgECrdnIntervalDurationKind), 'pRetVal' )),
    COMMETHOD([dispid(23402), helpstring('Choose a duration type (at least/at most).'), 'propput'], HRESULT, 'DurationKind',
              ( ['in'], AgECrdnIntervalDurationKind, 'pRetVal' )),
    COMMETHOD([dispid(23403), helpstring('A percentage of time the condition must be satisfied.'), 'propget'], HRESULT, 'RelativeIntervalDuration',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(23403), helpstring('A percentage of time the condition must be satisfied.'), 'propput'], HRESULT, 'RelativeIntervalDuration',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnRelativeSatisfactionConditionFilter implementation
##class _IAgCrdnRelativeSatisfactionConditionFilter_Impl(object):
##    @property
##    def FilterType(self):
##        'Returns a type of the filter.'
##        #return pRetVal
##
##    def _get(self):
##        'This additional condition must be satisfied At Most or At Least specified duration within any interval for it to be considered in filtered list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'This additional condition must be satisfied At Most or At Least specified duration within any interval for it to be considered in filtered list.'
##    Condition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Choose a duration type (at least/at most).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Choose a duration type (at least/at most).'
##    DurationKind = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A percentage of time the condition must be satisfied.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A percentage of time the condition must be satisfied.'
##    RelativeIntervalDuration = property(_get, _set, doc = _set.__doc__)
##

_IAgCrdnPlaneNormal._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(2201), helpstring('Returns a type of the plane object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPlaneType), 'pRetVal' )),
    COMMETHOD([dispid(2202), helpstring("Computes the plane's axes vectors in a specified reference axes.")], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2203), helpstring("Computes the plane's axes vectors and their rates in a specified reference axes.")], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2204), helpstring('Computes the position and X and Y axes in the specified coordinate system.')], HRESULT, 'FindInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2205), helpstring('Computes the position, X and Y axes and their rates of change in the specified coordinate system.')], HRESULT, 'FindInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2206), helpstring("Allows configuring the plane's X and Y axes labels."), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(4001), helpstring('Specify a Normal vector.'), 'propget'], HRESULT, 'NormalVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4002), helpstring('Specify a reference vector.'), 'propget'], HRESULT, 'ReferenceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4003), helpstring('Specify a reference point.'), 'propget'], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPlaneNormal implementation
##class _IAgCrdnPlaneNormal_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the plane object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        "Computes the plane's axes vectors in a specified reference axes."
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        "Computes the plane's axes vectors and their rates in a specified reference axes."
##        #return ppRetVal
##
##    def FindInSystem(self, Epoch, System):
##        'Computes the position and X and Y axes in the specified coordinate system.'
##        #return ppRetVal
##
##    def FindInSystemWithRate(self, Epoch, System):
##        'Computes the position, X and Y axes and their rates of change in the specified coordinate system.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        "Allows configuring the plane's X and Y axes labels."
##        #return ppRetVal
##
##    @property
##    def NormalVector(self):
##        'Specify a Normal vector.'
##        #return ppRetVal
##
##    @property
##    def ReferenceVector(self):
##        'Specify a reference vector.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Specify a reference point.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnSystemFindInSystemResult._methods_ = [
    COMMETHOD(['propget', helpstring('True indicates the method call was successful.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A position vector.')], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A velocity vector.')], HRESULT, 'Velocity',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Rate of change.')], HRESULT, 'Rate',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Orientation.')], HRESULT, 'Orientation',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnSystemFindInSystemResult implementation
##class IAgCrdnSystemFindInSystemResult_Impl(object):
##    @property
##    def IsValid(self):
##        'True indicates the method call was successful.'
##        #return pRetVal
##
##    @property
##    def Position(self):
##        'A position vector.'
##        #return ppRetVal
##
##    @property
##    def Velocity(self):
##        'A velocity vector.'
##        #return ppRetVal
##
##    @property
##    def Rate(self):
##        'Rate of change.'
##        #return ppRetVal
##
##    @property
##    def Orientation(self):
##        'Orientation.'
##        #return ppRetVal
##

_IAgCrdnCalcScalarFactory._methods_ = [
    COMMETHOD([dispid(19737), helpstring('An array of display names associated with available scalar calculation plugins. The elements of the array are strings. Display names are used to create Calc scalars based on COM plugins using CreateCalcScalarPluginFromDisplayName method.'), 'propget'], HRESULT, 'AvailableCalcScalarPluginDisplayNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(19701), helpstring('Creates and registers a scalar calculation using specified name, description, and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnCalcScalarType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(19716), helpstring('Create a scalar calculation equal to angular displacement obtained from any angle in VGT.')], HRESULT, 'CreateCalcScalarAngle',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(19734), helpstring('Create a scalar calculation defined by evaluating the input scalar calculation at the specified reference time instant.')], HRESULT, 'CreateCalcScalarFixedAtTimeInstant',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(19718), helpstring('Create a scalar calculation of constant value of the specified dimension.')], HRESULT, 'CreateCalcScalarConstant',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(19719), helpstring('Create a scalar calculation defined from a time-dependent data element from STK data providers available for parent STK object.')], HRESULT, 'CreateCalcScalarDataElement',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'DataProvider' ),
              ( ['in'], BSTR, 'ElementName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(19732), helpstring('Create a scalar calculation defined from a time-dependent data element from STK data providers available for parent STK object.')], HRESULT, 'CreateCalcScalarDataElementWithGroup',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'DataProvider' ),
              ( ['in'], BSTR, 'GroupName' ),
              ( ['in'], BSTR, 'ElementName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(19720), helpstring('Create a scalar calculation that is the derivative of an input scalar calculation.')], HRESULT, 'CreateCalcScalarDerivative',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(19721), helpstring('Create a scalar calculation that is the time elapsed since a reference time instant.')], HRESULT, 'CreateCalcScalarElapsedTime',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(19722), helpstring('Create scalar calculation specified by external data file.')], HRESULT, 'CreateCalcScalarFile',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'Filepath' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(19723), helpstring('Create a scalar calculation that is defined by performing the specified function on the input scalar or time instant.')], HRESULT, 'CreateCalcScalarFunction',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(19724), helpstring('Create a scalar calculation that is the integral of an input scalar computed with respect to time using one of the specified numerical methods and using one of the specified accumulation types.')], HRESULT, 'CreateCalcScalarIntegral',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(19736), helpstring('Create a scalar calculation that is defined by performing a function(x,y) on two scalar arguments.')], HRESULT, 'CreateCalcScalarFunction2Var',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(19728), helpstring('Create a scalar calculation equal to the magnitude of a specified vector.')], HRESULT, 'CreateCalcScalarVectorMagnitude',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(19738), helpstring("Create a scalar calculation based on a COM plugin. For information how to implement and register VGT plugins, see <topic name='Engine Plugins: COM-based Engine Plugin Components'>COM-based Engine Plugins.</topic>.")], HRESULT, 'CreateCalcScalarPluginFromDisplayName',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'DisplayName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(19715), helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnCalcScalarType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(19739), helpstring('Create a calc scalar calculation that uses scripted algorithm in MATLAB (.m or .dll), Perl or VBScript to define its value and rate.')], HRESULT, 'CreateCalcScalarFromCustomScript',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'Filepath' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(19740), helpstring('Create a calc scalar calculation that is surface distance along the specified central body ellipsoid between two points (or their respective projections if specified at altitude).')], HRESULT, 'CreateCalcScalarSurfaceDistanceBetweenPoints',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnCalcScalarFactory implementation
##class _IAgCrdnCalcScalarFactory_Impl(object):
##    @property
##    def AvailableCalcScalarPluginDisplayNames(self):
##        'An array of display names associated with available scalar calculation plugins. The elements of the array are strings. Display names are used to create Calc scalars based on COM plugins using CreateCalcScalarPluginFromDisplayName method.'
##        #return ppRetVal
##
##    def Create(self, Name, Description, Type):
##        'Creates and registers a scalar calculation using specified name, description, and type.'
##        #return ppRetVal
##
##    def CreateCalcScalarAngle(self, Name, Description):
##        'Create a scalar calculation equal to angular displacement obtained from any angle in VGT.'
##        #return ppRetVal
##
##    def CreateCalcScalarFixedAtTimeInstant(self, Name, Description):
##        'Create a scalar calculation defined by evaluating the input scalar calculation at the specified reference time instant.'
##        #return ppRetVal
##
##    def CreateCalcScalarConstant(self, Name, Description):
##        'Create a scalar calculation of constant value of the specified dimension.'
##        #return ppRetVal
##
##    def CreateCalcScalarDataElement(self, Name, Description, DataProvider, ElementName):
##        'Create a scalar calculation defined from a time-dependent data element from STK data providers available for parent STK object.'
##        #return ppRetVal
##
##    def CreateCalcScalarDataElementWithGroup(self, Name, Description, DataProvider, GroupName, ElementName):
##        'Create a scalar calculation defined from a time-dependent data element from STK data providers available for parent STK object.'
##        #return ppRetVal
##
##    def CreateCalcScalarDerivative(self, Name, Description):
##        'Create a scalar calculation that is the derivative of an input scalar calculation.'
##        #return ppRetVal
##
##    def CreateCalcScalarElapsedTime(self, Name, Description):
##        'Create a scalar calculation that is the time elapsed since a reference time instant.'
##        #return ppRetVal
##
##    def CreateCalcScalarFile(self, Name, Description, Filepath):
##        'Create scalar calculation specified by external data file.'
##        #return ppRetVal
##
##    def CreateCalcScalarFunction(self, Name, Description):
##        'Create a scalar calculation that is defined by performing the specified function on the input scalar or time instant.'
##        #return ppRetVal
##
##    def CreateCalcScalarIntegral(self, Name, Description):
##        'Create a scalar calculation that is the integral of an input scalar computed with respect to time using one of the specified numerical methods and using one of the specified accumulation types.'
##        #return ppRetVal
##
##    def CreateCalcScalarFunction2Var(self, Name, Description):
##        'Create a scalar calculation that is defined by performing a function(x,y) on two scalar arguments.'
##        #return ppRetVal
##
##    def CreateCalcScalarVectorMagnitude(self, Name, Description):
##        'Create a scalar calculation equal to the magnitude of a specified vector.'
##        #return ppRetVal
##
##    def CreateCalcScalarPluginFromDisplayName(self, Name, Description, DisplayName):
##        "Create a scalar calculation based on a COM plugin. For information how to implement and register VGT plugins, see <topic name='Engine Plugins: COM-based Engine Plugin Components'>COM-based Engine Plugins.</topic>."
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##
##    def CreateCalcScalarFromCustomScript(self, Name, Description, Filepath):
##        'Create a calc scalar calculation that uses scripted algorithm in MATLAB (.m or .dll), Perl or VBScript to define its value and rate.'
##        #return ppRetVal
##
##    def CreateCalcScalarSurfaceDistanceBetweenPoints(self, Name, Description):
##        'Create a calc scalar calculation that is surface distance along the specified central body ellipsoid between two points (or their respective projections if specified at altitude).'
##        #return ppRetVal
##

_IAgCrdnIntervalsVectorResult._methods_ = [
    COMMETHOD([dispid(20901), helpstring('Indicates whether the result object is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(20902), helpstring('A collection of interval collections.'), 'propget'], HRESULT, 'IntervalCollections',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalVectorCollection)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnIntervalsVectorResult implementation
##class _IAgCrdnIntervalsVectorResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def IntervalCollections(self):
##        'A collection of interval collections.'
##        #return ppRetVal
##

IAgCrdnPointLocateInSystemWithRateResult._methods_ = [
    COMMETHOD(['propget', helpstring('True indicates the method call was successful.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The point position in the specified coordinate system.')], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The point velocity in the specified coordinate system.')], HRESULT, 'Velocity',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPointLocateInSystemWithRateResult implementation
##class IAgCrdnPointLocateInSystemWithRateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'True indicates the method call was successful.'
##        #return pRetVal
##
##    @property
##    def Position(self):
##        'The point position in the specified coordinate system.'
##        #return ppRetVal
##
##    @property
##    def Velocity(self):
##        'The point velocity in the specified coordinate system.'
##        #return ppRetVal
##

IAgCrdnCalcScalarCustom._methods_ = [
    COMMETHOD(['propget', helpstring('A path to MATLAB (.m or .dll), Perl or VBScript file.')], HRESULT, 'Filename',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('A path to MATLAB (.m or .dll), Perl or VBScript file.')], HRESULT, 'Filename',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([helpstring('Reload the file specified with Filename property.')], HRESULT, 'Reload'),
]
################################################################
## code template for IAgCrdnCalcScalarCustom implementation
##class IAgCrdnCalcScalarCustom_Impl(object):
##    def _get(self):
##        'A path to MATLAB (.m or .dll), Perl or VBScript file.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A path to MATLAB (.m or .dll), Perl or VBScript file.'
##    Filename = property(_get, _set, doc = _set.__doc__)
##
##    def Reload(self):
##        'Reload the file specified with Filename property.'
##        #return 
##

class _IAgCrdnVolumeFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVolumeFactory'
    _iid_ = GUID('{0EF57E38-0333-4372-8C2E-C227FFB04963}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnVolumeFactory._methods_ = [
    COMMETHOD([dispid(32401), helpstring('Creates and registers a volume using specified name and description.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnVolumeType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([dispid(32402), helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnVolumeType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(32403), helpstring('Creates a volume type combined.')], HRESULT, 'CreateVolumeCombined',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([dispid(32404), helpstring('Creates a volume type lighting.')], HRESULT, 'CreateVolumeLighting',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([dispid(32405), helpstring('Creates a volume type over time.')], HRESULT, 'CreateVolumeOverTime',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([dispid(32406), helpstring('Creates a volume type from grid.')], HRESULT, 'CreateVolumeFromGrid',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([dispid(32407), helpstring('Creates a volume type from calc.')], HRESULT, 'CreateVolumeFromCalc',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([dispid(32408), helpstring('Creates a volume type from time satisfaction.')], HRESULT, 'CreateVolumeFromTimeSatisfaction',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([dispid(32409), helpstring('Creates a volume type condition.')], HRESULT, 'CreateVolumeFromCondition',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([dispid(32410), helpstring('Creates a volume type Inview.')], HRESULT, 'CreateVolumeInview',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnVolumeFactory implementation
##class _IAgCrdnVolumeFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Creates and registers a volume using specified name and description.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##
##    def CreateVolumeCombined(self, Name, Description):
##        'Creates a volume type combined.'
##        #return ppRetVal
##
##    def CreateVolumeLighting(self, Name, Description):
##        'Creates a volume type lighting.'
##        #return ppRetVal
##
##    def CreateVolumeOverTime(self, Name, Description):
##        'Creates a volume type over time.'
##        #return ppRetVal
##
##    def CreateVolumeFromGrid(self, Name, Description):
##        'Creates a volume type from grid.'
##        #return ppRetVal
##
##    def CreateVolumeFromCalc(self, Name, Description):
##        'Creates a volume type from calc.'
##        #return ppRetVal
##
##    def CreateVolumeFromTimeSatisfaction(self, Name, Description):
##        'Creates a volume type from time satisfaction.'
##        #return ppRetVal
##
##    def CreateVolumeFromCondition(self, Name, Description):
##        'Creates a volume type condition.'
##        #return ppRetVal
##
##    def CreateVolumeInview(self, Name, Description):
##        'Creates a volume type Inview.'
##        #return ppRetVal
##

IAgCrdnEventInterval._methods_ = [
    COMMETHOD(['propget', helpstring('Return the type of interval.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalType), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The start description.')], HRESULT, 'LabelStartDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The stop description.')], HRESULT, 'LabelStopDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A label associated with the interval start.')], HRESULT, 'LabelStart',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A label associated with the interval stop.')], HRESULT, 'LabelStop',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([helpstring('Return computed interval if it exists.')], HRESULT, 'FindInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Determine if specified time falls within computed interval if it exists.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEventInterval implementation
##class IAgCrdnEventInterval_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval.'
##        #return pRetVal
##
##    @property
##    def LabelStartDescription(self):
##        'The start description.'
##        #return pRetVal
##
##    @property
##    def LabelStopDescription(self):
##        'The stop description.'
##        #return pRetVal
##
##    @property
##    def LabelStart(self):
##        'A label associated with the interval start.'
##        #return pRetVal
##
##    @property
##    def LabelStop(self):
##        'A label associated with the interval stop.'
##        #return pRetVal
##
##    def FindInterval(self):
##        'Return computed interval if it exists.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval if it exists.'
##        #return pRetVal
##

class _IAgCrdnSampling(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnSampling'
    _iid_ = GUID('{FED414BF-7E31-4911-BCD3-7B8A524D6C91}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnSampling._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnSampling implementation
##class _IAgCrdnSampling_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnAxesRefTo._methods_ = [
    COMMETHOD([helpstring('Sets a new axes.')], HRESULT, 'SetPath',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD([helpstring('Sets a new axes.')], HRESULT, 'SetAxes',
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' )),
    COMMETHOD([helpstring('Returns the actual axes object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.')], HRESULT, 'GetAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([helpstring('Tests whether the input component and the target component form a cyclic dependency.')], HRESULT, 'HasCyclicDependency',
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAxesRefTo implementation
##class IAgCrdnAxesRefTo_Impl(object):
##    def SetPath(self, Path):
##        'Sets a new axes.'
##        #return 
##
##    def SetAxes(self, Axes):
##        'Sets a new axes.'
##        #return 
##
##    def GetAxes(self):
##        'Returns the actual axes object behind the reference. Use IAgCrdn.IsValid to test the validity of the returned object.'
##        #return ppRetVal
##
##    def HasCyclicDependency(self, Axes):
##        'Tests whether the input component and the target component form a cyclic dependency.'
##        #return pRetVal
##

IAgCrdnVectorEccentricity._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a central body.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Eliptical orbit is fit to the current motion of the reference point according to the selected mean theory.')], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify the mean element theory type for approximating motion.')], HRESULT, 'MeanElementType',
              ( ['out', 'retval'], POINTER(AgECrdnMeanElementTheory), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify the mean element theory type for approximating motion.')], HRESULT, 'MeanElementType',
              ( ['in'], AgECrdnMeanElementTheory, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorEccentricity implementation
##class IAgCrdnVectorEccentricity_Impl(object):
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Eliptical orbit is fit to the current motion of the reference point according to the selected mean theory.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify the mean element theory type for approximating motion.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify the mean element theory type for approximating motion.'
##    MeanElementType = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnAxesFixed(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesFixed'
    _iid_ = GUID('{D60130B1-4028-4406-808C-2BF6F1B5F26B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnAxesFixed._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1701), helpstring('Returns a type of the axes object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAxesType), 'pRetVal' )),
    COMMETHOD([dispid(1706), helpstring('Find an angular velocity and orientation in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1707), helpstring('Find an orientation in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1708), helpstring('Returns an object that allows modifying the axes labels.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(2901), helpstring('Specify a reference axes.'), 'propget'], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(2902), helpstring('Specify a desired orientation and the applicable parameters.'), 'propget'], HRESULT, 'FixedOrientation',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1709), helpstring('Returns the X axis of the component.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1710), helpstring('Returns the Y axis of the component.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1711), helpstring('Returns the Z axis of the component.'), 'propget'], HRESULT, 'Z',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1712), helpstring('Transforms the input vector from this axes into the output axes.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1713), helpstring("Transforms the input vector and vector's rate from this axes into the output axes.")], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'RateInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAxesFixed implementation
##class _IAgCrdnAxesFixed_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the axes object.'
##        #return pRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Find an angular velocity and orientation in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Find an orientation in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        'Returns an object that allows modifying the axes labels.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    @property
##    def FixedOrientation(self):
##        'Specify a desired orientation and the applicable parameters.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    @property
##    def X(self):
##        'Returns the X axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Y(self):
##        'Returns the Y axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Z(self):
##        'Returns the Z axis of the component.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputAxes, VectorInMyAxes):
##        'Transforms the input vector from this axes into the output axes.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputAxes, VectorInMyAxes, RateInMyAxes):
##        "Transforms the input vector and vector's rate from this axes into the output axes."
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnConditionSetScalarThresholds(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnConditionSetScalarThresholds'
    _iid_ = GUID('{FCBC85A4-335E-4DAF-A9D0-A43126ADCEF2}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnConditionSetScalarThresholds._methods_ = [
    COMMETHOD([dispid(29601), helpstring('Returns the type of condition set.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnConditionSetType), 'pRetVal' )),
    COMMETHOD([dispid(29603), helpstring('Returns an array of results of evaluating continuously varying condition metrics, one for each condition in the set, at the specified time, used for detecting condition crossings.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionSetEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(29604), helpstring('Returns an array of results of evaluating continuously varying condition metrics and their rates of change, one for each condition in the set, at the specified time, used for detecting condition crossings.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionSetEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(29801), helpstring('The input scalar calculation.'), 'propget'], HRESULT, 'Scalar',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(29801), helpstring('The input scalar calculation.'), 'propput'], HRESULT, 'Scalar',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD([dispid(29802), helpstring('The input threshold values, flags indicating whether to include conditions above the highest and below the lowest threhsolds, and corresponding labels.'), 'propget'], HRESULT, 'Thresholds',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(29803), helpstring('The input threshold values, flags indicating whether to include conditions above the highest and below the lowest threhsolds, and corresponding labels.'), 'propget'], HRESULT, 'ThresholdLabels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(29805), helpstring('The threshold indicates whether to include conditions above the highest threhsold.'), 'propget'], HRESULT, 'IncludeAboveHighestThreshold',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(29805), helpstring('The threshold indicates whether to include conditions above the highest threhsold.'), 'propput'], HRESULT, 'IncludeAboveHighestThreshold',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(29806), helpstring('The threshold indicates whether to include conditions below the lowest threhsolds.'), 'propget'], HRESULT, 'IncludeBelowLowestThreshold',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(29806), helpstring('The threshold indicates whether to include conditions below the lowest threhsolds.'), 'propput'], HRESULT, 'IncludeBelowLowestThreshold',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(29807), helpstring('Set thresholds and threshold labels.')], HRESULT, 'SetThresholdsAndLabels',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Thresholds' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'ThresholdLabels' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnConditionSetScalarThresholds implementation
##class _IAgCrdnConditionSetScalarThresholds_Impl(object):
##    @property
##    def Type(self):
##        'Returns the type of condition set.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Returns an array of results of evaluating continuously varying condition metrics, one for each condition in the set, at the specified time, used for detecting condition crossings.'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Returns an array of results of evaluating continuously varying condition metrics and their rates of change, one for each condition in the set, at the specified time, used for detecting condition crossings.'
##        #return ppRetVal
##
##    def _get(self):
##        'The input scalar calculation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The input scalar calculation.'
##    Scalar = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Thresholds(self):
##        'The input threshold values, flags indicating whether to include conditions above the highest and below the lowest threhsolds, and corresponding labels.'
##        #return ppRetVal
##
##    @property
##    def ThresholdLabels(self):
##        'The input threshold values, flags indicating whether to include conditions above the highest and below the lowest threhsolds, and corresponding labels.'
##        #return ppRetVal
##
##    def _get(self):
##        'The threshold indicates whether to include conditions above the highest threhsold.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The threshold indicates whether to include conditions above the highest threhsold.'
##    IncludeAboveHighestThreshold = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The threshold indicates whether to include conditions below the lowest threhsolds.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The threshold indicates whether to include conditions below the lowest threhsolds.'
##    IncludeBelowLowestThreshold = property(_get, _set, doc = _set.__doc__)
##
##    def SetThresholdsAndLabels(self, Thresholds, ThresholdLabels):
##        'Set thresholds and threshold labels.'
##        #return 
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnCalcScalarDataElement._methods_ = [
    COMMETHOD(['propget', helpstring('The name of the data provider.')], HRESULT, 'DataProvider',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The name of the data element within the data provider.')], HRESULT, 'ElementName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A group name the data element is a part of. If the element is not a part of a group, the property will return an empty string.')], HRESULT, 'Group',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether to use Lagrange or Hermite interpolation. See STK help on interpolation.')], HRESULT, 'Interpolation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnInterp)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether to use Lagrange or Hermite interpolation. See STK help on interpolation.')], HRESULT, 'Interpolation',
              ( ['in'], POINTER(IAgCrdnInterp), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Relative tolerance uses a combination of relative and absolute changes in scalar values between samples. Curvature tolerance also uses changes in slope between samples.')], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Relative tolerance uses a combination of relative and absolute changes in scalar values between samples. Curvature tolerance also uses changes in slope between samples.')], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('If set to true, selected data provider is presampled over its entire availability span using sampling method specified in Advanced options...')], HRESULT, 'UseSamples',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('If set to true, selected data provider is presampled over its entire availability span using sampling method specified in Advanced options...')], HRESULT, 'UseSamples',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Determines if computed samples are saved/loaded, otherwise if using samples they are recomputed on load.')], HRESULT, 'SaveDataOption',
              ( ['out', 'retval'], POINTER(AgECrdnSaveDataOption), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Determines if computed samples are saved/loaded, otherwise if using samples they are recomputed on load.')], HRESULT, 'SaveDataOption',
              ( ['in'], AgECrdnSaveDataOption, 'pRetVal' )),
    COMMETHOD([helpstring('Set the data provider and the element name.')], HRESULT, 'Set',
              ( ['in'], BSTR, 'DataProvider' ),
              ( ['in'], BSTR, 'ElementName' )),
    COMMETHOD([helpstring('Set the data provider name, the element name, and data provider type name.')], HRESULT, 'SetWithGroup',
              ( ['in'], BSTR, 'DataProvider' ),
              ( ['in'], BSTR, 'TypeName' ),
              ( ['in'], BSTR, 'ElementName' )),
    COMMETHOD(['propget', helpstring('Sets the value to display in a report or graph when the actual value is not a valid real number')], HRESULT, 'InvalidDataIndicator',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Sets the value to display in a report or graph when the actual value is not a valid real number')], HRESULT, 'InvalidDataIndicator',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnCalcScalarDataElement implementation
##class IAgCrdnCalcScalarDataElement_Impl(object):
##    @property
##    def DataProvider(self):
##        'The name of the data provider.'
##        #return pRetVal
##
##    @property
##    def ElementName(self):
##        'The name of the data element within the data provider.'
##        #return pRetVal
##
##    @property
##    def Group(self):
##        'A group name the data element is a part of. If the element is not a part of a group, the property will return an empty string.'
##        #return pRetVal
##
##    def _get(self):
##        'Specify whether to use Lagrange or Hermite interpolation. See STK help on interpolation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Specify whether to use Lagrange or Hermite interpolation. See STK help on interpolation.'
##    Interpolation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Relative tolerance uses a combination of relative and absolute changes in scalar values between samples. Curvature tolerance also uses changes in slope between samples.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Relative tolerance uses a combination of relative and absolute changes in scalar values between samples. Curvature tolerance also uses changes in slope between samples.'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'If set to true, selected data provider is presampled over its entire availability span using sampling method specified in Advanced options...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'If set to true, selected data provider is presampled over its entire availability span using sampling method specified in Advanced options...'
##    UseSamples = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Determines if computed samples are saved/loaded, otherwise if using samples they are recomputed on load.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Determines if computed samples are saved/loaded, otherwise if using samples they are recomputed on load.'
##    SaveDataOption = property(_get, _set, doc = _set.__doc__)
##
##    def Set(self, DataProvider, ElementName):
##        'Set the data provider and the element name.'
##        #return 
##
##    def SetWithGroup(self, DataProvider, TypeName, ElementName):
##        'Set the data provider name, the element name, and data provider type name.'
##        #return 
##
##    def _get(self):
##        'Sets the value to display in a report or graph when the actual value is not a valid real number'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Sets the value to display in a report or graph when the actual value is not a valid real number'
##    InvalidDataIndicator = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnPointBPlane._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a target central body.')], HRESULT, 'TargetBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a trajectory point.')], HRESULT, 'Trajectory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a point type.')], HRESULT, 'PointType',
              ( ['out', 'retval'], POINTER(AgECrdnPointBPlaneType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a point type.')], HRESULT, 'PointType',
              ( ['in'], AgECrdnPointBPlaneType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a direction (incoming or outgoing).')], HRESULT, 'Direction',
              ( ['out', 'retval'], POINTER(AgECrdnDirectionType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a direction (incoming or outgoing).')], HRESULT, 'Direction',
              ( ['in'], AgECrdnDirectionType, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnPointBPlane implementation
##class IAgCrdnPointBPlane_Impl(object):
##    @property
##    def TargetBody(self):
##        'Specify a target central body.'
##        #return ppRetVal
##
##    @property
##    def Trajectory(self):
##        'Specify a trajectory point.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a point type.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a point type.'
##    PointType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a direction (incoming or outgoing).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a direction (incoming or outgoing).'
##    Direction = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnEventIntervalCollectionOccurredResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Index of an interval in the collection.')], HRESULT, 'Index',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalCollectionOccurredResult implementation
##class IAgCrdnEventIntervalCollectionOccurredResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Index(self):
##        'Index of an interval in the collection.'
##        #return pRetVal
##

class AgCrdnPointPlaneProjection(CoClass):
    'The projection of a point onto a reference plane. Specify the Source Point and Reference Plane.'
    _reg_clsid_ = GUID('{F9DAD412-A794-4EE0-A054-62FC179B0101}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnPointPlaneProjection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The projection of a point onto a reference plane. Specify the Source Point and Reference Plane.'
    _iid_ = GUID('{0E4C6C72-9940-41D7-B31F-96CFAB560D29}')
    _idlflags_ = ['oleautomation']
AgCrdnPointPlaneProjection._com_interfaces_ = [_IAgCrdnPointPlaneProjection, IAgCrdnPointPlaneProjection, IAgCrdnPoint, IAgCrdnTimeProperties, IAgCrdn]

IAgCrdnPlaneFindInSystemResult._methods_ = [
    COMMETHOD(['propget', helpstring('True indicates the method call was successful.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("The position of the plane's center point in the specified coordinate system.")], HRESULT, 'OriginPosition',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('X-axis vector in the specified reference system.')], HRESULT, 'XAxis',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Y-axis vector in the specified reference system.')], HRESULT, 'YAxis',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPlaneFindInSystemResult implementation
##class IAgCrdnPlaneFindInSystemResult_Impl(object):
##    @property
##    def IsValid(self):
##        'True indicates the method call was successful.'
##        #return pRetVal
##
##    @property
##    def OriginPosition(self):
##        "The position of the plane's center point in the specified coordinate system."
##        #return ppRetVal
##
##    @property
##    def XAxis(self):
##        'X-axis vector in the specified reference system.'
##        #return ppRetVal
##
##    @property
##    def YAxis(self):
##        'Y-axis vector in the specified reference system.'
##        #return ppRetVal
##

IAgCrdnEventIntervalCollectionCondition._methods_ = [
    COMMETHOD(['propget', helpstring('Get/set the condition set object.')], HRESULT, 'ConditionSet',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionSet)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get/set the condition set object.')], HRESULT, 'ConditionSet',
              ( ['in'], POINTER(IAgCrdnConditionSet), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A custom interval list or a single interval. By default it is set to overall availability of host object. This determines time limits within which global minimum or maximum is sought. The time limits will be used if UseCustomTimeLimits is set to true.')], HRESULT, 'CustomTimeLimits',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A custom interval list or a single interval. By default it is set to overall availability of host object. This determines time limits within which global minimum or maximum is sought. The time limits will be used if UseCustomTimeLimits is set to true.')], HRESULT, 'CustomTimeLimits',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether to use specified custom interval list (see CustomTimeLimits).')], HRESULT, 'UseCustomTimeLimits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether to use specified custom interval list (see CustomTimeLimits).')], HRESULT, 'UseCustomTimeLimits',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Determines if computed time of extremum is saved/loaded, otherwise it is recomputed on load if necessary.')], HRESULT, 'SaveDataOption',
              ( ['out', 'retval'], POINTER(AgECrdnSaveDataOption), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Determines if computed time of extremum is saved/loaded, otherwise it is recomputed on load if necessary.')], HRESULT, 'SaveDataOption',
              ( ['in'], AgECrdnSaveDataOption, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...')], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A Convergence definition, which uses time tolerance to determine when time of extremum is found.')], HRESULT, 'Convergence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConverge)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A Convergence definition, which uses time tolerance to determine when time of extremum is found.')], HRESULT, 'Convergence',
              ( ['in'], POINTER(IAgCrdnConverge), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalCollectionCondition implementation
##class IAgCrdnEventIntervalCollectionCondition_Impl(object):
##    def _get(self):
##        'Get/set the condition set object.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get/set the condition set object.'
##    ConditionSet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A custom interval list or a single interval. By default it is set to overall availability of host object. This determines time limits within which global minimum or maximum is sought. The time limits will be used if UseCustomTimeLimits is set to true.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A custom interval list or a single interval. By default it is set to overall availability of host object. This determines time limits within which global minimum or maximum is sought. The time limits will be used if UseCustomTimeLimits is set to true.'
##    CustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use specified custom interval list (see CustomTimeLimits).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use specified custom interval list (see CustomTimeLimits).'
##    UseCustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Determines if computed time of extremum is saved/loaded, otherwise it is recomputed on load if necessary.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Determines if computed time of extremum is saved/loaded, otherwise it is recomputed on load if necessary.'
##    SaveDataOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##    Convergence = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnConditionFactory(CoClass):
    'The factory creates condition components.'
    _reg_clsid_ = GUID('{391579DE-585D-4A0C-BF39-0F51DFA9655D}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnConditionFactory'
    _iid_ = GUID('{A90627D1-60F5-43B7-A427-81C7C0F54A36}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnConditionFactory._com_interfaces_ = [_IAgCrdnConditionFactory, IAgCrdnConditionFactory]

class AgCrdnCentralBody(CoClass):
    'Represents an central body.'
    _reg_clsid_ = GUID('{C69413F1-A082-4489-8BBB-FDB5D968FBAA}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnCentralBody._com_interfaces_ = [_IAgCrdnCentralBody, IAgCrdnCentralBody]

class IAgCrdnEventArrayMerged(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Defined by merging times from two other arrays by creating a union of bounding intervals from two constituent arrays. If some intervals overlap, then within overlap times from both arrays are merged together.'
    _iid_ = GUID('{4291B7A5-DFE6-4945-B17D-8BAAC53BA1C0}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventArrayMerged._methods_ = [
    COMMETHOD(['propget', helpstring('The first time array.')], HRESULT, 'TimeArrayA',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The first time array.')], HRESULT, 'TimeArrayA',
              ( ['in'], POINTER(IAgCrdnEventArray), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The second time array.')], HRESULT, 'TimeArrayB',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The second time array.')], HRESULT, 'TimeArrayB',
              ( ['in'], POINTER(IAgCrdnEventArray), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventArrayMerged implementation
##class IAgCrdnEventArrayMerged_Impl(object):
##    def _get(self):
##        'The first time array.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The first time array.'
##    TimeArrayA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The second time array.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The second time array.'
##    TimeArrayB = property(_get, _set, doc = _set.__doc__)
##

_IAgCrdnConditionSetEvaluateWithRateResult._methods_ = [
    COMMETHOD([dispid(30801), helpstring('Indicates whether the result object is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(30802), helpstring('Computed values.'), 'propget'], HRESULT, 'Values',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(30803), helpstring('Computed rates.'), 'propget'], HRESULT, 'Rates',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnConditionSetEvaluateWithRateResult implementation
##class _IAgCrdnConditionSetEvaluateWithRateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Values(self):
##        'Computed values.'
##        #return ppRetVal
##
##    @property
##    def Rates(self):
##        'Computed rates.'
##        #return ppRetVal
##

_IAgCrdnCalcScalarDerivative._methods_ = [
    COMMETHOD([dispid(12805), helpstring('Returns the scalar calculation type.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnCalcScalarType), 'pRetVal' )),
    COMMETHOD([dispid(12803), helpstring('Evaluates the scalar calculation at the specified time instant.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12806), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...')], HRESULT, 'QuickEvaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12804), helpstring('Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12807), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...')], HRESULT, 'QuickEvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16201), helpstring('The input scalar component used to compute the derivative.'), 'propget'], HRESULT, 'Scalar',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(16201), helpstring('The input scalar component used to compute the derivative.'), 'propput'], HRESULT, 'Scalar',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD([dispid(16203), helpstring('The time step used, if necessary, in numerical evaluation of derivatives using central differencing.'), 'propget'], HRESULT, 'DifferencingTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16203), helpstring('The time step used, if necessary, in numerical evaluation of derivatives using central differencing.'), 'propput'], HRESULT, 'DifferencingTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(12808), helpstring('Returns a list of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(12809), helpstring("Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propget'], HRESULT, 'UnitOfMeasure',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(12810), helpstring('Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12811), helpstring('Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12812), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12813), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnCalcScalarDerivative implementation
##class _IAgCrdnCalcScalarDerivative_Impl(object):
##    @property
##    def Type(self):
##        'Returns the scalar calculation type.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant.'
##        #return ppRetVal
##
##    def QuickEvaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.'
##        #return ppRetVal
##
##    def QuickEvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...'
##        #return ppRetVal
##
##    def _get(self):
##        'The input scalar component used to compute the derivative.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The input scalar component used to compute the derivative.'
##    Scalar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The time step used, if necessary, in numerical evaluation of derivatives using central differencing.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The time step used, if necessary, in numerical evaluation of derivatives using central differencing.'
##    DifferencingTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def GetAvailability(self):
##        'Returns a list of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def UnitOfMeasure(self):
##        "Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def QuickEvaluateArray(self, Times):
##        'Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateArray(self, Times):
##        'Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##

class _IAgCrdnEventStartStopTime(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventStartStopTime'
    _iid_ = GUID('{BF63D2E2-D488-4A92-867D-8330356EB761}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnEventStartStopTime._methods_ = [
    COMMETHOD([dispid(12911), helpstring('Return the type of time instant.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventType), 'pRetVal' )),
    COMMETHOD([dispid(12905), helpstring("Return time instant that corresponds to today's GMT midnight."), 'propget'], HRESULT, 'Today',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12906), helpstring("Return time instant that corresponds to tomorrow's GMT midnight."), 'propget'], HRESULT, 'Tomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12907), helpstring("Return time instant that corresponds to today's GMT noon."), 'propget'], HRESULT, 'NoonToday',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12908), helpstring("Return time instant that corresponds to tomorrow's GMT noon."), 'propget'], HRESULT, 'NoonTomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12909), helpstring('Return computed time instance if it occurs.')], HRESULT, 'FindOccurrence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventFindOccurrenceResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12912), helpstring('Return true if computed time instance occurs before or at specified time, return false otherwise.')], HRESULT, 'OccursBefore',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(27101), helpstring('Indicates whether to use start (true) or stop (false).'), 'propget'], HRESULT, 'UseStart',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(27101), helpstring('Indicates whether to use start (true) or stop (false).'), 'propput'], HRESULT, 'UseStart',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(27102), helpstring('The reference interval.'), 'propget'], HRESULT, 'ReferenceEventInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(27102), helpstring('The reference interval.'), 'propput'], HRESULT, 'ReferenceEventInterval',
              ( ['in'], POINTER(IAgCrdnEventInterval), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventStartStopTime implementation
##class _IAgCrdnEventStartStopTime_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time instant.'
##        #return pRetVal
##
##    @property
##    def Today(self):
##        "Return time instant that corresponds to today's GMT midnight."
##        #return ppRetVal
##
##    @property
##    def Tomorrow(self):
##        "Return time instant that corresponds to tomorrow's GMT midnight."
##        #return ppRetVal
##
##    @property
##    def NoonToday(self):
##        "Return time instant that corresponds to today's GMT noon."
##        #return ppRetVal
##
##    @property
##    def NoonTomorrow(self):
##        "Return time instant that corresponds to tomorrow's GMT noon."
##        #return ppRetVal
##
##    def FindOccurrence(self):
##        'Return computed time instance if it occurs.'
##        #return ppRetVal
##
##    def OccursBefore(self, Epoch):
##        'Return true if computed time instance occurs before or at specified time, return false otherwise.'
##        #return pRetVal
##
##    def _get(self):
##        'Indicates whether to use start (true) or stop (false).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Indicates whether to use start (true) or stop (false).'
##    UseStart = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The reference interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference interval.'
##    ReferenceEventInterval = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

_IAgCrdnPointCovarianceGrazing._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1801), helpstring('Returns a type of the point object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([dispid(1802), helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1803), helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(4901), helpstring('Specify a reference point which will serve as the starting location for the line along which the grazing point will be computed.'), 'propget'], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4902), helpstring('Specify a direction vector to be used in conjunction with the displacement vector from the selected target object to the reference point to define a plane in which the line will lie.'), 'propget'], HRESULT, 'DirectionVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(4903), helpstring('Specify a target object about which the covariance ellipsoid is centered.'), 'propget'], HRESULT, 'TargetName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(4903), helpstring('Specify a target object about which the covariance ellipsoid is centered.'), 'propput'], HRESULT, 'TargetName',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(4904), helpstring('The point of closest approach to the covariance ellipsoid surface occurs at the specified distance.'), 'propget'], HRESULT, 'Distance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(4904), helpstring('The point of closest approach to the covariance ellipsoid surface occurs at the specified distance.'), 'propput'], HRESULT, 'Distance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(4905), helpstring('Specify a probability that the true position is inside the ellipsoid boundary.'), 'propget'], HRESULT, 'Probability',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(4905), helpstring('Specify a probability that the true position is inside the ellipsoid boundary.'), 'propput'], HRESULT, 'Probability',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(4906), helpstring('Specify a scale factor which is applied to the one sigma ellipsoid.'), 'propget'], HRESULT, 'Scale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(4906), helpstring('Specify a scale factor which is applied to the one sigma ellipsoid.'), 'propput'], HRESULT, 'Scale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(4907), helpstring('A flag controlling whether to use probability or scale factor.'), 'propget'], HRESULT, 'UseProbability',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(4907), helpstring('A flag controlling whether to use probability or scale factor.'), 'propput'], HRESULT, 'UseProbability',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPointCovarianceGrazing implementation
##class _IAgCrdnPointCovarianceGrazing_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Specify a reference point which will serve as the starting location for the line along which the grazing point will be computed.'
##        #return ppRetVal
##
##    @property
##    def DirectionVector(self):
##        'Specify a direction vector to be used in conjunction with the displacement vector from the selected target object to the reference point to define a plane in which the line will lie.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a target object about which the covariance ellipsoid is centered.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a target object about which the covariance ellipsoid is centered.'
##    TargetName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The point of closest approach to the covariance ellipsoid surface occurs at the specified distance.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The point of closest approach to the covariance ellipsoid surface occurs at the specified distance.'
##    Distance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a probability that the true position is inside the ellipsoid boundary.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a probability that the true position is inside the ellipsoid boundary.'
##    Probability = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a scale factor which is applied to the one sigma ellipsoid.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a scale factor which is applied to the one sigma ellipsoid.'
##    Scale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A flag controlling whether to use probability or scale factor.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A flag controlling whether to use probability or scale factor.'
##    UseProbability = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnPointLagrangeLibration(CoClass):
    'Libration point using one primary and multiple secondary central bodies. Set the central body, secondary central bodies, and point type.'
    _reg_clsid_ = GUID('{B537BA6B-AD3B-4985-939B-AF651BC8FB36}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnPointLagrangeLibration(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Libration point using one primary and multiple secondary central bodies. Set the central body, secondary central bodies, and point type.'
    _iid_ = GUID('{D0244D49-F0DE-44A2-A275-9CD0E0FC5AF3}')
    _idlflags_ = ['oleautomation']
AgCrdnPointLagrangeLibration._com_interfaces_ = [_IAgCrdnPointLagrangeLibration, IAgCrdnPointLagrangeLibration, IAgCrdnPoint, IAgCrdnTimeProperties, IAgCrdn]

class AgCrdnConditionScalarBounds(CoClass):
    'Defined by determining if input scalar is within specified bounds; returns +1 if satisfied, -1 if not satisfied and 0 if on boundary.'
    _reg_clsid_ = GUID('{C0E00D3E-C8FA-40B9-B8EB-C13CF3C5AF65}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnConditionScalarBounds._com_interfaces_ = [_IAgCrdnConditionScalarBounds, IAgCrdnConditionScalarBounds, IAgCrdnCondition, IAgCrdn]

_IAgCrdnConditionFactory._methods_ = [
    COMMETHOD([dispid(21901), helpstring('Creates and registers a condition using specified name, description and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnConditionType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(21907), helpstring('Creates a condition placing bounds on specified scalar.')], HRESULT, 'CreateConditionScalarBounds',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(21905), helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnConditionType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(21908), helpstring('Creates multiple conditions on specified scalar.')], HRESULT, 'CreateConditionCombined',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnConditionFactory implementation
##class _IAgCrdnConditionFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Creates and registers a condition using specified name, description and type.'
##        #return ppRetVal
##
##    def CreateConditionScalarBounds(self, Name, Description):
##        'Creates a condition placing bounds on specified scalar.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##
##    def CreateConditionCombined(self, Name, Description):
##        'Creates multiple conditions on specified scalar.'
##        #return ppRetVal
##

_IAgCrdnWellKnownAxes._methods_ = [
    COMMETHOD([dispid(10201), helpstring("Earth's well-known axes."), 'propget'], HRESULT, 'Earth',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnWellKnownEarthAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(10202), helpstring("The Sun's well-known axes."), 'propget'], HRESULT, 'Sun',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnWellKnownSunAxes)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnWellKnownAxes implementation
##class _IAgCrdnWellKnownAxes_Impl(object):
##    @property
##    def Earth(self):
##        "Earth's well-known axes."
##        #return ppRetVal
##
##    @property
##    def Sun(self):
##        "The Sun's well-known axes."
##        #return ppRetVal
##

class AgCrdnCentralBodyRefTo(CoClass):
    'Represents a central body reference.'
    _reg_clsid_ = GUID('{F6D4AD32-332B-4F1F-A262-A8B0A6268355}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnCentralBodyRefTo._com_interfaces_ = [_IAgCrdnCentralBodyRefTo, IAgCrdnCentralBodyRefTo, IAgCrdnRefTo]

class AgCrdnPointCommonTasks(CoClass):
    'Provides methods to create non-persistent VGT point components. Non-persistent components do not have names, do not get saved/loaded and are not shown in the VGT browser.'
    _reg_clsid_ = GUID('{9C13529A-A9D9-4680-840D-0760EAB6532F}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnPointCommonTasks._com_interfaces_ = [_IAgCrdnPointCommonTasks, IAgCrdnPointCommonTasks]

IAgCrdnAxesTransformResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The output vector in the current axes.')], HRESULT, 'Vector',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAxesTransformResult implementation
##class IAgCrdnAxesTransformResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Vector(self):
##        'The output vector in the current axes.'
##        #return ppRetVal
##

class AgCrdnConditionSet(CoClass):
    'Condition set returns an array of non-dimensional metrics, one for each condition in the set; each metric is positive if corresponding condition is satisfied, negative if not satisfied and 0 if on boundary; this provides computational methods needed for...'
    _reg_clsid_ = GUID('{FFF6DF8A-2947-4859-8BFE-94E905C114A4}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnConditionSet._com_interfaces_ = [_IAgCrdnConditionSet, IAgCrdnConditionSet, IAgCrdn]

class AgCrdnCentralBodyCollection(CoClass):
    'A collection of central body names.'
    _reg_clsid_ = GUID('{50537705-6E03-47FF-87FA-44BD985CDD51}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnCentralBodyCollection._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnCentralBodyCollection]

class AgCrdnPointCentBodyIntersect(CoClass):
    'Point on central body surface along direction vector originating at source point.'
    _reg_clsid_ = GUID('{B339C48B-CD83-4F4C-B0F8-2CD8AE461D5F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPointCentBodyIntersect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointCentBodyIntersect'
    _iid_ = GUID('{FB55912D-CA4B-4CE0-AE53-F4927D9CB488}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnPointCentBodyIntersect._com_interfaces_ = [_IAgCrdnPointCentBodyIntersect, IAgCrdnPointCentBodyIntersect, IAgCrdn, IAgCrdnTimeProperties, IAgCrdnPoint]

IAgCrdnVolumeGridResult._methods_ = [
    COMMETHOD(['propget', helpstring('Epoch of returned volumetric data.')], HRESULT, 'Epoch',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Number of grid point coordinates representing first dimension of volume grid.')], HRESULT, 'SizeI',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Number of grid point coordinates representing second dimension of volume grid.')], HRESULT, 'SizeJ',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Number of grid point coordinates representing third dimension of volume grid.')], HRESULT, 'SizeK',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Vector of scalar values representing volumetric data.')], HRESULT, 'VolumeMetricDataVector',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Vector of Cartesian coordinates of all volume grid points.')], HRESULT, 'VolumeMetricPositionVector',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Vector of native coordinates of all volume grid points.')], HRESULT, 'VolumeMetricNativePositionVector',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Vector of Cartesian coordinates representing gradient vectors at all volume grid points.')], HRESULT, 'VolumeMetricGradientVector',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeGridResult implementation
##class IAgCrdnVolumeGridResult_Impl(object):
##    @property
##    def Epoch(self):
##        'Epoch of returned volumetric data.'
##        #return pRetVal
##
##    @property
##    def SizeI(self):
##        'Number of grid point coordinates representing first dimension of volume grid.'
##        #return pRetVal
##
##    @property
##    def SizeJ(self):
##        'Number of grid point coordinates representing second dimension of volume grid.'
##        #return pRetVal
##
##    @property
##    def SizeK(self):
##        'Number of grid point coordinates representing third dimension of volume grid.'
##        #return pRetVal
##
##    @property
##    def VolumeMetricDataVector(self):
##        'Vector of scalar values representing volumetric data.'
##        #return ppRetVal
##
##    @property
##    def VolumeMetricPositionVector(self):
##        'Vector of Cartesian coordinates of all volume grid points.'
##        #return ppRetVal
##
##    @property
##    def VolumeMetricNativePositionVector(self):
##        'Vector of native coordinates of all volume grid points.'
##        #return ppRetVal
##
##    @property
##    def VolumeMetricGradientVector(self):
##        'Vector of Cartesian coordinates representing gradient vectors at all volume grid points.'
##        #return ppRetVal
##

class AgCrdnConditionSetFactory(CoClass):
    'The factory creates condition set components.'
    _reg_clsid_ = GUID('{F4D7A8D6-DEB8-4846-9525-897FE27185D7}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnConditionSetFactory._com_interfaces_ = [_IAgCrdnConditionSetFactory, IAgCrdnConditionSetFactory]

class AgCrdnCollection(CoClass):
    'A collection of VGT objects.'
    _reg_clsid_ = GUID('{9E594755-C8EE-4C82-94AF-5BB4CB93ED37}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnCollection._com_interfaces_ = [comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown, IAgCrdnCollection]

_IAgCrdnCalcScalar._methods_ = [
    COMMETHOD([dispid(12805), helpstring('Returns the scalar calculation type.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnCalcScalarType), 'pRetVal' )),
    COMMETHOD([dispid(12803), helpstring('Evaluates the scalar calculation at the specified time instant.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12806), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...')], HRESULT, 'QuickEvaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12804), helpstring('Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12807), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...')], HRESULT, 'QuickEvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(12808), helpstring('Returns a list of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(12809), helpstring("Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propget'], HRESULT, 'UnitOfMeasure',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(12810), helpstring('Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12811), helpstring('Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12812), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12813), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnCalcScalar implementation
##class _IAgCrdnCalcScalar_Impl(object):
##    @property
##    def Type(self):
##        'Returns the scalar calculation type.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant.'
##        #return ppRetVal
##
##    def QuickEvaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.'
##        #return ppRetVal
##
##    def QuickEvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...'
##        #return ppRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def GetAvailability(self):
##        'Returns a list of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def UnitOfMeasure(self):
##        "Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def QuickEvaluateArray(self, Times):
##        'Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateArray(self, Times):
##        'Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##

class AgCrdnPointAtTimeInstant(CoClass):
    'Point fixed relative to reference system based on another point evaluated at specified time instant.'
    _reg_clsid_ = GUID('{3D792692-B078-410A-8F7C-B3C0DE8AE432}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPointAtTimeInstant(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPointAtTimeInstant'
    _iid_ = GUID('{709D80EE-53A7-42B5-9DFB-F6AB61C6D0EA}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnPointAtTimeInstant._com_interfaces_ = [_IAgCrdnPointAtTimeInstant, IAgCrdnPointAtTimeInstant, IAgCrdn, IAgCrdnTimeProperties, IAgCrdnPoint]

class AgCrdnConditionSetScalarThresholds(CoClass):
    'Condition set based on single scalar calculation compared to set of threshold values.'
    _reg_clsid_ = GUID('{DFFF6864-3352-451F-89D9-1356ECF830CA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnConditionSetScalarThresholds._com_interfaces_ = [_IAgCrdnConditionSetScalarThresholds, IAgCrdnConditionSetScalarThresholds, IAgCrdnConditionSet, IAgCrdn]

class AgCrdnPointPlugin(CoClass):
    'A VGT point plugin.'
    _reg_clsid_ = GUID('{5F535260-9CBE-4ADE-A2A9-AC65D902C921}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnPointPlugin._com_interfaces_ = [_IAgCrdnPointPlugin, IAgCrdnPointPlugin, IAgCrdn, IAgCrdnTimeProperties, IAgCrdnPoint]

class AgCrdnPointSamplingResult(CoClass):
    'Contains tabulated positions and velocities of a point created by Sample method.'
    _reg_clsid_ = GUID('{EB112F43-8E0B-40C2-8B0A-2D46AE7041C9}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnPointSamplingResult._com_interfaces_ = [_IAgCrdnPointSamplingResult, IAgCrdnPointSamplingResult]

IAgCrdnEventIntervalList._methods_ = [
    COMMETHOD(['propget', helpstring('Return the type of interval list.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalListType), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the label descriptions associated with the interval list.')], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Get the labels associated with the interval list.')], HRESULT, 'Descriptions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Return computed interval list that can be empty.')], HRESULT, 'FindIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalListResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Determine if specified time falls within computed interval list.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalList implementation
##class IAgCrdnEventIntervalList_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval list.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the label descriptions associated with the interval list.'
##        #return ppRetVal
##
##    @property
##    def Descriptions(self):
##        'Get the labels associated with the interval list.'
##        #return ppRetVal
##
##    def FindIntervals(self):
##        'Return computed interval list that can be empty.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval list.'
##        #return pRetVal
##

class AgCrdnConverge(CoClass):
    'Represents a base class for convergence definitions.'
    _reg_clsid_ = GUID('{133CDCBC-E06E-4C48-BF1A-888E78253CC5}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnConverge._com_interfaces_ = [_IAgCrdnConverge, IAgCrdnConverge, IAgCrdn]

_IAgCrdnAngleBetweenPlanes._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(2001), helpstring('Returns a type of the angle object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAngleType), 'pRetVal' )),
    COMMETHOD([dispid(2002), helpstring('Finds an angle at the specified epoch.')], HRESULT, 'FindAngle',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindAngleResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2003), helpstring('Finds an angle and angle rate.')], HRESULT, 'FindAngleWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindAngleWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2004), helpstring('Finds the angle value and three vectors that define the angle in a specified input axes.')], HRESULT, 'FindCoordinates',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2005), helpstring('Finds the angle value, the angle rate and three vectors that define the angle in a specified input axes.')], HRESULT, 'FindCoordinatesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(3601), helpstring('Specify the first of the two planes the angle is measured.'), 'propget'], HRESULT, 'FromPlane',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(3602), helpstring('Specify the second of the two planes the angle is measured.'), 'propget'], HRESULT, 'ToPlane',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAngleBetweenPlanes implementation
##class _IAgCrdnAngleBetweenPlanes_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the angle object.'
##        #return pRetVal
##
##    def FindAngle(self, Epoch):
##        'Finds an angle at the specified epoch.'
##        #return ppRetVal
##
##    def FindAngleWithRate(self, Epoch):
##        'Finds an angle and angle rate.'
##        #return ppRetVal
##
##    def FindCoordinates(self, Epoch, Axes):
##        'Finds the angle value and three vectors that define the angle in a specified input axes.'
##        #return ppRetVal
##
##    def FindCoordinatesWithRate(self, Epoch, Axes):
##        'Finds the angle value, the angle rate and three vectors that define the angle in a specified input axes.'
##        #return ppRetVal
##
##    @property
##    def FromPlane(self):
##        'Specify the first of the two planes the angle is measured.'
##        #return ppRetVal
##
##    @property
##    def ToPlane(self):
##        'Specify the second of the two planes the angle is measured.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnAxesFactory._methods_ = [
    COMMETHOD([helpstring('Creates a VGT axes using specified name, description and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'AxesName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnAxesType, 'AxesType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns true if the type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnAxesType, 'Type' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('An array of display names associated with available axes plugins. The elements of the array are strings. Display names are used to create VGT axes based on COM plugins using CreateAxesPluginFromDisplayName method.')], HRESULT, 'AvailableAxesPluginDisplayNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an axes component based on a COM axes plugin. For information how to implement and register VGT plugins, see')], HRESULT, 'CreateAxesPluginFromDisplayName',
              ( ['in'], BSTR, 'AxesName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'DisplayName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAxesFactory implementation
##class IAgCrdnAxesFactory_Impl(object):
##    def Create(self, AxesName, Description, AxesType):
##        'Creates a VGT axes using specified name, description and type.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, Type):
##        'Returns true if the type is supported.'
##        #return pRetVal
##
##    @property
##    def AvailableAxesPluginDisplayNames(self):
##        'An array of display names associated with available axes plugins. The elements of the array are strings. Display names are used to create VGT axes based on COM plugins using CreateAxesPluginFromDisplayName method.'
##        #return ppRetVal
##
##    def CreateAxesPluginFromDisplayName(self, AxesName, Description, DisplayName):
##        'Create an axes component based on a COM axes plugin. For information how to implement and register VGT plugins, see'
##        #return ppRetVal
##

_IAgCrdnMethodCallResult._methods_ = [
    COMMETHOD([dispid(10301), helpstring('The computed angle rate. The value of the angle rate is in "AngleRateUnit" dimension.'), 'propget'], HRESULT, 'AngleRate',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(10401), helpstring('The computed angle. The value of the angle is in "AngleUnit" dimension.'), 'propget'], HRESULT, 'Angle',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(10402), helpstring('The first of the two vectors the angle is measured.'), 'propget'], HRESULT, 'VectorFrom',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD([dispid(10403), helpstring('The second of the two vectors the angle is measured.'), 'propget'], HRESULT, 'VectorTo',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD([dispid(10404), helpstring('The vector the angle is rotated about.'), 'propget'], HRESULT, 'VectorAbout',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD([dispid(10501), helpstring("The position of the plane's center point in the specified coordinate system."), 'propget'], HRESULT, 'OriginPosition',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD([dispid(10502), helpstring("The rate of change of the position of the plane's center point in the specified coordinate system."), 'propget'], HRESULT, 'OriginVelocity',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD([dispid(10503), helpstring('X-axis vector in the specified reference system.'), 'propget'], HRESULT, 'XAxis',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD([dispid(10504), helpstring('A rate of change of the X-axis vector in the specified reference system.'), 'propget'], HRESULT, 'XAxisRate',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD([dispid(10505), helpstring('Y-axis vector in the specified reference system.'), 'propget'], HRESULT, 'YAxis',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD([dispid(10506), helpstring('A rate of change of the Y-axis vector in the specified reference system.'), 'propget'], HRESULT, 'YAxisRate',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD([dispid(10801), helpstring('A position vector.'), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD([dispid(10802), helpstring('A velocity vector.'), 'propget'], HRESULT, 'Velocity',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD([dispid(10803), helpstring('Orientation.'), 'propget'], HRESULT, 'Orientation',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation)), 'ppRetVal' )),
    COMMETHOD([dispid(10901), helpstring('The vector in a specified axes.'), 'propget'], HRESULT, 'Vector',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD([dispid(10902), helpstring('The vector rate in a specified axes.'), 'propget'], HRESULT, 'Rate',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD([dispid(11001), helpstring('True indicates the method call was successful.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnMethodCallResult implementation
##class _IAgCrdnMethodCallResult_Impl(object):
##    @property
##    def AngleRate(self):
##        'The computed angle rate. The value of the angle rate is in "AngleRateUnit" dimension.'
##        #return pRetVal
##
##    @property
##    def Angle(self):
##        'The computed angle. The value of the angle is in "AngleUnit" dimension.'
##        #return pRetVal
##
##    @property
##    def VectorFrom(self):
##        'The first of the two vectors the angle is measured.'
##        #return ppRetVal
##
##    @property
##    def VectorTo(self):
##        'The second of the two vectors the angle is measured.'
##        #return ppRetVal
##
##    @property
##    def VectorAbout(self):
##        'The vector the angle is rotated about.'
##        #return ppRetVal
##
##    @property
##    def OriginPosition(self):
##        "The position of the plane's center point in the specified coordinate system."
##        #return ppRetVal
##
##    @property
##    def OriginVelocity(self):
##        "The rate of change of the position of the plane's center point in the specified coordinate system."
##        #return ppRetVal
##
##    @property
##    def XAxis(self):
##        'X-axis vector in the specified reference system.'
##        #return ppRetVal
##
##    @property
##    def XAxisRate(self):
##        'A rate of change of the X-axis vector in the specified reference system.'
##        #return ppRetVal
##
##    @property
##    def YAxis(self):
##        'Y-axis vector in the specified reference system.'
##        #return ppRetVal
##
##    @property
##    def YAxisRate(self):
##        'A rate of change of the Y-axis vector in the specified reference system.'
##        #return ppRetVal
##
##    @property
##    def Position(self):
##        'A position vector.'
##        #return ppRetVal
##
##    @property
##    def Velocity(self):
##        'A velocity vector.'
##        #return ppRetVal
##
##    @property
##    def Orientation(self):
##        'Orientation.'
##        #return ppRetVal
##
##    @property
##    def Vector(self):
##        'The vector in a specified axes.'
##        #return ppRetVal
##
##    @property
##    def Rate(self):
##        'The vector rate in a specified axes.'
##        #return ppRetVal
##
##    @property
##    def IsValid(self):
##        'True indicates the method call was successful.'
##        #return pRetVal
##

_IAgCrdnVolumeFromTimeSatisfaction._methods_ = [
    COMMETHOD([dispid(33001), helpstring('The interval list within which the global minimum or maximum is sought. The default is the overall availability of host object.'), 'propget'], HRESULT, 'TimeSatisfaction',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(33001), helpstring('The interval list within which the global minimum or maximum is sought. The default is the overall availability of host object.'), 'propput'], HRESULT, 'TimeSatisfaction',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVolumeFromTimeSatisfaction implementation
##class _IAgCrdnVolumeFromTimeSatisfaction_Impl(object):
##    def _get(self):
##        'The interval list within which the global minimum or maximum is sought. The default is the overall availability of host object.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The interval list within which the global minimum or maximum is sought. The default is the overall availability of host object.'
##    TimeSatisfaction = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnPointCBFixedOffset(CoClass):
    'Point specified by fixed components with respect to central body.'
    _reg_clsid_ = GUID('{55015F91-EF62-47F3-90DE-2F3A7DF98649}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnPointCBFixedOffset._com_interfaces_ = [_IAgCrdnPointCBFixedOffset, IAgCrdnPointCBFixedOffset, IAgCrdn, IAgCrdnTimeProperties, IAgCrdnPoint]

class AgCrdnPointSamplingInterval(CoClass):
    'The interface represents an interval with the time, position and velocity arrays.'
    _reg_clsid_ = GUID('{D8E9ECEF-2856-4763-8B23-3AA2D63C9CBA}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnPointSamplingInterval._com_interfaces_ = [_IAgCrdnPointSamplingInterval, IAgCrdnPointSamplingInterval]

IAgCrdnAngleFindAngleResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The computed angle. The value of the angle is in "AngleUnit" dimension.')], HRESULT, 'Angle',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAngleFindAngleResult implementation
##class IAgCrdnAngleFindAngleResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Angle(self):
##        'The computed angle. The value of the angle is in "AngleUnit" dimension.'
##        #return pRetVal
##

class AgCrdnConvergeBasic(CoClass):
    'Convergence definition includes parameters that determine criteria for accurate detection of extrema or condition crossings for scalar calculations.'
    _reg_clsid_ = GUID('{1D3CBB04-D011-411C-8D2E-D8E7A7CE808B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnConvergeBasic._com_interfaces_ = [_IAgCrdnConvergeBasic, IAgCrdnConvergeBasic, IAgCrdnConverge, IAgCrdn]

class _IAgCrdnAxesSpinning(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesSpinning'
    _iid_ = GUID('{DEBD1E7D-A56C-456E-AECE-345F224BCD6A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnAxesSpinning._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1701), helpstring('Returns a type of the axes object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAxesType), 'pRetVal' )),
    COMMETHOD([dispid(1706), helpstring('Find an angular velocity and orientation in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1707), helpstring('Find an orientation in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1708), helpstring('Returns an object that allows modifying the axes labels.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(3101), helpstring('Specify a spin vector.'), 'propget'], HRESULT, 'SpinVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(3102), helpstring('Specify a reference axes.'), 'propget'], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(3103), helpstring('Specify an epoch at which the axes are aligned with the reference axes.'), 'propget'], HRESULT, 'Epoch',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(3103), helpstring('Specify an epoch at which the axes are aligned with the reference axes.'), 'propput'], HRESULT, 'Epoch',
              ( ['in'], VARIANT, 'pRetVal' )),
    COMMETHOD([dispid(3104), helpstring('Specify an additional rotational offset.'), 'propget'], HRESULT, 'InitialOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(3104), helpstring('Specify an additional rotational offset.'), 'propput'], HRESULT, 'InitialOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(3105), helpstring('Specify a spin rate the axes spins about the spin vector.'), 'propget'], HRESULT, 'SpinRate',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(3105), helpstring('Specify a spin rate the axes spins about the spin vector.'), 'propput'], HRESULT, 'SpinRate',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1709), helpstring('Returns the X axis of the component.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1710), helpstring('Returns the Y axis of the component.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1711), helpstring('Returns the Z axis of the component.'), 'propget'], HRESULT, 'Z',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1712), helpstring('Transforms the input vector from this axes into the output axes.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1713), helpstring("Transforms the input vector and vector's rate from this axes into the output axes.")], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'RateInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAxesSpinning implementation
##class _IAgCrdnAxesSpinning_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the axes object.'
##        #return pRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Find an angular velocity and orientation in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Find an orientation in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        'Returns an object that allows modifying the axes labels.'
##        #return ppRetVal
##
##    @property
##    def SpinVector(self):
##        'Specify a spin vector.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify an epoch at which the axes are aligned with the reference axes.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an epoch at which the axes are aligned with the reference axes.'
##    Epoch = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify an additional rotational offset.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an additional rotational offset.'
##    InitialOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a spin rate the axes spins about the spin vector.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a spin rate the axes spins about the spin vector.'
##    SpinRate = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    @property
##    def X(self):
##        'Returns the X axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Y(self):
##        'Returns the Y axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Z(self):
##        'Returns the Z axis of the component.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputAxes, VectorInMyAxes):
##        'Transforms the input vector from this axes into the output axes.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputAxes, VectorInMyAxes, RateInMyAxes):
##        "Transforms the input vector and vector's rate from this axes into the output axes."
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnEventArraySignaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Determines what time array is recorded at target clock location by performing signal transmission of original time array between base and target clock locations...'
    _iid_ = GUID('{26EFA01F-3FA3-46A2-BCF4-AAC32D889371}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventArraySignaled._methods_ = [
    COMMETHOD(['propget', helpstring('The original time array.')], HRESULT, 'OriginalTimeArray',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The original time array.')], HRESULT, 'OriginalTimeArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.')], HRESULT, 'SignalSense',
              ( ['out', 'retval'], POINTER(AgECrdnSignalSense), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.')], HRESULT, 'SignalSense',
              ( ['in'], AgECrdnSignalSense, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The base clock location, which is a point from VGT.')], HRESULT, 'BaseClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The base clock location, which is a point from VGT.')], HRESULT, 'BaseClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The target clock location, which is a point from VGT.')], HRESULT, 'TargetClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The target clock location, which is a point from VGT.')], HRESULT, 'TargetClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.')], HRESULT, 'SignalDelay',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSignalDelay)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.')], HRESULT, 'SignalDelay',
              ( ['in'], POINTER(IAgCrdnSignalDelay), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventArraySignaled implementation
##class IAgCrdnEventArraySignaled_Impl(object):
##    def _get(self):
##        'The original time array.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original time array.'
##    OriginalTimeArray = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'
##    SignalSense = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The base clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The base clock location, which is a point from VGT.'
##    BaseClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The target clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The target clock location, which is a point from VGT.'
##    TargetClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##    SignalDelay = property(_get, _set, doc = _set.__doc__)
##

_IAgCrdnEventIntervalCollectionCondition._methods_ = [
    COMMETHOD([dispid(22204), helpstring('Return the type of collection of interval lists.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalCollectionType), 'pRetVal' )),
    COMMETHOD([dispid(22201), helpstring('Get the labels associated with the interval lists in the collection.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(22202), helpstring('Return computed collection of interval lists.')], HRESULT, 'FindIntervalCollection',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalsVectorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(22203), helpstring('Determine if specified time falls within any of the computed interval lists in the collection.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollectionOccurredResult)), 'ppRetVal' )),
    COMMETHOD([dispid(30901), helpstring('Get/set the condition set object.'), 'propget'], HRESULT, 'ConditionSet',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionSet)), 'ppRetVal' )),
    COMMETHOD([dispid(30901), helpstring('Get/set the condition set object.'), 'propput'], HRESULT, 'ConditionSet',
              ( ['in'], POINTER(IAgCrdnConditionSet), 'ppRetVal' )),
    COMMETHOD([dispid(30902), helpstring('A custom interval list or a single interval. By default it is set to overall availability of host object. This determines time limits within which global minimum or maximum is sought. The time limits will be used if UseCustomTimeLimits is set to true.'), 'propget'], HRESULT, 'CustomTimeLimits',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(30902), helpstring('A custom interval list or a single interval. By default it is set to overall availability of host object. This determines time limits within which global minimum or maximum is sought. The time limits will be used if UseCustomTimeLimits is set to true.'), 'propput'], HRESULT, 'CustomTimeLimits',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD([dispid(30903), helpstring('Specify whether to use specified custom interval list (see CustomTimeLimits).'), 'propget'], HRESULT, 'UseCustomTimeLimits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(30903), helpstring('Specify whether to use specified custom interval list (see CustomTimeLimits).'), 'propput'], HRESULT, 'UseCustomTimeLimits',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(30904), helpstring('Determines if computed time of extremum is saved/loaded, otherwise it is recomputed on load if necessary.'), 'propget'], HRESULT, 'SaveDataOption',
              ( ['out', 'retval'], POINTER(AgECrdnSaveDataOption), 'pRetVal' )),
    COMMETHOD([dispid(30904), helpstring('Determines if computed time of extremum is saved/loaded, otherwise it is recomputed on load if necessary.'), 'propput'], HRESULT, 'SaveDataOption',
              ( ['in'], AgECrdnSaveDataOption, 'pRetVal' )),
    COMMETHOD([dispid(30905), helpstring('A Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propget'], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD([dispid(30905), helpstring('A Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propput'], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD([dispid(30906), helpstring('A Convergence definition, which uses time tolerance to determine when time of extremum is found.'), 'propget'], HRESULT, 'Convergence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConverge)), 'ppRetVal' )),
    COMMETHOD([dispid(30906), helpstring('A Convergence definition, which uses time tolerance to determine when time of extremum is found.'), 'propput'], HRESULT, 'Convergence',
              ( ['in'], POINTER(IAgCrdnConverge), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalCollectionCondition implementation
##class _IAgCrdnEventIntervalCollectionCondition_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of collection of interval lists.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the labels associated with the interval lists in the collection.'
##        #return ppRetVal
##
##    def FindIntervalCollection(self):
##        'Return computed collection of interval lists.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within any of the computed interval lists in the collection.'
##        #return ppRetVal
##
##    def _get(self):
##        'Get/set the condition set object.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get/set the condition set object.'
##    ConditionSet = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A custom interval list or a single interval. By default it is set to overall availability of host object. This determines time limits within which global minimum or maximum is sought. The time limits will be used if UseCustomTimeLimits is set to true.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A custom interval list or a single interval. By default it is set to overall availability of host object. This determines time limits within which global minimum or maximum is sought. The time limits will be used if UseCustomTimeLimits is set to true.'
##    CustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use specified custom interval list (see CustomTimeLimits).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use specified custom interval list (see CustomTimeLimits).'
##    UseCustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Determines if computed time of extremum is saved/loaded, otherwise it is recomputed on load if necessary.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Determines if computed time of extremum is saved/loaded, otherwise it is recomputed on load if necessary.'
##    SaveDataOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##    Convergence = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnCalcScalarGroup._methods_ = [
    COMMETHOD([dispid(19001), helpstring('Removes a specified element.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'EventName' )),
    COMMETHOD([dispid(19002), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(19003), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the group.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19005), helpstring('Returns a factory object used to create calc scalar components.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalarFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns an element by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnCalcScalarGroup implementation
##class IAgCrdnCalcScalarGroup_Impl(object):
##    def Remove(self, EventName):
##        'Removes a specified element.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the group.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a factory object used to create calc scalar components.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns an element by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

class AgCrdnSystemAssembled(CoClass):
    'A system assembled from an origin point and a set of reference axes.'
    _reg_clsid_ = GUID('{BFFD3CD1-C65E-487A-A137-6544B3ADC57F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnSystemAssembled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnSystemAssembled'
    _iid_ = GUID('{557242BF-E6CF-48D9-B317-51FF48EE417B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnSystemAssembled._com_interfaces_ = [_IAgCrdnSystemAssembled, IAgCrdnSystemAssembled, IAgCrdnSystem, IAgCrdnTimeProperties, IAgCrdn]

class AgCrdnPointSamplingIntervalCollection(CoClass):
    'A collection of intervals where each interval contains the time, position and velocity arrays.'
    _reg_clsid_ = GUID('{C1B18CFF-9B64-4DDB-850E-C1A95E9C43B1}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnPointSamplingIntervalCollection._com_interfaces_ = [_IAgCrdnPointSamplingIntervalCollection, IAgCrdnPointSamplingIntervalCollection]

IAgCrdnEventSmartEpoch._methods_ = [
    COMMETHOD(['propget', helpstring('Represents the time instant if the state is set to explicit.')], HRESULT, 'TimeInstant',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A reference event object used to compute time instant if the state is set to implicit.')], HRESULT, 'ReferenceEvent',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('State of the event.')], HRESULT, 'State',
              ( ['out', 'retval'], POINTER(AgECrdnSmartEpochState), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('State of the event.')], HRESULT, 'State',
              ( ['in'], AgECrdnSmartEpochState, 'pRetVal' )),
    COMMETHOD([helpstring("Sets explicit time instant and the smart epoch's state to Explicit.")], HRESULT, 'SetExplicitTime',
              ( ['in'], VARIANT, 'Epoch' )),
    COMMETHOD([helpstring("Sets the reference event and the smart epoch's state to Implicit.")], HRESULT, 'SetImplicitTime',
              ( ['in'], POINTER(IAgCrdnEvent), 'EventEpoch' )),
]
################################################################
## code template for IAgCrdnEventSmartEpoch implementation
##class IAgCrdnEventSmartEpoch_Impl(object):
##    @property
##    def TimeInstant(self):
##        'Represents the time instant if the state is set to explicit.'
##        #return pRetVal
##
##    @property
##    def ReferenceEvent(self):
##        'A reference event object used to compute time instant if the state is set to implicit.'
##        #return ppRetVal
##
##    def _get(self):
##        'State of the event.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'State of the event.'
##    State = property(_get, _set, doc = _set.__doc__)
##
##    def SetExplicitTime(self, Epoch):
##        "Sets explicit time instant and the smart epoch's state to Explicit."
##        #return 
##
##    def SetImplicitTime(self, EventEpoch):
##        "Sets the reference event and the smart epoch's state to Implicit."
##        #return 
##

class AgCrdnDerivative(CoClass):
    'Represents a base class for derivative definitions.'
    _reg_clsid_ = GUID('{AC5F654D-B694-45A2-8ADF-5EC63DDEA8F1}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnDerivative._com_interfaces_ = [_IAgCrdnDerivative, IAgCrdnDerivative, IAgCrdn]

IAgCrdnAxes._methods_ = [
    COMMETHOD(['propget', helpstring('Returns a type of the axes object.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAxesType), 'pRetVal' )),
    COMMETHOD([helpstring('Find an angular velocity and orientation in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Find an orientation in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns an object that allows modifying the axes labels.')], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesLabels)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the X axis of the component.')], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the Y axis of the component.')], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the Z axis of the component.')], HRESULT, 'Z',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([helpstring('Transforms the input vector from this axes into the output axes.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformResult)), 'ppRetVal' )),
    COMMETHOD([helpstring("Transforms the input vector and vector's rate from this axes into the output axes.")], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'RateInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformWithRateResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAxes implementation
##class IAgCrdnAxes_Impl(object):
##    @property
##    def Type(self):
##        'Returns a type of the axes object.'
##        #return pRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Find an angular velocity and orientation in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Find an orientation in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        'Returns an object that allows modifying the axes labels.'
##        #return ppRetVal
##
##    @property
##    def X(self):
##        'Returns the X axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Y(self):
##        'Returns the Y axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Z(self):
##        'Returns the Z axis of the component.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputAxes, VectorInMyAxes):
##        'Transforms the input vector from this axes into the output axes.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputAxes, VectorInMyAxes, RateInMyAxes):
##        "Transforms the input vector and vector's rate from this axes into the output axes."
##        #return ppRetVal
##

IAgCrdnWellKnownSystems._methods_ = [
    COMMETHOD(['propget', helpstring("Earth's coordinate reference systems.")], HRESULT, 'Earth',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnWellKnownEarthSystems)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("The Sun's coordinate reference systems.")], HRESULT, 'Sun',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnWellKnownSunSystems)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnWellKnownSystems implementation
##class IAgCrdnWellKnownSystems_Impl(object):
##    @property
##    def Earth(self):
##        "Earth's coordinate reference systems."
##        #return ppRetVal
##
##    @property
##    def Sun(self):
##        "The Sun's coordinate reference systems."
##        #return ppRetVal
##

class AgCrdnSystemOnSurface(CoClass):
    'A system with an origin on the surface of the central body with topocentric axes rotated on a clock angle. Specify the central body, angle, and the latitude, longitude, and altitude of the origin.'
    _reg_clsid_ = GUID('{6A2E9503-6FF2-4100-9B83-D2069D9556DC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnSystemOnSurface(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnSystemOnSurface'
    _iid_ = GUID('{60AB961C-A38D-4CED-9BF2-4C31E658DD70}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnSystemOnSurface._com_interfaces_ = [_IAgCrdnSystemOnSurface, IAgCrdnSystemOnSurface, IAgCrdnSystem, IAgCrdnTimeProperties, IAgCrdn]

class AgCrdnAxesSamplingResult(CoClass):
    'Contains tabulated orientations and angular velocities of axes created by Sample method.'
    _reg_clsid_ = GUID('{6AB7C82E-971A-4696-BC74-E0E82E079E77}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesSamplingResult._com_interfaces_ = [_IAgCrdnAxesSamplingResult, IAgCrdnAxesSamplingResult]

class AgCrdnDerivativeBasic(CoClass):
    'Derivative definition determines how numerical differencing is used to compute derivatives.'
    _reg_clsid_ = GUID('{577A35AD-8BA9-4C13-AFBB-F16CBE85FD91}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnDerivativeBasic._com_interfaces_ = [_IAgCrdnDerivativeBasic, IAgCrdnDerivativeBasic, IAgCrdnDerivative, IAgCrdn]

IAgCrdnPlaneFindInSystemWithRateResult._methods_ = [
    COMMETHOD(['propget', helpstring('True indicates the method call was successful.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("The position of the plane's center point in the specified coordinate system.")], HRESULT, 'OriginPosition',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("The rate of change of the position of the plane's center point in the specified coordinate system.")], HRESULT, 'OriginVelocity',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('X-axis vector in the specified reference system.')], HRESULT, 'XAxis',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A rate of change of the X-axis vector in the specified reference system.')], HRESULT, 'XAxisRate',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Y-axis vector in the specified reference system.')], HRESULT, 'YAxis',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A rate of change of the Y-axis vector in the specified reference system.')], HRESULT, 'YAxisRate',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPlaneFindInSystemWithRateResult implementation
##class IAgCrdnPlaneFindInSystemWithRateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'True indicates the method call was successful.'
##        #return pRetVal
##
##    @property
##    def OriginPosition(self):
##        "The position of the plane's center point in the specified coordinate system."
##        #return ppRetVal
##
##    @property
##    def OriginVelocity(self):
##        "The rate of change of the position of the plane's center point in the specified coordinate system."
##        #return ppRetVal
##
##    @property
##    def XAxis(self):
##        'X-axis vector in the specified reference system.'
##        #return ppRetVal
##
##    @property
##    def XAxisRate(self):
##        'A rate of change of the X-axis vector in the specified reference system.'
##        #return ppRetVal
##
##    @property
##    def YAxis(self):
##        'Y-axis vector in the specified reference system.'
##        #return ppRetVal
##
##    @property
##    def YAxisRate(self):
##        'A rate of change of the Y-axis vector in the specified reference system.'
##        #return ppRetVal
##

_IAgCrdnCalcScalarAngle._methods_ = [
    COMMETHOD([dispid(12805), helpstring('Returns the scalar calculation type.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnCalcScalarType), 'pRetVal' )),
    COMMETHOD([dispid(12803), helpstring('Evaluates the scalar calculation at the specified time instant.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12806), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...')], HRESULT, 'QuickEvaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12804), helpstring('Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12807), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...')], HRESULT, 'QuickEvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(15803), helpstring('The input angle, which is a VGT angle component. Note angle computation in VGT may involve more than just angular displacement value: in VGT angles may be drawn in 3D which requires knowledge and evaluation of supporting vectors.'), 'propget'], HRESULT, 'InputAngle',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngle)), 'ppRetVal' )),
    COMMETHOD([dispid(15803), helpstring('The input angle, which is a VGT angle component. Note angle computation in VGT may involve more than just angular displacement value: in VGT angles may be drawn in 3D which requires knowledge and evaluation of supporting vectors.'), 'propput'], HRESULT, 'InputAngle',
              ( ['in'], POINTER(IAgCrdnAngle), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(12808), helpstring('Returns a list of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(12809), helpstring("Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propget'], HRESULT, 'UnitOfMeasure',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(12810), helpstring('Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12811), helpstring('Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12812), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12813), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnCalcScalarAngle implementation
##class _IAgCrdnCalcScalarAngle_Impl(object):
##    @property
##    def Type(self):
##        'Returns the scalar calculation type.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant.'
##        #return ppRetVal
##
##    def QuickEvaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.'
##        #return ppRetVal
##
##    def QuickEvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...'
##        #return ppRetVal
##
##    def _get(self):
##        'The input angle, which is a VGT angle component. Note angle computation in VGT may involve more than just angular displacement value: in VGT angles may be drawn in 3D which requires knowledge and evaluation of supporting vectors.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The input angle, which is a VGT angle component. Note angle computation in VGT may involve more than just angular displacement value: in VGT angles may be drawn in 3D which requires knowledge and evaluation of supporting vectors.'
##    InputAngle = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def GetAvailability(self):
##        'Returns a list of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def UnitOfMeasure(self):
##        "Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def QuickEvaluateArray(self, Times):
##        'Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateArray(self, Times):
##        'Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##

class AgCrdnLLAPosition(CoClass):
    'A position represented by the Latitude, longtitude and Latitude.'
    _reg_clsid_ = GUID('{B5FC4253-52C7-40C9-949B-F089E70A1CF5}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnLLAPosition._com_interfaces_ = [_IAgCrdnLLAPosition, IAgCrdnLLAPosition]

IAgCrdnAxesTransformWithRateResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The output vector in the current axes.')], HRESULT, 'Vector',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The vector velocity.')], HRESULT, 'Velocity',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAxesTransformWithRateResult implementation
##class IAgCrdnAxesTransformWithRateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Vector(self):
##        'The output vector in the current axes.'
##        #return ppRetVal
##
##    @property
##    def Velocity(self):
##        'The vector velocity.'
##        #return ppRetVal
##

class AgCrdnAxesSamplingInterval(CoClass):
    'The interface represents an interval with the time, orientation and velocity arrays.'
    _reg_clsid_ = GUID('{03580B9D-F516-4AE0-AF2C-49533853D69B}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesSamplingInterval._com_interfaces_ = [_IAgCrdnAxesSamplingInterval, IAgCrdnAxesSamplingInterval]

class AgCrdnEvent(CoClass):
    'Defines an event (time instant).'
    _reg_clsid_ = GUID('{6C2EBEBD-3DEB-4362-B347-C3DA33FB37E3}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEvent(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEvent'
    _iid_ = GUID('{E280DCE3-DF5F-4E53-914C-2C4A883B326D}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnEvent._com_interfaces_ = [_IAgCrdnEvent, IAgCrdnEvent, IAgCrdn]

_IAgCrdnInterval._methods_ = [
    COMMETHOD([dispid(11101), helpstring("The interval's start time."), 'propget'], HRESULT, 'Start',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(11102), helpstring("The interval's stop time."), 'propget'], HRESULT, 'Stop',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnInterval implementation
##class _IAgCrdnInterval_Impl(object):
##    @property
##    def Start(self):
##        "The interval's start time."
##        #return pRetVal
##
##    @property
##    def Stop(self):
##        "The interval's stop time."
##        #return pRetVal
##

_IAgCrdnCalcScalarFixedAtTimeInstant._methods_ = [
    COMMETHOD([dispid(12805), helpstring('Returns the scalar calculation type.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnCalcScalarType), 'pRetVal' )),
    COMMETHOD([dispid(12803), helpstring('Evaluates the scalar calculation at the specified time instant.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12806), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...')], HRESULT, 'QuickEvaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12804), helpstring('Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12807), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...')], HRESULT, 'QuickEvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(27201), helpstring('The input scalar component.'), 'propget'], HRESULT, 'InputScalar',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(27201), helpstring('The input scalar component.'), 'propput'], HRESULT, 'InputScalar',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD([dispid(27202), helpstring('The reference time instant.'), 'propget'], HRESULT, 'ReferenceTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(27202), helpstring('The reference time instant.'), 'propput'], HRESULT, 'ReferenceTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(12808), helpstring('Returns a list of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(12809), helpstring("Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propget'], HRESULT, 'UnitOfMeasure',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(12810), helpstring('Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12811), helpstring('Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12812), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12813), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnCalcScalarFixedAtTimeInstant implementation
##class _IAgCrdnCalcScalarFixedAtTimeInstant_Impl(object):
##    @property
##    def Type(self):
##        'Returns the scalar calculation type.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant.'
##        #return ppRetVal
##
##    def QuickEvaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.'
##        #return ppRetVal
##
##    def QuickEvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...'
##        #return ppRetVal
##
##    def _get(self):
##        'The input scalar component.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The input scalar component.'
##    InputScalar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The reference time instant.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference time instant.'
##    ReferenceTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def GetAvailability(self):
##        'Returns a list of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def UnitOfMeasure(self):
##        "Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def QuickEvaluateArray(self, Times):
##        'Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateArray(self, Times):
##        'Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##

class AgCrdnSystemCommonTasks(CoClass):
    'Provides methods to create non-persistent VGT coordinate reference frames (systems). Non-persistent components do not have names, do not get saved/loaded and are not shown in the VGT browser.'
    _reg_clsid_ = GUID('{1DA621A3-BFD0-46EA-81BB-8AE251DD4AFD}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnSystemCommonTasks._com_interfaces_ = [_IAgCrdnSystemCommonTasks, IAgCrdnSystemCommonTasks]

class AgCrdnAxesSamplingIntervalCollection(CoClass):
    'A collection of intervals where each interval contains the time, orientation and velocity arrays.'
    _reg_clsid_ = GUID('{5149225A-B65D-46E4-B1A2-69CAEB60C45B}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnAxesSamplingIntervalCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesSamplingIntervalCollection'
    _iid_ = GUID('{6DFB8265-5D6C-4AFF-B970-5C71FBC15091}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnAxesSamplingIntervalCollection._com_interfaces_ = [_IAgCrdnAxesSamplingIntervalCollection, IAgCrdnAxesSamplingIntervalCollection]

class AgCrdnEventArray(CoClass):
    'An ordered array of times, which may or may not be evenly spaced.'
    _reg_clsid_ = GUID('{94A82330-C95E-4FF8-809A-7677C45786AA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventArray._com_interfaces_ = [_IAgCrdnEventArray, IAgCrdnEventArray, IAgCrdn]

_IAgCrdnEventIntervalListCondition._methods_ = [
    COMMETHOD([dispid(13509), helpstring('Return the type of interval list.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalListType), 'pRetVal' )),
    COMMETHOD([dispid(13502), helpstring('Get the label descriptions associated with the interval list.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13503), helpstring('Get the labels associated with the interval list.'), 'propget'], HRESULT, 'Descriptions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13507), helpstring('Return computed interval list that can be empty.')], HRESULT, 'FindIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalListResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13508), helpstring('Determine if specified time falls within computed interval list.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17202), helpstring('The condition that must be satisfied.'), 'propget'], HRESULT, 'Condition',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17202), helpstring('The condition that must be satisfied.'), 'propput'], HRESULT, 'Condition',
              ( ['in'], POINTER(IAgCrdnCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17207), helpstring('The interval list or single interval within which intervals of satisfaction are sought. The specified value is used if UseCustomTimeLimits is true. The default is set to overall availability of host object.'), 'propget'], HRESULT, 'CustomTimeLimits',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(17207), helpstring('The interval list or single interval within which intervals of satisfaction are sought. The specified value is used if UseCustomTimeLimits is true. The default is set to overall availability of host object.'), 'propput'], HRESULT, 'CustomTimeLimits',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD([dispid(17209), helpstring('Specify whether to use custom time limits.'), 'propget'], HRESULT, 'UseCustomTimeLimits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17209), helpstring('Specify whether to use custom time limits.'), 'propput'], HRESULT, 'UseCustomTimeLimits',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17210), helpstring('Determine if computed intervals of satisfaction are saved/loaded, or recomputed on load if necessary.'), 'propget'], HRESULT, 'SaveDataOption',
              ( ['out', 'retval'], POINTER(AgECrdnSaveDataOption), 'pRetVal' )),
    COMMETHOD([dispid(17210), helpstring('Determine if computed intervals of satisfaction are saved/loaded, or recomputed on load if necessary.'), 'propput'], HRESULT, 'SaveDataOption',
              ( ['in'], AgECrdnSaveDataOption, 'pRetVal' )),
    COMMETHOD([dispid(17211), helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propget'], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD([dispid(17211), helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propput'], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD([dispid(17213), helpstring('The Convergence definition, which uses time tolerance to determine when time of extremum is found.'), 'propget'], HRESULT, 'Convergence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConverge)), 'ppRetVal' )),
    COMMETHOD([dispid(17213), helpstring('The Convergence definition, which uses time tolerance to determine when time of extremum is found.'), 'propput'], HRESULT, 'Convergence',
              ( ['in'], POINTER(IAgCrdnConverge), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalListCondition implementation
##class _IAgCrdnEventIntervalListCondition_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval list.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the label descriptions associated with the interval list.'
##        #return ppRetVal
##
##    @property
##    def Descriptions(self):
##        'Get the labels associated with the interval list.'
##        #return ppRetVal
##
##    def FindIntervals(self):
##        'Return computed interval list that can be empty.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval list.'
##        #return pRetVal
##
##    def _get(self):
##        'The condition that must be satisfied.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The condition that must be satisfied.'
##    Condition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The interval list or single interval within which intervals of satisfaction are sought. The specified value is used if UseCustomTimeLimits is true. The default is set to overall availability of host object.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The interval list or single interval within which intervals of satisfaction are sought. The specified value is used if UseCustomTimeLimits is true. The default is set to overall availability of host object.'
##    CustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use custom time limits.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use custom time limits.'
##    UseCustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Determine if computed intervals of satisfaction are saved/loaded, or recomputed on load if necessary.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Determine if computed intervals of satisfaction are saved/loaded, or recomputed on load if necessary.'
##    SaveDataOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##    Convergence = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

_IAgCrdnVectorVelocityAcceleration._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(28801), helpstring('A reference (coordinate) system. Can be any VGT system.'), 'propget'], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(28801), helpstring('A reference (coordinate) system. Can be any VGT system.'), 'propput'], HRESULT, 'ReferenceSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(28802), helpstring('A point which velocity this vector represents. Can be any VGT point.'), 'propget'], HRESULT, 'Point',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(28802), helpstring('A point which velocity this vector represents. Can be any VGT point.'), 'propput'], HRESULT, 'Point',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(28803), helpstring('Time step used in numerical evaluation of derivatives using central differencing.'), 'propget'], HRESULT, 'DifferencingTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(28803), helpstring('Time step used in numerical evaluation of derivatives using central differencing.'), 'propput'], HRESULT, 'DifferencingTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorVelocityAcceleration implementation
##class _IAgCrdnVectorVelocityAcceleration_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'A reference (coordinate) system. Can be any VGT system.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A reference (coordinate) system. Can be any VGT system.'
##    ReferenceSystem = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A point which velocity this vector represents. Can be any VGT point.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A point which velocity this vector represents. Can be any VGT point.'
##    Point = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Time step used in numerical evaluation of derivatives using central differencing.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Time step used in numerical evaluation of derivatives using central differencing.'
##    DifferencingTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnVectorAngleRate(CoClass):
    'Angle rate vector perpendicular to the plane in which the angle is defined.'
    _reg_clsid_ = GUID('{C08E3A97-E60B-47C9-886C-7610D8E8BD1C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnVectorAngleRate._com_interfaces_ = [_IAgCrdnVectorAngleRate, IAgCrdnVectorAngleRate, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

IAgCrdnWellKnownEarthSystems._methods_ = [
    COMMETHOD(['propget', helpstring("Earth's Fixed coordinate system.")], HRESULT, 'Fixed',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Earth's ICRF.")], HRESULT, 'ICRF',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Earth's Inertial coordinate system (as defined in STK).")], HRESULT, 'Inertial',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnWellKnownEarthSystems implementation
##class IAgCrdnWellKnownEarthSystems_Impl(object):
##    @property
##    def Fixed(self):
##        "Earth's Fixed coordinate system."
##        #return ppRetVal
##
##    @property
##    def ICRF(self):
##        "Earth's ICRF."
##        #return ppRetVal
##
##    @property
##    def Inertial(self):
##        "Earth's Inertial coordinate system (as defined in STK)."
##        #return ppRetVal
##

class AgCrdnEventArrayConditionCrossings(CoClass):
    'Time array containing times at which the specified condition will change its satisfaction status. Determination is performed within the interval list using Sampling and Convergence parameters.'
    _reg_clsid_ = GUID('{4078FF34-0E50-4104-99A2-7F7B302E2A7B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventArrayConditionCrossings(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventArrayConditionCrossings'
    _iid_ = GUID('{4B63989E-C9B7-4C65-AB13-2051AA109DAB}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnEventArrayConditionCrossings._com_interfaces_ = [_IAgCrdnEventArrayConditionCrossings, IAgCrdnEventArrayConditionCrossings, IAgCrdnEventArray, IAgCrdn]

IAgCrdnEventIntervalCollectionLighting._methods_ = [
    COMMETHOD(['propget', helpstring('The location point to compute sunlight, penumbra and umbra.')], HRESULT, 'Location',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The location point to compute sunlight, penumbra and umbra.')], HRESULT, 'Location',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A custom list of eclipsing bodies. This list is used if UseObjectEclipsingBodies is set to false.')], HRESULT, 'EclipsingBodies',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A custom list of eclipsing bodies. This list is used if UseObjectEclipsingBodies is set to false.')], HRESULT, 'EclipsingBodies',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('When true, configure eclipsing bodies list based on that of parent STK Object.')], HRESULT, 'UseObjectEclipsingBodies',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('When true, configure eclipsing bodies list based on that of parent STK Object.')], HRESULT, 'UseObjectEclipsingBodies',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalCollectionLighting implementation
##class IAgCrdnEventIntervalCollectionLighting_Impl(object):
##    def _get(self):
##        'The location point to compute sunlight, penumbra and umbra.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The location point to compute sunlight, penumbra and umbra.'
##    Location = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A custom list of eclipsing bodies. This list is used if UseObjectEclipsingBodies is set to false.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A custom list of eclipsing bodies. This list is used if UseObjectEclipsingBodies is set to false.'
##    EclipsingBodies = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'When true, configure eclipsing bodies list based on that of parent STK Object.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'When true, configure eclipsing bodies list based on that of parent STK Object.'
##    UseObjectEclipsingBodies = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnVolumeGridSpherical._methods_ = [
    COMMETHOD(['propget', helpstring('Get the reference system in which spherical parameters are computed.')], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the reference system in which spherical parameters are computed.')], HRESULT, 'ReferenceSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns azimuth coordinates parameters for the spherical volume grid.')], HRESULT, 'AzimuthCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns elevation coordinates parameters for the spherical volume grid.')], HRESULT, 'ElevationCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns range coordinates parameters for the spherical volume grid.')], HRESULT, 'RangeCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeGridSpherical implementation
##class IAgCrdnVolumeGridSpherical_Impl(object):
##    def _get(self):
##        'Get the reference system in which spherical parameters are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the reference system in which spherical parameters are computed.'
##    ReferenceSystem = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def AzimuthCoordinates(self):
##        'Returns azimuth coordinates parameters for the spherical volume grid.'
##        #return ppRetVal
##
##    @property
##    def ElevationCoordinates(self):
##        'Returns elevation coordinates parameters for the spherical volume grid.'
##        #return ppRetVal
##
##    @property
##    def RangeCoordinates(self):
##        'Returns range coordinates parameters for the spherical volume grid.'
##        #return ppRetVal
##

class _IAgCrdnPlane(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPlane'
    _iid_ = GUID('{55E946B1-949B-4302-9D6B-E3931D850E90}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnPlane._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(2201), helpstring('Returns a type of the plane object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPlaneType), 'pRetVal' )),
    COMMETHOD([dispid(2202), helpstring("Computes the plane's axes vectors in a specified reference axes.")], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2203), helpstring("Computes the plane's axes vectors and their rates in a specified reference axes.")], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2204), helpstring('Computes the position and X and Y axes in the specified coordinate system.')], HRESULT, 'FindInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2205), helpstring('Computes the position, X and Y axes and their rates of change in the specified coordinate system.')], HRESULT, 'FindInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneFindInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2206), helpstring("Allows configuring the plane's X and Y axes labels."), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPlane implementation
##class _IAgCrdnPlane_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the plane object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        "Computes the plane's axes vectors in a specified reference axes."
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        "Computes the plane's axes vectors and their rates in a specified reference axes."
##        #return ppRetVal
##
##    def FindInSystem(self, Epoch, System):
##        'Computes the position and X and Y axes in the specified coordinate system.'
##        #return ppRetVal
##
##    def FindInSystemWithRate(self, Epoch, System):
##        'Computes the position, X and Y axes and their rates of change in the specified coordinate system.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        "Allows configuring the plane's X and Y axes labels."
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnAxesLagrangeLibration(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesLagrangeLibration'
    _iid_ = GUID('{DDA28B21-3BC9-476C-81AA-D2EEAD4D538D}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnAxesLagrangeLibration._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1701), helpstring('Returns a type of the axes object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAxesType), 'pRetVal' )),
    COMMETHOD([dispid(1706), helpstring('Find an angular velocity and orientation in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1707), helpstring('Find an orientation in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1708), helpstring('Returns an object that allows modifying the axes labels.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(3401), helpstring('Specify a primary central body.'), 'propget'], HRESULT, 'PrimaryCentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(3402), helpstring('Specify a lagrange point (L1, L2, etc.)'), 'propget'], HRESULT, 'PointType',
              ( ['out', 'retval'], POINTER(AgECrdnLagrangeLibrationPointType), 'pRetVal' )),
    COMMETHOD([dispid(3402), helpstring('Specify a lagrange point (L1, L2, etc.)'), 'propput'], HRESULT, 'PointType',
              ( ['in'], AgECrdnLagrangeLibrationPointType, 'pRetVal' )),
    COMMETHOD([dispid(3403), helpstring('Specify secondary central bodies.'), 'propget'], HRESULT, 'SecondaryCentralBodies',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1709), helpstring('Returns the X axis of the component.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1710), helpstring('Returns the Y axis of the component.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1711), helpstring('Returns the Z axis of the component.'), 'propget'], HRESULT, 'Z',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1712), helpstring('Transforms the input vector from this axes into the output axes.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1713), helpstring("Transforms the input vector and vector's rate from this axes into the output axes.")], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'RateInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAxesLagrangeLibration implementation
##class _IAgCrdnAxesLagrangeLibration_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the axes object.'
##        #return pRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Find an angular velocity and orientation in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Find an orientation in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        'Returns an object that allows modifying the axes labels.'
##        #return ppRetVal
##
##    @property
##    def PrimaryCentralBody(self):
##        'Specify a primary central body.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a lagrange point (L1, L2, etc.)'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a lagrange point (L1, L2, etc.)'
##    PointType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SecondaryCentralBodies(self):
##        'Specify secondary central bodies.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    @property
##    def X(self):
##        'Returns the X axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Y(self):
##        'Returns the Y axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Z(self):
##        'Returns the Z axis of the component.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputAxes, VectorInMyAxes):
##        'Transforms the input vector from this axes into the output axes.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputAxes, VectorInMyAxes, RateInMyAxes):
##        "Transforms the input vector and vector's rate from this axes into the output axes."
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnVectorApoapsis(CoClass):
    'Vector from the center of the specified central body to the farthest point of an elliptical orbit created from the motion of the specified point.'
    _reg_clsid_ = GUID('{C1CD84E9-0F34-443F-BECC-FEF06C52CAA7}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnVectorApoapsis._com_interfaces_ = [_IAgCrdnVectorApoapsis, IAgCrdnVectorApoapsis, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

class AgCrdnEventArrayExtrema(CoClass):
    'Determines times of local minimum and/or maximum of specified scalar calculation. Determination is performed within interval list using Sampling and Convergence parameters.'
    _reg_clsid_ = GUID('{EF0E6BB2-9AC0-4E88-A4D4-AB0ED34E925D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventArrayExtrema._com_interfaces_ = [_IAgCrdnEventArrayExtrema, IAgCrdnEventArrayExtrema, IAgCrdnEventArray, IAgCrdn]

IAgCrdnSystemFactory._methods_ = [
    COMMETHOD([helpstring('Creates a VGT system using the specified name, description and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'SystemName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnSystemType, 'SystemType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns true if the specified system type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnSystemType, 'Type' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnSystemFactory implementation
##class IAgCrdnSystemFactory_Impl(object):
##    def Create(self, SystemName, Description, SystemType):
##        'Creates a VGT system using the specified name, description and type.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, Type):
##        'Returns true if the specified system type is supported.'
##        #return pRetVal
##

IAgCrdnVectorFindInAxesResult._methods_ = [
    COMMETHOD(['propget', helpstring('True indicates the method call was successful.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The vector in a specified axes.')], HRESULT, 'Vector',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVectorFindInAxesResult implementation
##class IAgCrdnVectorFindInAxesResult_Impl(object):
##    @property
##    def IsValid(self):
##        'True indicates the method call was successful.'
##        #return pRetVal
##
##    @property
##    def Vector(self):
##        'The vector in a specified axes.'
##        #return ppRetVal
##

class AgCrdnVectorFixedAtEpoch(CoClass):
    'Based on another vector fixed at a specified epoch.'
    _reg_clsid_ = GUID('{4B64FAD9-4C3E-4F55-BA3C-92ED2BA15E02}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVectorFixedAtEpoch(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorFixedAtEpoch'
    _iid_ = GUID('{702FDA88-0A6B-445F-812A-34BF14D0EEB5}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnVectorFixedAtEpoch._com_interfaces_ = [_IAgCrdnVectorFixedAtEpoch, IAgCrdnVectorFixedAtEpoch, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

IAgCrdnEventArrayFactory._methods_ = [
    COMMETHOD([helpstring('Create and register an event array using specified name, description, and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnEventArrayType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an event array by determining times of local minimum and/or maximum of specified scalar calculation.')], HRESULT, 'CreateEventArrayExtrema',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an event array by taking start and/or stop times of every interval in the specified reference interval list and adding them to array.')], HRESULT, 'CreateEventArrayStartStopTimes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an event array by merging times from two other arrays by creating a union of bounding intervals from two constituent arrays.')], HRESULT, 'CreateEventArrayMerged',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an event array by filtering times from an original time array according to specified filtering method.')], HRESULT, 'CreateEventArrayFiltered',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an event array using fixed time steps from the specified time reference and adding sampled times to array if they fall within specified bounding interval list.')], HRESULT, 'CreateEventArrayFixedStep',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an event array containing times at which the specified condition will change its satisfaction status.')], HRESULT, 'CreateEventArrayConditionCrossings',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an event array recorded at target clock location by performing signal transmission of original time array between base and target clock locations.')], HRESULT, 'CreateEventArraySignaled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnEventArrayType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Create an event array using specfied times.')], HRESULT, 'CreateEventArrayFixedTimes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventArrayFactory implementation
##class IAgCrdnEventArrayFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Create and register an event array using specified name, description, and type.'
##        #return ppRetVal
##
##    def CreateEventArrayExtrema(self, Name, Description):
##        'Create an event array by determining times of local minimum and/or maximum of specified scalar calculation.'
##        #return ppRetVal
##
##    def CreateEventArrayStartStopTimes(self, Name, Description):
##        'Create an event array by taking start and/or stop times of every interval in the specified reference interval list and adding them to array.'
##        #return ppRetVal
##
##    def CreateEventArrayMerged(self, Name, Description):
##        'Create an event array by merging times from two other arrays by creating a union of bounding intervals from two constituent arrays.'
##        #return ppRetVal
##
##    def CreateEventArrayFiltered(self, Name, Description):
##        'Create an event array by filtering times from an original time array according to specified filtering method.'
##        #return ppRetVal
##
##    def CreateEventArrayFixedStep(self, Name, Description):
##        'Create an event array using fixed time steps from the specified time reference and adding sampled times to array if they fall within specified bounding interval list.'
##        #return ppRetVal
##
##    def CreateEventArrayConditionCrossings(self, Name, Description):
##        'Create an event array containing times at which the specified condition will change its satisfaction status.'
##        #return ppRetVal
##
##    def CreateEventArraySignaled(self, Name, Description):
##        'Create an event array recorded at target clock location by performing signal transmission of original time array between base and target clock locations.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##
##    def CreateEventArrayFixedTimes(self, Name, Description):
##        'Create an event array using specfied times.'
##        #return ppRetVal
##

class AgCrdnEventArrayFactory(CoClass):
    'The factory creates event arrays.'
    _reg_clsid_ = GUID('{1D0DB444-A862-4333-B6A5-9F1D52003274}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventArrayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventArrayFactory'
    _iid_ = GUID('{A2279830-AC20-4B90-9BFF-F87297EE916C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnEventArrayFactory._com_interfaces_ = [_IAgCrdnEventArrayFactory, IAgCrdnEventArrayFactory]

IAgCrdnInterp._methods_ = [
]
################################################################
## code template for IAgCrdnInterp implementation
##class IAgCrdnInterp_Impl(object):

_IAgCrdnAngleDihedral._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(2001), helpstring('Returns a type of the angle object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAngleType), 'pRetVal' )),
    COMMETHOD([dispid(2002), helpstring('Finds an angle at the specified epoch.')], HRESULT, 'FindAngle',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindAngleResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2003), helpstring('Finds an angle and angle rate.')], HRESULT, 'FindAngleWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindAngleWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2004), helpstring('Finds the angle value and three vectors that define the angle in a specified input axes.')], HRESULT, 'FindCoordinates',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2005), helpstring('Finds the angle value, the angle rate and three vectors that define the angle in a specified input axes.')], HRESULT, 'FindCoordinatesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(3701), helpstring('Specify a first vector to measure the angle.'), 'propget'], HRESULT, 'FromVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(3702), helpstring('Specify a second vector to measure the angle.'), 'propget'], HRESULT, 'ToVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(3703), helpstring('Specify a vector about.'), 'propget'], HRESULT, 'PoleAbout',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(3706), helpstring('Specify whether the rotation is counter-clockwise.'), 'propget'], HRESULT, 'CounterClockwiseRotation',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(3706), helpstring('Specify whether the rotation is counter-clockwise.'), 'propput'], HRESULT, 'CounterClockwiseRotation',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(3705), helpstring('Specify whether the axis of rotation for the angle is aligned with Positive or Negative direction of the about vector.'), 'propget'], HRESULT, 'SignedAngle',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(3705), helpstring('Specify whether the axis of rotation for the angle is aligned with Positive or Negative direction of the about vector.'), 'propput'], HRESULT, 'SignedAngle',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAngleDihedral implementation
##class _IAgCrdnAngleDihedral_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the angle object.'
##        #return pRetVal
##
##    def FindAngle(self, Epoch):
##        'Finds an angle at the specified epoch.'
##        #return ppRetVal
##
##    def FindAngleWithRate(self, Epoch):
##        'Finds an angle and angle rate.'
##        #return ppRetVal
##
##    def FindCoordinates(self, Epoch, Axes):
##        'Finds the angle value and three vectors that define the angle in a specified input axes.'
##        #return ppRetVal
##
##    def FindCoordinatesWithRate(self, Epoch, Axes):
##        'Finds the angle value, the angle rate and three vectors that define the angle in a specified input axes.'
##        #return ppRetVal
##
##    @property
##    def FromVector(self):
##        'Specify a first vector to measure the angle.'
##        #return ppRetVal
##
##    @property
##    def ToVector(self):
##        'Specify a second vector to measure the angle.'
##        #return ppRetVal
##
##    @property
##    def PoleAbout(self):
##        'Specify a vector about.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify whether the rotation is counter-clockwise.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether the rotation is counter-clockwise.'
##    CounterClockwiseRotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether the axis of rotation for the angle is aligned with Positive or Negative direction of the about vector.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether the axis of rotation for the angle is aligned with Positive or Negative direction of the about vector.'
##    SignedAngle = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnVectorAngularVelocity(CoClass):
    'Angular velocity vector of one set of axes computed with respect to the reference set.'
    _reg_clsid_ = GUID('{217DE3F6-70ED-4D86-84C4-DA9434CD8006}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnVectorAngularVelocity(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnVectorAngularVelocity'
    _iid_ = GUID('{09FCA0C7-8A28-4743-9895-6CD10FCDE801}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnVectorAngularVelocity._com_interfaces_ = [_IAgCrdnVectorAngularVelocity, IAgCrdnVectorAngularVelocity, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

_IAgCrdnVectorAngularVelocity._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6101), helpstring('Specify the axes.'), 'propget'], HRESULT, 'Axes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(6102), helpstring('Specify a reference axes.'), 'propget'], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(6103), helpstring('Time step used in numerical evaluation of derivatives using central differencing.'), 'propget'], HRESULT, 'DifferencingTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(6103), helpstring('Time step used in numerical evaluation of derivatives using central differencing.'), 'propput'], HRESULT, 'DifferencingTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorAngularVelocity implementation
##class _IAgCrdnVectorAngularVelocity_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Axes(self):
##        'Specify the axes.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def _get(self):
##        'Time step used in numerical evaluation of derivatives using central differencing.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Time step used in numerical evaluation of derivatives using central differencing.'
##    DifferencingTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnCondition._methods_ = [
    COMMETHOD(['propget', helpstring('Returns the type of condition.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnConditionType), 'pRetVal' )),
    COMMETHOD([helpstring('Returns result of evaluating continuously varying condition metric at the specified time, used for detecting condition crossings.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns result of evaluating continuously varying condition metric and its rate of change at the specified time, used for detecting condition crossings.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnCondition implementation
##class IAgCrdnCondition_Impl(object):
##    @property
##    def Type(self):
##        'Returns the type of condition.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Returns result of evaluating continuously varying condition metric at the specified time, used for detecting condition crossings.'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Returns result of evaluating continuously varying condition metric and its rate of change at the specified time, used for detecting condition crossings.'
##        #return ppRetVal
##

class AgCrdnEventArrayFiltered(CoClass):
    'Defined by filtering times from original time array according to specified filtering method.'
    _reg_clsid_ = GUID('{737BD1D1-1D22-4EB0-B851-DE8413F5FFF2}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnEventArrayFiltered(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Defined by filtering times from original time array according to specified filtering method.'
    _iid_ = GUID('{14A981F0-4366-40B9-A808-9FD6838E7FD6}')
    _idlflags_ = ['oleautomation']
AgCrdnEventArrayFiltered._com_interfaces_ = [_IAgCrdnEventArrayFiltered, IAgCrdnEventArrayFiltered, IAgCrdnEventArray, IAgCrdn]

class AgCrdnVectorConing(CoClass):
    'Vector created by revolving the Reference vector around the About vector with the specified rate.'
    _reg_clsid_ = GUID('{324321FA-9A4B-49DA-A1C9-F74F397F1967}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnVectorConing._com_interfaces_ = [_IAgCrdnVectorConing, IAgCrdnVectorConing, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

IAgCrdnVectorScalarScaled._methods_ = [
    COMMETHOD(['propget', helpstring('An input vector scaled by the scalar. Can be any VGT vector.')], HRESULT, 'InputVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('An input vector scaled by the scalar. Can be any VGT vector.')], HRESULT, 'InputVector',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A variable scale applied to the input vector. Can be based on any Scalar calculation.')], HRESULT, 'InputScalar',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A variable scale applied to the input vector. Can be based on any Scalar calculation.')], HRESULT, 'InputScalar',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A constant scale applied to the input vector.')], HRESULT, 'ScaleFactor',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('A constant scale applied to the input vector.')], HRESULT, 'ScaleFactor',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Whether to normalize the input vector before applying constant and variable scales.')], HRESULT, 'Normalize',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Whether to normalize the input vector before applying constant and variable scales.')], HRESULT, 'Normalize',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Whether or not to inherit dimension from the input vector or the scalar.')], HRESULT, 'DimensionInheritance',
              ( ['out', 'retval'], POINTER(AgECrdnVectorScaledDimensionInheritance), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Whether or not to inherit dimension from the input vector or the scalar.')], HRESULT, 'DimensionInheritance',
              ( ['in'], AgECrdnVectorScaledDimensionInheritance, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A dimension assigned to the output vector.')], HRESULT, 'Dimension',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('A dimension assigned to the output vector.')], HRESULT, 'Dimension',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorScalarScaled implementation
##class IAgCrdnVectorScalarScaled_Impl(object):
##    def _get(self):
##        'An input vector scaled by the scalar. Can be any VGT vector.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'An input vector scaled by the scalar. Can be any VGT vector.'
##    InputVector = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A variable scale applied to the input vector. Can be based on any Scalar calculation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A variable scale applied to the input vector. Can be based on any Scalar calculation.'
##    InputScalar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A constant scale applied to the input vector.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A constant scale applied to the input vector.'
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether to normalize the input vector before applying constant and variable scales.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to normalize the input vector before applying constant and variable scales.'
##    Normalize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether or not to inherit dimension from the input vector or the scalar.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether or not to inherit dimension from the input vector or the scalar.'
##    DimensionInheritance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A dimension assigned to the output vector.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A dimension assigned to the output vector.'
##    Dimension = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnEventArrayFixedStep(CoClass):
    'Defined by taking fixed time steps from specified time reference and adding sampled times to array if they fall within specified bounding interval list.'
    _reg_clsid_ = GUID('{A714DE92-4439-436D-AE6B-56C98CABB287}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnEventArrayFixedStep(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Defined by taking fixed time steps from specified time reference and adding sampled times to array if they fall within specified bounding interval list.'
    _iid_ = GUID('{660C4D05-8204-42D8-AC4A-F0BBC5EA8BF9}')
    _idlflags_ = ['oleautomation']
AgCrdnEventArrayFixedStep._com_interfaces_ = [_IAgCrdnEventArrayFixedStep, IAgCrdnEventArrayFixedStep, IAgCrdnEventArray, IAgCrdn]

IAgCrdnAngleFindAngleWithRateResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The computed angle. The value of the angle is in "AngleUnit" dimension.')], HRESULT, 'Angle',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The computed angle rate. The value of the angle rate is in "AngleRateUnit" dimension.')], HRESULT, 'AngleRate',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAngleFindAngleWithRateResult implementation
##class IAgCrdnAngleFindAngleWithRateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Angle(self):
##        'The computed angle. The value of the angle is in "AngleUnit" dimension.'
##        #return pRetVal
##
##    @property
##    def AngleRate(self):
##        'The computed angle rate. The value of the angle rate is in "AngleRateUnit" dimension.'
##        #return pRetVal
##

class AgCrdnVectorCross(CoClass):
    'The vector cross product of two vectors.'
    _reg_clsid_ = GUID('{A6363DA0-A2CB-4D3D-AACE-6F4F135F2136}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnVectorCross._com_interfaces_ = [_IAgCrdnVectorCross, IAgCrdnVectorCross, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

_IAgCrdnEventIntervalBetweenTimeInstants._methods_ = [
    COMMETHOD([dispid(13411), helpstring('Return the type of interval.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalType), 'pRetVal' )),
    COMMETHOD([dispid(13404), helpstring('The start description.'), 'propget'], HRESULT, 'LabelStartDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13405), helpstring('The stop description.'), 'propget'], HRESULT, 'LabelStopDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13406), helpstring('A label associated with the interval start.'), 'propget'], HRESULT, 'LabelStart',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13407), helpstring('A label associated with the interval stop.'), 'propget'], HRESULT, 'LabelStop',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(13408), helpstring('Return computed interval if it exists.')], HRESULT, 'FindInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13409), helpstring('Determine if specified time falls within computed interval if it exists.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(27701), helpstring('The start time instant of the interval.'), 'propget'], HRESULT, 'StartTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(27701), helpstring('The start time instant of the interval.'), 'propput'], HRESULT, 'StartTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD([dispid(27702), helpstring('The stop time instant of the interval.'), 'propget'], HRESULT, 'StopTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(27702), helpstring('The stop time instant of the interval.'), 'propput'], HRESULT, 'StopTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalBetweenTimeInstants implementation
##class _IAgCrdnEventIntervalBetweenTimeInstants_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval.'
##        #return pRetVal
##
##    @property
##    def LabelStartDescription(self):
##        'The start description.'
##        #return pRetVal
##
##    @property
##    def LabelStopDescription(self):
##        'The stop description.'
##        #return pRetVal
##
##    @property
##    def LabelStart(self):
##        'A label associated with the interval start.'
##        #return pRetVal
##
##    @property
##    def LabelStop(self):
##        'A label associated with the interval stop.'
##        #return pRetVal
##
##    def FindInterval(self):
##        'Return computed interval if it exists.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval if it exists.'
##        #return pRetVal
##
##    def _get(self):
##        'The start time instant of the interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The start time instant of the interval.'
##    StartTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The stop time instant of the interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The stop time instant of the interval.'
##    StopTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnIntervalsVectorResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A collection of interval collections.')], HRESULT, 'IntervalCollections',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalVectorCollection)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnIntervalsVectorResult implementation
##class IAgCrdnIntervalsVectorResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def IntervalCollections(self):
##        'A collection of interval collections.'
##        #return ppRetVal
##

_IAgCrdnVolumeGridLatLonAlt._methods_ = [
    COMMETHOD([dispid(32102), helpstring('Get the central body for the volume grid. Both the central body reference shape and its CBF (central body centered fixed) system are used by this volume grid.'), 'propget'], HRESULT, 'ReferenceCentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(32102), helpstring('Get the central body for the volume grid. Both the central body reference shape and its CBF (central body centered fixed) system are used by this volume grid.'), 'propput'], HRESULT, 'ReferenceCentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(32103), helpstring('Returns latitute Coordinates parameters for the Theta system.'), 'propget'], HRESULT, 'LatitudeCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD([dispid(32104), helpstring('Returns longtitude Coordinates parameters for the Radius system.'), 'propget'], HRESULT, 'LongitudeCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD([dispid(32105), helpstring('Returns altitude parameters for the Height system.'), 'propget'], HRESULT, 'AltitudeCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD([dispid(32106), helpstring('Specify whether to use the auto fit bounds. Set to true to use the auto fit bounds..'), 'propget'], HRESULT, 'AutoFitBounds',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(32106), helpstring('Specify whether to use the auto fit bounds. Set to true to use the auto fit bounds..'), 'propput'], HRESULT, 'AutoFitBounds',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVolumeGridLatLonAlt implementation
##class _IAgCrdnVolumeGridLatLonAlt_Impl(object):
##    def _get(self):
##        'Get the central body for the volume grid. Both the central body reference shape and its CBF (central body centered fixed) system are used by this volume grid.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the central body for the volume grid. Both the central body reference shape and its CBF (central body centered fixed) system are used by this volume grid.'
##    ReferenceCentralBody = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LatitudeCoordinates(self):
##        'Returns latitute Coordinates parameters for the Theta system.'
##        #return ppRetVal
##
##    @property
##    def LongitudeCoordinates(self):
##        'Returns longtitude Coordinates parameters for the Radius system.'
##        #return ppRetVal
##
##    @property
##    def AltitudeCoordinates(self):
##        'Returns altitude parameters for the Height system.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify whether to use the auto fit bounds. Set to true to use the auto fit bounds..'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use the auto fit bounds. Set to true to use the auto fit bounds..'
##    AutoFitBounds = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnEventArrayFixedTimes(CoClass):
    'Array defined by time ordered instants each explicitly specified.'
    _reg_clsid_ = GUID('{DA044DD2-71F6-4D12-8F23-29C8F7744791}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnEventArrayFixedTimes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Array defined by time ordered instants each explicitly specified.'
    _iid_ = GUID('{FF98C921-92F9-4F59-9654-475C9C5FA8A1}')
    _idlflags_ = ['oleautomation']
AgCrdnEventArrayFixedTimes._com_interfaces_ = [_IAgCrdnEventArrayFixedTimes, IAgCrdnEventArrayFixedTimes, IAgCrdnEventArray, IAgCrdn]

IAgCrdnPointFactory._methods_ = [
    COMMETHOD([helpstring('Creates a VGT point using the specified name, description and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'PointName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnPointType, 'PointType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns true if the type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnPointType, 'Type' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('An array of display names associated with available point plugins. The elements of the array are strings. Display names are used to create VGT points based on COM plugins using CreatePointPluginFromDisplayName method.')], HRESULT, 'AvailablePointPluginDisplayNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create a point component based on a COM point plugin. For information how to implement and register VGT plugins, see')], HRESULT, 'CreatePointPluginFromDisplayName',
              ( ['in'], BSTR, 'PointName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'DisplayName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a point fixed on a central body.')], HRESULT, 'CreatePointFixedOnCentralBody',
              ( ['in'], BSTR, 'PointName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], VARIANT, 'Longitude' ),
              ( ['in'], VARIANT, 'Latitude' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['in'], AgECrdnReferenceShapeType, 'ReferenceShape' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPointFactory implementation
##class IAgCrdnPointFactory_Impl(object):
##    def Create(self, PointName, Description, PointType):
##        'Creates a VGT point using the specified name, description and type.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, Type):
##        'Returns true if the type is supported.'
##        #return pRetVal
##
##    @property
##    def AvailablePointPluginDisplayNames(self):
##        'An array of display names associated with available point plugins. The elements of the array are strings. Display names are used to create VGT points based on COM plugins using CreatePointPluginFromDisplayName method.'
##        #return ppRetVal
##
##    def CreatePointPluginFromDisplayName(self, PointName, Description, DisplayName):
##        'Create a point component based on a COM point plugin. For information how to implement and register VGT plugins, see'
##        #return ppRetVal
##
##    def CreatePointFixedOnCentralBody(self, PointName, Description, Longitude, Latitude, Altitude, ReferenceShape):
##        'Creates a point fixed on a central body.'
##        #return ppRetVal
##

_IAgCrdnEventIntervalCollectionFactory._methods_ = [
    COMMETHOD([dispid(20201), helpstring('Create and register an event interval collection using specified name, description, and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnEventIntervalCollectionType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(20206), helpstring('Create an event interval collection defined by computing sunlight, penumbra and umbra intervals as seen at specified location using specified selection of eclipsing bodies.')], HRESULT, 'CreateEventIntervalCollectionLighting',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(20207), helpstring('Create an event interval collection recorded at target clock location by performing signal transmission of original interval list collection between base and target clock locations.')], HRESULT, 'CreateEventIntervalCollectionSignaled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(20205), helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnEventIntervalCollectionType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(20208), helpstring('Create an event interval collection containing intervals during which condition set is satisfied.')], HRESULT, 'CreateEventIntervalCollectionSatisfaction',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollection)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnEventIntervalCollectionFactory implementation
##class _IAgCrdnEventIntervalCollectionFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Create and register an event interval collection using specified name, description, and type.'
##        #return ppRetVal
##
##    def CreateEventIntervalCollectionLighting(self, Name, Description):
##        'Create an event interval collection defined by computing sunlight, penumbra and umbra intervals as seen at specified location using specified selection of eclipsing bodies.'
##        #return ppRetVal
##
##    def CreateEventIntervalCollectionSignaled(self, Name, Description):
##        'Create an event interval collection recorded at target clock location by performing signal transmission of original interval list collection between base and target clock locations.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##
##    def CreateEventIntervalCollectionSatisfaction(self, Name, Description):
##        'Create an event interval collection containing intervals during which condition set is satisfied.'
##        #return ppRetVal
##

IAgCrdnAngle._methods_ = [
    COMMETHOD(['propget', helpstring('Returns a type of the angle object.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAngleType), 'pRetVal' )),
    COMMETHOD([helpstring('Finds an angle at the specified epoch.')], HRESULT, 'FindAngle',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindAngleResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Finds an angle and angle rate.')], HRESULT, 'FindAngleWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindAngleWithRateResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Finds the angle value and three vectors that define the angle in a specified input axes.')], HRESULT, 'FindCoordinates',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Finds the angle value, the angle rate and three vectors that define the angle in a specified input axes.')], HRESULT, 'FindCoordinatesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindWithRateResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAngle implementation
##class IAgCrdnAngle_Impl(object):
##    @property
##    def Type(self):
##        'Returns a type of the angle object.'
##        #return pRetVal
##
##    def FindAngle(self, Epoch):
##        'Finds an angle at the specified epoch.'
##        #return ppRetVal
##
##    def FindAngleWithRate(self, Epoch):
##        'Finds an angle and angle rate.'
##        #return ppRetVal
##
##    def FindCoordinates(self, Epoch, Axes):
##        'Finds the angle value and three vectors that define the angle in a specified input axes.'
##        #return ppRetVal
##
##    def FindCoordinatesWithRate(self, Epoch, Axes):
##        'Finds the angle value, the angle rate and three vectors that define the angle in a specified input axes.'
##        #return ppRetVal
##

class _IAgCrdnAxesAlignedAndConstrained(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesAlignedAndConstrained'
    _iid_ = GUID('{7CB19B07-7F9A-4C86-A50B-B02515E4B794}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnAxesAlignedAndConstrained._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1701), helpstring('Returns a type of the axes object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAxesType), 'pRetVal' )),
    COMMETHOD([dispid(1706), helpstring('Find an angular velocity and orientation in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1707), helpstring('Find an orientation in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1708), helpstring('Returns an object that allows modifying the axes labels.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(2301), helpstring('Specify an alignment reference vector.'), 'propget'], HRESULT, 'AlignmentReferenceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(2302), helpstring('Specify a constraint reference vector.'), 'propget'], HRESULT, 'ConstraintReferenceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(2303), helpstring('Specify a desired alignment direction and the applicable parameters.'), 'propget'], HRESULT, 'AlignmentDirection',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDirection)), 'ppRetVal' )),
    COMMETHOD([dispid(2304), helpstring('Specify a desired constraint direction and the applicable parameters.'), 'propget'], HRESULT, 'ConstraintDirection',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDirection)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1709), helpstring('Returns the X axis of the component.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1710), helpstring('Returns the Y axis of the component.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1711), helpstring('Returns the Z axis of the component.'), 'propget'], HRESULT, 'Z',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1712), helpstring('Transforms the input vector from this axes into the output axes.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1713), helpstring("Transforms the input vector and vector's rate from this axes into the output axes.")], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'RateInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAxesAlignedAndConstrained implementation
##class _IAgCrdnAxesAlignedAndConstrained_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the axes object.'
##        #return pRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Find an angular velocity and orientation in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Find an orientation in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        'Returns an object that allows modifying the axes labels.'
##        #return ppRetVal
##
##    @property
##    def AlignmentReferenceVector(self):
##        'Specify an alignment reference vector.'
##        #return ppRetVal
##
##    @property
##    def ConstraintReferenceVector(self):
##        'Specify a constraint reference vector.'
##        #return ppRetVal
##
##    @property
##    def AlignmentDirection(self):
##        'Specify a desired alignment direction and the applicable parameters.'
##        #return ppRetVal
##
##    @property
##    def ConstraintDirection(self):
##        'Specify a desired constraint direction and the applicable parameters.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    @property
##    def X(self):
##        'Returns the X axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Y(self):
##        'Returns the Y axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Z(self):
##        'Returns the Z axis of the component.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputAxes, VectorInMyAxes):
##        'Transforms the input vector from this axes into the output axes.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputAxes, VectorInMyAxes, RateInMyAxes):
##        "Transforms the input vector and vector's rate from this axes into the output axes."
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnVectorCustomScript(CoClass):
    'Customized vector components defined with respect to reference axes.'
    _reg_clsid_ = GUID('{C153A4E6-801A-4712-9BA3-0391DC751D7E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnVectorCustomScript(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Customized vector components defined with respect to reference axes.'
    _iid_ = GUID('{1BE4BB24-C01D-4BCB-ACDA-0BCD1662E195}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorCustomScript._com_interfaces_ = [_IAgCrdnVectorCustomScript, IAgCrdnVectorCustomScript, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

IAgCrdnSampling._methods_ = [
]
################################################################
## code template for IAgCrdnSampling implementation
##class IAgCrdnSampling_Impl(object):

IAgCrdnIntervalListResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A list of intervals.')], HRESULT, 'Intervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnIntervalListResult implementation
##class IAgCrdnIntervalListResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Intervals(self):
##        'A list of intervals.'
##        #return ppRetVal
##

class IAgCrdnEventArrayStartStopTimes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Defined by taking start and/or stop times of every interval in specified reference interval list and adding them to array. The array is then bounded by single interval spanning specified reference interval list...'
    _iid_ = GUID('{DFDE7497-2B48-49F6-9706-E307F20416A5}')
    _idlflags_ = ['oleautomation']
IAgCrdnEventArrayStartStopTimes._methods_ = [
    COMMETHOD(['propget', helpstring('The edge type. At least one of the two edge types must be selected.')], HRESULT, 'StartStopOption',
              ( ['out', 'retval'], POINTER(AgECrdnStartStopOption), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The edge type. At least one of the two edge types must be selected.')], HRESULT, 'StartStopOption',
              ( ['in'], AgECrdnStartStopOption, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The reference interval list.')], HRESULT, 'ReferenceIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The reference interval list.')], HRESULT, 'ReferenceIntervals',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventArrayStartStopTimes implementation
##class IAgCrdnEventArrayStartStopTimes_Impl(object):
##    def _get(self):
##        'The edge type. At least one of the two edge types must be selected.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The edge type. At least one of the two edge types must be selected.'
##    StartStopOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The reference interval list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference interval list.'
##    ReferenceIntervals = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnEventArrayMerged(CoClass):
    'Defined by merging times from two other arrays by creating a union of bounding intervals from two constituent arrays. If some intervals overlap, then within overlap times from both arrays are merged together.'
    _reg_clsid_ = GUID('{99AC9A70-4251-447E-BBD0-B5FD9E459A1C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventArrayMerged._com_interfaces_ = [_IAgCrdnEventArrayMerged, IAgCrdnEventArrayMerged, IAgCrdnEventArray, IAgCrdn]

class IAgCrdnParameterSetFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The factory is used to create instances of available parameter set types.'
    _iid_ = GUID('{0FEF5317-B241-4077-8ED3-784F94B97096}')
    _idlflags_ = ['oleautomation']
IAgCrdnParameterSetGroup._methods_ = [
    COMMETHOD([dispid(20601), helpstring('Removes a specified element.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'EventName' )),
    COMMETHOD([dispid(20602), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(20603), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the group.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20605), helpstring('Returns a factory object used to create calc scalar components.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnParameterSetFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns an element by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnParameterSet)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnParameterSetGroup implementation
##class IAgCrdnParameterSetGroup_Impl(object):
##    def Remove(self, EventName):
##        'Removes a specified element.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the group.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a factory object used to create calc scalar components.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns an element by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

IAgCrdnWellKnownSunSystems._methods_ = [
    COMMETHOD(['propget', helpstring("The Sun's Fixed coordinate system.")], HRESULT, 'Fixed',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("The Sun's International Celestial Reference Frame (ICRF).")], HRESULT, 'ICRF',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("The Sun's Inertial coordinate system (as defined in STK).")], HRESULT, 'Inertial',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("The Sun's J2000 coordinate system.")], HRESULT, 'J2000',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("The Inertial system at the Sun's barycenter.")], HRESULT, 'Barycenter',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnWellKnownSunSystems implementation
##class IAgCrdnWellKnownSunSystems_Impl(object):
##    @property
##    def Fixed(self):
##        "The Sun's Fixed coordinate system."
##        #return ppRetVal
##
##    @property
##    def ICRF(self):
##        "The Sun's International Celestial Reference Frame (ICRF)."
##        #return ppRetVal
##
##    @property
##    def Inertial(self):
##        "The Sun's Inertial coordinate system (as defined in STK)."
##        #return ppRetVal
##
##    @property
##    def J2000(self):
##        "The Sun's J2000 coordinate system."
##        #return ppRetVal
##
##    @property
##    def Barycenter(self):
##        "The Inertial system at the Sun's barycenter."
##        #return ppRetVal
##

class AgCrdnVectorDerivative(CoClass):
    'A vector derivative of a vector computed with respect to specified axes.'
    _reg_clsid_ = GUID('{6215FC7F-A647-45EC-99B4-92A47F5161EF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnVectorDerivative(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A vector derivative of a vector computed with respect to specified axes.'
    _iid_ = GUID('{73A634FD-887F-49CF-B264-EE195CF5A310}')
    _idlflags_ = ['oleautomation']
AgCrdnVectorDerivative._com_interfaces_ = [_IAgCrdnVectorDerivative, IAgCrdnVectorDerivative, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

IAgCrdnEventGroup._methods_ = [
    COMMETHOD([dispid(14401), helpstring('Removes a specified element.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'EventName' )),
    COMMETHOD([dispid(14402), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(14403), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the group.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(14405), helpstring('Returns a Factory object used to create custom events.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns an element by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventGroup implementation
##class IAgCrdnEventGroup_Impl(object):
##    def Remove(self, EventName):
##        'Removes a specified element.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the group.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a Factory object used to create custom events.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns an element by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

class AgCrdnEventArraySignaled(CoClass):
    'Determines what time array is recorded at target clock location by performing signal transmission of original time array between base and target clock locations...'
    _reg_clsid_ = GUID('{B874E5DF-4087-4056-8C20-C951B3192BC4}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventArraySignaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventArraySignaled'
    _iid_ = GUID('{91FABB8A-8825-4062-A543-91BE12D08D05}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnEventArraySignaled._com_interfaces_ = [_IAgCrdnEventArraySignaled, IAgCrdnEventArraySignaled, IAgCrdnEventArray, IAgCrdn]

IAgCrdnContext._methods_ = [
    COMMETHOD(['propget', helpstring('Returns whether the current instance is a VGT template.')], HRESULT, 'IsTemplate',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnContext implementation
##class IAgCrdnContext_Impl(object):
##    @property
##    def IsTemplate(self):
##        'Returns whether the current instance is a VGT template.'
##        #return pRetVal
##

IAgCrdnEventIntervalCollectionSignaled._methods_ = [
    COMMETHOD(['propget', helpstring('The original interval list collection.')], HRESULT, 'OriginalCollection',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollection)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The original interval list collection.')], HRESULT, 'OriginalCollection',
              ( ['in'], POINTER(IAgCrdnEventIntervalCollection), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.')], HRESULT, 'SignalSense',
              ( ['out', 'retval'], POINTER(AgECrdnSignalSense), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.')], HRESULT, 'SignalSense',
              ( ['in'], AgECrdnSignalSense, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The base clock location, which is a point from VGT.')], HRESULT, 'BaseClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The base clock location, which is a point from VGT.')], HRESULT, 'BaseClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The target clock location, which is a point from VGT.')], HRESULT, 'TargetClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The target clock location, which is a point from VGT.')], HRESULT, 'TargetClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.')], HRESULT, 'SignalDelay',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSignalDelay)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.')], HRESULT, 'SignalDelay',
              ( ['in'], POINTER(IAgCrdnSignalDelay), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalCollectionSignaled implementation
##class IAgCrdnEventIntervalCollectionSignaled_Impl(object):
##    def _get(self):
##        'The original interval list collection.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original interval list collection.'
##    OriginalCollection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'
##    SignalSense = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The base clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The base clock location, which is a point from VGT.'
##    BaseClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The target clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The target clock location, which is a point from VGT.'
##    TargetClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##    SignalDelay = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnVectorDisplacement(CoClass):
    'Vector defined by its start and end points.'
    _reg_clsid_ = GUID('{9F09248F-96E0-44C7-AEB2-0E4EFA6099B4}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnVectorDisplacement._com_interfaces_ = [_IAgCrdnVectorDisplacement, IAgCrdnVectorDisplacement, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

IAgCrdnVolumeInview._methods_ = [
    COMMETHOD(['propget', helpstring('A constraint object of the access.')], HRESULT, 'ConstraintObject',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('A constraint object of the access.')], HRESULT, 'ConstraintObject',
              ( ['in'], VARIANT, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns Light Time Delay options parameters.')], HRESULT, 'LightTimeDelay',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnLightTimeDelay)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeInview implementation
##class IAgCrdnVolumeInview_Impl(object):
##    def _get(self):
##        'A constraint object of the access.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A constraint object of the access.'
##    ConstraintObject = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LightTimeDelay(self):
##        'Returns Light Time Delay options parameters.'
##        #return ppRetVal
##

class AgCrdnEventArrayStartStopTimes(CoClass):
    'Defined by taking start and/or stop times of every interval in specified reference interval list and adding them to array. The array is then bounded by single interval spanning specified reference interval list...'
    _reg_clsid_ = GUID('{CD0E07D5-958A-48FB-987F-A115BF5D5A9B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventArrayStartStopTimes._com_interfaces_ = [_IAgCrdnEventArrayStartStopTimes, IAgCrdnEventArrayStartStopTimes, IAgCrdnEventArray, IAgCrdn]

IAgCrdnVectorFindInAxesWithRateResult._methods_ = [
    COMMETHOD(['propget', helpstring('True indicates the method call was successful.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The vector in a specified axes.')], HRESULT, 'Vector',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The vector rate in a specified axes.')], HRESULT, 'Rate',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVectorFindInAxesWithRateResult implementation
##class IAgCrdnVectorFindInAxesWithRateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'True indicates the method call was successful.'
##        #return pRetVal
##
##    @property
##    def Vector(self):
##        'The vector in a specified axes.'
##        #return ppRetVal
##
##    @property
##    def Rate(self):
##        'The vector rate in a specified axes.'
##        #return ppRetVal
##

IAgCrdnEventIntervalResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('An interval.')], HRESULT, 'Interval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnInterval)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalResult implementation
##class IAgCrdnEventIntervalResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Interval(self):
##        'An interval.'
##        #return ppRetVal
##

class AgCrdnEventEpoch(CoClass):
    'Event set at specified date/time.'
    _reg_clsid_ = GUID('{0C942B11-016E-4DDE-814C-F847B1D230FF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventEpoch._com_interfaces_ = [_IAgCrdnEventEpoch, IAgCrdnEventEpoch, IAgCrdnEvent, IAgCrdn]

class AgCrdnVectorTwoPlanesIntersection(CoClass):
    'Defined along the intersection of two planes.'
    _reg_clsid_ = GUID('{BA27498E-CD04-4B49-A465-317630554BDC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnVectorTwoPlanesIntersection._com_interfaces_ = [_IAgCrdnVectorTwoPlanesIntersection, IAgCrdnVectorTwoPlanesIntersection, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

_IAgCrdnEventArraySignaled._methods_ = [
    COMMETHOD([dispid(18302), helpstring('Return the type of time array.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventArrayType), 'pRetVal' )),
    COMMETHOD([dispid(18301), helpstring('Return computed array of times.')], HRESULT, 'FindTimes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnFindTimesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(18711), helpstring('The original time array.'), 'propget'], HRESULT, 'OriginalTimeArray',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([dispid(18711), helpstring('The original time array.'), 'propput'], HRESULT, 'OriginalTimeArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'ppRetVal' )),
    COMMETHOD([dispid(18707), helpstring('The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'), 'propget'], HRESULT, 'SignalSense',
              ( ['out', 'retval'], POINTER(AgECrdnSignalSense), 'pRetVal' )),
    COMMETHOD([dispid(18707), helpstring('The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'), 'propput'], HRESULT, 'SignalSense',
              ( ['in'], AgECrdnSignalSense, 'pRetVal' )),
    COMMETHOD([dispid(18708), helpstring('The base clock location, which is a point from VGT.'), 'propget'], HRESULT, 'BaseClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(18708), helpstring('The base clock location, which is a point from VGT.'), 'propput'], HRESULT, 'BaseClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(18709), helpstring('The target clock location, which is a point from VGT.'), 'propget'], HRESULT, 'TargetClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(18709), helpstring('The target clock location, which is a point from VGT.'), 'propput'], HRESULT, 'TargetClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(18710), helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'), 'propget'], HRESULT, 'SignalDelay',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSignalDelay)), 'ppRetVal' )),
    COMMETHOD([dispid(18710), helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'), 'propput'], HRESULT, 'SignalDelay',
              ( ['in'], POINTER(IAgCrdnSignalDelay), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventArraySignaled implementation
##class _IAgCrdnEventArraySignaled_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time array.'
##        #return pRetVal
##
##    def FindTimes(self):
##        'Return computed array of times.'
##        #return ppRetVal
##
##    def _get(self):
##        'The original time array.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original time array.'
##    OriginalTimeArray = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'
##    SignalSense = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The base clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The base clock location, which is a point from VGT.'
##    BaseClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The target clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The target clock location, which is a point from VGT.'
##    TargetClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##    SignalDelay = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnEventIntervalListSignaled(CoClass):
    'Determines what interval list is recorded at target clock location by performing signal transmission of original interval list between base and target clock locations...'
    _reg_clsid_ = GUID('{BCA47EF4-7869-4000-AC55-68530BE08019}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventIntervalListSignaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalListSignaled'
    _iid_ = GUID('{E0D5B2D0-4FE7-4348-9D0D-19EB7430D9AC}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventIntervalListSignaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Determines what interval list is recorded at target clock location by performing signal transmission of original interval list between base and target clock locations...'
    _iid_ = GUID('{04CECB39-8578-439A-A425-7A8E73A23166}')
    _idlflags_ = ['oleautomation']
AgCrdnEventIntervalListSignaled._com_interfaces_ = [_IAgCrdnEventIntervalListSignaled, IAgCrdnEventIntervalListSignaled, IAgCrdnEventIntervalList, IAgCrdn]

IAgCrdnSystemGroup._methods_ = [
    COMMETHOD([dispid(9401), helpstring('Removes a specified System.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'SystemName' )),
    COMMETHOD([dispid(9402), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(9403), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9405), helpstring('Returns a Factory object used to create custom VGT systems.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns a System by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([dispid(9408), helpstring('Provides access to common tasks that allow users quickly carry out tasks such as creating known systems, etc.'), 'propget'], HRESULT, 'CommonTasks',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemCommonTasks)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnSystemGroup implementation
##class IAgCrdnSystemGroup_Impl(object):
##    def Remove(self, SystemName):
##        'Removes a specified System.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a Factory object used to create custom VGT systems.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns a System by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##
##    @property
##    def CommonTasks(self):
##        'Provides access to common tasks that allow users quickly carry out tasks such as creating known systems, etc.'
##        #return ppRetVal
##

_IAgCrdnEventFactory._methods_ = [
    COMMETHOD([dispid(14317), helpstring('Returns Today time instant.'), 'propget'], HRESULT, 'Today',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(14318), helpstring('Returns Tomorrow time instant.'), 'propget'], HRESULT, 'Tomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(14301), helpstring('Creates and registers an event using specified name, description, and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnEventType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(14309), helpstring('Creates an event set at a specified date/time.')], HRESULT, 'CreateEventEpoch',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(14310), helpstring('Creates an event that determines the time of global minimum or maximum of specified scalar calculation.')], HRESULT, 'CreateEventExtremum',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(14316), helpstring('Creates an event that is either the start or stop time selected from a reference interval.')], HRESULT, 'CreateEventStartStopTime',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(14312), helpstring('Creates an event recorded on a specified clock via signal transmission from an original time instant recorded on different clock.')], HRESULT, 'CreateEventSignaled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(14313), helpstring('Creates an event at fixed offset from specified reference event.')], HRESULT, 'CreateEventTimeOffset',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(14314), helpstring('Creates a smart epoch from STK epoch.')], HRESULT, 'CreateSmartEpochFromTime',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventSmartEpoch)), 'ppRetVal' )),
    COMMETHOD([dispid(14315), helpstring('Creates a smart epoch from an event.')], HRESULT, 'CreateSmartEpochFromEvent',
              ( ['in'], POINTER(IAgCrdnEvent), 'RefEvent' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventSmartEpoch)), 'ppRetVal' )),
    COMMETHOD([dispid(14308), helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnEventType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnEventFactory implementation
##class _IAgCrdnEventFactory_Impl(object):
##    @property
##    def Today(self):
##        'Returns Today time instant.'
##        #return ppRetVal
##
##    @property
##    def Tomorrow(self):
##        'Returns Tomorrow time instant.'
##        #return ppRetVal
##
##    def Create(self, Name, Description, Type):
##        'Creates and registers an event using specified name, description, and type.'
##        #return ppRetVal
##
##    def CreateEventEpoch(self, Name, Description):
##        'Creates an event set at a specified date/time.'
##        #return ppRetVal
##
##    def CreateEventExtremum(self, Name, Description):
##        'Creates an event that determines the time of global minimum or maximum of specified scalar calculation.'
##        #return ppRetVal
##
##    def CreateEventStartStopTime(self, Name, Description):
##        'Creates an event that is either the start or stop time selected from a reference interval.'
##        #return ppRetVal
##
##    def CreateEventSignaled(self, Name, Description):
##        'Creates an event recorded on a specified clock via signal transmission from an original time instant recorded on different clock.'
##        #return ppRetVal
##
##    def CreateEventTimeOffset(self, Name, Description):
##        'Creates an event at fixed offset from specified reference event.'
##        #return ppRetVal
##
##    def CreateSmartEpochFromTime(self, Epoch):
##        'Creates a smart epoch from STK epoch.'
##        #return ppRetVal
##
##    def CreateSmartEpochFromEvent(self, RefEvent):
##        'Creates a smart epoch from an event.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##

_IAgCrdnCalcScalarConstant._methods_ = [
    COMMETHOD([dispid(12805), helpstring('Returns the scalar calculation type.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnCalcScalarType), 'pRetVal' )),
    COMMETHOD([dispid(12803), helpstring('Evaluates the scalar calculation at the specified time instant.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12806), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...')], HRESULT, 'QuickEvaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12804), helpstring('Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12807), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...')], HRESULT, 'QuickEvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16002), helpstring('A value which can be in any STK supported unit available for selected dimension.'), 'propget'], HRESULT, 'Value',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16002), helpstring('A value which can be in any STK supported unit available for selected dimension.'), 'propput'], HRESULT, 'Value',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16003), helpstring('The dimension of the constant value, this can be any of the STK supported dimensions.'), 'propget'], HRESULT, 'Dimension',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16003), helpstring('The dimension of the constant value, this can be any of the STK supported dimensions.'), 'propput'], HRESULT, 'Dimension',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(12808), helpstring('Returns a list of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(12809), helpstring("Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propget'], HRESULT, 'UnitOfMeasure',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(12810), helpstring('Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12811), helpstring('Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12812), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12813), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnCalcScalarConstant implementation
##class _IAgCrdnCalcScalarConstant_Impl(object):
##    @property
##    def Type(self):
##        'Returns the scalar calculation type.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant.'
##        #return ppRetVal
##
##    def QuickEvaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.'
##        #return ppRetVal
##
##    def QuickEvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...'
##        #return ppRetVal
##
##    def _get(self):
##        'A value which can be in any STK supported unit available for selected dimension.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A value which can be in any STK supported unit available for selected dimension.'
##    Value = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The dimension of the constant value, this can be any of the STK supported dimensions.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The dimension of the constant value, this can be any of the STK supported dimensions.'
##    Dimension = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def GetAvailability(self):
##        'Returns a list of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def UnitOfMeasure(self):
##        "Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def QuickEvaluateArray(self, Times):
##        'Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateArray(self, Times):
##        'Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##

_IAgCrdnEventIntervalList._methods_ = [
    COMMETHOD([dispid(13509), helpstring('Return the type of interval list.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalListType), 'pRetVal' )),
    COMMETHOD([dispid(13502), helpstring('Get the label descriptions associated with the interval list.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13503), helpstring('Get the labels associated with the interval list.'), 'propget'], HRESULT, 'Descriptions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13507), helpstring('Return computed interval list that can be empty.')], HRESULT, 'FindIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalListResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13508), helpstring('Determine if specified time falls within computed interval list.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalList implementation
##class _IAgCrdnEventIntervalList_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval list.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the label descriptions associated with the interval list.'
##        #return ppRetVal
##
##    @property
##    def Descriptions(self):
##        'Get the labels associated with the interval list.'
##        #return ppRetVal
##
##    def FindIntervals(self):
##        'Return computed interval list that can be empty.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval list.'
##        #return pRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

_IAgCrdnEventIntervalListFixed._methods_ = [
    COMMETHOD([dispid(13509), helpstring('Return the type of interval list.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalListType), 'pRetVal' )),
    COMMETHOD([dispid(13502), helpstring('Get the label descriptions associated with the interval list.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13503), helpstring('Get the labels associated with the interval list.'), 'propget'], HRESULT, 'Descriptions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13507), helpstring('Return computed interval list that can be empty.')], HRESULT, 'FindIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalListResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13508), helpstring('Determine if specified time falls within computed interval list.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(29301), helpstring("Get intervals with explicitly specified start and stop times from interval list. The method returns a one-dimensional array which elements are 2-tuples of intervals' start/stop times converted according to the current unit preferences.")], HRESULT, 'GetIntervals',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(29302), helpstring("Set interval list from intervals with explicitly specified start and stop times. The method takes a one-dimensional array which elements are 2-tuples of intervals' start/stop times converted according to the current unit preferences.")], HRESULT, 'SetIntervals',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Intervals' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalListFixed implementation
##class _IAgCrdnEventIntervalListFixed_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval list.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the label descriptions associated with the interval list.'
##        #return ppRetVal
##
##    @property
##    def Descriptions(self):
##        'Get the labels associated with the interval list.'
##        #return ppRetVal
##
##    def FindIntervals(self):
##        'Return computed interval list that can be empty.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval list.'
##        #return pRetVal
##
##    def GetIntervals(self):
##        "Get intervals with explicitly specified start and stop times from interval list. The method returns a one-dimensional array which elements are 2-tuples of intervals' start/stop times converted according to the current unit preferences."
##        #return ppRetVal
##
##    def SetIntervals(self, Intervals):
##        "Set interval list from intervals with explicitly specified start and stop times. The method takes a one-dimensional array which elements are 2-tuples of intervals' start/stop times converted according to the current unit preferences."
##        #return 
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnVectorLinearCombination._methods_ = [
    COMMETHOD(['propget', helpstring('Vector A can be any VGT vector.')], HRESULT, 'VectorA',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Vector A can be any VGT vector.')], HRESULT, 'VectorA',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Scale factor for vector A.')], HRESULT, 'ScaleFactorA',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Scale factor for vector A.')], HRESULT, 'ScaleFactorA',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Whether to normalize vector A.')], HRESULT, 'NormalizeVectorA',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Whether to normalize vector A.')], HRESULT, 'NormalizeVectorA',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Vector B can be any VGT vector.')], HRESULT, 'VectorB',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Vector B can be any VGT vector.')], HRESULT, 'VectorB',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Scale factor for vector B.')], HRESULT, 'ScaleFactorB',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Scale factor for vector B.')], HRESULT, 'ScaleFactorB',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Whether to normalize vector B.')], HRESULT, 'NormalizeVectorB',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Whether to normalize vector B.')], HRESULT, 'NormalizeVectorB',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Determines whether the output dimension is inherited or explicitly specified using OutputDimension.')], HRESULT, 'OutputDimensionInheritance',
              ( ['out', 'retval'], POINTER(AgECrdnDimensionInheritance), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Determines whether the output dimension is inherited or explicitly specified using OutputDimension.')], HRESULT, 'OutputDimensionInheritance',
              ( ['in'], AgECrdnDimensionInheritance, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A dimension to interpret the output vector.')], HRESULT, 'OutputDimension',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('A dimension to interpret the output vector.')], HRESULT, 'OutputDimension',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorLinearCombination implementation
##class IAgCrdnVectorLinearCombination_Impl(object):
##    def _get(self):
##        'Vector A can be any VGT vector.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Vector A can be any VGT vector.'
##    VectorA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Scale factor for vector A.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Scale factor for vector A.'
##    ScaleFactorA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether to normalize vector A.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to normalize vector A.'
##    NormalizeVectorA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Vector B can be any VGT vector.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Vector B can be any VGT vector.'
##    VectorB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Scale factor for vector B.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Scale factor for vector B.'
##    ScaleFactorB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether to normalize vector B.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to normalize vector B.'
##    NormalizeVectorB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Determines whether the output dimension is inherited or explicitly specified using OutputDimension.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Determines whether the output dimension is inherited or explicitly specified using OutputDimension.'
##    OutputDimensionInheritance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A dimension to interpret the output vector.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A dimension to interpret the output vector.'
##    OutputDimension = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnMethodCallResult._methods_ = [
    COMMETHOD(['propget', helpstring('True indicates the method call was successful.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnMethodCallResult implementation
##class IAgCrdnMethodCallResult_Impl(object):
##    @property
##    def IsValid(self):
##        'True indicates the method call was successful.'
##        #return pRetVal
##

_IAgCrdnEventArrayFactory._methods_ = [
    COMMETHOD([dispid(19101), helpstring('Create and register an event array using specified name, description, and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnEventArrayType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([dispid(19111), helpstring('Create an event array by determining times of local minimum and/or maximum of specified scalar calculation.')], HRESULT, 'CreateEventArrayExtrema',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([dispid(19118), helpstring('Create an event array by taking start and/or stop times of every interval in the specified reference interval list and adding them to array.')], HRESULT, 'CreateEventArrayStartStopTimes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([dispid(19113), helpstring('Create an event array by merging times from two other arrays by creating a union of bounding intervals from two constituent arrays.')], HRESULT, 'CreateEventArrayMerged',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([dispid(19119), helpstring('Create an event array by filtering times from an original time array according to specified filtering method.')], HRESULT, 'CreateEventArrayFiltered',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([dispid(19120), helpstring('Create an event array using fixed time steps from the specified time reference and adding sampled times to array if they fall within specified bounding interval list.')], HRESULT, 'CreateEventArrayFixedStep',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([dispid(19121), helpstring('Create an event array containing times at which the specified condition will change its satisfaction status.')], HRESULT, 'CreateEventArrayConditionCrossings',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([dispid(19117), helpstring('Create an event array recorded at target clock location by performing signal transmission of original time array between base and target clock locations.')], HRESULT, 'CreateEventArraySignaled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD([dispid(19110), helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnEventArrayType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(19122), helpstring('Create an event array using specfied times.')], HRESULT, 'CreateEventArrayFixedTimes',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnEventArrayFactory implementation
##class _IAgCrdnEventArrayFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Create and register an event array using specified name, description, and type.'
##        #return ppRetVal
##
##    def CreateEventArrayExtrema(self, Name, Description):
##        'Create an event array by determining times of local minimum and/or maximum of specified scalar calculation.'
##        #return ppRetVal
##
##    def CreateEventArrayStartStopTimes(self, Name, Description):
##        'Create an event array by taking start and/or stop times of every interval in the specified reference interval list and adding them to array.'
##        #return ppRetVal
##
##    def CreateEventArrayMerged(self, Name, Description):
##        'Create an event array by merging times from two other arrays by creating a union of bounding intervals from two constituent arrays.'
##        #return ppRetVal
##
##    def CreateEventArrayFiltered(self, Name, Description):
##        'Create an event array by filtering times from an original time array according to specified filtering method.'
##        #return ppRetVal
##
##    def CreateEventArrayFixedStep(self, Name, Description):
##        'Create an event array using fixed time steps from the specified time reference and adding sampled times to array if they fall within specified bounding interval list.'
##        #return ppRetVal
##
##    def CreateEventArrayConditionCrossings(self, Name, Description):
##        'Create an event array containing times at which the specified condition will change its satisfaction status.'
##        #return ppRetVal
##
##    def CreateEventArraySignaled(self, Name, Description):
##        'Create an event array recorded at target clock location by performing signal transmission of original time array between base and target clock locations.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##
##    def CreateEventArrayFixedTimes(self, Name, Description):
##        'Create an event array using specfied times.'
##        #return ppRetVal
##

class AgCrdnEventIntervalListTimeOffset(CoClass):
    'Interval List defined by shifting the specified reference interval list by a fixed time offset.'
    _reg_clsid_ = GUID('{B13DFA3E-CC28-4147-B2F8-829953E51526}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnEventIntervalListTimeOffset(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnEventIntervalListTimeOffset'
    _iid_ = GUID('{FDCB0697-040F-4EB6-8AB4-DC3602F4EB6C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgCrdnEventIntervalListTimeOffset(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Interval List defined by shifting the specified reference interval list by a fixed time offset.'
    _iid_ = GUID('{6ACABFDF-25FF-4724-91E9-C42499013ECC}')
    _idlflags_ = ['oleautomation']
AgCrdnEventIntervalListTimeOffset._com_interfaces_ = [_IAgCrdnEventIntervalListTimeOffset, IAgCrdnEventIntervalListTimeOffset, IAgCrdnEventIntervalList, IAgCrdn]

class IAgCrdnAxesSpinning(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Axes created by spinning the Reference axes about the Spin vector with the specified rate. The axes are aligned with the Reference axes at the specified epoch plus the additional rotational offset.'
    _iid_ = GUID('{B2200D86-5E02-4791-B94E-7C229B0A2182}')
    _idlflags_ = ['oleautomation']
IAgCrdnAxesSpinning._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a spin vector.')], HRESULT, 'SpinVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference axes.')], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify an epoch at which the axes are aligned with the reference axes.')], HRESULT, 'Epoch',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify an epoch at which the axes are aligned with the reference axes.')], HRESULT, 'Epoch',
              ( ['in'], VARIANT, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify an additional rotational offset.')], HRESULT, 'InitialOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify an additional rotational offset.')], HRESULT, 'InitialOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a spin rate the axes spins about the spin vector.')], HRESULT, 'SpinRate',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a spin rate the axes spins about the spin vector.')], HRESULT, 'SpinRate',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAxesSpinning implementation
##class IAgCrdnAxesSpinning_Impl(object):
##    @property
##    def SpinVector(self):
##        'Specify a spin vector.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify an epoch at which the axes are aligned with the reference axes.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an epoch at which the axes are aligned with the reference axes.'
##    Epoch = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify an additional rotational offset.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an additional rotational offset.'
##    InitialOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a spin rate the axes spins about the spin vector.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a spin rate the axes spins about the spin vector.'
##    SpinRate = property(_get, _set, doc = _set.__doc__)
##

_IAgCrdnProvider._methods_ = [
    COMMETHOD([dispid(9501), helpstring('Returns a group of vectors.'), 'propget'], HRESULT, 'Vectors',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorGroup)), 'ppRetVal' )),
    COMMETHOD([dispid(9502), helpstring('Returns a group of points.'), 'propget'], HRESULT, 'Points',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointGroup)), 'ppRetVal' )),
    COMMETHOD([dispid(9503), helpstring('Returns a group of angles.'), 'propget'], HRESULT, 'Angles',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleGroup)), 'ppRetVal' )),
    COMMETHOD([dispid(9504), helpstring('Returns a group of axes.'), 'propget'], HRESULT, 'Axes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesGroup)), 'ppRetVal' )),
    COMMETHOD([dispid(9505), helpstring('Returns a group of planes.'), 'propget'], HRESULT, 'Planes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneGroup)), 'ppRetVal' )),
    COMMETHOD([dispid(9506), helpstring('Returns a group of systems.'), 'propget'], HRESULT, 'Systems',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemGroup)), 'ppRetVal' )),
    COMMETHOD([dispid(9507), helpstring('Returns well-known systems.'), 'propget'], HRESULT, 'WellKnownSystems',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnWellKnownSystems)), 'ppRetVal' )),
    COMMETHOD([dispid(9508), helpstring('Returns well-known axes.'), 'propget'], HRESULT, 'WellKnownAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnWellKnownAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(9509), helpstring('Returns a group of events.'), 'propget'], HRESULT, 'Events',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventGroup)), 'ppRetVal' )),
    COMMETHOD([dispid(9510), helpstring('Returns a group of event intervals.'), 'propget'], HRESULT, 'EventIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalGroup)), 'ppRetVal' )),
    COMMETHOD([dispid(9511), helpstring('Returns a group of calc scalars.'), 'propget'], HRESULT, 'CalcScalars',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalarGroup)), 'ppRetVal' )),
    COMMETHOD([dispid(9512), helpstring('Returns a group of event arrays.'), 'propget'], HRESULT, 'EventArrays',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArrayGroup)), 'ppRetVal' )),
    COMMETHOD([dispid(9513), helpstring('Returns a group of event interval lists.'), 'propget'], HRESULT, 'EventIntervalLists',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalListGroup)), 'ppRetVal' )),
    COMMETHOD([dispid(9514), helpstring('Returns a group of event interval collections.'), 'propget'], HRESULT, 'EventIntervalCollections',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollectionGroup)), 'ppRetVal' )),
    COMMETHOD([dispid(9515), helpstring('Access, add new or remove existing parameter set components.'), 'propget'], HRESULT, 'ParameterSets',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnParameterSetGroup)), 'ppRetVal' )),
    COMMETHOD([dispid(9516), helpstring('Returns a group of condition objects.'), 'propget'], HRESULT, 'Conditions',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionGroup)), 'ppRetVal' )),
    COMMETHOD([dispid(9517), helpstring('Tests whether the specified VGT feature is supported.')], HRESULT, 'Supports',
              ( ['in'], AgECrdnKind, 'Feature' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9519), helpstring('Returns a group of condition set objects.'), 'propget'], HRESULT, 'ConditionSets',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionSetGroup)), 'ppRetVal' )),
    COMMETHOD([dispid(9520), helpstring('Imports Analysis Workbench components from a file.')], HRESULT, 'Import',
              ( ['in'], BSTR, 'Filename' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(9521), helpstring('Returns a group of volume grid objects.'), 'propget'], HRESULT, 'VolumeGrids',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGridGroup)), 'ppRetVal' )),
    COMMETHOD([dispid(9522), helpstring('Returns a group of volume objects.'), 'propget'], HRESULT, 'Volumes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGroup)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnProvider implementation
##class _IAgCrdnProvider_Impl(object):
##    @property
##    def Vectors(self):
##        'Returns a group of vectors.'
##        #return ppRetVal
##
##    @property
##    def Points(self):
##        'Returns a group of points.'
##        #return ppRetVal
##
##    @property
##    def Angles(self):
##        'Returns a group of angles.'
##        #return ppRetVal
##
##    @property
##    def Axes(self):
##        'Returns a group of axes.'
##        #return ppRetVal
##
##    @property
##    def Planes(self):
##        'Returns a group of planes.'
##        #return ppRetVal
##
##    @property
##    def Systems(self):
##        'Returns a group of systems.'
##        #return ppRetVal
##
##    @property
##    def WellKnownSystems(self):
##        'Returns well-known systems.'
##        #return ppRetVal
##
##    @property
##    def WellKnownAxes(self):
##        'Returns well-known axes.'
##        #return ppRetVal
##
##    @property
##    def Events(self):
##        'Returns a group of events.'
##        #return ppRetVal
##
##    @property
##    def EventIntervals(self):
##        'Returns a group of event intervals.'
##        #return ppRetVal
##
##    @property
##    def CalcScalars(self):
##        'Returns a group of calc scalars.'
##        #return ppRetVal
##
##    @property
##    def EventArrays(self):
##        'Returns a group of event arrays.'
##        #return ppRetVal
##
##    @property
##    def EventIntervalLists(self):
##        'Returns a group of event interval lists.'
##        #return ppRetVal
##
##    @property
##    def EventIntervalCollections(self):
##        'Returns a group of event interval collections.'
##        #return ppRetVal
##
##    @property
##    def ParameterSets(self):
##        'Access, add new or remove existing parameter set components.'
##        #return ppRetVal
##
##    @property
##    def Conditions(self):
##        'Returns a group of condition objects.'
##        #return ppRetVal
##
##    def Supports(self, Feature):
##        'Tests whether the specified VGT feature is supported.'
##        #return pRetVal
##
##    @property
##    def ConditionSets(self):
##        'Returns a group of condition set objects.'
##        #return ppRetVal
##
##    def Import(self, Filename):
##        'Imports Analysis Workbench components from a file.'
##        #return ppRetVal
##
##    @property
##    def VolumeGrids(self):
##        'Returns a group of volume grid objects.'
##        #return ppRetVal
##
##    @property
##    def Volumes(self):
##        'Returns a group of volume objects.'
##        #return ppRetVal
##

class AgCrdnEventIntervalScaled(CoClass):
    "Interval defined by scaling original interval using either absolute or relative scale. If resulting interval's start becomes after its stop, the interval becomes undefined."
    _reg_clsid_ = GUID('{E542711A-4152-4F06-9D86-0D496FD08F52}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnEventIntervalScaled(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Interval defined by scaling original interval using either absolute or relative scale. If resulting interval's start becomes after its stop, the interval becomes undefined."
    _iid_ = GUID('{96DF1693-2DCE-4A29-B184-954B96CB7B5A}')
    _idlflags_ = ['oleautomation']
AgCrdnEventIntervalScaled._com_interfaces_ = [_IAgCrdnEventIntervalScaled, IAgCrdnEventIntervalScaled, IAgCrdnEventInterval, IAgCrdn]

class _IAgCrdnSamplingMethodFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnSamplingMethodFactory'
    _iid_ = GUID('{8E706576-1496-47FE-9C10-4C8B44128034}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnSamplingMethodFactory._methods_ = [
    COMMETHOD([dispid(24101), helpstring('Create a fixed time step sampling definition.')], HRESULT, 'CreateFixedStep',
              ( ['in'], c_double, 'FixedStep' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSamplingMethod)), 'ppRetVal' )),
    COMMETHOD([dispid(24102), helpstring('Create a curvature tolerance sampling definition. Curvature tolerance uses changes in slope between samples.')], HRESULT, 'CreateCurvatureTolerance',
              ( ['in'], c_double, 'CurvatureTolerance' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSamplingMethod)), 'ppRetVal' )),
    COMMETHOD([dispid(24103), helpstring('Create a relative tolerance sampling definition. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples.')], HRESULT, 'CreateRelativeTolerance',
              ( ['in'], c_double, 'RelativeTolerance' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSamplingMethod)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnSamplingMethodFactory implementation
##class _IAgCrdnSamplingMethodFactory_Impl(object):
##    def CreateFixedStep(self, FixedStep):
##        'Create a fixed time step sampling definition.'
##        #return ppRetVal
##
##    def CreateCurvatureTolerance(self, CurvatureTolerance):
##        'Create a curvature tolerance sampling definition. Curvature tolerance uses changes in slope between samples.'
##        #return ppRetVal
##
##    def CreateRelativeTolerance(self, RelativeTolerance):
##        'Create a relative tolerance sampling definition. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples.'
##        #return ppRetVal
##

IAgCrdnGridValuesMethod._methods_ = [
    COMMETHOD(['propget', helpstring('Grid values method type.')], HRESULT, 'MethodType',
              ( ['out', 'retval'], POINTER(AgECrdnVolumetricGridValuesMethodType), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnGridValuesMethod implementation
##class IAgCrdnGridValuesMethod_Impl(object):
##    @property
##    def MethodType(self):
##        'Grid values method type.'
##        #return pRetVal
##

class _IAgCrdnTypeInfo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnTypeInfo'
    _iid_ = GUID('{84BDBAC2-F89D-4BEC-9D96-BFBB071CB2B4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnTypeInfo._methods_ = [
    COMMETHOD([dispid(301), helpstring('Return the type description.'), 'propget'], HRESULT, 'TypeDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(302), helpstring('Return the type name.'), 'propget'], HRESULT, 'TypeName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(303), helpstring('Return the short type description.'), 'propget'], HRESULT, 'ShortTypeDescription',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnTypeInfo implementation
##class _IAgCrdnTypeInfo_Impl(object):
##    @property
##    def TypeDescription(self):
##        'Return the type description.'
##        #return pRetVal
##
##    @property
##    def TypeName(self):
##        'Return the type name.'
##        #return pRetVal
##
##    @property
##    def ShortTypeDescription(self):
##        'Return the short type description.'
##        #return pRetVal
##

IAgCrdnPointCovarianceGrazing._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a reference point which will serve as the starting location for the line along which the grazing point will be computed.')], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a direction vector to be used in conjunction with the displacement vector from the selected target object to the reference point to define a plane in which the line will lie.')], HRESULT, 'DirectionVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a target object about which the covariance ellipsoid is centered.')], HRESULT, 'TargetName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a target object about which the covariance ellipsoid is centered.')], HRESULT, 'TargetName',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The point of closest approach to the covariance ellipsoid surface occurs at the specified distance.')], HRESULT, 'Distance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The point of closest approach to the covariance ellipsoid surface occurs at the specified distance.')], HRESULT, 'Distance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a probability that the true position is inside the ellipsoid boundary.')], HRESULT, 'Probability',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a probability that the true position is inside the ellipsoid boundary.')], HRESULT, 'Probability',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a scale factor which is applied to the one sigma ellipsoid.')], HRESULT, 'Scale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a scale factor which is applied to the one sigma ellipsoid.')], HRESULT, 'Scale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A flag controlling whether to use probability or scale factor.')], HRESULT, 'UseProbability',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('A flag controlling whether to use probability or scale factor.')], HRESULT, 'UseProbability',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnPointCovarianceGrazing implementation
##class IAgCrdnPointCovarianceGrazing_Impl(object):
##    @property
##    def ReferencePoint(self):
##        'Specify a reference point which will serve as the starting location for the line along which the grazing point will be computed.'
##        #return ppRetVal
##
##    @property
##    def DirectionVector(self):
##        'Specify a direction vector to be used in conjunction with the displacement vector from the selected target object to the reference point to define a plane in which the line will lie.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a target object about which the covariance ellipsoid is centered.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a target object about which the covariance ellipsoid is centered.'
##    TargetName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The point of closest approach to the covariance ellipsoid surface occurs at the specified distance.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The point of closest approach to the covariance ellipsoid surface occurs at the specified distance.'
##    Distance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a probability that the true position is inside the ellipsoid boundary.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a probability that the true position is inside the ellipsoid boundary.'
##    Probability = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a scale factor which is applied to the one sigma ellipsoid.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a scale factor which is applied to the one sigma ellipsoid.'
##    Scale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A flag controlling whether to use probability or scale factor.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A flag controlling whether to use probability or scale factor.'
##    UseProbability = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnEventIntervalSignaled(CoClass):
    'Determines what interval is recorded at target clock location by performing signal transmission of original interval between base and target clock locations.'
    _reg_clsid_ = GUID('{B8AA12FA-0B1F-404F-A24F-B2FD6E274262}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventIntervalSignaled._com_interfaces_ = [_IAgCrdnEventIntervalSignaled, IAgCrdnEventIntervalSignaled, IAgCrdnEventInterval, IAgCrdn]

class _IAgCrdnSamplingRelativeTolerance(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnSamplingRelativeTolerance'
    _iid_ = GUID('{5038DA0F-7B35-40F9-8D52-4E94D2E9C498}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnSamplingRelativeTolerance._methods_ = [
    COMMETHOD([dispid(23801), helpstring('A sampling method type.'), 'propget'], HRESULT, 'MethodType',
              ( ['out', 'retval'], POINTER(AgECrdnSamplingMethod), 'pRetVal' )),
    COMMETHOD([dispid(24201), helpstring('Get the minimum allowed time step.'), 'propget'], HRESULT, 'MinimumTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(24201), helpstring('Get the minimum allowed time step.'), 'propput'], HRESULT, 'MinimumTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(24202), helpstring('Get the maximum allowed time step.'), 'propget'], HRESULT, 'MaximumTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(24202), helpstring('Get the maximum allowed time step.'), 'propput'], HRESULT, 'MaximumTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(24203), helpstring('Get the step taken at boundaries of discontinuity or availability.'), 'propget'], HRESULT, 'StepAtBoundaries',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(24203), helpstring('Get the step taken at boundaries of discontinuity or availability.'), 'propput'], HRESULT, 'StepAtBoundaries',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(24204), helpstring('Get the relative tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step relative to the sampled values'), 'propget'], HRESULT, 'RelativeTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(24204), helpstring('Get the relative tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step relative to the sampled values'), 'propput'], HRESULT, 'RelativeTolerance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(24205), helpstring('Get the absolute tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step'), 'propget'], HRESULT, 'AbsoluteTolerance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(24205), helpstring('Get the absolute tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step'), 'propput'], HRESULT, 'AbsoluteTolerance',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnSamplingRelativeTolerance implementation
##class _IAgCrdnSamplingRelativeTolerance_Impl(object):
##    @property
##    def MethodType(self):
##        'A sampling method type.'
##        #return pRetVal
##
##    def _get(self):
##        'Get the minimum allowed time step.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the minimum allowed time step.'
##    MinimumTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the maximum allowed time step.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the maximum allowed time step.'
##    MaximumTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the step taken at boundaries of discontinuity or availability.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the step taken at boundaries of discontinuity or availability.'
##    StepAtBoundaries = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the relative tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step relative to the sampled values'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the relative tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step relative to the sampled values'
##    RelativeTolerance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the absolute tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the absolute tolerance which determines acceptable difference between predicted and actual changes in values of sampled data over a step'
##    AbsoluteTolerance = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnPointModelAttach._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a model attachment point.')], HRESULT, 'PointableElementName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a model attachment point.')], HRESULT, 'PointableElementName',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether to use the model scale.')], HRESULT, 'UseScale',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether to use the model scale.')], HRESULT, 'UseScale',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnPointModelAttach implementation
##class IAgCrdnPointModelAttach_Impl(object):
##    def _get(self):
##        'Specify a model attachment point.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a model attachment point.'
##    PointableElementName = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use the model scale.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use the model scale.'
##    UseScale = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnPlaneFindInAxesResult._methods_ = [
    COMMETHOD(['propget', helpstring('True indicates the method call was successful.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('X-axis vector in the specified reference axes.')], HRESULT, 'XAxis',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Y-axis vector in the specified reference axes.')], HRESULT, 'YAxis',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPlaneFindInAxesResult implementation
##class IAgCrdnPlaneFindInAxesResult_Impl(object):
##    @property
##    def IsValid(self):
##        'True indicates the method call was successful.'
##        #return pRetVal
##
##    @property
##    def XAxis(self):
##        'X-axis vector in the specified reference axes.'
##        #return ppRetVal
##
##    @property
##    def YAxis(self):
##        'Y-axis vector in the specified reference axes.'
##        #return ppRetVal
##

_IAgCrdnEventIntervalFactory._methods_ = [
    COMMETHOD([dispid(15701), helpstring('Create and register an interval using specified name, description, and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnEventIntervalType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(15710), helpstring('Create an interval defined between two explicitly specified start and stop times.')], HRESULT, 'CreateEventIntervalFixed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(15711), helpstring('Create an interval of fixed duration specified using start and stop offsets relative to specified reference time instant.')], HRESULT, 'CreateEventIntervalFixedDuration',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(15718), helpstring('Create an interval using specified start and stop time instants.')], HRESULT, 'CreateEventIntervalBetweenTimeInstants',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(15719), helpstring('Create an interval from a specified interval list by using one of several selection methods.')], HRESULT, 'CreateEventIntervalFromIntervalList',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(15714), helpstring('Create an interval by scaling an original interval using either absolute or relative scale.')], HRESULT, 'CreateEventIntervalScaled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(15715), helpstring('Create an interval that is recorded at target clock location by performing signal transmission of original interval between base and target clock locations.')], HRESULT, 'CreateEventIntervalSignaled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(15717), helpstring('Create an interval defined by shifting the specified reference interval by a fixed time offset.')], HRESULT, 'CreateEventIntervalTimeOffset',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(15709), helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnEventIntervalType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnEventIntervalFactory implementation
##class _IAgCrdnEventIntervalFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Create and register an interval using specified name, description, and type.'
##        #return ppRetVal
##
##    def CreateEventIntervalFixed(self, Name, Description):
##        'Create an interval defined between two explicitly specified start and stop times.'
##        #return ppRetVal
##
##    def CreateEventIntervalFixedDuration(self, Name, Description):
##        'Create an interval of fixed duration specified using start and stop offsets relative to specified reference time instant.'
##        #return ppRetVal
##
##    def CreateEventIntervalBetweenTimeInstants(self, Name, Description):
##        'Create an interval using specified start and stop time instants.'
##        #return ppRetVal
##
##    def CreateEventIntervalFromIntervalList(self, Name, Description):
##        'Create an interval from a specified interval list by using one of several selection methods.'
##        #return ppRetVal
##
##    def CreateEventIntervalScaled(self, Name, Description):
##        'Create an interval by scaling an original interval using either absolute or relative scale.'
##        #return ppRetVal
##
##    def CreateEventIntervalSignaled(self, Name, Description):
##        'Create an interval that is recorded at target clock location by performing signal transmission of original interval between base and target clock locations.'
##        #return ppRetVal
##
##    def CreateEventIntervalTimeOffset(self, Name, Description):
##        'Create an interval defined by shifting the specified reference interval by a fixed time offset.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##

class AgCrdnEventIntervalSmartInterval(CoClass):
    'A smart interval.'
    _reg_clsid_ = GUID('{428E74BE-36E4-4A1A-9301-C0A0EF2975F5}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventIntervalSmartInterval._com_interfaces_ = [_IAgCrdnEventIntervalSmartInterval, IAgCrdnEventIntervalSmartInterval, IAgCrdnEventInterval, IAgCrdn]

class AgCrdnEventIntervalTimeOffset(CoClass):
    'Interval defined by shifting specified reference interval by fixed time offset.'
    _reg_clsid_ = GUID('{5DBC92D8-A8A8-4CA4-B9F6-101548940F8C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventIntervalTimeOffset._com_interfaces_ = [_IAgCrdnEventIntervalTimeOffset, IAgCrdnEventIntervalTimeOffset, IAgCrdnEventInterval, IAgCrdn]

_IAgCrdnRoot._methods_ = [
    COMMETHOD([dispid(9606), helpstring('Returns a template provider. The method takes a class name (i.e. "Satellite", "Facility", etc.)')], HRESULT, 'GetTemplateProvider',
              ( ['in'], BSTR, 'ClassName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnProvider)), 'ppRetVal' )),
    COMMETHOD([dispid(9607), helpstring('Returns an instance provider. The method takes a short instance path to an STK object or a central body.(i.e. "Satellite/Satellite1", "CentralBody/Earth", etc.)')], HRESULT, 'GetProvider',
              ( ['in'], BSTR, 'InstPath' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnProvider)), 'ppRetVal' )),
    COMMETHOD([dispid(9603), helpstring('Returns the most commonly used systems (e.g. Sun Fixed, Earth Fixed, etc.).'), 'propget'], HRESULT, 'WellKnownSystems',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnWellKnownSystems)), 'ppRetVal' )),
    COMMETHOD([dispid(9604), helpstring('Returns the most commonly used axes (e.g. Sun ICRF, Earth Inertial, etc.).'), 'propget'], HRESULT, 'WellKnownAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnWellKnownAxes)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnRoot implementation
##class _IAgCrdnRoot_Impl(object):
##    def GetTemplateProvider(self, ClassName):
##        'Returns a template provider. The method takes a class name (i.e. "Satellite", "Facility", etc.)'
##        #return ppRetVal
##
##    def GetProvider(self, InstPath):
##        'Returns an instance provider. The method takes a short instance path to an STK object or a central body.(i.e. "Satellite/Satellite1", "CentralBody/Earth", etc.)'
##        #return ppRetVal
##
##    @property
##    def WellKnownSystems(self):
##        'Returns the most commonly used systems (e.g. Sun Fixed, Earth Fixed, etc.).'
##        #return ppRetVal
##
##    @property
##    def WellKnownAxes(self):
##        'Returns the most commonly used axes (e.g. Sun ICRF, Earth Inertial, etc.).'
##        #return ppRetVal
##

_IAgCrdnVolumeGrid._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVolumeGrid implementation
##class _IAgCrdnVolumeGrid_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnEventSignaled(CoClass):
    'Event recorded on specified clock via signal transmission from original time instant recorded on different clock.'
    _reg_clsid_ = GUID('{E0D60049-2703-4931-9563-B6EEE4AAC10C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventSignaled._com_interfaces_ = [_IAgCrdnEventSignaled, IAgCrdnEventSignaled, IAgCrdnEvent, IAgCrdn]

class _IAgCrdnParameterSetGroundTrajectory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnParameterSetGroundTrajectory'
    _iid_ = GUID('{49F4DF9F-AB69-4008-8F37-B25B44953021}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnParameterSetGroundTrajectory._methods_ = [
    COMMETHOD([dispid(21203), helpstring('Get the type of parameter set.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnParameterSetType), 'pRetVal' )),
    COMMETHOD([dispid(21201), helpstring('Get the labels identifying hierarchy of representations within parameter set.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21206), helpstring('Get the names identifying types of dimensions of individual scalars within parameter set.'), 'propget'], HRESULT, 'Dimensions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21202), helpstring('Get the names identifying individual scalars within parameter set.'), 'propget'], HRESULT, 'ScalarNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21204), helpstring('Return results of computing individual scalars within parameter set at the specified time.')], HRESULT, 'Calculate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(21205), helpstring('Return results of computing individual scalars and their time derivatives within parameter set at the specified time.')], HRESULT, 'CalculateWithDerivative',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(28101), helpstring('Get the point for which ground trajectory representations are computed.'), 'propget'], HRESULT, 'Location',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(28101), helpstring('Get the point for which ground trajectory representations are computed.'), 'propput'], HRESULT, 'Location',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(28102), helpstring('Get the central body relative to which ground trajectory representations are computed. Both the central body reference shape and its CBF (central body centered fixed) system are used by this parameter set.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(28102), helpstring('Get the central body relative to which ground trajectory representations are computed. Both the central body reference shape and its CBF (central body centered fixed) system are used by this parameter set.'), 'propput'], HRESULT, 'CentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnParameterSetGroundTrajectory implementation
##class _IAgCrdnParameterSetGroundTrajectory_Impl(object):
##    @property
##    def Type(self):
##        'Get the type of parameter set.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the labels identifying hierarchy of representations within parameter set.'
##        #return ppRetVal
##
##    @property
##    def Dimensions(self):
##        'Get the names identifying types of dimensions of individual scalars within parameter set.'
##        #return ppRetVal
##
##    @property
##    def ScalarNames(self):
##        'Get the names identifying individual scalars within parameter set.'
##        #return ppRetVal
##
##    def Calculate(self, Epoch):
##        'Return results of computing individual scalars within parameter set at the specified time.'
##        #return ppRetVal
##
##    def CalculateWithDerivative(self, Epoch):
##        'Return results of computing individual scalars and their time derivatives within parameter set at the specified time.'
##        #return ppRetVal
##
##    def _get(self):
##        'Get the point for which ground trajectory representations are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the point for which ground trajectory representations are computed.'
##    Location = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the central body relative to which ground trajectory representations are computed. Both the central body reference shape and its CBF (central body centered fixed) system are used by this parameter set.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the central body relative to which ground trajectory representations are computed. Both the central body reference shape and its CBF (central body centered fixed) system are used by this parameter set.'
##    CentralBody = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnPruneFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPruneFilter'
    _iid_ = GUID('{CBA5EBC5-A631-41C3-B055-9FD2E2A3C689}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnPruneFilter._methods_ = [
    COMMETHOD([dispid(22901), helpstring('Returns a type of the filter.'), 'propget'], HRESULT, 'FilterType',
              ( ['out', 'retval'], POINTER(AgECrdnPruneFilter), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnPruneFilter implementation
##class _IAgCrdnPruneFilter_Impl(object):
##    @property
##    def FilterType(self):
##        'Returns a type of the filter.'
##        #return pRetVal
##

class AgCrdnEventSmartEpoch(CoClass):
    'A smart epoch.'
    _reg_clsid_ = GUID('{C44B1BE6-51E3-4035-A197-318932C8576F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventSmartEpoch._com_interfaces_ = [_IAgCrdnEventSmartEpoch, IAgCrdnEventSmartEpoch, IAgCrdnEvent, IAgCrdn]

IAgCrdnEventArray._methods_ = [
    COMMETHOD(['propget', helpstring('Return the type of time array.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventArrayType), 'pRetVal' )),
    COMMETHOD([helpstring('Return computed array of times.')], HRESULT, 'FindTimes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnFindTimesResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventArray implementation
##class IAgCrdnEventArray_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time array.'
##        #return pRetVal
##
##    def FindTimes(self):
##        'Return computed array of times.'
##        #return ppRetVal
##

class AgCrdnEventStartStopTime(CoClass):
    'Event is either start or stop time selected from a reference interval.'
    _reg_clsid_ = GUID('{FFB1C411-8273-4947-A0C0-5A9835047A0D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventStartStopTime._com_interfaces_ = [_IAgCrdnEventStartStopTime, IAgCrdnEventStartStopTime, IAgCrdnEvent, IAgCrdn]

class IAgCrdnAxesOnSurface(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Topocentric axes located at the reference point's projection on the central body."
    _iid_ = GUID('{6BB4FEF3-3932-45E9-B52A-5C36820EF0A5}')
    _idlflags_ = ['oleautomation']
IAgCrdnAxesOnSurface._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a central body.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference point.')], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether the reference shape is at the Mean Sea Level.')], HRESULT, 'UseMSL',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether the reference shape is at the Mean Sea Level.')], HRESULT, 'UseMSL',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAxesOnSurface implementation
##class IAgCrdnAxesOnSurface_Impl(object):
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Specify a reference point.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify whether the reference shape is at the Mean Sea Level.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether the reference shape is at the Mean Sea Level.'
##    UseMSL = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdn(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdn'
    _iid_ = GUID('{003E2010-2023-469D-B47A-39182A5BD1C6}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdn._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdn implementation
##class _IAgCrdn_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class _IAgCrdnSatisfactionConditionFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnSatisfactionConditionFilter'
    _iid_ = GUID('{D72BA182-46DC-42CE-B94F-5E689FF635BF}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnSatisfactionConditionFilter._methods_ = [
    COMMETHOD([dispid(22901), helpstring('Returns a type of the filter.'), 'propget'], HRESULT, 'FilterType',
              ( ['out', 'retval'], POINTER(AgECrdnPruneFilter), 'pRetVal' )),
    COMMETHOD([dispid(23501), helpstring('This additional condition must be satisfied At Most or At Least specified duration within any interval for it to be considered in filtered list.'), 'propget'], HRESULT, 'Condition',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(23501), helpstring('This additional condition must be satisfied At Most or At Least specified duration within any interval for it to be considered in filtered list.'), 'propput'], HRESULT, 'Condition',
              ( ['in'], POINTER(IAgCrdnCondition), 'ppRetVal' )),
    COMMETHOD([dispid(23502), helpstring('Choose a duration type (at least/at most).'), 'propget'], HRESULT, 'DurationKind',
              ( ['out', 'retval'], POINTER(AgECrdnIntervalDurationKind), 'pRetVal' )),
    COMMETHOD([dispid(23502), helpstring('Choose a duration type (at least/at most).'), 'propput'], HRESULT, 'DurationKind',
              ( ['in'], AgECrdnIntervalDurationKind, 'pRetVal' )),
    COMMETHOD([dispid(23503), helpstring('A duration of time the condition must be satisfied.'), 'propget'], HRESULT, 'IntervalDuration',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(23503), helpstring('A duration of time the condition must be satisfied.'), 'propput'], HRESULT, 'IntervalDuration',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnSatisfactionConditionFilter implementation
##class _IAgCrdnSatisfactionConditionFilter_Impl(object):
##    @property
##    def FilterType(self):
##        'Returns a type of the filter.'
##        #return pRetVal
##
##    def _get(self):
##        'This additional condition must be satisfied At Most or At Least specified duration within any interval for it to be considered in filtered list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'This additional condition must be satisfied At Most or At Least specified duration within any interval for it to be considered in filtered list.'
##    Condition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Choose a duration type (at least/at most).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Choose a duration type (at least/at most).'
##    DurationKind = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A duration of time the condition must be satisfied.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A duration of time the condition must be satisfied.'
##    IntervalDuration = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnInterpBasic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnInterpBasic'
    _iid_ = GUID('{8ECF9751-7619-4987-830C-B8AE19616F61}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnInterpBasic._methods_ = [
    COMMETHOD([dispid(24601), helpstring('Get the interpolation type, which can be Lagrange or Hermite interpolation. See STK help on interpolation for further details.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnInterpolatorType), 'pRetVal' )),
    COMMETHOD([dispid(24601), helpstring('Get the interpolation type, which can be Lagrange or Hermite interpolation. See STK help on interpolation for further details.'), 'propput'], HRESULT, 'Type',
              ( ['in'], AgECrdnInterpolatorType, 'pRetVal' )),
    COMMETHOD([dispid(24602), helpstring('Get the interpolation order, which determines the order of interpolation polynomial and is related to how many samples are used during interpolation. See STK help on interpolation for further details.'), 'propget'], HRESULT, 'Order',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(24602), helpstring('Get the interpolation order, which determines the order of interpolation polynomial and is related to how many samples are used during interpolation. See STK help on interpolation for further details.'), 'propput'], HRESULT, 'Order',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnInterpBasic implementation
##class _IAgCrdnInterpBasic_Impl(object):
##    def _get(self):
##        'Get the interpolation type, which can be Lagrange or Hermite interpolation. See STK help on interpolation for further details.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the interpolation type, which can be Lagrange or Hermite interpolation. See STK help on interpolation for further details.'
##    Type = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the interpolation order, which determines the order of interpolation polynomial and is related to how many samples are used during interpolation. See STK help on interpolation for further details.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the interpolation order, which determines the order of interpolation polynomial and is related to how many samples are used during interpolation. See STK help on interpolation for further details.'
##    Order = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnEventTimeOffset(CoClass):
    'Event at fixed offset from specified reference event.'
    _reg_clsid_ = GUID('{CCCA4110-F163-4294-AA1D-8DA2B7582DFC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnEventTimeOffset._com_interfaces_ = [_IAgCrdnEventTimeOffset, IAgCrdnEventTimeOffset, IAgCrdnEvent, IAgCrdn]


# values for enumeration 'AgECrdnSignedAngleType'
eCrdnSignedAngleNone = 0
eCrdnSignedAnglePositive = 1
eCrdnSignedAngleNegative = 2
AgECrdnSignedAngleType = c_int # enum
_IAgCrdnAngleToPlane._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(2001), helpstring('Returns a type of the angle object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAngleType), 'pRetVal' )),
    COMMETHOD([dispid(2002), helpstring('Finds an angle at the specified epoch.')], HRESULT, 'FindAngle',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindAngleResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2003), helpstring('Finds an angle and angle rate.')], HRESULT, 'FindAngleWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindAngleWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2004), helpstring('Finds the angle value and three vectors that define the angle in a specified input axes.')], HRESULT, 'FindCoordinates',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindResult)), 'ppRetVal' )),
    COMMETHOD([dispid(2005), helpstring('Finds the angle value, the angle rate and three vectors that define the angle in a specified input axes.')], HRESULT, 'FindCoordinatesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleFindWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(3901), helpstring('Specify a reference vector.'), 'propget'], HRESULT, 'ReferenceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(3902), helpstring('Specify a reference plane.'), 'propget'], HRESULT, 'ReferencePlane',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(3903), helpstring("Controls whether the angle is measured as either Positive or Negative when the reference Vector is directed toward the plane's normal, or always positive."), 'propget'], HRESULT, 'Signed',
              ( ['out', 'retval'], POINTER(AgECrdnSignedAngleType), 'pRetVal' )),
    COMMETHOD([dispid(3903), helpstring("Controls whether the angle is measured as either Positive or Negative when the reference Vector is directed toward the plane's normal, or always positive."), 'propput'], HRESULT, 'Signed',
              ( ['in'], AgECrdnSignedAngleType, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAngleToPlane implementation
##class _IAgCrdnAngleToPlane_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the angle object.'
##        #return pRetVal
##
##    def FindAngle(self, Epoch):
##        'Finds an angle at the specified epoch.'
##        #return ppRetVal
##
##    def FindAngleWithRate(self, Epoch):
##        'Finds an angle and angle rate.'
##        #return ppRetVal
##
##    def FindCoordinates(self, Epoch, Axes):
##        'Finds the angle value and three vectors that define the angle in a specified input axes.'
##        #return ppRetVal
##
##    def FindCoordinatesWithRate(self, Epoch, Axes):
##        'Finds the angle value, the angle rate and three vectors that define the angle in a specified input axes.'
##        #return ppRetVal
##
##    @property
##    def ReferenceVector(self):
##        'Specify a reference vector.'
##        #return ppRetVal
##
##    @property
##    def ReferencePlane(self):
##        'Specify a reference plane.'
##        #return ppRetVal
##
##    def _get(self):
##        "Controls whether the angle is measured as either Positive or Negative when the reference Vector is directed toward the plane's normal, or always positive."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Controls whether the angle is measured as either Positive or Negative when the reference Vector is directed toward the plane's normal, or always positive."
##    Signed = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnGridValuesFixedStep._methods_ = [
    COMMETHOD(['propget', helpstring('Minimum coordinate value.')], HRESULT, 'Min',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Minimum coordinate value.')], HRESULT, 'Min',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Maximum coordinate value.')], HRESULT, 'Max',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Maximum coordinate value.')], HRESULT, 'Max',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Flag indicating whether to include minimum and maximum coordinate values in the defined set of values.')], HRESULT, 'IncludeMinMax',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Flag indicating whether to include minimum and maximum coordinate values in the defined set of values.')], HRESULT, 'IncludeMinMax',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Reference coordinate value from which steps are taken.')], HRESULT, 'ReferenceValue',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Reference coordinate value from which steps are taken.')], HRESULT, 'ReferenceValue',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Step between subsequent coordinate values.')], HRESULT, 'Step',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Step between subsequent coordinate values.')], HRESULT, 'Step',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnGridValuesFixedStep implementation
##class IAgCrdnGridValuesFixedStep_Impl(object):
##    def _get(self):
##        'Minimum coordinate value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Minimum coordinate value.'
##    Min = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Maximum coordinate value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Maximum coordinate value.'
##    Max = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Flag indicating whether to include minimum and maximum coordinate values in the defined set of values.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Flag indicating whether to include minimum and maximum coordinate values in the defined set of values.'
##    IncludeMinMax = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Reference coordinate value from which steps are taken.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Reference coordinate value from which steps are taken.'
##    ReferenceValue = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Step between subsequent coordinate values.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Step between subsequent coordinate values.'
##    Step = property(_get, _set, doc = _set.__doc__)
##

_IAgCrdnVectorLinearCombination._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(28501), helpstring('Vector A can be any VGT vector.'), 'propget'], HRESULT, 'VectorA',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(28501), helpstring('Vector A can be any VGT vector.'), 'propput'], HRESULT, 'VectorA',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD([dispid(28502), helpstring('Scale factor for vector A.'), 'propget'], HRESULT, 'ScaleFactorA',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(28502), helpstring('Scale factor for vector A.'), 'propput'], HRESULT, 'ScaleFactorA',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(28503), helpstring('Whether to normalize vector A.'), 'propget'], HRESULT, 'NormalizeVectorA',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28503), helpstring('Whether to normalize vector A.'), 'propput'], HRESULT, 'NormalizeVectorA',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28504), helpstring('Vector B can be any VGT vector.'), 'propget'], HRESULT, 'VectorB',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(28504), helpstring('Vector B can be any VGT vector.'), 'propput'], HRESULT, 'VectorB',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD([dispid(28505), helpstring('Scale factor for vector B.'), 'propget'], HRESULT, 'ScaleFactorB',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(28505), helpstring('Scale factor for vector B.'), 'propput'], HRESULT, 'ScaleFactorB',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(28506), helpstring('Whether to normalize vector B.'), 'propget'], HRESULT, 'NormalizeVectorB',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28506), helpstring('Whether to normalize vector B.'), 'propput'], HRESULT, 'NormalizeVectorB',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28507), helpstring('Determines whether the output dimension is inherited or explicitly specified using OutputDimension.'), 'propget'], HRESULT, 'OutputDimensionInheritance',
              ( ['out', 'retval'], POINTER(AgECrdnDimensionInheritance), 'pRetVal' )),
    COMMETHOD([dispid(28507), helpstring('Determines whether the output dimension is inherited or explicitly specified using OutputDimension.'), 'propput'], HRESULT, 'OutputDimensionInheritance',
              ( ['in'], AgECrdnDimensionInheritance, 'pRetVal' )),
    COMMETHOD([dispid(28508), helpstring('A dimension to interpret the output vector.'), 'propget'], HRESULT, 'OutputDimension',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(28508), helpstring('A dimension to interpret the output vector.'), 'propput'], HRESULT, 'OutputDimension',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorLinearCombination implementation
##class _IAgCrdnVectorLinearCombination_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'Vector A can be any VGT vector.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Vector A can be any VGT vector.'
##    VectorA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Scale factor for vector A.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Scale factor for vector A.'
##    ScaleFactorA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether to normalize vector A.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to normalize vector A.'
##    NormalizeVectorA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Vector B can be any VGT vector.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Vector B can be any VGT vector.'
##    VectorB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Scale factor for vector B.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Scale factor for vector B.'
##    ScaleFactorB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether to normalize vector B.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to normalize vector B.'
##    NormalizeVectorB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Determines whether the output dimension is inherited or explicitly specified using OutputDimension.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Determines whether the output dimension is inherited or explicitly specified using OutputDimension.'
##    OutputDimensionInheritance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A dimension to interpret the output vector.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A dimension to interpret the output vector.'
##    OutputDimension = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnEventIntervalListTimeOffset._methods_ = [
    COMMETHOD(['propget', helpstring('The reference interval list.')], HRESULT, 'ReferenceIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The reference interval list.')], HRESULT, 'ReferenceIntervals',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The time offset.')], HRESULT, 'TimeOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The time offset.')], HRESULT, 'TimeOffset',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalListTimeOffset implementation
##class IAgCrdnEventIntervalListTimeOffset_Impl(object):
##    def _get(self):
##        'The reference interval list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference interval list.'
##    ReferenceIntervals = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The time offset.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The time offset.'
##    TimeOffset = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnFirstIntervalsFilter(CoClass):
    'The filter selects a portion of first intervals.'
    _reg_clsid_ = GUID('{2338ABA2-B57A-46E7-8297-4EC371C8A6AA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnFirstIntervalsFilter._com_interfaces_ = [_IAgCrdnFirstIntervalsFilter, IAgCrdnFirstIntervalsFilter, IAgCrdnPruneFilter]

IAgCrdnPointPlaneProjection._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a source point.')], HRESULT, 'SourcePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference plane.')], HRESULT, 'ReferencePlane',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneRefTo)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPointPlaneProjection implementation
##class IAgCrdnPointPlaneProjection_Impl(object):
##    @property
##    def SourcePoint(self):
##        'Specify a source point.'
##        #return ppRetVal
##
##    @property
##    def ReferencePlane(self):
##        'Specify a reference plane.'
##        #return ppRetVal
##

_IAgCrdnVectorPeriapsis._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(8001), helpstring('Specify a central body.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(8002), helpstring('Eliptical orbit is fit to the current motion of the reference point according to the selected mean theory.'), 'propget'], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(8003), helpstring('Specify the mean element theory type for approximating motion.'), 'propget'], HRESULT, 'MeanElementType',
              ( ['out', 'retval'], POINTER(AgECrdnMeanElementTheory), 'pRetVal' )),
    COMMETHOD([dispid(8003), helpstring('Specify the mean element theory type for approximating motion.'), 'propput'], HRESULT, 'MeanElementType',
              ( ['in'], AgECrdnMeanElementTheory, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorPeriapsis implementation
##class _IAgCrdnVectorPeriapsis_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Eliptical orbit is fit to the current motion of the reference point according to the selected mean theory.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify the mean element theory type for approximating motion.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify the mean element theory type for approximating motion.'
##    MeanElementType = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnFindTimesResult._methods_ = [
    COMMETHOD(['propget', helpstring('Indicates whether the result object is valid.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A collection of found intervals.')], HRESULT, 'Intervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The start time of the entire interval span.')], HRESULT, 'Start',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The stop time of the entire interval span.')], HRESULT, 'Stop',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('An array of found times.')], HRESULT, 'Times',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnFindTimesResult implementation
##class IAgCrdnFindTimesResult_Impl(object):
##    @property
##    def IsValid(self):
##        'Indicates whether the result object is valid.'
##        #return pRetVal
##
##    @property
##    def Intervals(self):
##        'A collection of found intervals.'
##        #return ppRetVal
##
##    @property
##    def Start(self):
##        'The start time of the entire interval span.'
##        #return pRetVal
##
##    @property
##    def Stop(self):
##        'The stop time of the entire interval span.'
##        #return pRetVal
##
##    @property
##    def Times(self):
##        'An array of found times.'
##        #return ppRetVal
##

class _IAgCrdnSamplingFixedStep(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnSamplingFixedStep'
    _iid_ = GUID('{63A6F441-5FFC-43B8-892B-DDA92F045A22}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnSamplingFixedStep._methods_ = [
    COMMETHOD([dispid(23801), helpstring('A sampling method type.'), 'propget'], HRESULT, 'MethodType',
              ( ['out', 'retval'], POINTER(AgECrdnSamplingMethod), 'pRetVal' )),
    COMMETHOD([dispid(24001), helpstring('Get the fixed time step.'), 'propget'], HRESULT, 'TimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(24001), helpstring('Get the fixed time step.'), 'propput'], HRESULT, 'TimeStep',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnSamplingFixedStep implementation
##class _IAgCrdnSamplingFixedStep_Impl(object):
##    @property
##    def MethodType(self):
##        'A sampling method type.'
##        #return pRetVal
##
##    def _get(self):
##        'Get the fixed time step.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the fixed time step.'
##    TimeStep = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnPlaneFindInAxesWithRateResult._methods_ = [
    COMMETHOD(['propget', helpstring('True indicates the method call was successful.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('X-axis vector in the specified reference axes.')], HRESULT, 'XAxis',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The rate of change of X-axis vector in the specified reference axes.')], HRESULT, 'XAxisRate',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Y-axis vector in the specified reference axes.')], HRESULT, 'YAxis',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The rate of change of Y-axis vector in the specified reference axes.')], HRESULT, 'YAxisRate',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPlaneFindInAxesWithRateResult implementation
##class IAgCrdnPlaneFindInAxesWithRateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'True indicates the method call was successful.'
##        #return pRetVal
##
##    @property
##    def XAxis(self):
##        'X-axis vector in the specified reference axes.'
##        #return ppRetVal
##
##    @property
##    def XAxisRate(self):
##        'The rate of change of X-axis vector in the specified reference axes.'
##        #return ppRetVal
##
##    @property
##    def YAxis(self):
##        'Y-axis vector in the specified reference axes.'
##        #return ppRetVal
##
##    @property
##    def YAxisRate(self):
##        'The rate of change of Y-axis vector in the specified reference axes.'
##        #return ppRetVal
##

_IAgCrdnEvent._methods_ = [
    COMMETHOD([dispid(12911), helpstring('Return the type of time instant.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventType), 'pRetVal' )),
    COMMETHOD([dispid(12905), helpstring("Return time instant that corresponds to today's GMT midnight."), 'propget'], HRESULT, 'Today',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12906), helpstring("Return time instant that corresponds to tomorrow's GMT midnight."), 'propget'], HRESULT, 'Tomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12907), helpstring("Return time instant that corresponds to today's GMT noon."), 'propget'], HRESULT, 'NoonToday',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12908), helpstring("Return time instant that corresponds to tomorrow's GMT noon."), 'propget'], HRESULT, 'NoonTomorrow',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(12909), helpstring('Return computed time instance if it occurs.')], HRESULT, 'FindOccurrence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventFindOccurrenceResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12912), helpstring('Return true if computed time instance occurs before or at specified time, return false otherwise.')], HRESULT, 'OccursBefore',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEvent implementation
##class _IAgCrdnEvent_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time instant.'
##        #return pRetVal
##
##    @property
##    def Today(self):
##        "Return time instant that corresponds to today's GMT midnight."
##        #return ppRetVal
##
##    @property
##    def Tomorrow(self):
##        "Return time instant that corresponds to tomorrow's GMT midnight."
##        #return ppRetVal
##
##    @property
##    def NoonToday(self):
##        "Return time instant that corresponds to today's GMT noon."
##        #return ppRetVal
##
##    @property
##    def NoonTomorrow(self):
##        "Return time instant that corresponds to tomorrow's GMT noon."
##        #return ppRetVal
##
##    def FindOccurrence(self):
##        'Return computed time instance if it occurs.'
##        #return ppRetVal
##
##    def OccursBefore(self, Epoch):
##        'Return true if computed time instance occurs before or at specified time, return false otherwise.'
##        #return pRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnParameterSet._methods_ = [
    COMMETHOD(['propget', helpstring('Get the type of parameter set.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnParameterSetType), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the labels identifying hierarchy of representations within parameter set.')], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Get the names identifying types of dimensions of individual scalars within parameter set.')], HRESULT, 'Dimensions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Get the names identifying individual scalars within parameter set.')], HRESULT, 'ScalarNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Return results of computing individual scalars within parameter set at the specified time.')], HRESULT, 'Calculate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Return results of computing individual scalars and their time derivatives within parameter set at the specified time.')], HRESULT, 'CalculateWithDerivative',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnParameterSet implementation
##class IAgCrdnParameterSet_Impl(object):
##    @property
##    def Type(self):
##        'Get the type of parameter set.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the labels identifying hierarchy of representations within parameter set.'
##        #return ppRetVal
##
##    @property
##    def Dimensions(self):
##        'Get the names identifying types of dimensions of individual scalars within parameter set.'
##        #return ppRetVal
##
##    @property
##    def ScalarNames(self):
##        'Get the names identifying individual scalars within parameter set.'
##        #return ppRetVal
##
##    def Calculate(self, Epoch):
##        'Return results of computing individual scalars within parameter set at the specified time.'
##        #return ppRetVal
##
##    def CalculateWithDerivative(self, Epoch):
##        'Return results of computing individual scalars and their time derivatives within parameter set at the specified time.'
##        #return ppRetVal
##

class AgCrdnGapsFilter(CoClass):
    'The filter merges intervals unless they are separated by gaps of at least/most certain duration.'
    _reg_clsid_ = GUID('{E9E417D0-C9A6-4420-B198-C5A6DD2FE62F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnGapsFilter._com_interfaces_ = [_IAgCrdnGapsFilter, IAgCrdnGapsFilter, IAgCrdnPruneFilter]

IAgCrdnCalcScalarDerivative._methods_ = [
    COMMETHOD(['propget', helpstring('The input scalar component used to compute the derivative.')], HRESULT, 'Scalar',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The input scalar component used to compute the derivative.')], HRESULT, 'Scalar',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The time step used, if necessary, in numerical evaluation of derivatives using central differencing.')], HRESULT, 'DifferencingTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The time step used, if necessary, in numerical evaluation of derivatives using central differencing.')], HRESULT, 'DifferencingTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnCalcScalarDerivative implementation
##class IAgCrdnCalcScalarDerivative_Impl(object):
##    def _get(self):
##        'The input scalar component used to compute the derivative.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The input scalar component used to compute the derivative.'
##    Scalar = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The time step used, if necessary, in numerical evaluation of derivatives using central differencing.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The time step used, if necessary, in numerical evaluation of derivatives using central differencing.'
##    DifferencingTimeStep = property(_get, _set, doc = _set.__doc__)
##

_IAgCrdnEventArrayConditionCrossings._methods_ = [
    COMMETHOD([dispid(18302), helpstring('Return the type of time array.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventArrayType), 'pRetVal' )),
    COMMETHOD([dispid(18301), helpstring('Return computed array of times.')], HRESULT, 'FindTimes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnFindTimesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(27301), helpstring('The crossing condition.'), 'propget'], HRESULT, 'SatisfactionCrossing',
              ( ['out', 'retval'], POINTER(AgECrdnSatisfactionCrossing), 'pRetVal' )),
    COMMETHOD([dispid(27301), helpstring('The crossing condition.'), 'propput'], HRESULT, 'SatisfactionCrossing',
              ( ['in'], AgECrdnSatisfactionCrossing, 'pRetVal' )),
    COMMETHOD([dispid(27302), helpstring('The condition component.'), 'propget'], HRESULT, 'Condition',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(27302), helpstring('The condition component.'), 'propput'], HRESULT, 'Condition',
              ( ['in'], POINTER(IAgCrdnCondition), 'ppRetVal' )),
    COMMETHOD([dispid(27303), helpstring('Specify the interval list within which intervals of satisfaction are sought. The default is set to overall availability of host object.'), 'propget'], HRESULT, 'CustomTimeLimits',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(27303), helpstring('Specify the interval list within which intervals of satisfaction are sought. The default is set to overall availability of host object.'), 'propput'], HRESULT, 'CustomTimeLimits',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD([dispid(27304), helpstring('Specify whether to use custom time limits.'), 'propget'], HRESULT, 'UseCustomTimeLimits',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(27304), helpstring('Specify whether to use custom time limits.'), 'propput'], HRESULT, 'UseCustomTimeLimits',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(27305), helpstring('Determine if computed intervals of satisfaction are saved/loaded, or recomputed on load if necessary.'), 'propget'], HRESULT, 'SaveDataOption',
              ( ['out', 'retval'], POINTER(AgECrdnSaveDataOption), 'pRetVal' )),
    COMMETHOD([dispid(27305), helpstring('Determine if computed intervals of satisfaction are saved/loaded, or recomputed on load if necessary.'), 'propput'], HRESULT, 'SaveDataOption',
              ( ['in'], AgECrdnSaveDataOption, 'pRetVal' )),
    COMMETHOD([dispid(27306), helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propget'], HRESULT, 'Sampling',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSampling)), 'ppRetVal' )),
    COMMETHOD([dispid(27306), helpstring('The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'), 'propput'], HRESULT, 'Sampling',
              ( ['in'], POINTER(IAgCrdnSampling), 'ppRetVal' )),
    COMMETHOD([dispid(27307), helpstring('The Convergence definition, which uses time tolerance to determine when time of extremum is found.'), 'propget'], HRESULT, 'Convergence',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConverge)), 'ppRetVal' )),
    COMMETHOD([dispid(27307), helpstring('The Convergence definition, which uses time tolerance to determine when time of extremum is found.'), 'propput'], HRESULT, 'Convergence',
              ( ['in'], POINTER(IAgCrdnConverge), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventArrayConditionCrossings implementation
##class _IAgCrdnEventArrayConditionCrossings_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of time array.'
##        #return pRetVal
##
##    def FindTimes(self):
##        'Return computed array of times.'
##        #return ppRetVal
##
##    def _get(self):
##        'The crossing condition.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The crossing condition.'
##    SatisfactionCrossing = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The condition component.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The condition component.'
##    Condition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify the interval list within which intervals of satisfaction are sought. The default is set to overall availability of host object.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Specify the interval list within which intervals of satisfaction are sought. The default is set to overall availability of host object.'
##    CustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use custom time limits.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use custom time limits.'
##    UseCustomTimeLimits = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Determine if computed intervals of satisfaction are saved/loaded, or recomputed on load if necessary.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Determine if computed intervals of satisfaction are saved/loaded, or recomputed on load if necessary.'
##    SaveDataOption = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Sampling definition, which can use a fixed step, relative tolerance or curvature tolerance. Relative tolerance uses a combination of relative and absolute changes in scalar values between samples...'
##    Sampling = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Convergence definition, which uses time tolerance to determine when time of extremum is found.'
##    Convergence = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnIntegral(CoClass):
    'Represents a base class for integral definitions.'
    _reg_clsid_ = GUID('{5291298C-62E1-4F3E-9678-D817CCB58722}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnIntegral._com_interfaces_ = [_IAgCrdnIntegral, IAgCrdnIntegral, IAgCrdn]

IAgCrdnPruneFilterFactory._methods_ = [
    COMMETHOD([helpstring('Create and initializes a new prune filter using default configuration.')], HRESULT, 'Create',
              ( ['in'], AgECrdnPruneFilter, 'EFilter' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPruneFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPruneFilterFactory implementation
##class IAgCrdnPruneFilterFactory_Impl(object):
##    def Create(self, EFilter):
##        'Create and initializes a new prune filter using default configuration.'
##        #return ppRetVal
##

IAgCrdnPointPlaneIntersection._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a direction vector.')], HRESULT, 'DirectionVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference plane.')], HRESULT, 'ReferencePlane',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify the origin point.')], HRESULT, 'OriginPoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPointPlaneIntersection implementation
##class IAgCrdnPointPlaneIntersection_Impl(object):
##    @property
##    def DirectionVector(self):
##        'Specify a direction vector.'
##        #return ppRetVal
##
##    @property
##    def ReferencePlane(self):
##        'Specify a reference plane.'
##        #return ppRetVal
##
##    @property
##    def OriginPoint(self):
##        'Specify the origin point.'
##        #return ppRetVal
##

IAgCrdnVectorProjectAlongVector._methods_ = [
    COMMETHOD(['propget', helpstring('A source vector. Can be any VGT vector.')], HRESULT, 'SourceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A source vector. Can be any VGT vector.')], HRESULT, 'SourceVector',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A vector along which the source vector is projected. Can be any VGT vector.')], HRESULT, 'AlongVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A vector along which the source vector is projected. Can be any VGT vector.')], HRESULT, 'AlongVector',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVectorProjectAlongVector implementation
##class IAgCrdnVectorProjectAlongVector_Impl(object):
##    def _get(self):
##        'A source vector. Can be any VGT vector.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A source vector. Can be any VGT vector.'
##    SourceVector = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A vector along which the source vector is projected. Can be any VGT vector.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A vector along which the source vector is projected. Can be any VGT vector.'
##    AlongVector = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnIntegralBasic(CoClass):
    'Integral definition determines how scalar calculation is numerically integrated.'
    _reg_clsid_ = GUID('{62B4149D-BC27-418A-AB91-DEA942910D2C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnIntegralBasic._com_interfaces_ = [_IAgCrdnIntegralBasic, IAgCrdnIntegralBasic, IAgCrdnIntegral, IAgCrdn]

class IAgCrdnAxesTrajectory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Axes based on trajectory of the point relative to the reference coordinate system.'
    _iid_ = GUID('{0C91BF49-1B71-45D7-ABD0-98DBDAD34107}')
    _idlflags_ = ['oleautomation']
IAgCrdnAxesTrajectory._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a trajectory point.')], HRESULT, 'TrajectoryPoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference system.')], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Specify a type of the trajectory's coordinate frame.")], HRESULT, 'TrajectoryAxesType',
              ( ['out', 'retval'], POINTER(AgECrdnTrajectoryAxesType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Specify a type of the trajectory's coordinate frame.")], HRESULT, 'TrajectoryAxesType',
              ( ['in'], AgECrdnTrajectoryAxesType, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAxesTrajectory implementation
##class IAgCrdnAxesTrajectory_Impl(object):
##    @property
##    def TrajectoryPoint(self):
##        'Specify a trajectory point.'
##        #return ppRetVal
##
##    @property
##    def ReferenceSystem(self):
##        'Specify a reference system.'
##        #return ppRetVal
##
##    def _get(self):
##        "Specify a type of the trajectory's coordinate frame."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Specify a type of the trajectory's coordinate frame."
##    TrajectoryAxesType = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnPointLagrangeLibration._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a central body.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a lagrange point (L1, L2, etc.)')], HRESULT, 'PointType',
              ( ['out', 'retval'], POINTER(AgECrdnLagrangeLibrationPointType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a lagrange point (L1, L2, etc.)')], HRESULT, 'PointType',
              ( ['in'], AgECrdnLagrangeLibrationPointType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify multiple secondary central bodies.')], HRESULT, 'SecondaryCentralBodies',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyCollection)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPointLagrangeLibration implementation
##class IAgCrdnPointLagrangeLibration_Impl(object):
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a lagrange point (L1, L2, etc.)'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a lagrange point (L1, L2, etc.)'
##    PointType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SecondaryCentralBodies(self):
##        'Specify multiple secondary central bodies.'
##        #return ppRetVal
##

class _IAgCrdnAxesBPlane(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxesBPlane'
    _iid_ = GUID('{E9F6FC78-4703-4055-A63A-81C773411661}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnAxesBPlane._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1701), helpstring('Returns a type of the axes object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAxesType), 'pRetVal' )),
    COMMETHOD([dispid(1706), helpstring('Find an angular velocity and orientation in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1707), helpstring('Find an orientation in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1708), helpstring('Returns an object that allows modifying the axes labels.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(2601), helpstring('Specify a trajectory point.'), 'propget'], HRESULT, 'Trajectory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(2602), helpstring('Specify a reference vector.'), 'propget'], HRESULT, 'ReferenceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(2603), helpstring('Specify a target central body.'), 'propget'], HRESULT, 'TargetBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(2604), helpstring('Specify a direction (incoming or outgoing).'), 'propget'], HRESULT, 'Direction',
              ( ['out', 'retval'], POINTER(AgECrdnDirectionType), 'pRetVal' )),
    COMMETHOD([dispid(2604), helpstring('Specify a direction (incoming or outgoing).'), 'propput'], HRESULT, 'Direction',
              ( ['in'], AgECrdnDirectionType, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1709), helpstring('Returns the X axis of the component.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1710), helpstring('Returns the Y axis of the component.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1711), helpstring('Returns the Z axis of the component.'), 'propget'], HRESULT, 'Z',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1712), helpstring('Transforms the input vector from this axes into the output axes.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1713), helpstring("Transforms the input vector and vector's rate from this axes into the output axes.")], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'RateInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAxesBPlane implementation
##class _IAgCrdnAxesBPlane_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the axes object.'
##        #return pRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Find an angular velocity and orientation in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Find an orientation in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        'Returns an object that allows modifying the axes labels.'
##        #return ppRetVal
##
##    @property
##    def Trajectory(self):
##        'Specify a trajectory point.'
##        #return ppRetVal
##
##    @property
##    def ReferenceVector(self):
##        'Specify a reference vector.'
##        #return ppRetVal
##
##    @property
##    def TargetBody(self):
##        'Specify a target central body.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a direction (incoming or outgoing).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a direction (incoming or outgoing).'
##    Direction = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    @property
##    def X(self):
##        'Returns the X axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Y(self):
##        'Returns the Y axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Z(self):
##        'Returns the Z axis of the component.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputAxes, VectorInMyAxes):
##        'Transforms the input vector from this axes into the output axes.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputAxes, VectorInMyAxes, RateInMyAxes):
##        "Transforms the input vector and vector's rate from this axes into the output axes."
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnInterp(CoClass):
    'Represents a base class for interpolation definitions.'
    _reg_clsid_ = GUID('{25B45C4C-FAC8-4BBD-8C4C-E1C054020BFF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnInterp(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnInterp'
    _iid_ = GUID('{AE8023BA-43A2-428F-8426-0EE67AC03277}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnInterp._com_interfaces_ = [_IAgCrdnInterp, IAgCrdnInterp, IAgCrdn]

IAgCrdnEventIntervalScaled._methods_ = [
    COMMETHOD(['propget', helpstring('The original interval.')], HRESULT, 'OriginalInterval',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The original interval.')], HRESULT, 'OriginalInterval',
              ( ['in'], POINTER(IAgCrdnEventInterval), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The absolute increment value which creates a interval by expanding (or shortening if negative) the original interval by shifting its start/stop times equally by half of specified increment value.')], HRESULT, 'AbsoluteIncrement',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The absolute increment value which creates a interval by expanding (or shortening if negative) the original interval by shifting its start/stop times equally by half of specified increment value.')], HRESULT, 'AbsoluteIncrement',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The relative increment value from which absolute increment is obtained by multiplying relative value by interval duration...')], HRESULT, 'RelativeIncrement',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The relative increment value from which absolute increment is obtained by multiplying relative value by interval duration...')], HRESULT, 'RelativeIncrement',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether to use absolute or relative increment.')], HRESULT, 'UseAbsoluteIncrement',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether to use absolute or relative increment.')], HRESULT, 'UseAbsoluteIncrement',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalScaled implementation
##class IAgCrdnEventIntervalScaled_Impl(object):
##    def _get(self):
##        'The original interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original interval.'
##    OriginalInterval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The absolute increment value which creates a interval by expanding (or shortening if negative) the original interval by shifting its start/stop times equally by half of specified increment value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The absolute increment value which creates a interval by expanding (or shortening if negative) the original interval by shifting its start/stop times equally by half of specified increment value.'
##    AbsoluteIncrement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The relative increment value from which absolute increment is obtained by multiplying relative value by interval duration...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The relative increment value from which absolute increment is obtained by multiplying relative value by interval duration...'
##    RelativeIncrement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use absolute or relative increment.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use absolute or relative increment.'
##    UseAbsoluteIncrement = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnInterpBasic(CoClass):
    'Interpolation definition determines how to obtain values in between tabulated samples. See STK help on interpolation for further details.'
    _reg_clsid_ = GUID('{0F799CAC-2BDE-483A-88C8-635EAABA3B5D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnInterpBasic._com_interfaces_ = [_IAgCrdnInterpBasic, IAgCrdnInterpBasic, IAgCrdnInterp, IAgCrdn]

IAgCrdnPruneFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Returns a type of the filter.')], HRESULT, 'FilterType',
              ( ['out', 'retval'], POINTER(AgECrdnPruneFilter), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnPruneFilter implementation
##class IAgCrdnPruneFilter_Impl(object):
##    @property
##    def FilterType(self):
##        'Returns a type of the filter.'
##        #return pRetVal
##

IAgCrdnCalcScalarElapsedTime._methods_ = [
    COMMETHOD(['propget', helpstring('The reference time instant.')], HRESULT, 'ReferenceTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The reference time instant.')], HRESULT, 'ReferenceTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnCalcScalarElapsedTime implementation
##class IAgCrdnCalcScalarElapsedTime_Impl(object):
##    def _get(self):
##        'The reference time instant.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference time instant.'
##    ReferenceTimeInstant = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnIntervalsFilter(CoClass):
    'The filter selects intervals of at least/most certain duration.'
    _reg_clsid_ = GUID('{8B24360C-FE72-4231-98EE-0701A9F31D2F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnIntervalsFilter._com_interfaces_ = [_IAgCrdnIntervalsFilter, IAgCrdnIntervalsFilter, IAgCrdnPruneFilter]

_IAgCrdnEventIntervalListTimeOffset._methods_ = [
    COMMETHOD([dispid(13509), helpstring('Return the type of interval list.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalListType), 'pRetVal' )),
    COMMETHOD([dispid(13502), helpstring('Get the label descriptions associated with the interval list.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13503), helpstring('Get the labels associated with the interval list.'), 'propget'], HRESULT, 'Descriptions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13507), helpstring('Return computed interval list that can be empty.')], HRESULT, 'FindIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalListResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13508), helpstring('Determine if specified time falls within computed interval list.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(18001), helpstring('The reference interval list.'), 'propget'], HRESULT, 'ReferenceIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(18001), helpstring('The reference interval list.'), 'propput'], HRESULT, 'ReferenceIntervals',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD([dispid(18002), helpstring('The time offset.'), 'propget'], HRESULT, 'TimeOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(18002), helpstring('The time offset.'), 'propput'], HRESULT, 'TimeOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalListTimeOffset implementation
##class _IAgCrdnEventIntervalListTimeOffset_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval list.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the label descriptions associated with the interval list.'
##        #return ppRetVal
##
##    @property
##    def Descriptions(self):
##        'Get the labels associated with the interval list.'
##        #return ppRetVal
##
##    def FindIntervals(self):
##        'Return computed interval list that can be empty.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval list.'
##        #return pRetVal
##
##    def _get(self):
##        'The reference interval list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference interval list.'
##    ReferenceIntervals = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The time offset.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The time offset.'
##    TimeOffset = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class IAgCrdnAxesLagrangeLibration(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Libration point axes using one primary and multiple secondary central bodies. Set primary and secondary bodies, and point type.'
    _iid_ = GUID('{21BBDC68-9A88-47A3-8E18-4401CFEC0111}')
    _idlflags_ = ['oleautomation']
IAgCrdnAxesLagrangeLibration._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a primary central body.')], HRESULT, 'PrimaryCentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a lagrange point (L1, L2, etc.)')], HRESULT, 'PointType',
              ( ['out', 'retval'], POINTER(AgECrdnLagrangeLibrationPointType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a lagrange point (L1, L2, etc.)')], HRESULT, 'PointType',
              ( ['in'], AgECrdnLagrangeLibrationPointType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify secondary central bodies.')], HRESULT, 'SecondaryCentralBodies',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyCollection)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAxesLagrangeLibration implementation
##class IAgCrdnAxesLagrangeLibration_Impl(object):
##    @property
##    def PrimaryCentralBody(self):
##        'Specify a primary central body.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a lagrange point (L1, L2, etc.)'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a lagrange point (L1, L2, etc.)'
##    PointType = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SecondaryCentralBodies(self):
##        'Specify secondary central bodies.'
##        #return ppRetVal
##

IAgCrdnProvider._methods_ = [
    COMMETHOD(['propget', helpstring('Returns a group of vectors.')], HRESULT, 'Vectors',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorGroup)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a group of points.')], HRESULT, 'Points',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointGroup)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a group of angles.')], HRESULT, 'Angles',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngleGroup)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a group of axes.')], HRESULT, 'Axes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesGroup)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a group of planes.')], HRESULT, 'Planes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneGroup)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a group of systems.')], HRESULT, 'Systems',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemGroup)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns well-known systems.')], HRESULT, 'WellKnownSystems',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnWellKnownSystems)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns well-known axes.')], HRESULT, 'WellKnownAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnWellKnownAxes)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a group of events.')], HRESULT, 'Events',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventGroup)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a group of event intervals.')], HRESULT, 'EventIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalGroup)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a group of calc scalars.')], HRESULT, 'CalcScalars',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalarGroup)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a group of event arrays.')], HRESULT, 'EventArrays',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArrayGroup)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a group of event interval lists.')], HRESULT, 'EventIntervalLists',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalListGroup)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a group of event interval collections.')], HRESULT, 'EventIntervalCollections',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollectionGroup)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Access, add new or remove existing parameter set components.')], HRESULT, 'ParameterSets',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnParameterSetGroup)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a group of condition objects.')], HRESULT, 'Conditions',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionGroup)), 'ppRetVal' )),
    COMMETHOD([helpstring('Tests whether the specified VGT feature is supported.')], HRESULT, 'Supports',
              ( ['in'], AgECrdnKind, 'Feature' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a group of condition set objects.')], HRESULT, 'ConditionSets',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionSetGroup)), 'ppRetVal' )),
    COMMETHOD([helpstring('Imports Analysis Workbench components from a file.')], HRESULT, 'Import',
              ( ['in'], BSTR, 'Filename' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a group of volume grid objects.')], HRESULT, 'VolumeGrids',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGridGroup)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a group of volume objects.')], HRESULT, 'Volumes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGroup)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnProvider implementation
##class IAgCrdnProvider_Impl(object):
##    @property
##    def Vectors(self):
##        'Returns a group of vectors.'
##        #return ppRetVal
##
##    @property
##    def Points(self):
##        'Returns a group of points.'
##        #return ppRetVal
##
##    @property
##    def Angles(self):
##        'Returns a group of angles.'
##        #return ppRetVal
##
##    @property
##    def Axes(self):
##        'Returns a group of axes.'
##        #return ppRetVal
##
##    @property
##    def Planes(self):
##        'Returns a group of planes.'
##        #return ppRetVal
##
##    @property
##    def Systems(self):
##        'Returns a group of systems.'
##        #return ppRetVal
##
##    @property
##    def WellKnownSystems(self):
##        'Returns well-known systems.'
##        #return ppRetVal
##
##    @property
##    def WellKnownAxes(self):
##        'Returns well-known axes.'
##        #return ppRetVal
##
##    @property
##    def Events(self):
##        'Returns a group of events.'
##        #return ppRetVal
##
##    @property
##    def EventIntervals(self):
##        'Returns a group of event intervals.'
##        #return ppRetVal
##
##    @property
##    def CalcScalars(self):
##        'Returns a group of calc scalars.'
##        #return ppRetVal
##
##    @property
##    def EventArrays(self):
##        'Returns a group of event arrays.'
##        #return ppRetVal
##
##    @property
##    def EventIntervalLists(self):
##        'Returns a group of event interval lists.'
##        #return ppRetVal
##
##    @property
##    def EventIntervalCollections(self):
##        'Returns a group of event interval collections.'
##        #return ppRetVal
##
##    @property
##    def ParameterSets(self):
##        'Access, add new or remove existing parameter set components.'
##        #return ppRetVal
##
##    @property
##    def Conditions(self):
##        'Returns a group of condition objects.'
##        #return ppRetVal
##
##    def Supports(self, Feature):
##        'Tests whether the specified VGT feature is supported.'
##        #return pRetVal
##
##    @property
##    def ConditionSets(self):
##        'Returns a group of condition set objects.'
##        #return ppRetVal
##
##    def Import(self, Filename):
##        'Imports Analysis Workbench components from a file.'
##        #return ppRetVal
##
##    @property
##    def VolumeGrids(self):
##        'Returns a group of volume grid objects.'
##        #return ppRetVal
##
##    @property
##    def Volumes(self):
##        'Returns a group of volume objects.'
##        #return ppRetVal
##

class _IAgCrdnSignalDelay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnSignalDelay'
    _iid_ = GUID('{F3DFB221-7723-4BC3-AED6-F5DF59D39DED}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnSignalDelay._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnSignalDelay implementation
##class _IAgCrdnSignalDelay_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnLastIntervalsFilter(CoClass):
    'The filter selects a portion of last intervals.'
    _reg_clsid_ = GUID('{6EF91B96-7800-422D-ADA4-FE35DA4E896E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnLastIntervalsFilter._com_interfaces_ = [_IAgCrdnLastIntervalsFilter, IAgCrdnLastIntervalsFilter, IAgCrdnPruneFilter]

IAgCrdnPointOnSurface._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a central body.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference point.')], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference shape.')], HRESULT, 'ReferenceShape',
              ( ['out', 'retval'], POINTER(AgECrdnReferenceShapeType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a reference shape.')], HRESULT, 'ReferenceShape',
              ( ['in'], AgECrdnReferenceShapeType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a surface type.')], HRESULT, 'SurfaceType',
              ( ['out', 'retval'], POINTER(AgECrdnSurfaceType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a surface type.')], HRESULT, 'SurfaceType',
              ( ['in'], AgECrdnSurfaceType, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnPointOnSurface implementation
##class IAgCrdnPointOnSurface_Impl(object):
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Specify a reference point.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a reference shape.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a reference shape.'
##    ReferenceShape = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a surface type.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a surface type.'
##    SurfaceType = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnGridValuesFixedNumberOfSteps._methods_ = [
    COMMETHOD(['propget', helpstring('Minimum coordinate value.')], HRESULT, 'Min',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Minimum coordinate value.')], HRESULT, 'Min',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Maximum coordinate value.')], HRESULT, 'Max',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Maximum coordinate value.')], HRESULT, 'Max',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The number of steps between coordinate values.')], HRESULT, 'NumberOfSteps',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The number of steps between coordinate values.')], HRESULT, 'NumberOfSteps',
              ( ['in'], c_int, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnGridValuesFixedNumberOfSteps implementation
##class IAgCrdnGridValuesFixedNumberOfSteps_Impl(object):
##    def _get(self):
##        'Minimum coordinate value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Minimum coordinate value.'
##    Min = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Maximum coordinate value.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Maximum coordinate value.'
##    Max = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The number of steps between coordinate values.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The number of steps between coordinate values.'
##    NumberOfSteps = property(_get, _set, doc = _set.__doc__)
##

class _IAgCrdnSamplingMethod(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnSamplingMethod'
    _iid_ = GUID('{AB22C1F4-825B-43A8-8BBC-E9D1353B5DEB}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnSamplingMethod._methods_ = [
    COMMETHOD([dispid(23801), helpstring('A sampling method type.'), 'propget'], HRESULT, 'MethodType',
              ( ['out', 'retval'], POINTER(AgECrdnSamplingMethod), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnSamplingMethod implementation
##class _IAgCrdnSamplingMethod_Impl(object):
##    @property
##    def MethodType(self):
##        'A sampling method type.'
##        #return pRetVal
##

IAgCrdnVectorScalarLinearCombination._methods_ = [
    COMMETHOD(['propget', helpstring('Vector A can be any VGT vector.')], HRESULT, 'VectorA',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Vector A can be any VGT vector.')], HRESULT, 'VectorA',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Scale factor for vector A.')], HRESULT, 'ScaleFactorA',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Scale factor for vector A.')], HRESULT, 'ScaleFactorA',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Whether to normalize vector A.')], HRESULT, 'NormalizeVectorA',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Whether to normalize vector A.')], HRESULT, 'NormalizeVectorA',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Whether to use a scale from scalar A.')], HRESULT, 'UseScaleFromScalarA',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Whether to use a scale from scalar A.')], HRESULT, 'UseScaleFromScalarA',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Whether to use a scale from scalar B.')], HRESULT, 'UseScaleFromScalarB',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Whether to use a scale from scalar B.')], HRESULT, 'UseScaleFromScalarB',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Scalar scale A. Can be any Scalar calculation.')], HRESULT, 'ScalarA',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Scalar scale A. Can be any Scalar calculation.')], HRESULT, 'ScalarA',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Scalar scale B. Can be any Scalar calculation.')], HRESULT, 'ScalarB',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Scalar scale B. Can be any Scalar calculation.')], HRESULT, 'ScalarB',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Vector B can be any VGT vector.')], HRESULT, 'VectorB',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Vector B can be any VGT vector.')], HRESULT, 'VectorB',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Scale factor for vector B.')], HRESULT, 'ScaleFactorB',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Scale factor for vector B.')], HRESULT, 'ScaleFactorB',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Whether to normalize vector B.')], HRESULT, 'NormalizeVectorB',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Whether to normalize vector B.')], HRESULT, 'NormalizeVectorB',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Determines whether the output dimension is inherited or explicitly specified using OutputDimension.')], HRESULT, 'OutputDimensionInheritance',
              ( ['out', 'retval'], POINTER(AgECrdnDimensionInheritance), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Determines whether the output dimension is inherited or explicitly specified using OutputDimension.')], HRESULT, 'OutputDimensionInheritance',
              ( ['in'], AgECrdnDimensionInheritance, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A dimension to interpret the output vector.')], HRESULT, 'OutputDimension',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('A dimension to interpret the output vector.')], HRESULT, 'OutputDimension',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorScalarLinearCombination implementation
##class IAgCrdnVectorScalarLinearCombination_Impl(object):
##    def _get(self):
##        'Vector A can be any VGT vector.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Vector A can be any VGT vector.'
##    VectorA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Scale factor for vector A.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Scale factor for vector A.'
##    ScaleFactorA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether to normalize vector A.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to normalize vector A.'
##    NormalizeVectorA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether to use a scale from scalar A.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to use a scale from scalar A.'
##    UseScaleFromScalarA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether to use a scale from scalar B.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to use a scale from scalar B.'
##    UseScaleFromScalarB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Scalar scale A. Can be any Scalar calculation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Scalar scale A. Can be any Scalar calculation.'
##    ScalarA = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Scalar scale B. Can be any Scalar calculation.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Scalar scale B. Can be any Scalar calculation.'
##    ScalarB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Vector B can be any VGT vector.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Vector B can be any VGT vector.'
##    VectorB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Scale factor for vector B.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Scale factor for vector B.'
##    ScaleFactorB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether to normalize vector B.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to normalize vector B.'
##    NormalizeVectorB = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Determines whether the output dimension is inherited or explicitly specified using OutputDimension.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Determines whether the output dimension is inherited or explicitly specified using OutputDimension.'
##    OutputDimensionInheritance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A dimension to interpret the output vector.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A dimension to interpret the output vector.'
##    OutputDimension = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnParameterSet(CoClass):
    'Parameter set contains various sets of scalar computations.'
    _reg_clsid_ = GUID('{5D45770F-1EE9-4663-94E8-842D37CF749C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnParameterSet._com_interfaces_ = [_IAgCrdnParameterSet, IAgCrdnParameterSet, IAgCrdn]

IAgCrdnPointCommonTasks._methods_ = [
    COMMETHOD([helpstring('Creates a non-persistent point fixed in a specified reference system.')], HRESULT, 'CreateFixedInSystemCartographic',
              ( ['in'], POINTER(IAgCrdnSystem), 'ReferenceSystem' ),
              ( ['in'], VARIANT, 'Latitude' ),
              ( ['in'], VARIANT, 'Longitude' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointFixedInSystem)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a non-persistent point fixed in a specified reference system.')], HRESULT, 'CreateFixedInSystemCartesian',
              ( ['in'], POINTER(IAgCrdnSystem), 'ReferenceSystem' ),
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['in'], c_double, 'Z' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointFixedInSystem)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes and returns tabulated positions and velocities of a point with respect to reference system using specified sampling parameters.')], HRESULT, 'Sample',
              ( ['in'], POINTER(IAgCrdnPoint), 'Point' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'ReferenceSystem' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Intervals' ),
              ( ['in'], c_double, 'MinStep' ),
              ( ['in'], c_double, 'MaxStep' ),
              ( ['in'], VARIANT, 'TargetRate' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointSamplingResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPointCommonTasks implementation
##class IAgCrdnPointCommonTasks_Impl(object):
##    def CreateFixedInSystemCartographic(self, ReferenceSystem, Latitude, Longitude, Altitude):
##        'Creates a non-persistent point fixed in a specified reference system.'
##        #return ppRetVal
##
##    def CreateFixedInSystemCartesian(self, ReferenceSystem, X, Y, Z):
##        'Creates a non-persistent point fixed in a specified reference system.'
##        #return ppRetVal
##
##    def Sample(self, Point, ReferenceSystem, Intervals, MinStep, MaxStep, TargetRate):
##        'Computes and returns tabulated positions and velocities of a point with respect to reference system using specified sampling parameters.'
##        #return ppRetVal
##

IAgCrdnCalcScalarFile._methods_ = [
    COMMETHOD(['propget', helpstring('The path to an ASCII file with .csc extension.')], HRESULT, 'Filename',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The path to an ASCII file with .csc extension.')], HRESULT, 'Filename',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([helpstring('Reload the file specified with Filename property.')], HRESULT, 'Reload'),
    COMMETHOD([helpstring('Computes the interval time span of the file.')], HRESULT, 'GetFileSpan',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalResult)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The interpolation method used with the data.')], HRESULT, 'FileInterpolationType',
              ( ['out', 'retval'], POINTER(AgECrdnFileInterpolatorType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The interpolation method used with the data.')], HRESULT, 'FileInterpolationType',
              ( ['in'], AgECrdnFileInterpolatorType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The interpolation order used with the interpolation method to interrogate the data.')], HRESULT, 'FileInterpolationOrder',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The interpolation order used with the interpolation method to interrogate the data.')], HRESULT, 'FileInterpolationOrder',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Flag indicating whether the interpolation method and order settings specified within the file, if any, will be honored.')], HRESULT, 'UseNativeFileInterpolationSettings',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Flag indicating whether the interpolation method and order settings specified within the file, if any, will be honored.')], HRESULT, 'UseNativeFileInterpolationSettings',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnCalcScalarFile implementation
##class IAgCrdnCalcScalarFile_Impl(object):
##    def _get(self):
##        'The path to an ASCII file with .csc extension.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The path to an ASCII file with .csc extension.'
##    Filename = property(_get, _set, doc = _set.__doc__)
##
##    def Reload(self):
##        'Reload the file specified with Filename property.'
##        #return 
##
##    def GetFileSpan(self):
##        'Computes the interval time span of the file.'
##        #return ppRetVal
##
##    def _get(self):
##        'The interpolation method used with the data.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The interpolation method used with the data.'
##    FileInterpolationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The interpolation order used with the interpolation method to interrogate the data.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The interpolation order used with the interpolation method to interrogate the data.'
##    FileInterpolationOrder = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Flag indicating whether the interpolation method and order settings specified within the file, if any, will be honored.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Flag indicating whether the interpolation method and order settings specified within the file, if any, will be honored.'
##    UseNativeFileInterpolationSettings = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnParameterSetAttitude(CoClass):
    'Attitude parameter set contains various representations of attitude of one set of axes relative to another.'
    _reg_clsid_ = GUID('{B0984A54-AE88-45AB-8B9B-12340D30EC2F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnParameterSetAttitude._com_interfaces_ = [_IAgCrdnParameterSetAttitude, IAgCrdnParameterSetAttitude, IAgCrdnParameterSet, IAgCrdn]

class _IAgCrdnSystem(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnSystem'
    _iid_ = GUID('{5DA0F216-CB0C-43F4-A428-BE7C15E4F010}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgCrdnSystem._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1901), helpstring('Returns a type of the system object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnSystemType), 'pRetVal' )),
    COMMETHOD([dispid(1906), helpstring('Find position, velocity, rate and orientation using the specified system.')], HRESULT, 'FindInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemFindInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1907), helpstring('Translates the position vector from this system into the output system.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'OutputSystem' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'PositionInMySystem' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1908), helpstring('Translates the position and rate vectors from this system into the output system.')], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'OutputSystem' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'PositionInMySystem' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VelocityInMySystem' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnSystem implementation
##class _IAgCrdnSystem_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the system object.'
##        #return pRetVal
##
##    def FindInSystem(self, Epoch, System):
##        'Find position, velocity, rate and orientation using the specified system.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputSystem, PositionInMySystem):
##        'Translates the position vector from this system into the output system.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputSystem, PositionInMySystem, VelocityInMySystem):
##        'Translates the position and rate vectors from this system into the output system.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnParameterSetFactory(CoClass):
    'The factory is used to create instances of available parameter set types.'
    _reg_clsid_ = GUID('{9E2B9170-1CC5-47C7-B276-AD3A7B097358}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnParameterSetFactory._com_interfaces_ = [_IAgCrdnParameterSetFactory, IAgCrdnParameterSetFactory]

IAgCrdnVectorPeriapsis._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a central body.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Eliptical orbit is fit to the current motion of the reference point according to the selected mean theory.')], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify the mean element theory type for approximating motion.')], HRESULT, 'MeanElementType',
              ( ['out', 'retval'], POINTER(AgECrdnMeanElementTheory), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify the mean element theory type for approximating motion.')], HRESULT, 'MeanElementType',
              ( ['in'], AgECrdnMeanElementTheory, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorPeriapsis implementation
##class IAgCrdnVectorPeriapsis_Impl(object):
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Eliptical orbit is fit to the current motion of the reference point according to the selected mean theory.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify the mean element theory type for approximating motion.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify the mean element theory type for approximating motion.'
##    MeanElementType = property(_get, _set, doc = _set.__doc__)
##

_IAgCrdnPointCentBodyIntersect._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1801), helpstring('Returns a type of the point object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([dispid(1802), helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1803), helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(25901), helpstring('Central body.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(25901), helpstring('Central body.'), 'propput'], HRESULT, 'CentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(25902), helpstring('A reference point. Can be any point from VGT.'), 'propget'], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(25902), helpstring('A reference point. Can be any point from VGT.'), 'propput'], HRESULT, 'ReferencePoint',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(25903), helpstring('A direction vector. Can be any vector from VGT.'), 'propget'], HRESULT, 'DirectionVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(25903), helpstring('A direction vector. Can be any vector from VGT.'), 'propput'], HRESULT, 'DirectionVector',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD([dispid(25904), helpstring('An intersection surface.'), 'propget'], HRESULT, 'IntersectionSurface',
              ( ['out', 'retval'], POINTER(AgECrdnIntersectionSurface), 'pRetVal' )),
    COMMETHOD([dispid(25904), helpstring('An intersection surface.'), 'propput'], HRESULT, 'IntersectionSurface',
              ( ['in'], AgECrdnIntersectionSurface, 'pRetVal' )),
    COMMETHOD([dispid(25905), helpstring('An altitude.'), 'propget'], HRESULT, 'Altitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(25905), helpstring('An altitude.'), 'propput'], HRESULT, 'Altitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(25906), helpstring('Whether to use range constraint.'), 'propget'], HRESULT, 'UseRangeConstraint',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(25906), helpstring('Whether to use range constraint.'), 'propput'], HRESULT, 'UseRangeConstraint',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(25907), helpstring('A minimum range. An exception is thrown if the value exceeds the MaximumRange. Applicable only if the range constraint is not used.'), 'propget'], HRESULT, 'MinimumRange',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(25907), helpstring('A minimum range. An exception is thrown if the value exceeds the MaximumRange. Applicable only if the range constraint is not used.'), 'propput'], HRESULT, 'MinimumRange',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(25908), helpstring('A maximum range. An exception is thrown if the value is less than the MinimumRange. Applicable only if the range constraint is not used.'), 'propget'], HRESULT, 'MaximumRange',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(25908), helpstring('A maximum range. An exception is thrown if the value is less than the MinimumRange. Applicable only if the range constraint is not used.'), 'propput'], HRESULT, 'MaximumRange',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(25909), helpstring('Whether the minimum range is used. Applicable only if the range constraint is not used.'), 'propget'], HRESULT, 'UseMinimumRange',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(25909), helpstring('Whether the minimum range is used. Applicable only if the range constraint is not used.'), 'propput'], HRESULT, 'UseMinimumRange',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(25910), helpstring('Whether the maximum range is used. Applicable only if the range constraint is not used.'), 'propget'], HRESULT, 'UseMaximumRange',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(25910), helpstring('Whether the maximum range is used. Applicable only if the range constraint is not used.'), 'propput'], HRESULT, 'UseMaximumRange',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(25911), helpstring('Set minimum and maximum range. An exception is thrown if Minimum exceeds Maximum. An exception is thrown if UseRangeConstraint is set to true. Applicable only if the range constraint is not used.')], HRESULT, 'SetRange',
              ( ['in'], c_double, 'Minimum' ),
              ( ['in'], c_double, 'Maximum' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPointCentBodyIntersect implementation
##class _IAgCrdnPointCentBodyIntersect_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##
##    def _get(self):
##        'Central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Central body.'
##    CentralBody = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A reference point. Can be any point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A reference point. Can be any point from VGT.'
##    ReferencePoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A direction vector. Can be any vector from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A direction vector. Can be any vector from VGT.'
##    DirectionVector = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'An intersection surface.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'An intersection surface.'
##    IntersectionSurface = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'An altitude.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'An altitude.'
##    Altitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether to use range constraint.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether to use range constraint.'
##    UseRangeConstraint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A minimum range. An exception is thrown if the value exceeds the MaximumRange. Applicable only if the range constraint is not used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A minimum range. An exception is thrown if the value exceeds the MaximumRange. Applicable only if the range constraint is not used.'
##    MinimumRange = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A maximum range. An exception is thrown if the value is less than the MinimumRange. Applicable only if the range constraint is not used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A maximum range. An exception is thrown if the value is less than the MinimumRange. Applicable only if the range constraint is not used.'
##    MaximumRange = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether the minimum range is used. Applicable only if the range constraint is not used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether the minimum range is used. Applicable only if the range constraint is not used.'
##    UseMinimumRange = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Whether the maximum range is used. Applicable only if the range constraint is not used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Whether the maximum range is used. Applicable only if the range constraint is not used.'
##    UseMaximumRange = property(_get, _set, doc = _set.__doc__)
##
##    def SetRange(self, Minimum, Maximum):
##        'Set minimum and maximum range. An exception is thrown if Minimum exceeds Maximum. An exception is thrown if UseRangeConstraint is set to true. Applicable only if the range constraint is not used.'
##        #return 
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

_IAgCrdnAxesSamplingIntervalCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('Number of elements in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Accesses an element at the specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesSamplingInterval)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnAxesSamplingIntervalCollection implementation
##class _IAgCrdnAxesSamplingIntervalCollection_Impl(object):
##    @property
##    def Count(self):
##        'Number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Accesses an element at the specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

class AgCrdnPlaneRefTo(CoClass):
    'Represents a Plane reference.'
    _reg_clsid_ = GUID('{C15EF139-9727-4D58-9D57-E4783C74E38B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnPlaneRefTo._com_interfaces_ = [_IAgCrdnPlaneRefTo, IAgCrdnPlaneRefTo, IAgCrdnRefTo]

IAgCrdnAxesFindInAxesWithRateResult._methods_ = [
    COMMETHOD(['propget', helpstring('True indicates the method call was successful.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Axes' angular velocity.")], HRESULT, 'AngularVelocity',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("The axes' orientation.")], HRESULT, 'Orientation',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAxesFindInAxesWithRateResult implementation
##class IAgCrdnAxesFindInAxesWithRateResult_Impl(object):
##    @property
##    def IsValid(self):
##        'True indicates the method call was successful.'
##        #return pRetVal
##
##    @property
##    def AngularVelocity(self):
##        "Axes' angular velocity."
##        #return ppRetVal
##
##    @property
##    def Orientation(self):
##        "The axes' orientation."
##        #return ppRetVal
##

_IAgCrdnVolumeFromGrid._methods_ = [
    COMMETHOD([dispid(32801), helpstring('Sets/Returns the edge type.'), 'propget'], HRESULT, 'EdgeType',
              ( ['out', 'retval'], POINTER(AgECrdnVolumeFromGridEdgeType), 'pRetVal' )),
    COMMETHOD([dispid(32801), helpstring('Sets/Returns the edge type.'), 'propput'], HRESULT, 'EdgeType',
              ( ['in'], AgECrdnVolumeFromGridEdgeType, 'pRetVal' )),
    COMMETHOD([dispid(32802), helpstring('Sets/Returns the volume grid for bounding.'), 'propget'], HRESULT, 'VolumeGrid',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD([dispid(32802), helpstring('Sets/Returns the volume grid for bounding.'), 'propput'], HRESULT, 'VolumeGrid',
              ( ['in'], POINTER(IAgCrdnVolumeGrid), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVolumeFromGrid implementation
##class _IAgCrdnVolumeFromGrid_Impl(object):
##    def _get(self):
##        'Sets/Returns the edge type.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Sets/Returns the edge type.'
##    EdgeType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Sets/Returns the volume grid for bounding.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Sets/Returns the volume grid for bounding.'
##    VolumeGrid = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnParameterSetGroundTrajectory(CoClass):
    'Ground trajectory parameter set contains various representations of trajectory of a point relative to central body reference shape.'
    _reg_clsid_ = GUID('{D3E99DBC-B76D-4782-9A3C-C0ADDF396AFE}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnParameterSetGroundTrajectory._com_interfaces_ = [_IAgCrdnParameterSetGroundTrajectory, IAgCrdnParameterSetGroundTrajectory, IAgCrdnParameterSet, IAgCrdn]

class IAgCrdnAxesCustomScript(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Customized axes offset with respect to a set of reference Axes.'
    _iid_ = GUID('{B73ACE31-C908-4878-BEA4-944D65846C4C}')
    _idlflags_ = ['oleautomation']
IAgCrdnAxesCustomScript._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a reference axes.')], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Can be MATLAB (*.m or *.dll), VB Script (*.vbs) or Perl (*.pl) script file.')], HRESULT, 'Filename',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Can be MATLAB (*.m or *.dll), VB Script (*.vbs) or Perl (*.pl) script file.')], HRESULT, 'Filename',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAxesCustomScript implementation
##class IAgCrdnAxesCustomScript_Impl(object):
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'Can be MATLAB (*.m or *.dll), VB Script (*.vbs) or Perl (*.pl) script file.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Can be MATLAB (*.m or *.dll), VB Script (*.vbs) or Perl (*.pl) script file.'
##    Filename = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnVector(CoClass):
    'A generic vector class.'
    _reg_clsid_ = GUID('{16EFF315-2122-4C7C-86EC-5BC3E6498F29}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnVector._com_interfaces_ = [_IAgCrdnVector, IAgCrdnVector, IAgCrdnTimeProperties, IAgCrdn]

class AgCrdnParameterSetOrbit(CoClass):
    'Orbit parameter set contains various trajectory representations of an orbiting point.'
    _reg_clsid_ = GUID('{7741D8AD-DC8A-4C3A-94CC-3090BBA4BCBF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnParameterSetOrbit._com_interfaces_ = [_IAgCrdnParameterSetOrbit, IAgCrdnParameterSetOrbit, IAgCrdnParameterSet, IAgCrdn]

IAgCrdnCentralBodyRefTo._methods_ = [
    COMMETHOD([helpstring('Sets a new central body using specified path.')], HRESULT, 'SetPath',
              ( ['in'], BSTR, 'Path' )),
    COMMETHOD([helpstring('Sets a new central body.')], HRESULT, 'SetCentralBody',
              ( ['in'], POINTER(IAgCrdnCentralBody), 'CentralBody' )),
    COMMETHOD([helpstring('Returns a central body or null if the central body is invalid.')], HRESULT, 'GetCentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBody)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnCentralBodyRefTo implementation
##class IAgCrdnCentralBodyRefTo_Impl(object):
##    def SetPath(self, Path):
##        'Sets a new central body using specified path.'
##        #return 
##
##    def SetCentralBody(self, CentralBody):
##        'Sets a new central body.'
##        #return 
##
##    def GetCentralBody(self):
##        'Returns a central body or null if the central body is invalid.'
##        #return ppRetVal
##


# values for enumeration 'AgECrdnVolumeAberrationType'
eCrdnVolumeAberrationUnknown = -1
eCrdnVolumeAberrationTotal = 0
eCrdnVolumeAberrationAnnual = 1
eCrdnVolumeAberrationNone = 2
AgECrdnVolumeAberrationType = c_int # enum

# values for enumeration 'AgECrdnVolumeClockHostType'
eCrdnVolumeClockHostUnknown = -1
eCrdnVolumeClockHostBase = 0
eCrdnVolumeClockHostTarget = 1
AgECrdnVolumeClockHostType = c_int # enum

# values for enumeration 'AgECrdnVolumeTimeSenseType'
eCrdnVolumeTimeSenseUnknown = -1
eCrdnVolumeTimeSenseTransmit = 0
eCrdnVolumeTimeSenseReceive = 1
AgECrdnVolumeTimeSenseType = c_int # enum
_IAgCrdnLightTimeDelay._methods_ = [
    COMMETHOD([dispid(33301), helpstring('Flag indicating whether to include minimum and maximum coordinate values in the defined set of values.'), 'propget'], HRESULT, 'UseLightTimeDelay',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(33301), helpstring('Flag indicating whether to include minimum and maximum coordinate values in the defined set of values.'), 'propput'], HRESULT, 'UseLightTimeDelay',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(33302), helpstring('Set light Time Delay Convergence.'), 'propget'], HRESULT, 'TimeDelayConvergence',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(33302), helpstring('Set light Time Delay Convergence.'), 'propput'], HRESULT, 'TimeDelayConvergence',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(33303), helpstring('Method used to Aberration Type.'), 'propget'], HRESULT, 'AberrationType',
              ( ['out', 'retval'], POINTER(AgECrdnVolumeAberrationType), 'pRetVal' )),
    COMMETHOD([dispid(33303), helpstring('Method used to Aberration Type.'), 'propput'], HRESULT, 'AberrationType',
              ( ['in'], AgECrdnVolumeAberrationType, 'pRetVal' )),
    COMMETHOD([dispid(33304), helpstring('Indicates whether object1 or object2 of an Access instance holds the clock for Access times.'), 'propget'], HRESULT, 'ClockHost',
              ( ['out', 'retval'], POINTER(AgECrdnVolumeClockHostType), 'pRetVal' )),
    COMMETHOD([dispid(33304), helpstring('Indicates whether object1 or object2 of an Access instance holds the clock for Access times.'), 'propput'], HRESULT, 'ClockHost',
              ( ['in'], AgECrdnVolumeClockHostType, 'pRetVal' )),
    COMMETHOD([dispid(33305), helpstring('Indicates whether apparent position is computed in a transmit or receive sense'), 'propget'], HRESULT, 'TimeSense',
              ( ['out', 'retval'], POINTER(AgECrdnVolumeTimeSenseType), 'pRetVal' )),
    COMMETHOD([dispid(33305), helpstring('Indicates whether apparent position is computed in a transmit or receive sense'), 'propput'], HRESULT, 'TimeSense',
              ( ['in'], AgECrdnVolumeTimeSenseType, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnLightTimeDelay implementation
##class _IAgCrdnLightTimeDelay_Impl(object):
##    def _get(self):
##        'Flag indicating whether to include minimum and maximum coordinate values in the defined set of values.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Flag indicating whether to include minimum and maximum coordinate values in the defined set of values.'
##    UseLightTimeDelay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Set light Time Delay Convergence.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Set light Time Delay Convergence.'
##    TimeDelayConvergence = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Method used to Aberration Type.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Method used to Aberration Type.'
##    AberrationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Indicates whether object1 or object2 of an Access instance holds the clock for Access times.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Indicates whether object1 or object2 of an Access instance holds the clock for Access times.'
##    ClockHost = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Indicates whether apparent position is computed in a transmit or receive sense'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Indicates whether apparent position is computed in a transmit or receive sense'
##    TimeSense = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnAxesLabels(CoClass):
    'Allows configuring the VGT axes labels.'
    _reg_clsid_ = GUID('{25FD8EFF-82CD-4588-98A2-6BF0B67F0517}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesLabels._com_interfaces_ = [_IAgCrdnAxesLabels, IAgCrdnAxesLabels]

IAgCrdnEventArrayFiltered._methods_ = [
    COMMETHOD(['propget', helpstring('The original time array.')], HRESULT, 'OriginalTimeArray',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventArray)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The original time array.')], HRESULT, 'OriginalTimeArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Skip Time Steps filter type omits from filtered time array any times that fall within specified time step of last accepted time sample. Skip Count filter type omits specified number of time samples since last accepted time sample...')], HRESULT, 'FilterType',
              ( ['out', 'retval'], POINTER(AgECrdnEventArrayFilterType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Skip Time Steps filter type omits from filtered time array any times that fall within specified time step of last accepted time sample. Skip Count filter type omits specified number of time samples since last accepted time sample...')], HRESULT, 'FilterType',
              ( ['in'], AgECrdnEventArrayFilterType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify the number of times skipped between accepted samples when FilterType is set to Skip Count...')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify the number of times skipped between accepted samples when FilterType is set to Skip Count...')], HRESULT, 'Count',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The number of steps skipped between accepted samples when FilterType is set to Skip Time Steps.')], HRESULT, 'Step',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The number of steps skipped between accepted samples when FilterType is set to Skip Time Steps.')], HRESULT, 'Step',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('If set to true, includes stop times of each interval from original time array.')], HRESULT, 'IncludeIntervalStopTimes',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('If set to true, includes stop times of each interval from original time array.')], HRESULT, 'IncludeIntervalStopTimes',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEventArrayFiltered implementation
##class IAgCrdnEventArrayFiltered_Impl(object):
##    def _get(self):
##        'The original time array.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original time array.'
##    OriginalTimeArray = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Skip Time Steps filter type omits from filtered time array any times that fall within specified time step of last accepted time sample. Skip Count filter type omits specified number of time samples since last accepted time sample...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Skip Time Steps filter type omits from filtered time array any times that fall within specified time step of last accepted time sample. Skip Count filter type omits specified number of time samples since last accepted time sample...'
##    FilterType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify the number of times skipped between accepted samples when FilterType is set to Skip Count...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify the number of times skipped between accepted samples when FilterType is set to Skip Count...'
##    Count = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The number of steps skipped between accepted samples when FilterType is set to Skip Time Steps.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The number of steps skipped between accepted samples when FilterType is set to Skip Time Steps.'
##    Step = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'If set to true, includes stop times of each interval from original time array.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'If set to true, includes stop times of each interval from original time array.'
##    IncludeIntervalStopTimes = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnEventIntervalListFixed._methods_ = [
    COMMETHOD([helpstring("Get intervals with explicitly specified start and stop times from interval list. The method returns a one-dimensional array which elements are 2-tuples of intervals' start/stop times converted according to the current unit preferences.")], HRESULT, 'GetIntervals',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring("Set interval list from intervals with explicitly specified start and stop times. The method takes a one-dimensional array which elements are 2-tuples of intervals' start/stop times converted according to the current unit preferences.")], HRESULT, 'SetIntervals',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Intervals' )),
]
################################################################
## code template for IAgCrdnEventIntervalListFixed implementation
##class IAgCrdnEventIntervalListFixed_Impl(object):
##    def GetIntervals(self):
##        "Get intervals with explicitly specified start and stop times from interval list. The method returns a one-dimensional array which elements are 2-tuples of intervals' start/stop times converted according to the current unit preferences."
##        #return ppRetVal
##
##    def SetIntervals(self, Intervals):
##        "Set interval list from intervals with explicitly specified start and stop times. The method takes a one-dimensional array which elements are 2-tuples of intervals' start/stop times converted according to the current unit preferences."
##        #return 
##

class AgCrdnParameterSetTrajectory(CoClass):
    'Trajectory parameter set contains various representations of trajectory of a point relative to a reference coordinate system.'
    _reg_clsid_ = GUID('{90DB6EA5-A2E0-447B-87D9-364366EA80D4}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnParameterSetTrajectory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Trajectory parameter set contains various representations of trajectory of a point relative to a reference coordinate system.'
    _iid_ = GUID('{78EAC44F-B0AF-4F81-829D-333A541CF42C}')
    _idlflags_ = ['oleautomation']
AgCrdnParameterSetTrajectory._com_interfaces_ = [_IAgCrdnParameterSetTrajectory, IAgCrdnParameterSetTrajectory, IAgCrdnParameterSet, IAgCrdn]

_IAgCrdnVolume._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVolume implementation
##class _IAgCrdnVolume_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnAxes(CoClass):
    'A generic axes class.'
    _reg_clsid_ = GUID('{F321902A-2B82-49D3-A533-1D676F29D8A0}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnAxes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnAxes'
    _iid_ = GUID('{58E677E0-5D18-4A9D-8AC9-AEBBCD4ECDDA}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnAxes._com_interfaces_ = [_IAgCrdnAxes, IAgCrdnAxes, IAgCrdnTimeProperties, IAgCrdn]

IAgCrdnEventIntervalCollectionFactory._methods_ = [
    COMMETHOD([helpstring('Create and register an event interval collection using specified name, description, and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnEventIntervalCollectionType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an event interval collection defined by computing sunlight, penumbra and umbra intervals as seen at specified location using specified selection of eclipsing bodies.')], HRESULT, 'CreateEventIntervalCollectionLighting',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an event interval collection recorded at target clock location by performing signal transmission of original interval list collection between base and target clock locations.')], HRESULT, 'CreateEventIntervalCollectionSignaled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnEventIntervalCollectionType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Create an event interval collection containing intervals during which condition set is satisfied.')], HRESULT, 'CreateEventIntervalCollectionSatisfaction',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalCollection)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalCollectionFactory implementation
##class IAgCrdnEventIntervalCollectionFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Create and register an event interval collection using specified name, description, and type.'
##        #return ppRetVal
##
##    def CreateEventIntervalCollectionLighting(self, Name, Description):
##        'Create an event interval collection defined by computing sunlight, penumbra and umbra intervals as seen at specified location using specified selection of eclipsing bodies.'
##        #return ppRetVal
##
##    def CreateEventIntervalCollectionSignaled(self, Name, Description):
##        'Create an event interval collection recorded at target clock location by performing signal transmission of original interval list collection between base and target clock locations.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##
##    def CreateEventIntervalCollectionSatisfaction(self, Name, Description):
##        'Create an event interval collection containing intervals during which condition set is satisfied.'
##        #return ppRetVal
##

IAgCrdnVolumeGridConstrained._methods_ = [
    COMMETHOD(['propget', helpstring('Get the reference system in which spherical parameters are computed.')], HRESULT, 'ReferenceGrid',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolumeGrid)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the reference system in which spherical parameters are computed.')], HRESULT, 'ReferenceGrid',
              ( ['in'], POINTER(IAgCrdnVolumeGrid), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Get the volume constraint on the grid.')], HRESULT, 'Constraint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the volume constraint on the grid.')], HRESULT, 'Constraint',
              ( ['in'], POINTER(IAgCrdnVolume), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeGridConstrained implementation
##class IAgCrdnVolumeGridConstrained_Impl(object):
##    def _get(self):
##        'Get the reference system in which spherical parameters are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the reference system in which spherical parameters are computed.'
##    ReferenceGrid = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the volume constraint on the grid.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the volume constraint on the grid.'
##    Constraint = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnParameterSetVector(CoClass):
    'Vector parameter set contains various representations of a vector in a reference set of axes.'
    _reg_clsid_ = GUID('{67A694AC-4C0D-42B2-883D-83B4282C1371}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnParameterSetVector(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Vector parameter set contains various representations of a vector in a reference set of axes.'
    _iid_ = GUID('{4771409B-8C6F-4381-A7B3-D7B90EDA79EC}')
    _idlflags_ = ['oleautomation']
AgCrdnParameterSetVector._com_interfaces_ = [_IAgCrdnParameterSetVector, IAgCrdnParameterSetVector, IAgCrdnParameterSet, IAgCrdn]

IAgCrdnAngleRotation._methods_ = [
    COMMETHOD(['propget', helpstring('Specify an axes to rotate from.')], HRESULT, 'FromAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify an axes to rotate to.')], HRESULT, 'ToAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a rotation direction.')], HRESULT, 'ReferenceDirection',
              ( ['out', 'retval'], POINTER(AgECrdnDisplayAxisSelector), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a rotation direction.')], HRESULT, 'ReferenceDirection',
              ( ['in'], AgECrdnDisplayAxisSelector, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAngleRotation implementation
##class IAgCrdnAngleRotation_Impl(object):
##    @property
##    def FromAxes(self):
##        'Specify an axes to rotate from.'
##        #return ppRetVal
##
##    @property
##    def ToAxes(self):
##        'Specify an axes to rotate to.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a rotation direction.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a rotation direction.'
##    ReferenceDirection = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnVectorReflection._methods_ = [
    COMMETHOD(['propget', helpstring('The reflecting vector.')], HRESULT, 'IncomingVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('When set to false, resets the direction of the Incident Vector to default.')], HRESULT, 'UseOppositeOfSelectedVector',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('When set to false, resets the direction of the Incident Vector to default.')], HRESULT, 'UseOppositeOfSelectedVector',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The vector defines the reflection surface.')], HRESULT, 'NormalVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Controls whether to reflect the indicent vector on both sides of the plane.')], HRESULT, 'AllowReflectionsOnBackside',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Controls whether to reflect the indicent vector on both sides of the plane.')], HRESULT, 'AllowReflectionsOnBackside',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("The vector's scale factor.")], HRESULT, 'ScaleFactor',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("The vector's scale factor.")], HRESULT, 'ScaleFactor',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorReflection implementation
##class IAgCrdnVectorReflection_Impl(object):
##    @property
##    def IncomingVector(self):
##        'The reflecting vector.'
##        #return ppRetVal
##
##    def _get(self):
##        'When set to false, resets the direction of the Incident Vector to default.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'When set to false, resets the direction of the Incident Vector to default.'
##    UseOppositeOfSelectedVector = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def NormalVector(self):
##        'The vector defines the reflection surface.'
##        #return ppRetVal
##
##    def _get(self):
##        'Controls whether to reflect the indicent vector on both sides of the plane.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Controls whether to reflect the indicent vector on both sides of the plane.'
##    AllowReflectionsOnBackside = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "The vector's scale factor."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "The vector's scale factor."
##    ScaleFactor = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnPoint(CoClass):
    'A generic VGT point class.'
    _reg_clsid_ = GUID('{FF096ADB-328E-4687-8C02-3A76225C6AC2}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class _IAgCrdnPoint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgCrdnPoint'
    _iid_ = GUID('{AE4EB755-6735-4D43-B337-782B00C7AE6B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgCrdnPoint._com_interfaces_ = [_IAgCrdnPoint, IAgCrdnPoint, IAgCrdnTimeProperties, IAgCrdn]

_IAgCrdnAxes._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1701), helpstring('Returns a type of the axes object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnAxesType), 'pRetVal' )),
    COMMETHOD([dispid(1706), helpstring('Find an angular velocity and orientation in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1707), helpstring('Find an orientation in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1708), helpstring('Returns an object that allows modifying the axes labels.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesLabels)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1709), helpstring('Returns the X axis of the component.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1710), helpstring('Returns the Y axis of the component.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1711), helpstring('Returns the Z axis of the component.'), 'propget'], HRESULT, 'Z',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(1712), helpstring('Transforms the input vector from this axes into the output axes.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1713), helpstring("Transforms the input vector and vector's rate from this axes into the output axes.")], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'OutputAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VectorInMyAxes' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'RateInMyAxes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnAxes implementation
##class _IAgCrdnAxes_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the axes object.'
##        #return pRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Find an angular velocity and orientation in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Find an orientation in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def Labels(self):
##        'Returns an object that allows modifying the axes labels.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    @property
##    def X(self):
##        'Returns the X axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Y(self):
##        'Returns the Y axis of the component.'
##        #return ppRetVal
##
##    @property
##    def Z(self):
##        'Returns the Z axis of the component.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputAxes, VectorInMyAxes):
##        'Transforms the input vector from this axes into the output axes.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputAxes, VectorInMyAxes, RateInMyAxes):
##        "Transforms the input vector and vector's rate from this axes into the output axes."
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnPruneFilter(CoClass):
    "A filter used with <see ref='EventIntervalListPruned' /> class to prune interval lists..."
    _reg_clsid_ = GUID('{753CEF78-7613-47EB-B5D3-4C4BEC7ECEE3}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnPruneFilter._com_interfaces_ = [_IAgCrdnPruneFilter, IAgCrdnPruneFilter]

IAgCrdnCentralBody._methods_ = [
    COMMETHOD(['propget', helpstring('A name of the central body.')], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnCentralBody implementation
##class IAgCrdnCentralBody_Impl(object):
##    @property
##    def Name(self):
##        'A name of the central body.'
##        #return pRetVal
##

class AgCrdnSystem(CoClass):
    'Base class for VGT axes.'
    _reg_clsid_ = GUID('{7BC9D483-628C-4064-8FED-581C96512D22}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnSystem._com_interfaces_ = [_IAgCrdnSystem, IAgCrdnSystem, IAgCrdnTimeProperties, IAgCrdn]

IAgCrdnParameterSetTrajectory._methods_ = [
    COMMETHOD(['propget', helpstring('Get the point for which trajectory representations are computed.')], HRESULT, 'Point',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the point for which trajectory representations are computed.')], HRESULT, 'Point',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Get the reference system relative to which trajectory representations are computed.')], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the reference system relative to which trajectory representations are computed.')], HRESULT, 'ReferenceSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnParameterSetTrajectory implementation
##class IAgCrdnParameterSetTrajectory_Impl(object):
##    def _get(self):
##        'Get the point for which trajectory representations are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the point for which trajectory representations are computed.'
##    Point = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the reference system relative to which trajectory representations are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the reference system relative to which trajectory representations are computed.'
##    ReferenceSystem = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnPruneFilterFactory(CoClass):
    'The factory creates pruning filters.'
    _reg_clsid_ = GUID('{80CFCEBC-689C-4A02-AE76-870486474152}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnPruneFilterFactory._com_interfaces_ = [_IAgCrdnPruneFilterFactory, IAgCrdnPruneFilterFactory]

IAgCrdnEventIntervalListMerged._methods_ = [
    COMMETHOD(['propget', helpstring('The interval list or interval A.')], HRESULT, 'IntervalListOrIntervalA',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The interval list or interval B.')], HRESULT, 'IntervalListOrIntervalB',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The merge operation.')], HRESULT, 'MergeOperation',
              ( ['out', 'retval'], POINTER(AgECrdnEventListMergeOperation), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The merge operation.')], HRESULT, 'MergeOperation',
              ( ['in'], AgECrdnEventListMergeOperation, 'pRetVal' )),
    COMMETHOD([helpstring('Sets the interval list A.')], HRESULT, 'SetIntervalListA',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'RefIntervals' )),
    COMMETHOD([helpstring('Sets the interval A.')], HRESULT, 'SetIntervalA',
              ( ['in'], POINTER(IAgCrdnEventInterval), 'RefIntervals' )),
    COMMETHOD([helpstring('Sets the interval list B.')], HRESULT, 'SetIntervalListB',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'RefIntervals' )),
    COMMETHOD([helpstring('Sets the interval B.')], HRESULT, 'SetIntervalB',
              ( ['in'], POINTER(IAgCrdnEventInterval), 'RefIntervals' )),
]
################################################################
## code template for IAgCrdnEventIntervalListMerged implementation
##class IAgCrdnEventIntervalListMerged_Impl(object):
##    @property
##    def IntervalListOrIntervalA(self):
##        'The interval list or interval A.'
##        #return ppRetVal
##
##    @property
##    def IntervalListOrIntervalB(self):
##        'The interval list or interval B.'
##        #return ppRetVal
##
##    def _get(self):
##        'The merge operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The merge operation.'
##    MergeOperation = property(_get, _set, doc = _set.__doc__)
##
##    def SetIntervalListA(self, RefIntervals):
##        'Sets the interval list A.'
##        #return 
##
##    def SetIntervalA(self, RefIntervals):
##        'Sets the interval A.'
##        #return 
##
##    def SetIntervalListB(self, RefIntervals):
##        'Sets the interval list B.'
##        #return 
##
##    def SetIntervalB(self, RefIntervals):
##        'Sets the interval B.'
##        #return 
##

_IAgCrdnPointAtTimeInstant._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1801), helpstring('Returns a type of the point object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([dispid(1802), helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1803), helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(28301), helpstring('A reference time instant. Can be any Time event.'), 'propget'], HRESULT, 'ReferenceTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(28301), helpstring('A reference time instant. Can be any Time event.'), 'propput'], HRESULT, 'ReferenceTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD([dispid(28302), helpstring('A source point. Can be any VGT point.'), 'propget'], HRESULT, 'SourcePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(28302), helpstring('A source point. Can be any VGT point.'), 'propput'], HRESULT, 'SourcePoint',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(28303), helpstring('A reference system. Can be any VGT system.'), 'propget'], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(28303), helpstring('A reference system. Can be any VGT system.'), 'propput'], HRESULT, 'ReferenceSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPointAtTimeInstant implementation
##class _IAgCrdnPointAtTimeInstant_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##
##    def _get(self):
##        'A reference time instant. Can be any Time event.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A reference time instant. Can be any Time event.'
##    ReferenceTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A source point. Can be any VGT point.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A source point. Can be any VGT point.'
##    SourcePoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A reference system. Can be any VGT system.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A reference system. Can be any VGT system.'
##    ReferenceSystem = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnAngle(CoClass):
    'Base class for VGT axes.'
    _reg_clsid_ = GUID('{831B699F-6013-4A47-B2E4-0109D1585163}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAngle._com_interfaces_ = [_IAgCrdnAngle, IAgCrdnAngle, IAgCrdnTimeProperties, IAgCrdn]

_IAgCrdnCalcScalarFile._methods_ = [
    COMMETHOD([dispid(12805), helpstring('Returns the scalar calculation type.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnCalcScalarType), 'pRetVal' )),
    COMMETHOD([dispid(12803), helpstring('Evaluates the scalar calculation at the specified time instant.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12806), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...')], HRESULT, 'QuickEvaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12804), helpstring('Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12807), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...')], HRESULT, 'QuickEvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16401), helpstring('The path to an ASCII file with .csc extension.'), 'propget'], HRESULT, 'Filename',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16401), helpstring('The path to an ASCII file with .csc extension.'), 'propput'], HRESULT, 'Filename',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(16402), helpstring('Reload the file specified with Filename property.')], HRESULT, 'Reload'),
    COMMETHOD([dispid(16403), helpstring('Computes the interval time span of the file.')], HRESULT, 'GetFileSpan',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalResult)), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(12808), helpstring('Returns a list of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(12809), helpstring("Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propget'], HRESULT, 'UnitOfMeasure',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(12810), helpstring('Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12811), helpstring('Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12812), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12813), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16404), helpstring('The interpolation method used with the data.'), 'propget'], HRESULT, 'FileInterpolationType',
              ( ['out', 'retval'], POINTER(AgECrdnFileInterpolatorType), 'pRetVal' )),
    COMMETHOD([dispid(16404), helpstring('The interpolation method used with the data.'), 'propput'], HRESULT, 'FileInterpolationType',
              ( ['in'], AgECrdnFileInterpolatorType, 'pRetVal' )),
    COMMETHOD([dispid(16405), helpstring('The interpolation order used with the interpolation method to interrogate the data.'), 'propget'], HRESULT, 'FileInterpolationOrder',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(16405), helpstring('The interpolation order used with the interpolation method to interrogate the data.'), 'propput'], HRESULT, 'FileInterpolationOrder',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(16406), helpstring('Flag indicating whether the interpolation method and order settings specified within the file, if any, will be honored.'), 'propget'], HRESULT, 'UseNativeFileInterpolationSettings',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16406), helpstring('Flag indicating whether the interpolation method and order settings specified within the file, if any, will be honored.'), 'propput'], HRESULT, 'UseNativeFileInterpolationSettings',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnCalcScalarFile implementation
##class _IAgCrdnCalcScalarFile_Impl(object):
##    @property
##    def Type(self):
##        'Returns the scalar calculation type.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant.'
##        #return ppRetVal
##
##    def QuickEvaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.'
##        #return ppRetVal
##
##    def QuickEvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...'
##        #return ppRetVal
##
##    def _get(self):
##        'The path to an ASCII file with .csc extension.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The path to an ASCII file with .csc extension.'
##    Filename = property(_get, _set, doc = _set.__doc__)
##
##    def Reload(self):
##        'Reload the file specified with Filename property.'
##        #return 
##
##    def GetFileSpan(self):
##        'Computes the interval time span of the file.'
##        #return ppRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def GetAvailability(self):
##        'Returns a list of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def UnitOfMeasure(self):
##        "Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def QuickEvaluateArray(self, Times):
##        'Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateArray(self, Times):
##        'Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def _get(self):
##        'The interpolation method used with the data.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The interpolation method used with the data.'
##    FileInterpolationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The interpolation order used with the interpolation method to interrogate the data.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The interpolation order used with the interpolation method to interrogate the data.'
##    FileInterpolationOrder = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Flag indicating whether the interpolation method and order settings specified within the file, if any, will be honored.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Flag indicating whether the interpolation method and order settings specified within the file, if any, will be honored.'
##    UseNativeFileInterpolationSettings = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnEventIntervalListGroup._methods_ = [
    COMMETHOD([dispid(18801), helpstring('Removes a specified element.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'EventName' )),
    COMMETHOD([dispid(18802), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(18803), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the group.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18805), helpstring('Returns a factory object used to create custom event interval lists.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalListFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns an element by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalListGroup implementation
##class IAgCrdnEventIntervalListGroup_Impl(object):
##    def Remove(self, EventName):
##        'Removes a specified element.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the group.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a factory object used to create custom event interval lists.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns an element by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

class AgCrdnRelativeSatisfactionConditionFilter(CoClass):
    'The filter selects intervals if certain side condition is satisfied at least/most certain percentage of time.'
    _reg_clsid_ = GUID('{EED6EC2C-CDB2-4D7C-B62F-774E09F884AD}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnRelativeSatisfactionConditionFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The filter selects intervals if certain side condition is satisfied at least/most certain percentage of time.'
    _iid_ = GUID('{9BB14AA5-6900-4027-A2F9-5C12EDECB221}')
    _idlflags_ = ['oleautomation']
AgCrdnRelativeSatisfactionConditionFilter._com_interfaces_ = [_IAgCrdnRelativeSatisfactionConditionFilter, IAgCrdnRelativeSatisfactionConditionFilter, IAgCrdnPruneFilter]

_IAgCrdnCalcScalarPlugin._methods_ = [
    COMMETHOD([dispid(12805), helpstring('Returns the scalar calculation type.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnCalcScalarType), 'pRetVal' )),
    COMMETHOD([dispid(12803), helpstring('Evaluates the scalar calculation at the specified time instant.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12806), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...')], HRESULT, 'QuickEvaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12804), helpstring('Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12807), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...')], HRESULT, 'QuickEvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(28901), helpstring('A programmatic ID associated with the component.'), 'propget'], HRESULT, 'ProgID',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(28907), helpstring("The plugin's Display Name associated with the COM plugin."), 'propget'], HRESULT, 'DisplayName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(28903), helpstring('An array of names of the properties that can be used to configure the plugin.'), 'propget'], HRESULT, 'AvailableProperties',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(28904), helpstring('Reset the plugin.')], HRESULT, 'Reset'),
    COMMETHOD([dispid(28905), helpstring('The method is used to set the plugin properties. The method throws an exception if the specified property does not exist, an invalid value was specified or the specified property is read-only.')], HRESULT, 'SetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Value' )),
    COMMETHOD([dispid(28906), helpstring('The method reads a value of the specified plugin property. The method throws an exception if the property does not exist.')], HRESULT, 'GetProperty',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(12808), helpstring('Returns a list of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(12809), helpstring("Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propget'], HRESULT, 'UnitOfMeasure',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(12810), helpstring('Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12811), helpstring('Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12812), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12813), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnCalcScalarPlugin implementation
##class _IAgCrdnCalcScalarPlugin_Impl(object):
##    @property
##    def Type(self):
##        'Returns the scalar calculation type.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant.'
##        #return ppRetVal
##
##    def QuickEvaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.'
##        #return ppRetVal
##
##    def QuickEvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...'
##        #return ppRetVal
##
##    @property
##    def ProgID(self):
##        'A programmatic ID associated with the component.'
##        #return pRetVal
##
##    @property
##    def DisplayName(self):
##        "The plugin's Display Name associated with the COM plugin."
##        #return pRetVal
##
##    @property
##    def AvailableProperties(self):
##        'An array of names of the properties that can be used to configure the plugin.'
##        #return ppRetVal
##
##    def Reset(self):
##        'Reset the plugin.'
##        #return 
##
##    def SetProperty(self, Name, Value):
##        'The method is used to set the plugin properties. The method throws an exception if the specified property does not exist, an invalid value was specified or the specified property is read-only.'
##        #return 
##
##    def GetProperty(self, Name):
##        'The method reads a value of the specified plugin property. The method throws an exception if the property does not exist.'
##        #return pRetVal
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def GetAvailability(self):
##        'Returns a list of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def UnitOfMeasure(self):
##        "Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def QuickEvaluateArray(self, Times):
##        'Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateArray(self, Times):
##        'Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##

class AgCrdnPlaneLabels(CoClass):
    'Allows configuring the X and Y axes labels.'
    _reg_clsid_ = GUID('{3B5AD720-A166-49BD-BA52-182474FD4648}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnPlaneLabels._com_interfaces_ = [_IAgCrdnPlaneLabels, IAgCrdnPlaneLabels]

IAgCrdnAxesFindInAxesResult._methods_ = [
    COMMETHOD(['propget', helpstring('True indicates the method call was successful.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("The axes' orientation.")], HRESULT, 'Orientation',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAxesFindInAxesResult implementation
##class IAgCrdnAxesFindInAxesResult_Impl(object):
##    @property
##    def IsValid(self):
##        'True indicates the method call was successful.'
##        #return pRetVal
##
##    @property
##    def Orientation(self):
##        "The axes' orientation."
##        #return ppRetVal
##

IAgCrdnAngleToPlane._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a reference vector.')], HRESULT, 'ReferenceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference plane.')], HRESULT, 'ReferencePlane',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlaneRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Controls whether the angle is measured as either Positive or Negative when the reference Vector is directed toward the plane's normal, or always positive.")], HRESULT, 'Signed',
              ( ['out', 'retval'], POINTER(AgECrdnSignedAngleType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Controls whether the angle is measured as either Positive or Negative when the reference Vector is directed toward the plane's normal, or always positive.")], HRESULT, 'Signed',
              ( ['in'], AgECrdnSignedAngleType, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAngleToPlane implementation
##class IAgCrdnAngleToPlane_Impl(object):
##    @property
##    def ReferenceVector(self):
##        'Specify a reference vector.'
##        #return ppRetVal
##
##    @property
##    def ReferencePlane(self):
##        'Specify a reference plane.'
##        #return ppRetVal
##
##    def _get(self):
##        "Controls whether the angle is measured as either Positive or Negative when the reference Vector is directed toward the plane's normal, or always positive."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Controls whether the angle is measured as either Positive or Negative when the reference Vector is directed toward the plane's normal, or always positive."
##    Signed = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnVectorCustomScript._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a reference axes.')], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a script file.')], HRESULT, 'ScriptFile',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a script file.')], HRESULT, 'ScriptFile',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify an initialization script file (optional). The initialization script is run once, at the beginning of the calculation.')], HRESULT, 'InitializationScriptFile',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify an initialization script file (optional). The initialization script is run once, at the beginning of the calculation.')], HRESULT, 'InitializationScriptFile',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorCustomScript implementation
##class IAgCrdnVectorCustomScript_Impl(object):
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a script file.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a script file.'
##    ScriptFile = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify an initialization script file (optional). The initialization script is run once, at the beginning of the calculation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an initialization script file (optional). The initialization script is run once, at the beginning of the calculation.'
##    InitializationScriptFile = property(_get, _set, doc = _set.__doc__)
##

_IAgCrdnCalcScalarFunction2Var._methods_ = [
    COMMETHOD([dispid(12805), helpstring('Returns the scalar calculation type.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnCalcScalarType), 'pRetVal' )),
    COMMETHOD([dispid(12803), helpstring('Evaluates the scalar calculation at the specified time instant.')], HRESULT, 'Evaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12806), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...')], HRESULT, 'QuickEvaluate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12804), helpstring('Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.')], HRESULT, 'EvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvaluateWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(12807), helpstring('Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...')], HRESULT, 'QuickEvaluateWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(29001), helpstring('The scalar argument X.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(29001), helpstring('The scalar argument X.'), 'propput'], HRESULT, 'X',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD([dispid(29002), helpstring('The unit used to interpret numerical values of scalar argument X.'), 'propget'], HRESULT, 'UnitX',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(29002), helpstring('The unit used to interpret numerical values of scalar argument X.'), 'propput'], HRESULT, 'UnitX',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(29003), helpstring('The constant coefficient A.'), 'propget'], HRESULT, 'A',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(29003), helpstring('The constant coefficient A.'), 'propput'], HRESULT, 'A',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(29004), helpstring('The scalar argument Y.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCalcScalar)), 'ppRetVal' )),
    COMMETHOD([dispid(29004), helpstring('The scalar argument Y.'), 'propput'], HRESULT, 'Y',
              ( ['in'], POINTER(IAgCrdnCalcScalar), 'ppRetVal' )),
    COMMETHOD([dispid(29005), helpstring('The unit used to interpret numerical values of scalar argument Y.'), 'propget'], HRESULT, 'UnitY',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(29005), helpstring('The unit used to interpret numerical values of scalar argument Y.'), 'propput'], HRESULT, 'UnitY',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(29006), helpstring('The constant coefficient B.'), 'propget'], HRESULT, 'B',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(29006), helpstring('The constant coefficient B.'), 'propput'], HRESULT, 'B',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(29007), helpstring('The constant coefficient C.'), 'propget'], HRESULT, 'C',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(29007), helpstring('The constant coefficient C.'), 'propput'], HRESULT, 'C',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(29008), helpstring('Specifies whether the output dimension is inherited or explicitly specified using OutputDimension.'), 'propget'], HRESULT, 'OutputDimensionInheritance',
              ( ['out', 'retval'], POINTER(AgECrdnDimensionInheritance), 'pRetVal' )),
    COMMETHOD([dispid(29008), helpstring('Specifies whether the output dimension is inherited or explicitly specified using OutputDimension.'), 'propput'], HRESULT, 'OutputDimensionInheritance',
              ( ['in'], AgECrdnDimensionInheritance, 'pRetVal' )),
    COMMETHOD([dispid(29009), helpstring('The output dimension. Use any of STK supported dimensions. This value will be used if OutputDimensionInheritance is false.'), 'propget'], HRESULT, 'OutputDimension',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(29009), helpstring('The output dimension. Use any of STK supported dimensions. This value will be used if OutputDimensionInheritance is false.'), 'propput'], HRESULT, 'OutputDimension',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(29010), helpstring('The available functions. A function(x,y) uses some combination of two scalar arguments x and y as well as one to three constant coefficients a, b, c.'), 'propget'], HRESULT, 'AvailableFunctions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(29011), helpstring('The selected function.'), 'propget'], HRESULT, 'SelectedFunction',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(29011), helpstring('The selected function.'), 'propput'], HRESULT, 'SelectedFunction',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(29012), helpstring('The unit for the selected dimension. The unit is not used for internal computations or reporting/graphing but is needed to unambiguously interpret units of associated coefficients.'), 'propget'], HRESULT, 'OutputUnit',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(29012), helpstring('The unit for the selected dimension. The unit is not used for internal computations or reporting/graphing but is needed to unambiguously interpret units of associated coefficients.'), 'propput'], HRESULT, 'OutputUnit',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(12808), helpstring('Returns a list of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(12809), helpstring("Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."), 'propget'], HRESULT, 'UnitOfMeasure',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
    COMMETHOD([dispid(12810), helpstring('Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12811), helpstring('Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateArray',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12812), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(12813), helpstring('Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...')], HRESULT, 'QuickEvaluateWithRateEventArray',
              ( ['in'], POINTER(IAgCrdnEventArray), 'RefArray' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnCalcScalarFunction2Var implementation
##class _IAgCrdnCalcScalarFunction2Var_Impl(object):
##    @property
##    def Type(self):
##        'Returns the scalar calculation type.'
##        #return pRetVal
##
##    def Evaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant.'
##        #return ppRetVal
##
##    def QuickEvaluate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with two elements, the first element being of boolean type indicating whether the computation succeeded, followed by a double-precision value representing...'
##        #return ppRetVal
##
##    def EvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant. The result is a scalar value and its rate of change.'
##        #return ppRetVal
##
##    def QuickEvaluateWithRate(self, Epoch):
##        'Evaluates the scalar calculation at the specified time instant and returns the results as an array with three elements, the first element being of boolean type indicating whether the computation succeeded, followed by two double-precision values one rep...'
##        #return ppRetVal
##
##    def _get(self):
##        'The scalar argument X.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The scalar argument X.'
##    X = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The unit used to interpret numerical values of scalar argument X.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The unit used to interpret numerical values of scalar argument X.'
##    UnitX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The constant coefficient A.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The constant coefficient A.'
##    A = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The scalar argument Y.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The scalar argument Y.'
##    Y = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The unit used to interpret numerical values of scalar argument Y.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The unit used to interpret numerical values of scalar argument Y.'
##    UnitY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The constant coefficient B.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The constant coefficient B.'
##    B = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The constant coefficient C.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The constant coefficient C.'
##    C = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specifies whether the output dimension is inherited or explicitly specified using OutputDimension.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specifies whether the output dimension is inherited or explicitly specified using OutputDimension.'
##    OutputDimensionInheritance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The output dimension. Use any of STK supported dimensions. This value will be used if OutputDimensionInheritance is false.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The output dimension. Use any of STK supported dimensions. This value will be used if OutputDimensionInheritance is false.'
##    OutputDimension = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def AvailableFunctions(self):
##        'The available functions. A function(x,y) uses some combination of two scalar arguments x and y as well as one to three constant coefficients a, b, c.'
##        #return ppRetVal
##
##    def _get(self):
##        'The selected function.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The selected function.'
##    SelectedFunction = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The unit for the selected dimension. The unit is not used for internal computations or reporting/graphing but is needed to unambiguously interpret units of associated coefficients.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The unit for the selected dimension. The unit is not used for internal computations or reporting/graphing but is needed to unambiguously interpret units of associated coefficients.'
##    OutputUnit = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def GetAvailability(self):
##        'Returns a list of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def UnitOfMeasure(self):
##        "Returns calc scalar's unit of measure, i.e. 'AngleUnit', 'DistanceUnit', etc."
##        #return pRetVal
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##
##    def QuickEvaluateArray(self, Times):
##        'Evaluates the scalar calculation, and rate, over an array of times, entered as strings in the Scenario date unit. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateArray(self, Times):
##        'Evaluates the scalar calculation over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##
##    def QuickEvaluateWithRateEventArray(self, RefArray):
##        'Evaluates the scalar calculation, and rate, over the array of times provided by an Event Array component. It returns an array corresponding to the input times...'
##        #return ppRetVal
##

class AgCrdnSampling(CoClass):
    'Base sampling interface.'
    _reg_clsid_ = GUID('{C853D212-4387-4977-B3AD-C910B65E5406}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnSampling._com_interfaces_ = [_IAgCrdnSampling, IAgCrdnSampling, IAgCrdn]

_IAgCrdnVectorFixedAtTimeInstant._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(28401), helpstring('A reference time instant. Can be any Time event.'), 'propget'], HRESULT, 'ReferenceTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD([dispid(28401), helpstring('A reference time instant. Can be any Time event.'), 'propput'], HRESULT, 'ReferenceTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD([dispid(28402), helpstring('A source vector. Can be any VGT vector.'), 'propget'], HRESULT, 'SourceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD([dispid(28402), helpstring('A source vector. Can be any VGT vector.'), 'propput'], HRESULT, 'SourceVector',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD([dispid(28403), helpstring('A reference axes. Can be any VGT axes.'), 'propget'], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(28403), helpstring('A reference axes. Can be any VGT axes.'), 'propput'], HRESULT, 'ReferenceAxes',
              ( ['in'], POINTER(IAgCrdnAxes), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorFixedAtTimeInstant implementation
##class _IAgCrdnVectorFixedAtTimeInstant_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'A reference time instant. Can be any Time event.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A reference time instant. Can be any Time event.'
##    ReferenceTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A source vector. Can be any VGT vector.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A source vector. Can be any VGT vector.'
##    SourceVector = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A reference axes. Can be any VGT axes.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A reference axes. Can be any VGT axes.'
##    ReferenceAxes = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnPlane(CoClass):
    'Base class for VGT axes.'
    _reg_clsid_ = GUID('{F4EFF82A-3BA2-48D3-814D-00FCD941F657}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnPlane._com_interfaces_ = [_IAgCrdnPlane, IAgCrdnPlane, IAgCrdnTimeProperties, IAgCrdn]

class AgCrdnSamplingBasic(CoClass):
    'Sampling definition determines how scalar data should be sampled in order to adequately capture trends in that data.'
    _reg_clsid_ = GUID('{FDD61BD9-71C7-4C56-AA64-0B56288B84F8}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnSamplingBasic._com_interfaces_ = [_IAgCrdnSamplingBasic, IAgCrdnSamplingBasic, IAgCrdnSampling, IAgCrdn]

_IAgCrdnPointFactory._methods_ = [
    COMMETHOD([dispid(8601), helpstring('Creates a VGT point using the specified name, description and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'PointName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnPointType, 'PointType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(8602), helpstring('Returns true if the type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnPointType, 'Type' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(8605), helpstring('An array of display names associated with available point plugins. The elements of the array are strings. Display names are used to create VGT points based on COM plugins using CreatePointPluginFromDisplayName method.'), 'propget'], HRESULT, 'AvailablePointPluginDisplayNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(8604), helpstring('Create a point component based on a COM point plugin. For information how to implement and register VGT plugins, see')], HRESULT, 'CreatePointPluginFromDisplayName',
              ( ['in'], BSTR, 'PointName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], BSTR, 'DisplayName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(8606), helpstring('Creates a point fixed on a central body.')], HRESULT, 'CreatePointFixedOnCentralBody',
              ( ['in'], BSTR, 'PointName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], VARIANT, 'Longitude' ),
              ( ['in'], VARIANT, 'Latitude' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['in'], AgECrdnReferenceShapeType, 'ReferenceShape' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
]
################################################################
## code template for _IAgCrdnPointFactory implementation
##class _IAgCrdnPointFactory_Impl(object):
##    def Create(self, PointName, Description, PointType):
##        'Creates a VGT point using the specified name, description and type.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, Type):
##        'Returns true if the type is supported.'
##        #return pRetVal
##
##    @property
##    def AvailablePointPluginDisplayNames(self):
##        'An array of display names associated with available point plugins. The elements of the array are strings. Display names are used to create VGT points based on COM plugins using CreatePointPluginFromDisplayName method.'
##        #return ppRetVal
##
##    def CreatePointPluginFromDisplayName(self, PointName, Description, DisplayName):
##        'Create a point component based on a COM point plugin. For information how to implement and register VGT plugins, see'
##        #return ppRetVal
##
##    def CreatePointFixedOnCentralBody(self, PointName, Description, Longitude, Latitude, Altitude, ReferenceShape):
##        'Creates a point fixed on a central body.'
##        #return ppRetVal
##

_IAgCrdnInterp._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnInterp implementation
##class _IAgCrdnInterp_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnAxesAlignedAndConstrained(CoClass):
    'Axes aligned using two pairs of vectors. One vector in each pair is fixed in these axes and the other vector serves as an independent reference.'
    _reg_clsid_ = GUID('{9D10A4E1-F3E6-4C85-ABFD-2132A67CF640}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesAlignedAndConstrained._com_interfaces_ = [_IAgCrdnAxesAlignedAndConstrained, IAgCrdnAxesAlignedAndConstrained, IAgCrdnAxes, IAgCrdnTimeProperties, IAgCrdn]

IAgCrdnCollection._methods_ = [
    COMMETHOD([dispid(29101), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Retrieves an element of the collection using the name of the element or a position in the collection.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnCollection implementation
##class IAgCrdnCollection_Impl(object):
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Retrieves an element of the collection using the name of the element or a position in the collection.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

IAgCrdnVolumeGridCylindrical._methods_ = [
    COMMETHOD(['propget', helpstring('Get the reference system in which cylindrical parameters are computed.')], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the reference system in which cylindrical parameters are computed.')], HRESULT, 'ReferenceSystem',
              ( ['in'], POINTER(IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns theta Coordinates parameters for the Theta system.')], HRESULT, 'ThetaCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns radius Coordinates parameters for the Radius system.')], HRESULT, 'RadiusCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns height Coordinates parameters for the Height system.')], HRESULT, 'HeightCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeGridCylindrical implementation
##class IAgCrdnVolumeGridCylindrical_Impl(object):
##    def _get(self):
##        'Get the reference system in which cylindrical parameters are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the reference system in which cylindrical parameters are computed.'
##    ReferenceSystem = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ThetaCoordinates(self):
##        'Returns theta Coordinates parameters for the Theta system.'
##        #return ppRetVal
##
##    @property
##    def RadiusCoordinates(self):
##        'Returns radius Coordinates parameters for the Radius system.'
##        #return ppRetVal
##
##    @property
##    def HeightCoordinates(self):
##        'Returns height Coordinates parameters for the Height system.'
##        #return ppRetVal
##

class AgCrdnSamplingCurvatureTolerance(CoClass):
    'Curvature tolerance definition includes parameters that determine how scalar data should be sampled based on limits on slope changes between samples.'
    _reg_clsid_ = GUID('{5137FEB2-0881-43D3-95A4-3CB85C5C5E18}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnSamplingCurvatureTolerance._com_interfaces_ = [_IAgCrdnSamplingCurvatureTolerance, IAgCrdnSamplingCurvatureTolerance, IAgCrdnSamplingMethod]

IAgCrdnEventIntervalListScaled._methods_ = [
    COMMETHOD(['propget', helpstring('The original interval list.')], HRESULT, 'OriginalIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The original interval list.')], HRESULT, 'OriginalIntervals',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("The absolute increment value which creates a new interval list by expanding (or shortening if negative) every interval in the original interval list by shifting interval's start/stop times equally by half of specified increment value.")], HRESULT, 'AbsoluteIncrement',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("The absolute increment value which creates a new interval list by expanding (or shortening if negative) every interval in the original interval list by shifting interval's start/stop times equally by half of specified increment value.")], HRESULT, 'AbsoluteIncrement',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The relative increment value from which absolute increment is obtained by multiplying relative value by interval duration...')], HRESULT, 'RelativeIncrement',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The relative increment value from which absolute increment is obtained by multiplying relative value by interval duration...')], HRESULT, 'RelativeIncrement',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether to use absolute or relative increment.')], HRESULT, 'UseAbsoluteIncrement',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether to use absolute or relative increment.')], HRESULT, 'UseAbsoluteIncrement',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalListScaled implementation
##class IAgCrdnEventIntervalListScaled_Impl(object):
##    def _get(self):
##        'The original interval list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original interval list.'
##    OriginalIntervals = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "The absolute increment value which creates a new interval list by expanding (or shortening if negative) every interval in the original interval list by shifting interval's start/stop times equally by half of specified increment value."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "The absolute increment value which creates a new interval list by expanding (or shortening if negative) every interval in the original interval list by shifting interval's start/stop times equally by half of specified increment value."
##    AbsoluteIncrement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The relative increment value from which absolute increment is obtained by multiplying relative value by interval duration...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The relative increment value from which absolute increment is obtained by multiplying relative value by interval duration...'
##    RelativeIncrement = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use absolute or relative increment.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use absolute or relative increment.'
##    UseAbsoluteIncrement = property(_get, _set, doc = _set.__doc__)
##

_IAgCrdnVectorFixedAtEpoch._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6001), helpstring('Specify an epoch.'), 'propget'], HRESULT, 'Epoch',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(6001), helpstring('Specify an epoch.'), 'propput'], HRESULT, 'Epoch',
              ( ['in'], VARIANT, 'pRetVal' )),
    COMMETHOD([dispid(6002), helpstring('Specify a source vector.'), 'propget'], HRESULT, 'SourceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(6003), helpstring('Specify a reference axes.'), 'propget'], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorFixedAtEpoch implementation
##class _IAgCrdnVectorFixedAtEpoch_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify an epoch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an epoch.'
##    Epoch = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SourceVector(self):
##        'Specify a source vector.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnAxesAngularOffset(CoClass):
    'Axes created by rotating the Reference axes about the Spin vector through the specified rotation angle plus the additional rotational offset.'
    _reg_clsid_ = GUID('{F13CA29F-9595-4F44-847D-5F3199C3295A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesAngularOffset._com_interfaces_ = [_IAgCrdnAxesAngularOffset, IAgCrdnAxesAngularOffset, IAgCrdnAxes, IAgCrdnTimeProperties, IAgCrdn]

_IAgCrdnEventIntervalListSignaled._methods_ = [
    COMMETHOD([dispid(13509), helpstring('Return the type of interval list.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnEventIntervalListType), 'pRetVal' )),
    COMMETHOD([dispid(13502), helpstring('Get the label descriptions associated with the interval list.'), 'propget'], HRESULT, 'Labels',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13503), helpstring('Get the labels associated with the interval list.'), 'propget'], HRESULT, 'Descriptions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(13507), helpstring('Return computed interval list that can be empty.')], HRESULT, 'FindIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalListResult)), 'ppRetVal' )),
    COMMETHOD([dispid(13508), helpstring('Determine if specified time falls within computed interval list.')], HRESULT, 'Occurred',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17801), helpstring('The original time interval list.'), 'propget'], HRESULT, 'OriginalIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(17801), helpstring('The original time interval list.'), 'propput'], HRESULT, 'OriginalIntervals',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD([dispid(17807), helpstring('The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'), 'propget'], HRESULT, 'SignalSense',
              ( ['out', 'retval'], POINTER(AgECrdnSignalSense), 'pRetVal' )),
    COMMETHOD([dispid(17807), helpstring('The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'), 'propput'], HRESULT, 'SignalSense',
              ( ['in'], AgECrdnSignalSense, 'pRetVal' )),
    COMMETHOD([dispid(17808), helpstring('The base clock location, which is a point from VGT.'), 'propget'], HRESULT, 'BaseClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(17808), helpstring('The base clock location, which is a point from VGT.'), 'propput'], HRESULT, 'BaseClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(17809), helpstring('The target clock location, which is a point from VGT.'), 'propget'], HRESULT, 'TargetClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(17809), helpstring('The target clock location, which is a point from VGT.'), 'propput'], HRESULT, 'TargetClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD([dispid(17806), helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'), 'propget'], HRESULT, 'SignalDelay',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSignalDelay)), 'ppRetVal' )),
    COMMETHOD([dispid(17806), helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'), 'propput'], HRESULT, 'SignalDelay',
              ( ['in'], POINTER(IAgCrdnSignalDelay), 'ppRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnEventIntervalListSignaled implementation
##class _IAgCrdnEventIntervalListSignaled_Impl(object):
##    @property
##    def Type(self):
##        'Return the type of interval list.'
##        #return pRetVal
##
##    @property
##    def Labels(self):
##        'Get the label descriptions associated with the interval list.'
##        #return ppRetVal
##
##    @property
##    def Descriptions(self):
##        'Get the labels associated with the interval list.'
##        #return ppRetVal
##
##    def FindIntervals(self):
##        'Return computed interval list that can be empty.'
##        #return ppRetVal
##
##    def Occurred(self, Epoch):
##        'Determine if specified time falls within computed interval list.'
##        #return pRetVal
##
##    def _get(self):
##        'The original time interval list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original time interval list.'
##    OriginalIntervals = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'
##    SignalSense = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The base clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The base clock location, which is a point from VGT.'
##    BaseClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The target clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The target clock location, which is a point from VGT.'
##    TargetClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##    SignalDelay = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnEventArrayFixedStep._methods_ = [
    COMMETHOD(['propget', helpstring('The bounding interval list.')], HRESULT, 'BoundingIntervalList',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The bounding interval list.')], HRESULT, 'BoundingIntervalList',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The sampling time step.')], HRESULT, 'SamplingTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The sampling time step.')], HRESULT, 'SamplingTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether to include interval edges.')], HRESULT, 'IncludeIntervalEdges',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether to include interval edges.')], HRESULT, 'IncludeIntervalEdges',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify the time reference from which fixed sampling time steps are taken. Note: selecting Start/Stop of each Interval resets the time reference for each interval, whereas other types maintain single reference for entire array.')], HRESULT, 'ReferenceType',
              ( ['out', 'retval'], POINTER(AgECrdnSampledReferenceTime), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify the time reference from which fixed sampling time steps are taken. Note: selecting Start/Stop of each Interval resets the time reference for each interval, whereas other types maintain single reference for entire array.')], HRESULT, 'ReferenceType',
              ( ['in'], AgECrdnSampledReferenceTime, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The reference time instant. Only applicable if the ReferenceType is set to time instant.')], HRESULT, 'ReferenceTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The reference time instant. Only applicable if the ReferenceType is set to time instant.')], HRESULT, 'ReferenceTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventArrayFixedStep implementation
##class IAgCrdnEventArrayFixedStep_Impl(object):
##    def _get(self):
##        'The bounding interval list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The bounding interval list.'
##    BoundingIntervalList = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The sampling time step.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The sampling time step.'
##    SamplingTimeStep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to include interval edges.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to include interval edges.'
##    IncludeIntervalEdges = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify the time reference from which fixed sampling time steps are taken. Note: selecting Start/Stop of each Interval resets the time reference for each interval, whereas other types maintain single reference for entire array.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify the time reference from which fixed sampling time steps are taken. Note: selecting Start/Stop of each Interval resets the time reference for each interval, whereas other types maintain single reference for entire array.'
##    ReferenceType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The reference time instant. Only applicable if the ReferenceType is set to time instant.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference time instant. Only applicable if the ReferenceType is set to time instant.'
##    ReferenceTimeInstant = property(_get, _set, doc = _set.__doc__)
##

_IAgCrdnPoint._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1801), helpstring('Returns a type of the point object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnPointType), 'pRetVal' )),
    COMMETHOD([dispid(1802), helpstring("Locates the point's position and velocity in a specified coordinate system.")], HRESULT, 'LocateInSystemWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1803), helpstring("Locates the point's position in a specified coordinate system.")], HRESULT, 'LocateInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointLocateInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnPoint implementation
##class _IAgCrdnPoint_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the point object.'
##        #return pRetVal
##
##    def LocateInSystemWithRate(self, Epoch, System):
##        "Locates the point's position and velocity in a specified coordinate system."
##        #return ppRetVal
##
##    def LocateInSystem(self, Epoch, System):
##        "Locates the point's position in a specified coordinate system."
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnParameterSetVector._methods_ = [
    COMMETHOD(['propget', helpstring('Get the vector for which representations are computed.')], HRESULT, 'Vector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the vector for which representations are computed.')], HRESULT, 'Vector',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Get the reference axes relative to which representations are computed.')], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the reference axes relative to which representations are computed.')], HRESULT, 'ReferenceAxes',
              ( ['in'], POINTER(IAgCrdnAxes), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnParameterSetVector implementation
##class IAgCrdnParameterSetVector_Impl(object):
##    def _get(self):
##        'Get the vector for which representations are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the vector for which representations are computed.'
##    Vector = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the reference axes relative to which representations are computed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the reference axes relative to which representations are computed.'
##    ReferenceAxes = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnSamplingFixedStep(CoClass):
    'Fixed step definition includes parameters that determine how scalar data should be sampled based on fixed steps between samples.'
    _reg_clsid_ = GUID('{5A5AAB91-6631-41CC-A6ED-BC7D9E60BC42}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnSamplingFixedStep._com_interfaces_ = [_IAgCrdnSamplingFixedStep, IAgCrdnSamplingFixedStep, IAgCrdnSamplingMethod]

class AgCrdnAxesFixedAtEpoch(CoClass):
    'Axes based on another set fixed at a specified epoch.'
    _reg_clsid_ = GUID('{735B2058-6D7A-4A1C-9D28-4212C457A312}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesFixedAtEpoch._com_interfaces_ = [_IAgCrdnAxesFixedAtEpoch, IAgCrdnAxesFixedAtEpoch, IAgCrdnAxes, IAgCrdnTimeProperties, IAgCrdn]

_IAgCrdnVolumeLighting._methods_ = [
    COMMETHOD([dispid(32601), helpstring('A custom list of eclipsing bodies. This list is used if UseObjectEclipsingBodies is set to false.'), 'propget'], HRESULT, 'EclipsingBodies',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(32601), helpstring('A custom list of eclipsing bodies. This list is used if UseObjectEclipsingBodies is set to false.'), 'propput'], HRESULT, 'EclipsingBodies',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(32602), helpstring('When true, configure eclipsing bodies list based on that of parent STK Object.'), 'propget'], HRESULT, 'UseObjectEclipsingBodies',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(32602), helpstring('When true, configure eclipsing bodies list based on that of parent STK Object.'), 'propput'], HRESULT, 'UseObjectEclipsingBodies',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(32603), helpstring('Sets/Returns the lighting conditions.'), 'propget'], HRESULT, 'LightingConditions',
              ( ['out', 'retval'], POINTER(AgECrdnVolumeLightingConditionsType), 'pRetVal' )),
    COMMETHOD([dispid(32603), helpstring('Sets/Returns the lighting conditions.'), 'propput'], HRESULT, 'LightingConditions',
              ( ['in'], AgECrdnVolumeLightingConditionsType, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVolumeLighting implementation
##class _IAgCrdnVolumeLighting_Impl(object):
##    def _get(self):
##        'A custom list of eclipsing bodies. This list is used if UseObjectEclipsingBodies is set to false.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A custom list of eclipsing bodies. This list is used if UseObjectEclipsingBodies is set to false.'
##    EclipsingBodies = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'When true, configure eclipsing bodies list based on that of parent STK Object.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'When true, configure eclipsing bodies list based on that of parent STK Object.'
##    UseObjectEclipsingBodies = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Sets/Returns the lighting conditions.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Sets/Returns the lighting conditions.'
##    LightingConditions = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnSamplingMethod(CoClass):
    'A sampling method.'
    _reg_clsid_ = GUID('{D5EA0CCF-4E90-49F1-BBC2-1748EBB6E3DB}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnSamplingMethod._com_interfaces_ = [_IAgCrdnSamplingMethod, IAgCrdnSamplingMethod]

IAgCrdnConditionGroup._methods_ = [
    COMMETHOD([dispid(20701), helpstring('Removes a specified element.')], HRESULT, 'Remove',
              ( ['in'], BSTR, 'EventName' )),
    COMMETHOD([dispid(20702), helpstring('Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(20703), helpstring('Searches for a an element with a given name. Returns false if the specified element does not exist.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns a number of elements in the group.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(20705), helpstring('Returns a factory object used to create calc scalar components.'), 'propget'], HRESULT, 'Factory',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnConditionFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns an element by name or at a specified position.'), 'propget'], HRESULT, 'Item',
              ( ['in'], VARIANT, 'IndexOrName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns a COM enumerator.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnConditionGroup implementation
##class IAgCrdnConditionGroup_Impl(object):
##    def Remove(self, EventName):
##        'Removes a specified element.'
##        #return 
##
##    @property
##    def Context(self):
##        'Returns a context object. The context can be used to find out which central body or STK object this instance is associated with.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Searches for a an element with a given name. Returns false if the specified element does not exist.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Returns a number of elements in the group.'
##        #return pRetVal
##
##    @property
##    def Factory(self):
##        'Returns a factory object used to create calc scalar components.'
##        #return ppRetVal
##
##    @property
##    def Item(self, IndexOrName):
##        'Returns an element by name or at a specified position.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns a COM enumerator.'
##        #return ppRetVal
##

IAgCrdnVectorDerivative._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a base vector.')], HRESULT, 'Vector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference axes.')], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Time step used in numerical evaluation of derivatives using central differencing.')], HRESULT, 'DifferencingTimeStep',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Time step used in numerical evaluation of derivatives using central differencing.')], HRESULT, 'DifferencingTimeStep',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorDerivative implementation
##class IAgCrdnVectorDerivative_Impl(object):
##    @property
##    def Vector(self):
##        'Specify a base vector.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'Time step used in numerical evaluation of derivatives using central differencing.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Time step used in numerical evaluation of derivatives using central differencing.'
##    DifferencingTimeStep = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnGeneric(CoClass):
    'Generic VGT component.'
    _reg_clsid_ = GUID('{F8721428-2E68-4842-A08F-2F28C3536FFE}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnGeneric._com_interfaces_ = [_IAgCrdn, IAgCrdn]

class AgCrdnAxesBPlane(CoClass):
    'B-Plane axes using the selected target body and reference vector.'
    _reg_clsid_ = GUID('{EBB973A1-AB54-4A59-B900-F41EE7927A4A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesBPlane._com_interfaces_ = [_IAgCrdnAxesBPlane, IAgCrdnAxesBPlane, IAgCrdnAxes, IAgCrdnTimeProperties, IAgCrdn]

IAgCrdnAxesLabels._methods_ = [
    COMMETHOD(['propget', helpstring('Specify an X axis label.')], HRESULT, 'LabelX',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify an X axis label.')], HRESULT, 'LabelX',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a Y axis label.')], HRESULT, 'LabelY',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a Y axis label.')], HRESULT, 'LabelY',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a Z axis label.')], HRESULT, 'LabelZ',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a Z axis label.')], HRESULT, 'LabelZ',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAxesLabels implementation
##class IAgCrdnAxesLabels_Impl(object):
##    def _get(self):
##        'Specify an X axis label.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify an X axis label.'
##    LabelX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a Y axis label.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a Y axis label.'
##    LabelY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a Z axis label.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a Z axis label.'
##    LabelZ = property(_get, _set, doc = _set.__doc__)
##

_IAgCrdnVectorFixedInAxes._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(7201), helpstring('Specify a reference axes.'), 'propget'], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(7203), helpstring('Specify the vector direction.'), 'propget'], HRESULT, 'Direction',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDirection)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorFixedInAxes implementation
##class _IAgCrdnVectorFixedInAxes_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    @property
##    def Direction(self):
##        'Specify the vector direction.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnSamplingMethodFactory(CoClass):
    'The factory creates sampling method components.'
    _reg_clsid_ = GUID('{C2784E36-28B8-42FB-A528-882ADEF027E8}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnSamplingMethodFactory._com_interfaces_ = [_IAgCrdnSamplingMethodFactory, IAgCrdnSamplingMethodFactory]

_IAgCrdnPlaneFactory._methods_ = [
    COMMETHOD([dispid(8701), helpstring('Creates a VGT plane using the specified name, description and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'PlaneName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnPlaneType, 'PlaneType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPlane)), 'ppRetVal' )),
    COMMETHOD([dispid(8702), helpstring('Returns true if the type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnPlaneType, 'Type' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnPlaneFactory implementation
##class _IAgCrdnPlaneFactory_Impl(object):
##    def Create(self, PlaneName, Description, PlaneType):
##        'Creates a VGT plane using the specified name, description and type.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, Type):
##        'Returns true if the type is supported.'
##        #return pRetVal
##

IAgCrdnVectorDirectionToStar._methods_ = [
    COMMETHOD(['propget', helpstring('A fully qualified path to a Star object.')], HRESULT, 'SelectedStar',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('A fully qualified path to a Star object.')], HRESULT, 'SelectedStar',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVectorDirectionToStar implementation
##class IAgCrdnVectorDirectionToStar_Impl(object):
##    def _get(self):
##        'A fully qualified path to a Star object.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A fully qualified path to a Star object.'
##    SelectedStar = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnEventIntervalFactory._methods_ = [
    COMMETHOD([helpstring('Create and register an interval using specified name, description, and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnEventIntervalType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an interval defined between two explicitly specified start and stop times.')], HRESULT, 'CreateEventIntervalFixed',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an interval of fixed duration specified using start and stop offsets relative to specified reference time instant.')], HRESULT, 'CreateEventIntervalFixedDuration',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an interval using specified start and stop time instants.')], HRESULT, 'CreateEventIntervalBetweenTimeInstants',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an interval from a specified interval list by using one of several selection methods.')], HRESULT, 'CreateEventIntervalFromIntervalList',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an interval by scaling an original interval using either absolute or relative scale.')], HRESULT, 'CreateEventIntervalScaled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an interval that is recorded at target clock location by performing signal transmission of original interval between base and target clock locations.')], HRESULT, 'CreateEventIntervalSignaled',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([helpstring('Create an interval defined by shifting the specified reference interval by a fixed time offset.')], HRESULT, 'CreateEventIntervalTimeOffset',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventInterval)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnEventIntervalType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalFactory implementation
##class IAgCrdnEventIntervalFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Create and register an interval using specified name, description, and type.'
##        #return ppRetVal
##
##    def CreateEventIntervalFixed(self, Name, Description):
##        'Create an interval defined between two explicitly specified start and stop times.'
##        #return ppRetVal
##
##    def CreateEventIntervalFixedDuration(self, Name, Description):
##        'Create an interval of fixed duration specified using start and stop offsets relative to specified reference time instant.'
##        #return ppRetVal
##
##    def CreateEventIntervalBetweenTimeInstants(self, Name, Description):
##        'Create an interval using specified start and stop time instants.'
##        #return ppRetVal
##
##    def CreateEventIntervalFromIntervalList(self, Name, Description):
##        'Create an interval from a specified interval list by using one of several selection methods.'
##        #return ppRetVal
##
##    def CreateEventIntervalScaled(self, Name, Description):
##        'Create an interval by scaling an original interval using either absolute or relative scale.'
##        #return ppRetVal
##
##    def CreateEventIntervalSignaled(self, Name, Description):
##        'Create an interval that is recorded at target clock location by performing signal transmission of original interval between base and target clock locations.'
##        #return ppRetVal
##
##    def CreateEventIntervalTimeOffset(self, Name, Description):
##        'Create an interval defined by shifting the specified reference interval by a fixed time offset.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##

class AgCrdnTypeInfo(CoClass):
    'VGT component info.'
    _reg_clsid_ = GUID('{976B14EC-5DC7-42E7-9217-18482902EF47}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnTypeInfo._com_interfaces_ = [_IAgCrdnTypeInfo, IAgCrdnTypeInfo]

class AgCrdnAxesCustomScript(CoClass):
    'Customized axes offset with respect to a set of reference Axes.'
    _reg_clsid_ = GUID('{A0CACB8D-B9C0-4257-92EE-9575E93B3908}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesCustomScript._com_interfaces_ = [_IAgCrdnAxesCustomScript, IAgCrdnAxesCustomScript, IAgCrdnAxes, IAgCrdnTimeProperties, IAgCrdn]

class IAgCrdnAxesAttitudeFile(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Axes specified by data from a file.'
    _iid_ = GUID('{BD66F711-35F9-47D7-8C78-05C95889C011}')
    _idlflags_ = ['oleautomation']
IAgCrdnAxesAttitudeFile._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a path to a file. The file must exist. Specifying an invalid path will generate an exception.')], HRESULT, 'Filename',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a path to a file. The file must exist. Specifying an invalid path will generate an exception.')], HRESULT, 'Filename',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAxesAttitudeFile implementation
##class IAgCrdnAxesAttitudeFile_Impl(object):
##    def _get(self):
##        'Specify a path to a file. The file must exist. Specifying an invalid path will generate an exception.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a path to a file. The file must exist. Specifying an invalid path will generate an exception.'
##    Filename = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnSamplingRelativeTolerance(CoClass):
    'Relative tolerance definition includes parameters that determine how scalar data should be sampled based on limits on difference between actual changes between samples and changes predicted by dead reckoning.'
    _reg_clsid_ = GUID('{316B64F6-B0A8-4BDC-8642-DDB84E21EBA1}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnSamplingRelativeTolerance._com_interfaces_ = [_IAgCrdnSamplingRelativeTolerance, IAgCrdnSamplingRelativeTolerance, IAgCrdnSamplingMethod]

class AgCrdnSystemRefTo(CoClass):
    'Represents a System reference.'
    _reg_clsid_ = GUID('{8C3F07F7-438F-4586-AC78-099D8C53AC04}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnSystemRefTo._com_interfaces_ = [_IAgCrdnSystemRefTo, IAgCrdnSystemRefTo, IAgCrdnRefTo]

_IAgCrdnVolumeCombined._methods_ = [
    COMMETHOD([dispid(32501), helpstring('Sets/Returns volume combined operation.'), 'propget'], HRESULT, 'CombineOperation',
              ( ['out', 'retval'], POINTER(AgECrdnVolumeCombinedOperationType), 'pRetVal' )),
    COMMETHOD([dispid(32501), helpstring('Sets/Returns volume combined operation.'), 'propput'], HRESULT, 'CombineOperation',
              ( ['in'], AgECrdnVolumeCombinedOperationType, 'pRetVal' )),
    COMMETHOD([dispid(32504), helpstring('Returns the spatial condition vectore size.'), 'propget'], HRESULT, 'ConditionCount',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(32505), helpstring('Get all spatial conditions.')], HRESULT, 'GetAllConditions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(32506), helpstring('Set all spatial conditions.')], HRESULT, 'SetAllConditions',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Conditions' )),
    COMMETHOD([dispid(32507), helpstring('Set spatial conditions at a postion.')], HRESULT, 'SetCondition',
              ( ['in'], POINTER(IAgCrdnVolume), 'Ref' ),
              ( ['in'], c_int, 'Pos' )),
    COMMETHOD([dispid(32508), helpstring('Get spatial conditions at a postion.')], HRESULT, 'GetCondition',
              ( ['in'], c_int, 'Pos' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([dispid(32509), helpstring('Remove spatial conditions at a postion.')], HRESULT, 'RemoveCondition',
              ( ['in'], c_int, 'Pos' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVolumeCombined implementation
##class _IAgCrdnVolumeCombined_Impl(object):
##    def _get(self):
##        'Sets/Returns volume combined operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Sets/Returns volume combined operation.'
##    CombineOperation = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ConditionCount(self):
##        'Returns the spatial condition vectore size.'
##        #return pRetVal
##
##    def GetAllConditions(self):
##        'Get all spatial conditions.'
##        #return ppRetVal
##
##    def SetAllConditions(self, Conditions):
##        'Set all spatial conditions.'
##        #return 
##
##    def SetCondition(self, Ref, Pos):
##        'Set spatial conditions at a postion.'
##        #return 
##
##    def GetCondition(self, Pos):
##        'Get spatial conditions at a postion.'
##        #return ppRetVal
##
##    def RemoveCondition(self, Pos):
##        'Remove spatial conditions at a postion.'
##        #return 
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

_IAgCrdnSystemAssembled._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1901), helpstring('Returns a type of the system object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnSystemType), 'pRetVal' )),
    COMMETHOD([dispid(1906), helpstring('Find position, velocity, rate and orientation using the specified system.')], HRESULT, 'FindInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemFindInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(5501), helpstring('Specify a point of origin.'), 'propget'], HRESULT, 'OriginPoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(5502), helpstring('Specify a reference axes.'), 'propget'], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1907), helpstring('Translates the position vector from this system into the output system.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'OutputSystem' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'PositionInMySystem' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1908), helpstring('Translates the position and rate vectors from this system into the output system.')], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'OutputSystem' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'PositionInMySystem' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VelocityInMySystem' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnSystemAssembled implementation
##class _IAgCrdnSystemAssembled_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the system object.'
##        #return pRetVal
##
##    def FindInSystem(self, Epoch, System):
##        'Find position, velocity, rate and orientation using the specified system.'
##        #return ppRetVal
##
##    @property
##    def OriginPoint(self):
##        'Specify a point of origin.'
##        #return ppRetVal
##
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputSystem, PositionInMySystem):
##        'Translates the position vector from this system into the output system.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputSystem, PositionInMySystem, VelocityInMySystem):
##        'Translates the position and rate vectors from this system into the output system.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnInstance(CoClass):
    'Enables to obtain information about the parent object that owns the VGT component.'
    _reg_clsid_ = GUID('{6FB9AB9B-A6DB-4288-8680-B39F4C3D5155}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnInstance._com_interfaces_ = [_IAgCrdnInstance, IAgCrdnContext, IAgCrdnInstance]

class AgCrdnAxesAttitudeFile(CoClass):
    'Axes specified by data from a file.'
    _reg_clsid_ = GUID('{3DEEDDFE-4860-4990-8C31-0786E9C48EDA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesAttitudeFile._com_interfaces_ = [_IAgCrdnAxesAttitudeFile, IAgCrdnAxesAttitudeFile, IAgCrdnAxes, IAgCrdnTimeProperties, IAgCrdn]

IAgCrdnPlaneNormal._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a Normal vector.')], HRESULT, 'NormalVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference vector.')], HRESULT, 'ReferenceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a reference point.')], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnPlaneNormal implementation
##class IAgCrdnPlaneNormal_Impl(object):
##    @property
##    def NormalVector(self):
##        'Specify a Normal vector.'
##        #return ppRetVal
##
##    @property
##    def ReferenceVector(self):
##        'Specify a reference vector.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Specify a reference point.'
##        #return ppRetVal
##

class AgCrdnSatisfactionConditionFilter(CoClass):
    'The filter selects intervals if certain side condition is satisfied at least/most certain duration.'
    _reg_clsid_ = GUID('{6A5CC875-9971-4D7B-9B7F-EFFD2DD82107}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnSatisfactionConditionFilter._com_interfaces_ = [_IAgCrdnSatisfactionConditionFilter, IAgCrdnSatisfactionConditionFilter, IAgCrdnPruneFilter]

class AgCrdnTemplate(CoClass):
    'Enables to obtain information about the STK class that owns the VGT component.'
    _reg_clsid_ = GUID('{E024AA6D-D202-4F06-A17B-B62950065CC6}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnTemplate._com_interfaces_ = [_IAgCrdnTemplate, IAgCrdnContext, IAgCrdnTemplate]

class AgCrdnAxesFixed(CoClass):
    'Axes fixed in reference axes.'
    _reg_clsid_ = GUID('{4BBD431D-3D84-43CA-B14B-045B1F8BDA1A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesFixed._com_interfaces_ = [_IAgCrdnAxesFixed, IAgCrdnAxesFixed, IAgCrdnAxes, IAgCrdnTimeProperties, IAgCrdn]

IAgCrdnVectorFixedAtTimeInstant._methods_ = [
    COMMETHOD(['propget', helpstring('A reference time instant. Can be any Time event.')], HRESULT, 'ReferenceTimeInstant',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEvent)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A reference time instant. Can be any Time event.')], HRESULT, 'ReferenceTimeInstant',
              ( ['in'], POINTER(IAgCrdnEvent), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A source vector. Can be any VGT vector.')], HRESULT, 'SourceVector',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVector)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A source vector. Can be any VGT vector.')], HRESULT, 'SourceVector',
              ( ['in'], POINTER(IAgCrdnVector), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A reference axes. Can be any VGT axes.')], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A reference axes. Can be any VGT axes.')], HRESULT, 'ReferenceAxes',
              ( ['in'], POINTER(IAgCrdnAxes), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVectorFixedAtTimeInstant implementation
##class IAgCrdnVectorFixedAtTimeInstant_Impl(object):
##    def _get(self):
##        'A reference time instant. Can be any Time event.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A reference time instant. Can be any Time event.'
##    ReferenceTimeInstant = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A source vector. Can be any VGT vector.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A source vector. Can be any VGT vector.'
##    SourceVector = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A reference axes. Can be any VGT axes.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A reference axes. Can be any VGT axes.'
##    ReferenceAxes = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnSignalDelay(CoClass):
    'Signal delay definition determines how long it takes for a signal to propagate from one location to another.'
    _reg_clsid_ = GUID('{30F3C8D2-59DE-4FE6-AA1C-C1EB666E72B9}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnSignalDelay._com_interfaces_ = [_IAgCrdnSignalDelay, IAgCrdnSignalDelay, IAgCrdn]

IAgCrdnAxesFixed._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a reference axes.')], HRESULT, 'ReferenceAxes',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAxesRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a desired orientation and the applicable parameters.')], HRESULT, 'FixedOrientation',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnAxesFixed implementation
##class IAgCrdnAxesFixed_Impl(object):
##    @property
##    def ReferenceAxes(self):
##        'Specify a reference axes.'
##        #return ppRetVal
##
##    @property
##    def FixedOrientation(self):
##        'Specify a desired orientation and the applicable parameters.'
##        #return ppRetVal
##

IAgCrdnRelativeSatisfactionConditionFilter._methods_ = [
    COMMETHOD(['propget', helpstring('This additional condition must be satisfied At Most or At Least specified duration within any interval for it to be considered in filtered list.')], HRESULT, 'Condition',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCondition)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('This additional condition must be satisfied At Most or At Least specified duration within any interval for it to be considered in filtered list.')], HRESULT, 'Condition',
              ( ['in'], POINTER(IAgCrdnCondition), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Choose a duration type (at least/at most).')], HRESULT, 'DurationKind',
              ( ['out', 'retval'], POINTER(AgECrdnIntervalDurationKind), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Choose a duration type (at least/at most).')], HRESULT, 'DurationKind',
              ( ['in'], AgECrdnIntervalDurationKind, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A percentage of time the condition must be satisfied.')], HRESULT, 'RelativeIntervalDuration',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('A percentage of time the condition must be satisfied.')], HRESULT, 'RelativeIntervalDuration',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnRelativeSatisfactionConditionFilter implementation
##class IAgCrdnRelativeSatisfactionConditionFilter_Impl(object):
##    def _get(self):
##        'This additional condition must be satisfied At Most or At Least specified duration within any interval for it to be considered in filtered list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'This additional condition must be satisfied At Most or At Least specified duration within any interval for it to be considered in filtered list.'
##    Condition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Choose a duration type (at least/at most).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Choose a duration type (at least/at most).'
##    DurationKind = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'A percentage of time the condition must be satisfied.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'A percentage of time the condition must be satisfied.'
##    RelativeIntervalDuration = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnPointRefTo(CoClass):
    'Represents a reference to a VGT point.'
    _reg_clsid_ = GUID('{53D58A83-8782-4BA8-8980-FD980C6AFF6F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnPointRefTo._com_interfaces_ = [_IAgCrdnPointRefTo, IAgCrdnPointRefTo, IAgCrdnRefTo]

class AgCrdnAxesModelAttach(CoClass):
    "Axes aligned with the specified pointable element of the object's 3D model. The axes follow the model as well as any articulations that affect the specified pointable element."
    _reg_clsid_ = GUID('{FBB41825-BDA8-4E7D-B77B-2254A1A2F775}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
class IAgCrdnAxesModelAttach(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Axes aligned with the specified pointable element of the object's 3D model. The axes follow the model as well as any articulations that affect the specified pointable element."
    _iid_ = GUID('{4E2D3A19-FBE1-4D41-AE43-38DAAC653EDB}')
    _idlflags_ = ['oleautomation']
AgCrdnAxesModelAttach._com_interfaces_ = [_IAgCrdnAxesModelAttach, IAgCrdnAxesModelAttach, IAgCrdnAxes, IAgCrdnTimeProperties, IAgCrdn]

_IAgCrdnVolumeOverTime._methods_ = [
    COMMETHOD([dispid(32701), helpstring('Sets/Returns the lighting conditions.'), 'propget'], HRESULT, 'DurationType',
              ( ['out', 'retval'], POINTER(AgECrdnVolumeOverTimeDurationType), 'pRetVal' )),
    COMMETHOD([dispid(32701), helpstring('Sets/Returns the lighting conditions.'), 'propput'], HRESULT, 'DurationType',
              ( ['in'], AgECrdnVolumeOverTimeDurationType, 'pRetVal' )),
    COMMETHOD([dispid(32702), helpstring('Sets/Returns the reference volume.'), 'propget'], HRESULT, 'ReferenceVolume',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVolume)), 'ppRetVal' )),
    COMMETHOD([dispid(32702), helpstring('Sets/Returns the reference volume.'), 'propput'], HRESULT, 'ReferenceVolume',
              ( ['in'], POINTER(IAgCrdnVolume), 'ppRetVal' )),
    COMMETHOD([dispid(32703), helpstring('The reference interval list for the over time volume.'), 'propget'], HRESULT, 'ReferenceIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD([dispid(32703), helpstring('The reference interval list for the over time volume.'), 'propput'], HRESULT, 'ReferenceIntervals',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD([dispid(32704), helpstring('Set the offset with respect to current time to define the start of the sliding window, used when over time volume is set to Sliding Window.'), 'propget'], HRESULT, 'StartOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(32704), helpstring('Set the offset with respect to current time to define the start of the sliding window, used when over time volume is set to Sliding Window.'), 'propput'], HRESULT, 'StartOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(32705), helpstring('Set the offset with respect to current time to define the stop of the sliding window, used when over time volume is set to Sliding Window.'), 'propget'], HRESULT, 'StopOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(32705), helpstring('Set the offset with respect to current time to define the stop of the sliding window, used when over time volume is set to Sliding Window.'), 'propput'], HRESULT, 'StopOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVolumeOverTime implementation
##class _IAgCrdnVolumeOverTime_Impl(object):
##    def _get(self):
##        'Sets/Returns the lighting conditions.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Sets/Returns the lighting conditions.'
##    DurationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Sets/Returns the reference volume.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Sets/Returns the reference volume.'
##    ReferenceVolume = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The reference interval list for the over time volume.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The reference interval list for the over time volume.'
##    ReferenceIntervals = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Set the offset with respect to current time to define the start of the sliding window, used when over time volume is set to Sliding Window.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Set the offset with respect to current time to define the start of the sliding window, used when over time volume is set to Sliding Window.'
##    StartOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Set the offset with respect to current time to define the stop of the sliding window, used when over time volume is set to Sliding Window.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Set the offset with respect to current time to define the stop of the sliding window, used when over time volume is set to Sliding Window.'
##    StopOffset = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous shallow copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

IAgCrdnVolumeGridLatLonAlt._methods_ = [
    COMMETHOD(['propget', helpstring('Get the central body for the volume grid. Both the central body reference shape and its CBF (central body centered fixed) system are used by this volume grid.')], HRESULT, 'ReferenceCentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Get the central body for the volume grid. Both the central body reference shape and its CBF (central body centered fixed) system are used by this volume grid.')], HRESULT, 'ReferenceCentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns latitute Coordinates parameters for the Theta system.')], HRESULT, 'LatitudeCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns longtitude Coordinates parameters for the Radius system.')], HRESULT, 'LongitudeCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns altitude parameters for the Height system.')], HRESULT, 'AltitudeCoordinates',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnGridCoordinateDefinition)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Specify whether to use the auto fit bounds. Set to true to use the auto fit bounds..')], HRESULT, 'AutoFitBounds',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify whether to use the auto fit bounds. Set to true to use the auto fit bounds..')], HRESULT, 'AutoFitBounds',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnVolumeGridLatLonAlt implementation
##class IAgCrdnVolumeGridLatLonAlt_Impl(object):
##    def _get(self):
##        'Get the central body for the volume grid. Both the central body reference shape and its CBF (central body centered fixed) system are used by this volume grid.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Get the central body for the volume grid. Both the central body reference shape and its CBF (central body centered fixed) system are used by this volume grid.'
##    ReferenceCentralBody = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def LatitudeCoordinates(self):
##        'Returns latitute Coordinates parameters for the Theta system.'
##        #return ppRetVal
##
##    @property
##    def LongitudeCoordinates(self):
##        'Returns longtitude Coordinates parameters for the Radius system.'
##        #return ppRetVal
##
##    @property
##    def AltitudeCoordinates(self):
##        'Returns altitude parameters for the Height system.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify whether to use the auto fit bounds. Set to true to use the auto fit bounds..'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use the auto fit bounds. Set to true to use the auto fit bounds..'
##    AutoFitBounds = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnLightTimeDelay._methods_ = [
    COMMETHOD(['propget', helpstring('Flag indicating whether to include minimum and maximum coordinate values in the defined set of values.')], HRESULT, 'UseLightTimeDelay',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Flag indicating whether to include minimum and maximum coordinate values in the defined set of values.')], HRESULT, 'UseLightTimeDelay',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Set light Time Delay Convergence.')], HRESULT, 'TimeDelayConvergence',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Set light Time Delay Convergence.')], HRESULT, 'TimeDelayConvergence',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Method used to Aberration Type.')], HRESULT, 'AberrationType',
              ( ['out', 'retval'], POINTER(AgECrdnVolumeAberrationType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Method used to Aberration Type.')], HRESULT, 'AberrationType',
              ( ['in'], AgECrdnVolumeAberrationType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Indicates whether object1 or object2 of an Access instance holds the clock for Access times.')], HRESULT, 'ClockHost',
              ( ['out', 'retval'], POINTER(AgECrdnVolumeClockHostType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Indicates whether object1 or object2 of an Access instance holds the clock for Access times.')], HRESULT, 'ClockHost',
              ( ['in'], AgECrdnVolumeClockHostType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Indicates whether apparent position is computed in a transmit or receive sense')], HRESULT, 'TimeSense',
              ( ['out', 'retval'], POINTER(AgECrdnVolumeTimeSenseType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Indicates whether apparent position is computed in a transmit or receive sense')], HRESULT, 'TimeSense',
              ( ['in'], AgECrdnVolumeTimeSenseType, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnLightTimeDelay implementation
##class IAgCrdnLightTimeDelay_Impl(object):
##    def _get(self):
##        'Flag indicating whether to include minimum and maximum coordinate values in the defined set of values.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Flag indicating whether to include minimum and maximum coordinate values in the defined set of values.'
##    UseLightTimeDelay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Set light Time Delay Convergence.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Set light Time Delay Convergence.'
##    TimeDelayConvergence = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Method used to Aberration Type.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Method used to Aberration Type.'
##    AberrationType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Indicates whether object1 or object2 of an Access instance holds the clock for Access times.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Indicates whether object1 or object2 of an Access instance holds the clock for Access times.'
##    ClockHost = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Indicates whether apparent position is computed in a transmit or receive sense'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Indicates whether apparent position is computed in a transmit or receive sense'
##    TimeSense = property(_get, _set, doc = _set.__doc__)
##

class AgCrdnSignalDelayBasic(CoClass):
    'Signal delay definition determines how long it takes for a signal to propagate from one location to another.'
    _reg_clsid_ = GUID('{D30CAA32-9974-4A84-A939-858857C8ECDE}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnSignalDelayBasic._com_interfaces_ = [_IAgCrdnSignalDelayBasic, IAgCrdnSignalDelayBasic, IAgCrdnSignalDelay, IAgCrdn]

IAgCrdnVectorDisplacement._methods_ = [
    COMMETHOD(['propget', helpstring("Specify the vector's origin point.")], HRESULT, 'Origin',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Specify the vector's destination point.")], HRESULT, 'Destination',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Controls whether to take a light speed delay into account.')], HRESULT, 'Apparent',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Controls whether to take a light speed delay into account.')], HRESULT, 'Apparent',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Set to true if you do not want to calculate the abberation correction. This property is read-only if Apparent is set to false.')], HRESULT, 'IgnoreAbberation',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Set to true if you do not want to calculate the abberation correction. This property is read-only if Apparent is set to false.')], HRESULT, 'IgnoreAbberation',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a sense of signal transmission. This property is read-only if Apparent is set to false.')], HRESULT, 'SignalSense',
              ( ['out', 'retval'], POINTER(AgECrdnSignalSense), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a sense of signal transmission. This property is read-only if Apparent is set to false.')], HRESULT, 'SignalSense',
              ( ['in'], AgECrdnSignalSense, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Specify a frame in which the light time delay is computed. This property is read-only if Apparent is set to false.')], HRESULT, 'ReferenceSystem',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemRefTo)), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnVectorDisplacement implementation
##class IAgCrdnVectorDisplacement_Impl(object):
##    @property
##    def Origin(self):
##        "Specify the vector's origin point."
##        #return ppRetVal
##
##    @property
##    def Destination(self):
##        "Specify the vector's destination point."
##        #return ppRetVal
##
##    def _get(self):
##        'Controls whether to take a light speed delay into account.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Controls whether to take a light speed delay into account.'
##    Apparent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Set to true if you do not want to calculate the abberation correction. This property is read-only if Apparent is set to false.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Set to true if you do not want to calculate the abberation correction. This property is read-only if Apparent is set to false.'
##    IgnoreAbberation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify a sense of signal transmission. This property is read-only if Apparent is set to false.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a sense of signal transmission. This property is read-only if Apparent is set to false.'
##    SignalSense = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ReferenceSystem(self):
##        'Specify a frame in which the light time delay is computed. This property is read-only if Apparent is set to false.'
##        #return ppRetVal
##

_IAgCrdnVectorModelAttach._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6801), helpstring('Specify a pointable element of the 3D model associated with the object.'), 'propget'], HRESULT, 'PointableElementName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(6801), helpstring('Specify a pointable element of the 3D model associated with the object.'), 'propput'], HRESULT, 'PointableElementName',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorModelAttach implementation
##class _IAgCrdnVectorModelAttach_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    def _get(self):
##        'Specify a pointable element of the 3D model associated with the object.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a pointable element of the 3D model associated with the object.'
##    PointableElementName = property(_get, _set, doc = _set.__doc__)
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnVectorRefTo(CoClass):
    'Represents a vector reference.'
    _reg_clsid_ = GUID('{8D5149CA-9784-4B86-B574-10ECAE81C07E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnVectorRefTo._com_interfaces_ = [_IAgCrdnVectorRefTo, IAgCrdnVectorRefTo, IAgCrdnRefTo]

class AgCrdnAxesSpinning(CoClass):
    'Axes created by spinning the Reference axes about the Spin vector with the specified rate. The axes are aligned with the Reference axes at the specified epoch plus the additional rotational offset.'
    _reg_clsid_ = GUID('{09F1DB55-0B6F-4238-9EE7-6E3DDD920850}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesSpinning._com_interfaces_ = [_IAgCrdnAxesSpinning, IAgCrdnAxesSpinning, IAgCrdnAxes, IAgCrdnTimeProperties, IAgCrdn]

class AgCrdnVolumeFactory(CoClass):
    'The factory is used to create instances of volumes.'
    _reg_clsid_ = GUID('{261CBF18-1B30-4E85-8231-1CB92952AE30}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnVolumeFactory._com_interfaces_ = [_IAgCrdnVolumeFactory, IAgCrdnVolumeFactory]

_IAgCrdnVectorLineOfNodes._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1501), helpstring('Returns a type of the vector object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnVectorType), 'pRetVal' )),
    COMMETHOD([dispid(1502), helpstring('Computes the vector in the specified axes.')], HRESULT, 'FindInAxes',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1503), helpstring('Computes the vector and its rate in the specified axes.')], HRESULT, 'FindInAxesWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnAxes), 'Axes' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnVectorFindInAxesWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(7701), helpstring('Specify a central body.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(7702), helpstring('Specify a reference point.'), 'propget'], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPointRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnVectorLineOfNodes implementation
##class _IAgCrdnVectorLineOfNodes_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the vector object.'
##        #return pRetVal
##
##    def FindInAxes(self, Epoch, Axes):
##        'Computes the vector in the specified axes.'
##        #return ppRetVal
##
##    def FindInAxesWithRate(self, Epoch, Axes):
##        'Computes the vector and its rate in the specified axes.'
##        #return ppRetVal
##
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    @property
##    def ReferencePoint(self):
##        'Specify a reference point.'
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnAxesRefTo(CoClass):
    'Represents a reference to a VGT axes.'
    _reg_clsid_ = GUID('{A5EC0AAE-35B8-4FBE-8FC6-A45F04A2B62C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesRefTo._com_interfaces_ = [_IAgCrdnAxesRefTo, IAgCrdnAxesRefTo, IAgCrdnRefTo]

class AgCrdnAxesOnSurface(CoClass):
    "Topocentric axes located at the reference point's projection on the central body."
    _reg_clsid_ = GUID('{76DB8FE0-2086-436C-90AD-3AC078153B0D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesOnSurface._com_interfaces_ = [_IAgCrdnAxesOnSurface, IAgCrdnAxesOnSurface, IAgCrdnAxes, IAgCrdnTimeProperties, IAgCrdn]

IAgCrdnParameterSetFactory._methods_ = [
    COMMETHOD([helpstring('Creates and registers a parameter set using specified name and description.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnParameterSetType, 'Type' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnParameterSet)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a parameter set defined by identifying one set of axes in reference to another.')], HRESULT, 'CreateParameterSetAttitude',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnParameterSet)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a parameter set defined by identifying location in reference central body.')], HRESULT, 'CreateParameterSetGroundTrajectory',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnParameterSet)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a parameter set defined by identifying location in reference coordinate system.')], HRESULT, 'CreateParameterSetTrajectory',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnParameterSet)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a parameter set defined by identifying orbiting point and its central body.')], HRESULT, 'CreateParameterSetOrbit',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnParameterSet)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a parameter set defined by identifying vector in reference axes.')], HRESULT, 'CreateParameterSetVector',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnParameterSet)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns whether the specified type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnParameterSetType, 'EType' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgCrdnParameterSetFactory implementation
##class IAgCrdnParameterSetFactory_Impl(object):
##    def Create(self, Name, Description, Type):
##        'Creates and registers a parameter set using specified name and description.'
##        #return ppRetVal
##
##    def CreateParameterSetAttitude(self, Name, Description):
##        'Creates a parameter set defined by identifying one set of axes in reference to another.'
##        #return ppRetVal
##
##    def CreateParameterSetGroundTrajectory(self, Name, Description):
##        'Creates a parameter set defined by identifying location in reference central body.'
##        #return ppRetVal
##
##    def CreateParameterSetTrajectory(self, Name, Description):
##        'Creates a parameter set defined by identifying location in reference coordinate system.'
##        #return ppRetVal
##
##    def CreateParameterSetOrbit(self, Name, Description):
##        'Creates a parameter set defined by identifying orbiting point and its central body.'
##        #return ppRetVal
##
##    def CreateParameterSetVector(self, Name, Description):
##        'Creates a parameter set defined by identifying vector in reference axes.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, EType):
##        'Returns whether the specified type is supported.'
##        #return pRetVal
##

IAgCrdnEventArrayFixedTimes._methods_ = [
    COMMETHOD(['propget', helpstring('The array of times.')], HRESULT, 'ArrayTimes',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Sets array of times.')], HRESULT, 'SetArrayTimes',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Times' )),
]
################################################################
## code template for IAgCrdnEventArrayFixedTimes implementation
##class IAgCrdnEventArrayFixedTimes_Impl(object):
##    @property
##    def ArrayTimes(self):
##        'The array of times.'
##        #return ppRetVal
##
##    def SetArrayTimes(self, Times):
##        'Sets array of times.'
##        #return 
##

class AgCrdnVolumeGridFactory(CoClass):
    'The factory is used to create instances of volume grids.'
    _reg_clsid_ = GUID('{377DBA65-C3EC-4935-A9D8-9EA444666C11}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnVolumeGridFactory._com_interfaces_ = [_IAgCrdnVolumeGridFactory, IAgCrdnVolumeGridFactory]

IAgCrdnAxesModelAttach._methods_ = [
    COMMETHOD(['propget', helpstring('Specify a pointable element of the 3D model associated with the object.')], HRESULT, 'PointableElementName',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Specify a pointable element of the 3D model associated with the object.')], HRESULT, 'PointableElementName',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgCrdnAxesModelAttach implementation
##class IAgCrdnAxesModelAttach_Impl(object):
##    def _get(self):
##        'Specify a pointable element of the 3D model associated with the object.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify a pointable element of the 3D model associated with the object.'
##    PointableElementName = property(_get, _set, doc = _set.__doc__)
##

IAgCrdnEventIntervalListSignaled._methods_ = [
    COMMETHOD(['propget', helpstring('The original time interval list.')], HRESULT, 'OriginalIntervals',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnEventIntervalList)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The original time interval list.')], HRESULT, 'OriginalIntervals',
              ( ['in'], POINTER(IAgCrdnEventIntervalList), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.')], HRESULT, 'SignalSense',
              ( ['out', 'retval'], POINTER(AgECrdnSignalSense), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.')], HRESULT, 'SignalSense',
              ( ['in'], AgECrdnSignalSense, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The base clock location, which is a point from VGT.')], HRESULT, 'BaseClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The base clock location, which is a point from VGT.')], HRESULT, 'BaseClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The target clock location, which is a point from VGT.')], HRESULT, 'TargetClockLocation',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnPoint)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The target clock location, which is a point from VGT.')], HRESULT, 'TargetClockLocation',
              ( ['in'], POINTER(IAgCrdnPoint), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.')], HRESULT, 'SignalDelay',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSignalDelay)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.')], HRESULT, 'SignalDelay',
              ( ['in'], POINTER(IAgCrdnSignalDelay), 'ppRetVal' )),
]
################################################################
## code template for IAgCrdnEventIntervalListSignaled implementation
##class IAgCrdnEventIntervalListSignaled_Impl(object):
##    def _get(self):
##        'The original time interval list.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The original time interval list.'
##    OriginalIntervals = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The direction of the signal, whether you are Transmitting or Receiving from the Base Clock Location.'
##    SignalSense = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The base clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The base clock location, which is a point from VGT.'
##    BaseClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The target clock location, which is a point from VGT.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The target clock location, which is a point from VGT.'
##    TargetClockLocation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'The Signal delay definition, which includes signal transmission, time delay convergence and signal path reference system.'
##    SignalDelay = property(_get, _set, doc = _set.__doc__)
##

_IAgCrdnSystemOnSurface._methods_ = [
    COMMETHOD([dispid(201), helpstring('Returns the component kind.'), 'propget'], HRESULT, 'Kind',
              ( ['out', 'retval'], POINTER(AgECrdnKind), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propget'], HRESULT, 'Category',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(202), helpstring('Allows the user to access or change the component category (Folder).'), 'propput'], HRESULT, 'Category',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(203), helpstring('Returns the component name.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(204), helpstring('Returns the component description.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(205), helpstring('Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'), 'propget'], HRESULT, 'Path',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(206), helpstring('Returns whether the VGT component can be duplicated.'), 'propget'], HRESULT, 'IsDuplicable',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(207), helpstring('Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'), 'propget'], HRESULT, 'Context',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnContext)), 'ppRetVal' )),
    COMMETHOD([dispid(208), helpstring('Returns the component type information.'), 'propget'], HRESULT, 'TypeInfo',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnTypeInfo)), 'ppRetVal' )),
    COMMETHOD([dispid(209), helpstring('An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'), 'propget'], HRESULT, 'QualifiedPath',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(210), helpstring('Returns whether the component is valid.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(211), helpstring("Returns whether the component is ready. The component is ready if it's been fully initialized."), 'propget'], HRESULT, 'IsReady',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(212), helpstring('Returns whether the component is modifiable.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(1401), helpstring('Returns a collection of availability intervals.')], HRESULT, 'GetAvailability',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnIntervalCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1901), helpstring('Returns a type of the system object.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgECrdnSystemType), 'pRetVal' )),
    COMMETHOD([dispid(1906), helpstring('Find position, velocity, rate and orientation using the specified system.')], HRESULT, 'FindInSystem',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'System' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemFindInSystemResult)), 'ppRetVal' )),
    COMMETHOD([dispid(5601), helpstring('Specify a central body.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCentralBodyRefTo)), 'ppRetVal' )),
    COMMETHOD([dispid(5602), helpstring('An angle by which the topocentric axes is rotated.'), 'propget'], HRESULT, 'AzimuthAngle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(5602), helpstring('An angle by which the topocentric axes is rotated.'), 'propput'], HRESULT, 'AzimuthAngle',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(5603), helpstring('Specify whether to use the Mean Sea Level as the reference shape.'), 'propget'], HRESULT, 'UseMSL',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5603), helpstring('Specify whether to use the Mean Sea Level as the reference shape.'), 'propput'], HRESULT, 'UseMSL',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(5604), helpstring("Specify the position of the system's origin."), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnLLAPosition)), 'ppRetVal' )),
    COMMETHOD([dispid(213), helpstring('Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.')], HRESULT, 'Duplicate',
              ( ['in'], BSTR, 'NewName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(216), helpstring('Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.')], HRESULT, 'AnonymousDuplicate',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdn)), 'ppRetVal' )),
    COMMETHOD([dispid(218), helpstring('Tests if the instance depends on another component.')], HRESULT, 'DependsOn',
              ( ['in'], POINTER(IAgCrdn), 'Component' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(219), helpstring('Returns a collection of embedded components.'), 'propget'], HRESULT, 'EmbeddedComponents',
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(1907), helpstring('Translates the position vector from this system into the output system.')], HRESULT, 'Transform',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'OutputSystem' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'PositionInMySystem' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemTransformResult)), 'ppRetVal' )),
    COMMETHOD([dispid(1908), helpstring('Translates the position and rate vectors from this system into the output system.')], HRESULT, 'TransformWithRate',
              ( ['in'], VARIANT, 'Epoch' ),
              ( ['in'], POINTER(IAgCrdnSystem), 'OutputSystem' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'PositionInMySystem' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgCartesian3Vector), 'VelocityInMySystem' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnSystemTransformWithRateResult)), 'ppRetVal' )),
    COMMETHOD([dispid(221), helpstring('Exports the component to a file.')], HRESULT, 'Export',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], BSTR, 'Comments' )),
    COMMETHOD([dispid(222), helpstring('Renames the component.')], HRESULT, 'Rename',
              ( ['in'], BSTR, 'NewName' )),
]
################################################################
## code template for _IAgCrdnSystemOnSurface implementation
##class _IAgCrdnSystemOnSurface_Impl(object):
##    @property
##    def Kind(self):
##        'Returns the component kind.'
##        #return pRetVal
##
##    def _get(self):
##        'Allows the user to access or change the component category (Folder).'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Allows the user to access or change the component category (Folder).'
##    Category = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Name(self):
##        'Returns the component name.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Returns the component description.'
##        #return pRetVal
##
##    @property
##    def Path(self):
##        'Returns the component\'s fully qualified path (ie. "CentralBody/Earth Body", etc.).'
##        #return pRetVal
##
##    @property
##    def IsDuplicable(self):
##        'Returns whether the VGT component can be duplicated.'
##        #return pRetVal
##
##    @property
##    def Context(self):
##        'Returns the context object associated with the instance. The returned object is either an instance of IAgCrdnInstance or IAgCrdnTemplate interface.'
##        #return ppRetVal
##
##    @property
##    def TypeInfo(self):
##        'Returns the component type information.'
##        #return ppRetVal
##
##    @property
##    def QualifiedPath(self):
##        'An STK-conformant path to the VGT component that can be used to visualize the VGT components in 3D (i.e. "CentralBody/Earth Body Vector", etc.).'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Returns whether the component is valid.'
##        #return pRetVal
##
##    @property
##    def IsReady(self):
##        "Returns whether the component is ready. The component is ready if it's been fully initialized."
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Returns whether the component is modifiable.'
##        #return pRetVal
##
##    def GetAvailability(self):
##        'Returns a collection of availability intervals.'
##        #return ppRetVal
##
##    @property
##    def Type(self):
##        'Returns a type of the system object.'
##        #return pRetVal
##
##    def FindInSystem(self, Epoch, System):
##        'Find position, velocity, rate and orientation using the specified system.'
##        #return ppRetVal
##
##    @property
##    def CentralBody(self):
##        'Specify a central body.'
##        #return ppRetVal
##
##    def _get(self):
##        'An angle by which the topocentric axes is rotated.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'An angle by which the topocentric axes is rotated.'
##    AzimuthAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Specify whether to use the Mean Sea Level as the reference shape.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Specify whether to use the Mean Sea Level as the reference shape.'
##    UseMSL = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Position(self):
##        "Specify the position of the system's origin."
##        #return ppRetVal
##
##    def Duplicate(self, NewName, Description):
##        'Creates a copy of the instance of a VGT component. The new component is automatically registered and will be persisted or restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def AnonymousDuplicate(self):
##        'Creates an anonymous copy of the instance of a VGT component. The new component is not registered and will not be persisted nor restored when a scenario is saved or loaded.'
##        #return ppRetVal
##
##    def DependsOn(self, Component):
##        'Tests if the instance depends on another component.'
##        #return pRetVal
##
##    @property
##    def EmbeddedComponents(self):
##        'Returns a collection of embedded components.'
##        #return ppRetVal
##
##    def Transform(self, Epoch, OutputSystem, PositionInMySystem):
##        'Translates the position vector from this system into the output system.'
##        #return ppRetVal
##
##    def TransformWithRate(self, Epoch, OutputSystem, PositionInMySystem, VelocityInMySystem):
##        'Translates the position and rate vectors from this system into the output system.'
##        #return ppRetVal
##
##    def Export(self, Filename, Comments):
##        'Exports the component to a file.'
##        #return 
##
##    def Rename(self, NewName):
##        'Renames the component.'
##        #return 
##

class AgCrdnAngleRefTo(CoClass):
    'Represents a reference to a VGT angle.'
    _reg_clsid_ = GUID('{53D1CBDE-A159-4B4F-BE2E-5D4B8F01E8D3}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAngleRefTo._com_interfaces_ = [_IAgCrdnAngleRefTo, IAgCrdnAngleRefTo, IAgCrdnRefTo]

_IAgCrdnAngleFactory._methods_ = [
    COMMETHOD([dispid(8801), helpstring('Creates a VGT angle using specified name, description and type.')], HRESULT, 'Create',
              ( ['in'], BSTR, 'AngleName' ),
              ( ['in'], BSTR, 'Description' ),
              ( ['in'], AgECrdnAngleType, 'AngleType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgCrdnAngle)), 'ppRetVal' )),
    COMMETHOD([dispid(8802), helpstring('Returns true if the type is supported.')], HRESULT, 'IsTypeSupported',
              ( ['in'], AgECrdnAngleType, 'Type' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgCrdnAngleFactory implementation
##class _IAgCrdnAngleFactory_Impl(object):
##    def Create(self, AngleName, Description, AngleType):
##        'Creates a VGT angle using specified name, description and type.'
##        #return ppRetVal
##
##    def IsTypeSupported(self, Type):
##        'Returns true if the type is supported.'
##        #return pRetVal
##

class AgCrdnAxesTrajectory(CoClass):
    'Axes based on trajectory of the point relative to the reference coordinate system.'
    _reg_clsid_ = GUID('{DF0C4108-61AD-49FF-BE6B-23E1DBF7C8CA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesTrajectory._com_interfaces_ = [_IAgCrdnAxesTrajectory, IAgCrdnAxesTrajectory, IAgCrdnAxes, IAgCrdnTimeProperties, IAgCrdn]

class AgCrdnAxesLagrangeLibration(CoClass):
    'Libration point axes using one primary and multiple secondary central bodies. Set primary and secondary bodies, and point type.'
    _reg_clsid_ = GUID('{DA1DD6CE-291B-4C12-B44A-A0DF3189CCA9}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnAxesLagrangeLibration._com_interfaces_ = [_IAgCrdnAxesLagrangeLibration, IAgCrdnAxesLagrangeLibration, IAgCrdnAxes, IAgCrdnTimeProperties, IAgCrdn]

class AgCrdnGridCoordinateDefinition(CoClass):
    'Defines a set of coordinate values.'
    _reg_clsid_ = GUID('{4DB06CF7-C051-4683-94F7-F5544408B533}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{8B49F426-4BF0-49F7-A59B-93961D83CB5D}', 1, 0)
AgCrdnGridCoordinateDefinition._com_interfaces_ = [_IAgCrdnGridCoordinateDefinition, IAgCrdnGridCoordinateDefinition]

__all__ = [ 'AgCrdnEvent', 'AgCrdnIntervalsFilter',
           'eCrdnSystemTypeUnknown', 'eCrdnVectorTypePlugin',
           'AgCrdnConditionGroup', 'IAgCrdnVectorPlugin',
           'IAgCrdnAngleToPlane', 'AgCrdnEventIntervalGroup',
           'AgCrdnEventIntervalFactory', 'IAgCrdnPointFixedInSystem',
           'eCrdnPruneFilterIntervals',
           'IAgCrdnRelativeSatisfactionConditionFilter',
           'AgECrdnConditionThresholdOption',
           'AgCrdnEventIntervalListTimeOffset',
           'eCrdnDirectionOutgoingAsymptote', '_IAgCrdnVolumeFactory',
           'AgCrdnEventExtremum', '_IAgCrdnAngleRotation',
           '_IAgCrdnVectorAngleRate', 'eCrdnTrajectoryAxesVNC',
           'eCrdnDimensionInheritanceNone', 'eCrdnDisplayAxisZ',
           '_IAgCrdnEventFindOccurrenceResult',
           'eCrdnPointTypeModelAttachment',
           'IAgCrdnWellKnownEarthAxes',
           '_IAgCrdnConditionSetScalarThresholds',
           '_IAgCrdnEventFactory', 'AgCrdnVectorProjection',
           'IAgCrdnVectorOrbitAngularMomentum',
           '_IAgCrdnAxesSpinning', 'AgCrdnConditionSet',
           'AgCrdnLightTimeDelay', 'AgCrdnSystemGroup',
           '_IAgCrdnVolumeGridSpherical',
           '_IAgCrdnEventArraySignaled',
           'eCrdnVolumeTypeFromTimeSatisfaction',
           'eCrdnCalcScalarTypeVectorMagnitude',
           'AgCrdnEventArrayGroup', 'IAgCrdnAngleBetweenVectors',
           'AgCrdnCondition', '_IAgCrdnVolumeGridLatLonAlt',
           'IAgCrdnVolumeGridConstrained', 'IAgCrdnAxesCustomScript',
           'eCrdnVolumetricGridValuesMethodMethodFixedStepSize',
           'IAgCrdnVolumeCombined', '_IAgCrdnEventIntervalListScaled',
           'eCrdnVolumeResultVectorRequestGradient', 'AgCrdnAxes',
           'eCrdnQuadrantXY', 'AgCrdnParameterSetGroundTrajectory',
           'IAgCrdnSystemRefTo', 'eCrdnCalcScalarTypeFunction2Var',
           'eCrdnSaveDataOptionYes', '_IAgCrdnAngleRefTo',
           'eCrdnKindSystem', 'IAgCrdnEventIntervalListSignaled',
           'AgCrdnAngleBetweenVectors',
           'AgCrdnPointSamplingIntervalCollection',
           '_IAgCrdnVolumeGridCartesian', 'eCrdnExtremumMaximum',
           'eCrdnEventIntervalTypeBetweenTimeInstants',
           'AgCrdnVectorLineOfNodes',
           'IAgCrdnEventFindOccurrenceResult',
           '_IAgCrdnEvaluateResult', '_IAgCrdnVectorDisplacement',
           'eCrdnPruneFilterSatisfactionIntervals',
           'IAgCrdnEventIntervalSmartInterval',
           '_IAgCrdnSamplingMethod', 'AgCrdnFindTimesResult',
           'AgCrdnSatisfactionConditionFilter',
           'AgCrdnCalcScalarGroup',
           'IAgCrdnPointSamplingIntervalCollection',
           '_IAgCrdnAxesRefTo', 'AgCrdnDerivative', 'AgCrdnPlane',
           'IAgCrdnParameterSetVector', 'AgCrdnVectorFixedInAxes',
           'IAgCrdnLightTimeDelay', 'AgCrdnAxesFixed',
           '_IAgCrdnAngleBetweenPlanes', 'IAgCrdnAxesOnSurface',
           '_IAgCrdnPointPlaneIntersection',
           'IAgCrdnSamplingMethodFactory', 'AgECrdnSmartEpochState',
           'IAgCrdnAxesAngularOffset',
           'eCrdnVectorTypeTwoPlanesIntersection',
           'eCrdnAngleTypeDihedralAngle',
           '_IAgCrdnAngleBetweenVectors', 'AgCrdnPointFile',
           'IAgCrdnAxesFixedAtEpoch', 'eCrdnVolumeClockHostUnknown',
           'AgCrdnPointRefTo', '_IAgCrdnPointLagrangeLibration',
           '_IAgCrdnAxesFactory', 'eCrdnVolumeGridTypeCylindrical',
           'IAgCrdnAxesFactory', 'eCrdnPointBPlaneATwoBody',
           '_IAgCrdnConditionSetEvaluateResult', 'IAgCrdnVectorCross',
           '_IAgCrdnVectorRefTo', 'eCrdnEventTypeFromInterval',
           'eCrdnPointTypeTemplate', '_IAgCrdnAxesModelAttach',
           'AgCrdnInterpBasic', '_IAgCrdnVectorLinearCombination',
           'eCrdnSystemTypeTemplate', 'eCrdnQuadrantZY',
           '_IAgCrdnVolumeGridBearingAlt',
           'eCrdnEventIntervalCollectionTypeSignaled',
           'eCrdnDisplayAxisX', 'IAgCrdnInterpBasic',
           'IAgCrdnCalcScalarFactory', 'AgCrdnVectorFixedAtEpoch',
           '_IAgCrdnWellKnownAxes', 'AgCrdnParameterSet',
           'eCrdnEventArrayTypeFixedTimes',
           'eCrdnVolumeAberrationNone', 'AgCrdnCalcScalarFile',
           'eCrdnSignalPathReferenceSystemUseAccessDefault',
           'AgCrdnPointCommonTasks', '_IAgCrdnWellKnownEarthSystems',
           'eCrdnVolumeClockHostBase',
           'IAgCrdnAngleFindWithRateResult',
           'eCrdnIntegralTypeFixedStepSimpson',
           'eCrdnAngleTypeToPlane', 'IAgCrdnAxesSamplingResult',
           '_IAgCrdnPointGrazing', '_IAgCrdnGridCoordinateDefinition',
           '_IAgCrdnVolumeFromCalc', '_IAgCrdnEventArrayFiltered',
           'eCrdnIntervalSelectionSpan',
           'eCrdnDirectionIncomingAsymptote', 'AgCrdnEventFactory',
           'AgCrdnVolumeGridLatLonAlt', 'AgCrdnSystemCommonTasks',
           'IAgCrdnVectorEccentricity', 'eCrdnVectorTypeFixedInAxes',
           'AgCrdnPlaneNormal', 'IAgCrdnConditionGroup',
           '_IAgCrdnGapsFilter', 'eCrdnIntervalDurationKindAtLeast',
           'eCrdnIntervalSelectionMaxDuration',
           'IAgCrdnGridValuesMethod', 'IAgCrdnPointFile',
           'eCrdnVectorTypeLinearCombination', 'eCrdnAxesTypeFixed',
           'eCrdnVolumetricGridValuesMethodMethodFixedNumSteps',
           'IAgCrdnVolumeFromCalc', 'IAgCrdnConditionFactory',
           'AgCrdnVectorModelAttach', 'IAgCrdnIntervalCollection',
           'eCrdnLagrangeLibrationPointTypeL2',
           '_IAgCrdnParameterSetVector', '_IAgCrdnPlaneNormal',
           'IAgCrdnWellKnownSystems', '_IAgCrdnEventTimeOffset',
           'AgCrdnRelativeSatisfactionConditionFilter',
           'IAgCrdnConditionSetEvaluateWithRateResult',
           'eCrdnEventIntervalTypeSmartInterval',
           'IAgCrdnConditionSetGroup', 'IAgCrdnAngleBetweenPlanes',
           'eCrdnKindParameterSet',
           'eCrdnConditionCombinedOperationTypeAND',
           '_IAgCrdnAxesLagrangeLibration',
           'IAgCrdnAxesAtTimeInstant', 'IAgCrdnEventIntervalSignaled',
           '_IAgCrdnCalcScalarVectorMagnitude',
           '_IAgCrdnGridValuesCustom',
           'AgCrdnEventIntervalCollectionSignaled',
           'IAgCrdnPointRefTo', '_IAgCrdn', 'IAgCrdnVolumeGridGroup',
           'eCrdnCalcScalarTypeSurfaceDistanceBetweenPoints',
           '_IAgCrdnSystemCommonTasks', 'eCrdnSignedAnglePositive',
           '_IAgCrdnAngleToPlane', 'IAgCrdnSystemFactory',
           'IAgCrdnParameterSetAttitude',
           'eCrdnConditionCombinedOperationTypeXOR',
           'IAgCrdnPointLagrangeLibration', 'eCrdnVectorTypeApoapsis',
           '_IAgCrdnDerivativeBasic', '_IAgCrdnCalcScalarPlugin',
           'IAgCrdnVolumeGridLatLonAlt', '_IAgCrdnVectorConing',
           '_IAgCrdnEventIntervalCollectionCondition',
           'AgCrdnPointPlaneIntersection',
           'IAgCrdnAxesTransformResult',
           'IAgCrdnPointLocateInSystemResult',
           '_IAgCrdnEventIntervalCollectionFactory',
           'AgCrdnEventTimeOffset', '_IAgCrdnEventIntervalFixed',
           'IAgCrdnVectorLineOfNodes', '_IAgCrdnCalcScalarDerivative',
           '_IAgCrdnEventIntervalFromIntervalList',
           'IAgCrdnVolumeGrid',
           'eCrdnEventIntervalCollectionTypeUnknown',
           'eCrdnKindCondition', 'eCrdnReferenceShapeEllipsoid',
           '_IAgCrdnCalcScalarFixedAtTimeInstant',
           'IAgCrdnAxesLagrangeLibration', 'eCrdnAxesTypeUnknown',
           '_IAgCrdnAxesFixedAtEpoch', 'AgCrdnPointGroup',
           'IAgCrdnVectorPeriapsis', 'IAgCrdnSamplingMethod',
           '_IAgCrdnTemplate', '_IAgCrdnVolumeFromGrid',
           'AgCrdnAxesBPlane',
           '_IAgCrdnAxesSamplingIntervalCollection', 'IAgCrdnRoot',
           'eCrdnAxesTypeAtTimeInstant',
           'AgECrdnVolumeResultVectorRequest',
           'IAgCrdnParameterSetOrbit',
           'IAgCrdnIntervalVectorCollection', 'eCrdnAngleTypeUnknown',
           'AgCrdnGridValuesCustom',
           'eCrdnFileInterpolatorTypeHoldNext', 'IAgCrdnInterval',
           'AgCrdnPointCentBodyIntersect', 'AgCrdnAngleDihedral',
           'AgCrdnConditionSetEvaluateResult',
           'IAgCrdnCalcScalarVectorMagnitude', 'AgCrdnAxesOnSurface',
           'AgCrdnEventEpoch', 'IAgCrdnVectorFactory',
           'eCrdnEventArrayTypeStartStopTimes',
           'eCrdnTrajectoryAxesVVLH',
           '_IAgCrdnEventIntervalSmartInterval',
           '_IAgCrdnPruneFilter', 'eCrdnVectorTypeProjectAlong',
           'IAgCrdnPointGlint', 'IAgCrdnPointSamplingInterval',
           'AgCrdnAxesCustomScript', 'IAgCrdnEventInterval',
           'AgECrdnDisplayAxisSelector', 'AgECrdnPointType',
           '_IAgCrdnSignalDelayBasic', 'eCrdnEventTypeSignaled',
           '_IAgCrdnEventArrayFactory', 'AgCrdnGeneric',
           '_IAgCrdnEventIntervalResult', 'AgCrdnPlaneFactory',
           '_IAgCrdnGridValuesFixedNumberOfSteps',
           'AgCrdnVectorApoapsis', 'eCrdnVolumeTimeSenseReceive',
           'IAgCrdnGridValuesFixedNumberOfSteps',
           'AgCrdnWellKnownSystems', 'AgCrdnVolumeOverTime',
           '_IAgCrdnParameterSetOrbit', 'AgCrdnLastIntervalsFilter',
           'eCrdnConditionTypeCombined', 'AgCrdnAxesRefTo',
           'IAgCrdnVectorCustomScript', 'IAgCrdnVectorApoapsis',
           'AgCrdnVectorVelocityAcceleration',
           'eCrdnSignalPathReferenceSystemCentralBodyInertial',
           'IAgCrdnWellKnownAxes', 'IAgCrdnAxesModelAttach',
           'eCrdnIntersectionSurfaceAtTerrain',
           'AgCrdnEventIntervalFixed',
           'AgCrdnEventIntervalCollectionCondition',
           '_IAgCrdnPointCentBodyIntersect',
           '_IAgCrdnAxesAlignedAndConstrained',
           'eCrdnVectorTypeFixedAtEpoch',
           '_IAgCrdnVectorFixedAtTimeInstant',
           'eCrdnIntersectionSurfaceAtAltitudeAboveEllipsoid',
           'AgCrdnCalcScalarFixedAtTimeInstant',
           'AgCrdnEventArrayConditionCrossings',
           'IAgCrdnVectorDirectionToStar', 'eCrdnKindUnknown',
           '_IAgCrdnEventArray', 'AgCrdnAngleRefTo',
           'eCrdnVolumeOverTimeDurationTypeStatic',
           '_IAgCrdnCalcScalarFunction', 'IAgCrdnEventArrayMerged',
           'eCrdnEventIntervalTypeScaled',
           'eCrdnVectorTypeReflection', 'AgCrdnPlaneLabels',
           'AgCrdnAxesAngularOffset', 'eCrdnVolumeTypeFromCalc',
           'IAgCrdnCentralBodyCollection',
           'eCrdnCalcScalarTypeFixedAtTimeInstant',
           'eCrdnSystemTypeOnSurface', 'IAgCrdnWellKnownSunSystems',
           '_IAgCrdnPlaneTrajectory', 'AgECrdnSystemType',
           'AgECrdnKind', '_IAgCrdnParameterSetFactory',
           '_IAgCrdnIntegralBasic', 'IAgCrdnVectorFixedAtEpoch',
           'IAgCrdnSignalDelay', 'IAgCrdnPlaneGroup', '_IAgCrdnRoot',
           'eCrdnPlaneTypeTrajectory', 'AgCrdnSystemOnSurface',
           'IAgCrdnConditionSetScalarThresholds',
           'eCrdnVectorTypeUnknown',
           'eCrdnVectorScaledDimensionInheritanceFromScalar',
           '_IAgCrdnVectorProjection', '_IAgCrdnPoint',
           '_IAgCrdnPointOnSurface', 'AgECrdnEventType',
           'eCrdnSmartIntervalStateExplicitDuration',
           'AgCrdnVolumeGroup',
           '_IAgCrdnPointSamplingIntervalCollection',
           '_IAgCrdnAxesLabels', 'IAgCrdnPointCBFixedOffset',
           'eCrdnAngleTypeTemplate',
           'eCrdnSignalPathReferenceSystemCustom', '_IAgCrdnInterp',
           'AgCrdnVectorPlugin', 'eCrdnIntervalSelectionMinGap',
           '_IAgCrdnPointCovarianceGrazing',
           '_IAgCrdnEventArrayFixedStep', '_IAgCrdnPointModelAttach',
           'AgCrdnEventIntervalCollectionOccurredResult',
           'eCrdnVectorTypeScaled', 'eCrdnMeanElementTheoryKozai',
           '_IAgCrdnAxesAtTimeInstant', 'IAgCrdnAxesSamplingInterval',
           'eCrdnAngleTypeBetweenVectors',
           'eCrdnVolumeLightingConditionTypePenumbra',
           'IAgCrdnEventIntervalFromIntervalList',
           'IAgCrdnEvaluateWithRateResult',
           '_IAgCrdnEventIntervalTimeOffset', '_IAgCrdnAxesFixed',
           '_IAgCrdnEventIntervalList', 'AgCrdnSystem',
           'eCrdnParameterSetTypeOrbit',
           'eCrdnMeanElementTheoryBrouwerLyddane_Short',
           'IAgCrdnVectorScalarLinearCombination',
           '_IAgCrdnVectorPeriapsis', '_IAgCrdnVolumeCombined',
           'AgCrdnAxesAttitudeFile', 'eCrdnAxesTypeCustomScript',
           '_IAgCrdnEventIntervalListFixed', 'AgCrdnAngleGroup',
           'eCrdnFileInterpolatorTypeLagrange',
           'IAgCrdnSystemTransformWithRateResult',
           'AgCrdnAngleToPlane', 'AgCrdnEventIntervalListCondition',
           'AgECrdnMeanElementTheory', 'eCrdnKindAxes',
           'IAgCrdnCondition', 'eCrdnQuadrantZX',
           'AgCrdnVectorDirectionToStar',
           '_IAgCrdnEventIntervalListFiltered',
           'eCrdnVectorTypeCrossProduct',
           'eCrdnIntegralTypeAdaptiveStep',
           'eCrdnEventIntervalTypeTimeOffset',
           'IAgCrdnGridValuesCustom',
           '_IAgCrdnEventIntervalCollectionSignaled',
           'AgCrdnAxesFactory', 'IAgCrdnAxesAlignedAndConstrained',
           'IAgCrdnFirstIntervalsFilter',
           'AgCrdnEventFindOccurrenceResult',
           'AgCrdnPointCovarianceGrazing', 'IAgCrdnPoint',
           '_IAgCrdnConditionScalarBounds',
           'IAgCrdnIntervalsVectorResult', 'eCrdnPointTypeGlint',
           'eCrdnEventIntervalTypeFixedDuration',
           'eCrdnVolumeAberrationUnknown',
           '_IAgCrdnCalcScalarFunction2Var',
           'eCrdnSamplingMethodRelativeTolerance',
           'AgCrdnWellKnownEarthSystems', 'IAgCrdnCollection',
           'IAgCrdnEventFactory', 'AgCrdnVolumeFactory',
           'eCrdnPointTypeFile', 'eCrdnPointBPlaneAsymptote',
           'eCrdnKindVector', 'AgCrdnSignalDelayBasic',
           'IAgCrdnVectorTwoPlanesIntersection', 'IAgCrdnAxesGroup',
           'eCrdnVectorTypeDerivative',
           'eCrdnParameterSetTypeTrajectory',
           '_IAgCrdnConditionFactory', 'eCrdnLightTransmissionSpeed',
           '_IAgCrdnPointFile', 'AgCrdnPruneFilter',
           'AgECrdnIntersectionSurface',
           '_IAgCrdnLastIntervalsFilter',
           'eCrdnVectorTypeScalarScaled', 'IAgCrdnCentralBody',
           'AgCrdnPointGlint', 'AgCrdnVectorReflection',
           'eCrdnInterpolatorTypeLagrange', 'AgCrdnCentralBodyRefTo',
           'IAgCrdnEventArrayFiltered', 'eCrdnAxesTypeFile',
           'eCrdnEventArrayFilterTypeSkipTimeStep',
           'AgCrdnParameterSetOrbit', 'AgCrdnPointPlugin',
           'AgCrdnPointBPlane', 'eCrdnVectorTypeAtTimeInstant',
           'eCrdnKindAngle', 'IAgCrdnDerivativeBasic',
           'IAgCrdnPlaneQuadrant', 'AgCrdnEventSmartEpoch',
           'AgCrdnVectorScalarScaled', 'eCrdnEventArrayTypeMerged',
           'IAgCrdnAxesAttitudeFile', '_IAgCrdnCalcScalarElapsedTime',
           'eCrdnSamplingMethodUnknown', 'AgCrdnEventSignaled',
           'IAgCrdnPlaneNormal', 'AgECrdnReferenceShapeType',
           'eCrdnEventArrayTypeUnknown', 'eCrdnAxesTypeOnSurface',
           'AgECrdnEventListMergeOperation', '_IAgCrdnSystem',
           'AgCrdnEventIntervalTimeOffset', '_IAgCrdnPointBPlane',
           'eCrdnTrajectoryAxesBBR', 'AgCrdnVector',
           '_IAgCrdnSystemRefTo',
           'AgCrdnEventIntervalCollectionGroup',
           '_IAgCrdnVectorScaled', 'IAgCrdnPointCommonTasks',
           'AgCrdnVectorAngleRate', 'eCrdnVolumeTimeSenseTransmit',
           'AgECrdnVolumeCombinedOperationType',
           'IAgCrdnEventIntervalListFiltered',
           '_IAgCrdnWellKnownEarthAxes', 'AgCrdnLLAPosition',
           'AgCrdnSamplingCurvatureTolerance',
           'eCrdnEventIntervalListTypeFromFile',
           'eCrdnAxesTypeLagrangeLibration',
           '_IAgCrdnAxesAngularOffset', 'AgCrdnEventArrayExtrema',
           'eCrdnVolumeResultVectorRequestMetric',
           'AgCrdnVolumeLighting', 'IAgCrdnLastIntervalsFilter',
           'eCrdnConditionSetTypeUnknown', 'IAgCrdnGapsFilter',
           'AgECrdnLagrangeLibrationPointType',
           'AgCrdnCalcScalarConstant', 'AgCrdnParameterSetTrajectory',
           '_IAgCrdnVectorDerivative',
           'AgCrdnEventIntervalCollectionFactory',
           'IAgCrdnAxesLabels', 'eCrdnSweepModeUnidirectional',
           'IAgCrdnVolumeGridBearingAlt',
           'eCrdnStartStopOptionCountStartOnly',
           'AgCrdnWellKnownAxes', '_IAgCrdnVolume',
           'eCrdnEventIntervalListTypeCondition',
           'IAgCrdnVolumeGroup', 'IAgCrdnVolumeGridCylindrical',
           'IAgCrdnEventIntervalListTimeOffset', 'AgCrdnVectorConing',
           'IAgCrdnPlaneTrajectory', '_IAgCrdnWellKnownSunAxes',
           'eCrdnCalcScalarTypeDerivative',
           'AgCrdnVectorOrbitAngularMomentum',
           'eCrdnVectorTypeConing', 'AgECrdnSampledReferenceTime',
           '_IAgCrdnCalcScalarIntegral',
           'IAgCrdnVectorLinearCombination',
           'AgCrdnVolumeFromCondition', 'eCrdnDisplayAxisY',
           '_IAgCrdnVectorScalarLinearCombination',
           'AgCrdnEventIntervalBetweenTimeInstants',
           'AgCrdnSystemFactory', '_IAgCrdnTypeInfo',
           'eCrdnSignedAngleNone', 'eCrdnPointTypeFixedInSystem',
           'IAgCrdnEventIntervalCollectionSignaled',
           '_IAgCrdnCentralBodyRefTo',
           'eCrdnConditionThresholdOptionInsideMinMax',
           'eCrdnTrajectoryAxesICR', 'IAgCrdnPointSamplingResult',
           'AgECrdnVectorScaledDimensionInheritance',
           '_IAgCrdnSamplingMethodFactory',
           'eCrdnMeanElementTheoryBrouwerLyddane_Long',
           'eCrdnEventArrayTypeFixedStep', '_IAgCrdnAxesCustomScript',
           'IAgCrdnVectorOrbitNormal', 'IAgCrdnPointPlaneProjection',
           '_IAgCrdnDerivative',
           'IAgCrdnEventIntervalBetweenTimeInstants',
           'AgCrdnCalcScalarDataElement',
           'AgCrdnVolumeFromTimeSatisfaction',
           '_IAgCrdnEventIntervalListMerged',
           'AgCrdnVectorEccentricity',
           'eCrdnEventArrayTypeConditionCrossings',
           '_IAgCrdnEventIntervalCollectionOccurredResult',
           'AgECrdnPlaneType', 'eCrdnThreshConvergeSenseBelow',
           'eCrdnIntegrationWindowTypeSlidingWindow',
           'IAgCrdnVectorScalarScaled',
           'eCrdnStartStopOptionCountStartStop',
           'eCrdnPlaneTypeTriad',
           'eCrdnIntegrationWindowTypeCumulativeToCurrent',
           'eCrdnConditionThresholdOptionBelowMax',
           'eCrdnFileInterpolatorTypeHoldNearest',
           'eCrdnSampledReferenceTimeStopOfIntervalList',
           '_IAgCrdnWellKnownSystems', 'AgCrdnIntegral',
           'eCrdnConditionCombinedOperationTypeMINUS',
           'AgCrdnParameterSetFactory', 'AgCrdnAngleRotation',
           'AgCrdnTemplate', 'IAgCrdnEventIntervalListFile',
           '_IAgCrdnEventIntervalCollection',
           'eCrdnVolumeGridTypeConstrained', '_IAgCrdnParameterSet',
           'eCrdnCalcScalarTypePlugin',
           'eCrdnParameterSetTypeGroundTrajectory',
           'eCrdnVolumeCombinedOperationTypeAND',
           'AgCrdnCalcScalarAngle', '_IAgCrdnSamplingFixedStep',
           '_IAgCrdnAngleFactory', 'eCrdnAxesTypeTrajectory',
           'eCrdnQuadrantYX', 'eCrdnInterpolatorInvalid',
           'IAgCrdnVolumeFromCondition',
           'eCrdnVectorTypeOrbitAngularMomentum',
           'AgCrdnEventIntervalListGroup', 'eCrdnKindInvalid',
           'AgCrdnAxesModelAttach', 'eCrdnVolumeGridTypeLatLonAlt',
           'AgCrdnAxesGroup', 'AgCrdnFirstIntervalsFilter',
           'eCrdnSignedAngleNegative', 'eCrdnVolumeGridTypeCartesian',
           'AgECrdnDimensionInheritance',
           'IAgCrdnPointCovarianceGrazing',
           'IAgCrdnPointPlaneIntersection',
           '_IAgCrdnGridValuesFixedStep', 'AgCrdnRoot',
           'eCrdnPointTypePlugin', '_IAgCrdnVolumeFromCondition',
           'AgCrdnEventArraySignaled', 'AgCrdnAxesLabels',
           'eCrdnVolumeTypeFromCondition', 'IAgCrdnAngleFindResult',
           'IAgCrdnAxesBPlane', 'eCrdnKindEventIntervalList',
           'eCrdnSignalPathReferenceSystemSolarSystemBarycenter',
           'IAgCrdnPointGroup', 'IAgCrdnPlane',
           'eCrdnVolumeTypeCombined', 'IAgCrdnPointPlugin',
           'eCrdnTrajectoryAxesRIC',
           'eCrdnSampledReferenceTimeStartOfEachInterval',
           'AgECrdnSurfaceType', 'AgECrdnExtremumConstants',
           'IAgCrdnInterp', '_IAgCrdnParameterSetGroundTrajectory',
           'IAgCrdnCalcScalarCustom', 'AgECrdnIntervalDurationKind',
           'AgCrdnCollection', 'eCrdnKindEventIntervalCollection',
           'IAgCrdnEventIntervalListFixed',
           '_IAgCrdnIntervalsVectorResult',
           '_IAgCrdnConditionSetFactory', '_IAgCrdnVectorFixedInAxes',
           'AgCrdnEventArrayFactory', 'IAgCrdnConditionScalarBounds',
           'eCrdnDimensionInheritanceFromY',
           'IAgCrdnVectorFixedAtTimeInstant',
           'IAgCrdnCalcScalarGroup', 'IAgCrdnVolumeLighting',
           'eCrdnEventIntervalListTypeFixed',
           'eCrdnEventIntervalCollectionTypeCondition',
           'eCrdnParameterSetTypeVector', 'eCrdnEventTypeExtremum',
           'IAgCrdnEventIntervalScaled', '_IAgCrdnVectorPlugin',
           'AgCrdnEventIntervalFromIntervalList',
           'eCrdnSmartEpochStateExplicit',
           '_IAgCrdnVolumeGridCylindrical', 'eCrdnPointTypeBPlane',
           'eCrdnFileInterpolatorInvalid',
           '_IAgCrdnAxesSamplingResult',
           'eCrdnVolumeResultVectorRequestNativePos',
           'IAgCrdnTemplate', 'eCrdnVectorTypeLineOfNodes',
           'AgCrdnPointAtTimeInstant', 'AgECrdnAngleType',
           'eCrdnSurfaceDetic', 'AgCrdnPlaneRefTo',
           '_IAgCrdnVectorDirectionToStar', 'eCrdnVolumeTypeLighting',
           'eCrdnEventTypeEpoch', 'IAgCrdnAxesCommonTasks',
           '_IAgCrdnProvider', 'eCrdnPruneFilterLastIntervals',
           'AgECrdnEventIntervalListType',
           'eCrdnPruneFilterRelativeSatisfactionIntervals',
           'IAgCrdnCalcScalarElapsedTime', 'IAgCrdnEventSignaled',
           'eCrdnVolumeResultVectorRequestSatisfaction',
           'IAgCrdnConditionCombined',
           'eCrdnConditionThresholdOptionAboveMin',
           '_IAgCrdnVectorCross', 'AgECrdnVolumeOverTimeDurationType',
           'AgCrdnVectorFactory',
           '_IAgCrdnSatisfactionConditionFilter',
           '_IAgCrdnSystemFactory', 'AgCrdnSystemRefTo',
           'AgCrdnCalcScalarFactory', 'eCrdnPlaneTypeQuadrant',
           'eCrdnConditionTypeUnknown',
           'IAgCrdnCalcScalarSurfaceDistanceBetweenPoints',
           '_IAgCrdnCalcScalarSurfaceDistanceBetweenPoints',
           'eCrdnKindEventArray', 'eCrdnAngleTypeBetweenPlanes',
           'IAgCrdnEventTimeOffset', '_IAgCrdnEventSignaled',
           'eCrdnEventArrayTypeFiltered', '_IAgCrdnEventArrayMerged',
           '_IAgCrdnAxesBPlane', '_IAgCrdnAngle',
           'IAgCrdnAxesSpinning', 'IAgCrdnEventArrayGroup',
           'IAgCrdnCalcScalarAngle', 'eCrdnSatisfactionCrossingOut',
           'eCrdnSampledReferenceTimeStopOfEachInterval',
           'IAgCrdnVolumeGridCartesian', 'AgECrdnVectorType',
           'AgCrdnPlaneQuadrant', 'IAgCrdnGridValuesFixedStep',
           'eCrdnVectorTypeVelocity', 'AgCrdnMethodCallResult',
           'eCrdnCalcScalarTypeElapsedTime',
           'AgECrdnVolumeAberrationType', 'eCrdnVolumeTypeInview',
           'eCrdnInterpolatorTypeHermite', 'eCrdnVolumeTypeOverTime',
           'eCrdnIntegralTypeFixedStepTrapz',
           'AgCrdnVectorOrbitNormal', 'eCrdnEventTypeUnknown',
           'IAgCrdnAxesRefTo', 'eCrdnPointTypeCentralBodyIntersect',
           'AgCrdnCalcScalarDerivative', 'eCrdnPruneFilterUnknown',
           'AgECrdnSaveDataOption', 'AgCrdnVolumeGridCartesian',
           'IAgCrdnCalcScalarFixedAtTimeInstant',
           'eCrdnCalcScalarTypeFile', 'AgCrdnEventIntervalScaled',
           'AgCrdnVolumeGridCylindrical', '_IAgCrdnAxesPlugin',
           'IAgCrdnVectorConing', 'AgECrdnQuadrantType',
           '_IAgCrdnPointCBFixedOffset',
           'eCrdnVolumeLightingConditionTypeSunlight',
           '_IAgCrdnCalcScalarConstant',
           'eCrdnEventIntervalListTypeFiltered',
           'IAgCrdnCalcScalarDerivative',
           'eCrdnThreshConvergeSenseSimple',
           'eCrdnVolumeAberrationAnnual', '_IAgCrdnLightTimeDelay',
           'eCrdnSmartIntervalStateStartDuration',
           'AgECrdnVolumeFromGridEdgeType',
           'eCrdnMeanElementTheoryOsculating',
           'IAgCrdnVolumeGridFactory',
           'eCrdnSmartIntervalStateExplicit', '_IAgCrdnEvent',
           'AgCrdnAxesPlugin', 'eCrdnThreshConvergeSenseAbove',
           'eCrdnIntervalDurationKindAtMost', 'IAgCrdnAngleGroup',
           'eCrdnLagrangeLibrationPointTypeL5', '_IAgCrdnPointRefTo',
           'eCrdnVolumeCombinedOperationTypeMINUS',
           'IAgCrdnEventIntervalCollectionGroup',
           'IAgCrdnVectorModelAttach', 'AgCrdnWellKnownEarthAxes',
           'AgCrdnCentralBodyCollection',
           'eCrdnVolumetricGridValuesMethodMethodCustomValues',
           'IAgCrdnEvent', 'eCrdnSatisfactionCrossingIn',
           '_IAgCrdnParameterSetAttitude', 'AgCrdnVectorDisplacement',
           'IAgCrdnVectorReflection', '_IAgCrdnFindTimesResult',
           'AgCrdnEventInterval', 'IAgCrdnVolumeFromTimeSatisfaction',
           'AgECrdnSignedAngleType',
           'AgCrdnAxesAlignedAndConstrained',
           'IAgCrdnSignalDelayBasic', 'AgCrdnEventArrayFiltered',
           '_IAgCrdnEventArrayStartStopTimes',
           'eCrdnPlaneTypeUnknown', 'AgCrdnVectorCross',
           'AgCrdnVectorProjectAlongVector',
           'IAgCrdnEventIntervalListFactory',
           'AgCrdnEventIntervalListMerged', 'eCrdnAxesTypePlugin',
           '_IAgCrdnCalcScalarDataElement',
           '_IAgCrdnAxesSamplingInterval',
           '_IAgCrdnVectorProjectAlongVector',
           'AgCrdnEventArrayStartStopTimes',
           '_IAgCrdnEventIntervalListFactory',
           '_IAgCrdnSamplingCurvatureTolerance',
           '_IAgCrdnGridValuesMethod',
           'eCrdnIntervalSelectionFromStart',
           '_IAgCrdnPointFixedInSystem', 'IAgCrdnVectorRefTo',
           'AgCrdnParameterSetGroup',
           'eCrdnSmartIntervalStateStartStop',
           'IAgCrdnVolumeOverTime', 'IAgCrdnEventArrayFixedTimes',
           'AgECrdnSweepMode', '_IAgCrdnInstance', 'IAgCrdnAxes',
           'AgCrdnSignalDelay', '_IAgCrdnEventIntervalListCondition',
           'AgCrdnWellKnownSunAxes', 'IAgCrdnParameterSetTrajectory',
           'eCrdnEventListMergeOperationXOR',
           '_IAgCrdnIntervalVectorCollection', 'AgCrdnVolumeFromGrid',
           'AgCrdnConditionSetFactory', 'AgCrdnEventIntervalListFile',
           'AgCrdnCalcScalarIntegral',
           'eCrdnVectorTypeModelAttachment', 'AgCrdnAxesTrajectory',
           'eCrdnCalcScalarTypeCustomScript',
           'IAgCrdnEventIntervalGroup',
           'AgECrdnVolumetricGridValuesMethodType',
           'IAgCrdnSystemCommonTasks', 'eCrdnAxesTypeFromFile',
           'eCrdnEventListMergeOperationMINUS',
           '_IAgCrdnVolumeGridResult', 'AgCrdnParameterSetVector',
           '_IAgCrdnVectorLineOfNodes', 'IAgCrdnConvergeBasic',
           'AgCrdnPointFactory', 'AgCrdnVolumeCombined',
           '_IAgCrdnAxesOnSurface', '_IAgCrdnEventIntervalSignaled',
           'AgCrdnVolumeGridSpherical',
           'AgECrdnSignalPathReferenceSystem',
           'IAgCrdnVectorFindInAxesWithRateResult',
           'IAgCrdnPointLocateInSystemWithRateResult',
           'IAgCrdnVectorScaled', 'eCrdnFileInterpolatorTypeHermite',
           'eCrdnVectorTypeAngularVelocity',
           'eCrdnConditionThresholdOptionOutsideMinMax',
           'AgCrdnTypeInfo', 'eCrdnVolumeTimeSenseUnknown',
           '_IAgCrdnVectorFactory',
           'eCrdnEventIntervalListTypeTimeOffset',
           'IAgCrdnAngleFactory',
           'eCrdnVolumeOverTimeDurationTypeCumulativeFromCurrent',
           'eCrdnSaveDataOptionApplicationSettings',
           '_IAgCrdnPruneFilterFactory', 'AgCrdnInterp',
           'IAgCrdnConditionSetEvaluateResult',
           'IAgCrdnPruneFilterFactory',
           'AgCrdnCalcScalarVectorMagnitude',
           'AgCrdnSamplingRelativeTolerance',
           'AgCrdnVectorScalarLinearCombination',
           'IAgCrdnVectorVelocityAcceleration',
           'AgECrdnEventArrayFilterType', 'eCrdnKindPlane',
           'AgECrdnPruneFilter', 'eCrdnSweepModeBidirectional',
           'AgECrdnSmartIntervalState', 'IAgCrdnParameterSetFactory',
           'AgECrdnInterpolatorType', 'AgCrdnVectorGroup',
           'IAgCrdnCentralBodyRefTo',
           'AgCrdnVectorFixedAtTimeInstant',
           'AgCrdnIntervalListResult',
           'eCrdnParameterSetTypeAttitude',
           'AgCrdnIntervalVectorCollection',
           'AgCrdnSamplingMethodFactory', '_IAgCrdnCondition',
           'AgECrdnIntegralType', 'eCrdnAngleTypeRotation',
           'eCrdnStartStopOptionCountStopOnly', 'AgCrdnInstance',
           'AgECrdnVolumeType', 'IAgCrdnEventArray', 'AgCrdnPoint',
           '_IAgCrdnVectorEccentricity',
           'eCrdnEventIntervalTypeFixed',
           'eCrdnVolumeCombinedOperationTypeXOR',
           'eCrdnEventListMergeOperationAND', 'AgECrdnSpeedOptions',
           'eCrdnConditionSetTypeScalarThresholds',
           'eCrdnVolumeLightingConditionTypeUmbra',
           '_IAgCrdnEventInterval', 'IAgCrdnEventGroup',
           '_IAgCrdnEventIntervalFixedDuration',
           'eCrdnEventArrayTypeSignaled',
           'AgCrdnCalcScalarElapsedTime',
           'AgCrdnCalcScalarSurfaceDistanceBetweenPoints',
           'eCrdnCalcScalarTypeIntegral', 'IAgCrdnEventArrayFactory',
           '_IAgCrdnSystemOnSurface', 'IAgCrdnEventIntervalListGroup',
           '_IAgCrdnVectorScalarScaled', 'AgCrdnAngleFactory',
           'eCrdnEventIntervalListTypeScaled', '_IAgCrdnEventEpoch',
           'AgCrdnCalcScalarFunction', 'AgCrdnEventIntervalListFixed',
           '_IAgCrdnPointSamplingResult',
           'eCrdnPointTypePlaneProjection',
           'IAgCrdnEventArraySignaled', 'AgCrdnPlaneTrajectory',
           'eCrdnVolumeFromGridEdgeTypeMaskPoints',
           'AgCrdnDerivativeBasic', 'IAgCrdnVectorFindInAxesResult',
           'IAgCrdnPlaneFindInAxesResult',
           'IAgCrdnEventIntervalCollectionCondition',
           'AgCrdnGridValuesFixedStep', 'IAgCrdnWellKnownSunAxes',
           'IAgCrdnAngleFindAngleResult', 'IAgCrdnCalcScalarFile',
           'eCrdnVolumeFromGridEdgeTypeMaskVoxels',
           'eCrdnPointTypeCovarianceGrazing',
           'eCrdnCalcScalarTypeFunction', 'IAgCrdnPlaneFactory',
           'IAgCrdnConditionSet', 'IAgCrdnSystemTransformResult',
           'AgCrdnConditionCombined', 'eCrdnVolumeClockHostTarget',
           'eCrdnPointTypeFixedOnCentralBody', 'IAgCrdnConverge',
           'IAgCrdnVectorFixedInAxes', 'AgCrdnConvergeBasic',
           'eCrdnVectorTypeDisplacement',
           'AgCrdnPointLagrangeLibration',
           'IAgCrdnPointAtTimeInstant',
           'AgCrdnEventIntervalCollectionLighting',
           '_IAgCrdnWellKnownSunSystems',
           '_IAgCrdnVectorFixedAtEpoch',
           'eCrdnVolumeGridTypeSpherical', 'eCrdnSaveDataOptionNo',
           'IAgCrdnMethodCallResult', 'eCrdnPlaneTypeTemplate',
           '_IAgCrdnVolumeGrid', '_IAgCrdnSystemAssembled',
           'AgCrdnParameterSetAttitude', 'IAgCrdnAxesTrajectory',
           'AgCrdnAxesCommonTasks', 'AgCrdnEventIntervalListScaled',
           '_IAgCrdnVectorOrbitAngularMomentum', 'IAgCrdnIntegral',
           'AgECrdnDirectionType', 'eCrdnPruneFilterFirstIntervals',
           'AgCrdnCalcScalarFunction2Var',
           'AgCrdnVectorTwoPlanesIntersection',
           'eCrdnVolumeAberrationTotal', '_IAgCrdnPlaneFactory',
           'IAgCrdnVectorAngleRate',
           'IAgCrdnPlaneFindInAxesWithRateResult',
           'eCrdnAxesTypeSpinning', '_IAgCrdnPointPlaneProjection',
           '_IAgCrdnVolumeLighting', 'IAgCrdnCalcScalarIntegral',
           'IAgCrdnIntervalListResult', 'eCrdnVolumeGridTypeUnknown',
           'AgCrdnEventIntervalListFactory', 'AgCrdnSamplingBasic',
           'eCrdnIntegrationWindowTypeTotal', 'IAgCrdnCalcScalar',
           'AgCrdnWellKnownSunSystems',
           'AgCrdnEventIntervalFixedDuration', 'AgCrdnEvaluateResult',
           'AgCrdnVectorCustomScript',
           'IAgCrdnSamplingCurvatureTolerance',
           'eCrdnLagrangeLibrationPointTypeL1',
           'IAgCrdnEventIntervalCollection',
           'eCrdnTrajectoryAxesLVLH', 'eCrdnAxesTypeModelAttachment',
           'AgCrdnPointGrazing', 'IAgCrdnVolumeFromGrid',
           'IAgCrdnSamplingFixedStep', 'AgECrdnSatisfactionCrossing',
           '_IAgCrdnCalcScalarFactory',
           '_IAgCrdnParameterSetTrajectory', '_IAgCrdnPointFactory',
           'IAgCrdnWellKnownEarthSystems', 'eCrdnKindVolume',
           'IAgCrdnEventSmartEpoch', 'AgCrdnVectorRefTo',
           'AgCrdnPlaneTriad', '_IAgCrdnAxes',
           '_IAgCrdnEventIntervalFactory', 'IAgCrdnIntegralBasic',
           'IAgCrdnEventArrayFixedStep', 'IAgCrdnTimeProperties',
           'AgCrdnAxesAtTimeInstant', '_IAgCrdnInterval',
           'AgCrdnCalcScalarPlugin', 'IAgCrdnCalcScalarPlugin',
           'eCrdnKindEvent', 'AgCrdnVolumeGrid',
           'AgCrdnVolumeGridGroup', 'AgCrdnPointPlaneProjection',
           'AgCrdnConditionSetScalarThresholds',
           'eCrdnSamplingMethodCurvatureTolerance',
           'eCrdnIntervalSelectionFromEnd',
           'AgCrdnAxesSamplingIntervalCollection',
           'IAgCrdnPlaneTriad', 'eCrdnVectorTypeAngleRate',
           'eCrdnVectorTypeDirectionToStar',
           'eCrdnVectorTypeScalarLinearCombination',
           '_IAgCrdnPointCommonTasks', 'eCrdnExtremumMinimum',
           '_IAgCrdnEventIntervalListSignaled',
           'AgCrdnVolumeGridFactory', 'eCrdnPointTypeOnSurface',
           'eCrdnSignalSenseTransmit', 'AgCrdnSamplingMethod',
           'eCrdnCustomTransmissionSpeed',
           'IAgCrdnVectorAngularVelocity',
           'AgCrdnPointSamplingResult', 'IAgCrdnParameterSetGroup',
           'IAgCrdnAngleDihedral', 'IAgCrdnPointGrazing',
           'AgCrdnEventArrayMerged', 'eCrdnSurfaceCentric',
           'AgCrdnAxesLagrangeLibration', 'AgCrdnPruneFilterFactory',
           'eCrdnAxesTypeBPlane',
           'eCrdnEventArrayFilterTypeSkipCount',
           'eCrdnVectorScaledDimensionInheritanceNone',
           'eCrdnSatisfactionCrossingNone',
           'AgCrdnEventIntervalCollection',
           'IAgCrdnEventIntervalFixed', 'eCrdnPointTypeUnknown',
           'AgCrdnEventArray',
           'eCrdnEventIntervalTypeFromIntervalList',
           '_IAgCrdnPointGlint',
           'eCrdnVolumeLightingConditionTypeUndefined',
           '_IAgCrdnLLAPosition',
           'eCrdnVolumeOverTimeDurationTypeSlidingWindow',
           'AgECrdnVolumeClockHostType', '_IAgCrdnSignalDelay',
           'AgCrdnPointCBFixedOffset', 'IAgCrdnVolumeGridResult',
           'IAgCrdnEventStartStopTime',
           'eCrdnDimensionInheritanceFromX',
           'IAgCrdnCalcScalarFunction2Var',
           '_IAgCrdnVolumeGridFactory', 'AgECrdnEventArrayType',
           '_IAgCrdnCalcScalarFile', 'eCrdnEventTypeTimeOffset',
           'AgCrdnSystemAssembled', 'IAgCrdn', 'AgCrdnVolume',
           'AgCrdnAxesSamplingResult', '_IAgCrdnPointAtTimeInstant',
           'IAgCrdnPlaneRefTo', 'AgECrdnCalcScalarType',
           '_IAgCrdnEventArrayExtrema',
           'eCrdnSampledReferenceTimeReferenceEvent',
           'IAgCrdnSystemFindInSystemResult',
           'eCrdnAxesTypeAlignedAndConstrained', '_IAgCrdnPlaneRefTo',
           'IAgCrdnVolumeGridSpherical',
           '_IAgCrdnVectorVelocityAcceleration',
           '_IAgCrdnRelativeSatisfactionConditionFilter',
           '_IAgCrdnPointSamplingInterval', '_IAgCrdnPlaneQuadrant',
           '_IAgCrdnEvaluateWithRateResult', 'AgCrdnVolumeGridResult',
           '_IAgCrdnVolumeGridConstrained',
           '_IAgCrdnVectorCustomScript', 'AgECrdnSamplingMethod',
           'eCrdnVolumeResultVectorRequestPos',
           'IAgCrdnVolumeFactory', 'eCrdnPointTypePlaneIntersection',
           'IAgCrdnPlaneLabels',
           'eCrdnIntersectionSurfaceAtCentralBodyEllipsoid',
           'IAgCrdnPointFactory', 'AgECrdnIntervalSelection',
           'AgCrdnVectorLinearCombination', 'eCrdnVolumeTypeFromGrid',
           'AgECrdnEventIntervalCollectionType',
           'eCrdnEventIntervalListTypeFile',
           'IAgCrdnEventIntervalListCondition',
           'IAgCrdnAngleRotation', 'AgCrdnPointModelAttach',
           'AgCrdnConditionFactory', 'eCrdnSamplingMethodFixedStep',
           'AgCrdnConditionSetGroup', 'eCrdnReferenceShapeMSL',
           '_IAgCrdnAxesAttitudeFile', '_IAgCrdnPlane',
           'AgCrdnEvaluateWithRateResult', 'AgCrdnAxesFixedAtEpoch',
           'AgCrdnGridValuesMethod', 'IAgCrdnAngle',
           'IAgCrdnEventIntervalCollectionOccurredResult',
           'eCrdnVolumeOverTimeDurationTypeCumulativeToCurrent',
           'IAgCrdnIntervalsFilter', 'eCrdnEventListMergeOperationOR',
           'eCrdnEventIntervalTypeSignaled',
           'IAgCrdnPlaneFindInSystemWithRateResult',
           'IAgCrdnEventIntervalResult',
           'eCrdnEventIntervalTypeUnknown',
           'AgCrdnEventStartStopTime', 'IAgCrdnVectorDerivative',
           'IAgCrdnAxesFixed',
           'eCrdnVolumetricGridValuesMethodMethodUnknown',
           'IAgCrdnLLAPosition', 'IAgCrdnSystemAssembled',
           'AgCrdnIntervalsVectorResult',
           'IAgCrdnSatisfactionConditionFilter',
           'IAgCrdnPointModelAttach', 'IAgCrdnFindTimesResult',
           'IAgCrdnSystemGroup', 'AgCrdnVolumeInview',
           '_IAgCrdnConditionCombined',
           'eCrdnVolumeGridTypeBearingAlt',
           'IAgCrdnCalcScalarDataElement',
           'IAgCrdnEventIntervalCollectionLighting',
           'eCrdnVectorTypeCustomScript', 'IAgCrdnEventEpoch',
           'eCrdnPruneFilterGaps', 'AgECrdnIntegrationWindowType',
           'eCrdnKindVolumeGrid', 'eCrdnAxesTypeFixedAtEpoch',
           'AgECrdnTrajectoryAxesType',
           '_IAgCrdnEventIntervalCollectionLighting',
           'IAgCrdnEventArrayConditionCrossings',
           '_IAgCrdnMethodCallResult',
           'AgECrdnVolumeLightingConditionsType',
           '_IAgCrdnAngleDihedral', 'eCrdnVectorTypeOrbitNormal',
           'eCrdnSystemTypeAssembled', 'eCrdnPointTypeAtTimeInstant',
           'AgCrdnPointFixedInSystem',
           'eCrdnFileInterpolatorTypeHoldPrevious',
           'AgECrdnStartStopOption', '_IAgCrdnEventStartStopTime',
           'AgCrdnConditionScalarBounds',
           'IAgCrdnEventIntervalListScaled',
           'IAgCrdnSamplingRelativeTolerance', 'eCrdnKindPoint',
           '_IAgCrdnVector', 'AgCrdnVolumeGridBearingAlt',
           'eCrdnKindConditionSet', 'AgECrdnEventIntervalType',
           '_IAgCrdnSamplingBasic', 'IAgCrdnVectorGroup',
           'AgCrdnGridValuesFixedNumberOfSteps',
           'AgCrdnVectorPeriapsis', 'eCrdnIntervalSelectionMaxGap',
           'AgECrdnThreshConvergeSense', '_IAgCrdnCentralBody',
           'AgCrdnAxesSamplingInterval',
           'AgCrdnEventIntervalSmartInterval',
           '_IAgCrdnEventIntervalScaled', 'IAgCrdnTypeInfo',
           'eCrdnAxesTypeAngularOffset', 'IAgCrdnInstance',
           'eCrdnReferenceShapeTerrain', '_IAgCrdnCalcScalarAngle',
           '_IAgCrdnFirstIntervalsFilter',
           '_IAgCrdnVectorAngularVelocity',
           'AgECrdnFileInterpolatorType',
           'AgCrdnVectorAngularVelocity', 'IAgCrdnSampling',
           'IAgCrdnEvaluateResult', 'IAgCrdnSamplingBasic',
           'eCrdnAxesTypeTemplate', 'eCrdnPointTypeLagrangeLibration',
           '_IAgCrdnInterpBasic', 'AgCrdnEventGroup',
           'IAgCrdnAngleFindAngleWithRateResult',
           'AgCrdnEventArrayFixedTimes', 'IAgCrdnVolumeInview',
           'IAgCrdnVectorDisplacement', 'AgCrdnPointSamplingInterval',
           '_IAgCrdnVectorTwoPlanesIntersection',
           '_IAgCrdnVectorReflection', 'AgCrdnEventIntervalSignaled',
           'IAgCrdnAxesPlugin', 'eCrdnKindCalcScalar',
           'AgCrdnAngleBetweenPlanes', 'eCrdnVectorTypeEccentricity',
           'IAgCrdnEventIntervalTimeOffset',
           'eCrdnLagrangeLibrationPointTypeL4', '_IAgCrdnConverge',
           '_IAgCrdnVectorOrbitNormal',
           'IAgCrdnVectorProjectAlongVector', 'IAgCrdnContext',
           'AgCrdnAxesSpinning',
           '_IAgCrdnEventArrayConditionCrossings',
           'IAgCrdnEventExtremum', 'eCrdnVectorTypeTemplate',
           'AgECrdnConditionSetType', 'AgCrdnEventArrayFixedStep',
           'AgECrdnVolumeTimeSenseType', '_IAgCrdnVolumeInview',
           'eCrdnParameterSetTypeUnknown',
           'eCrdnVectorScaledDimensionInheritanceFromVector',
           'AgCrdnGapsFilter',
           'AgCrdnConditionSetEvaluateWithRateResult',
           'eCrdnPointTypeGrazing', '_IAgCrdnPlaneTriad',
           'IAgCrdnVectorProjection', 'IAgCrdnAxesFindInAxesResult',
           'IAgCrdnGridCoordinateDefinition',
           'AgCrdnSamplingFixedStep', 'AgCrdnVolumeFromCalc',
           'eCrdnVolumeCombinedOperationTypeOR',
           'eCrdnCalcScalarTypeAngle',
           'AgCrdnEventIntervalListSignaled', 'IAgCrdnPruneFilter',
           'AgCrdnAngle', '_IAgCrdnCalcScalarCustom',
           'AgCrdnConverge', 'AgCrdnGridCoordinateDefinition',
           '_IAgCrdnConditionSet',
           '_IAgCrdnConditionSetEvaluateWithRateResult',
           '_IAgCrdnVolumeOverTime', '_IAgCrdnEventExtremum',
           'eCrdnSmartIntervalStateImplicit',
           'eCrdnKindEventInterval', 'IAgCrdnPointOnSurface',
           'AgCrdnProvider',
           'eCrdnIntegrationWindowTypeCumulativeFromCurrent',
           'eCrdnPlaneTypeNormal', 'AgCrdnVectorDerivative',
           'IAgCrdnRefTo', 'IAgCrdnPointBPlane',
           '_IAgCrdnAxesCommonTasks', 'IAgCrdnEventArrayExtrema',
           'eCrdnPointTypeFromFile', '_IAgCrdnCalcScalar',
           'IAgCrdnEventIntervalFixedDuration',
           'AgECrdnVolumeGridType', 'AgCrdnEventIntervalListFiltered',
           'eCrdnEventIntervalListTypeUnknown',
           'eCrdnEventTypeSmartEpoch', '_IAgCrdnPointPlugin',
           'AgCrdnIntegralBasic', 'eCrdnCalcScalarTypeDataElement',
           'IAgCrdnEventIntervalFactory',
           '_IAgCrdnEventIntervalListTimeOffset',
           'IAgCrdnConditionSetFactory',
           'eCrdnEventIntervalListTypeMerged',
           '_IAgCrdnVolumeFromTimeSatisfaction',
           'eCrdnEventIntervalListTypeSignaled',
           'IAgCrdnPointCentBodyIntersect', 'AgECrdnParameterSetType',
           'IAgCrdnCalcScalarConstant', 'AgCrdnCalcScalarCustom',
           'eCrdnSampledReferenceTimeStartOfIntervalList',
           'eCrdnVectorTypePeriapsis',
           'eCrdnLagrangeLibrationPointTypeL3', 'AgCrdnPlaneGroup',
           'AgECrdnSignalSense', 'AgCrdnCentralBody',
           '_IAgCrdnIntegral', 'IAgCrdnSystem',
           '_IAgCrdnConvergeBasic', 'AgCrdnSampling',
           'eCrdnQuadrantXZ', 'IAgCrdnAxesSamplingIntervalCollection',
           'IAgCrdnAxesTransformWithRateResult', 'IAgCrdnDerivative',
           'eCrdnVectorTypeProjection',
           'IAgCrdnParameterSetGroundTrajectory', 'IAgCrdnAngleRefTo',
           '_IAgCrdnIntervalsFilter', 'eCrdnCalcScalarTypeUnknown',
           'AgECrdnConditionCombinedOperationType', 'eCrdnQuadrantYZ',
           '_IAgCrdnEventSmartEpoch', 'AgECrdnConditionType',
           '_IAgCrdnVectorApoapsis',
           'eCrdnEventIntervalCollectionTypeLighting',
           'IAgCrdnVolume', 'eCrdnIntervalSelectionMinDuration',
           '_IAgCrdnVectorModelAttach',
           'eCrdnSmartEpochStateImplicit', '_IAgCrdnPlaneLabels',
           'IAgCrdnEventIntervalListMerged',
           'eCrdnConditionCombinedOperationTypeOR', 'AgCrdnInterval',
           'IAgCrdnSystemOnSurface', '_IAgCrdnEventArrayFixedTimes',
           'eCrdnEventArrayTypeExtrema', 'AgCrdnEventIntervalList',
           '_IAgCrdnSampling', 'IAgCrdnProvider',
           'AgCrdnVolumeGridConstrained',
           'IAgCrdnPlaneFindInSystemResult',
           'eCrdnCalcScalarTypeConstant', 'AgCrdnIntervalCollection',
           'AgCrdnCalcScalar', '_IAgCrdnAxesTrajectory',
           '_IAgCrdnIntervalListResult',
           '_IAgCrdnEventIntervalBetweenTimeInstants',
           '_IAgCrdnSamplingRelativeTolerance',
           'eCrdnConditionTypeScalarBounds', 'AgECrdnAxesType',
           'IAgCrdnVector', 'IAgCrdnEventIntervalList',
           '_IAgCrdnEventIntervalListFile',
           'IAgCrdnEventIntervalCollectionFactory',
           'IAgCrdnEventArrayStartStopTimes',
           'eCrdnVolumeTypeUnknown',
           'IAgCrdnAxesFindInAxesWithRateResult',
           'eCrdnSignalSenseReceive', 'AgCrdnEventIntervalResult',
           'AgCrdnPointOnSurface', 'IAgCrdnParameterSet',
           'IAgCrdnCalcScalarFunction', 'AgCrdnVectorScaled',
           'AgECrdnPointBPlaneType']
from comtypes import _check_version; _check_version('1.1.11', 1553863642.0)
