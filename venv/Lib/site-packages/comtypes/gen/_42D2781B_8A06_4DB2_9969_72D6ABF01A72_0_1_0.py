# -*- coding: mbcs -*-
typelib_path = 'D:\\software\\STK\\bin\\AgStkGraphics.dll'
_lcid = 0 # change this if required
from ctypes import *
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import GUID
from ctypes import HRESULT
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
from comtypes.automation import VARIANT
from comtypes.automation import _midlSAFEARRAY
from ctypes.wintypes import VARIANT_BOOL
import comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0
from comtypes import BSTR
import comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0
from comtypes import IUnknown
from comtypes import DISPMETHOD, DISPPROPERTY, helpstring
from comtypes import CoClass


class _IAgStkGraphicsRendererTexture2D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsRendererTexture2D'
    _iid_ = GUID('{F937C30A-5981-4129-A4FE-DA3BB3F41C0B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsRendererTextureTemplate2D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Template object containing attributes required to create a 2D texture.'
    _iid_ = GUID('{46FBFC4C-29B8-49C7-BEB7-77BC5D836F10}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsRendererTexture2D._methods_ = [
    COMMETHOD([dispid(17901), helpstring('Gets a template from which the texture was created.'), 'propget'], HRESULT, 'Template',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRendererTextureTemplate2D)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsRendererTexture2D implementation
##class _IAgStkGraphicsRendererTexture2D_Impl(object):
##    @property
##    def Template(self):
##        'Gets a template from which the texture was created.'
##        #return ppRetVal
##

class IAgStkGraphicsOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window.'
    _iid_ = GUID('{B7007235-5A52-450B-83AF-1E8080D3B0BE}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsScreenOverlayUnit'
eStkGraphicsScreenOverlayUnitPixels = 0
eStkGraphicsScreenOverlayUnitFraction = 1
AgEStkGraphicsScreenOverlayUnit = c_int # enum

# values for enumeration 'AgEStkGraphicsScreenOverlayOrigin'
eStkGraphicsScreenOverlayOriginBottomLeft = 0
eStkGraphicsScreenOverlayOriginBottomCenter = 1
eStkGraphicsScreenOverlayOriginBottomRight = 2
eStkGraphicsScreenOverlayOriginCenterLeft = 3
eStkGraphicsScreenOverlayOriginCenter = 4
eStkGraphicsScreenOverlayOriginCenterRight = 5
eStkGraphicsScreenOverlayOriginTopLeft = 6
eStkGraphicsScreenOverlayOriginTopCenter = 7
eStkGraphicsScreenOverlayOriginTopRight = 8
AgEStkGraphicsScreenOverlayOrigin = c_int # enum

# values for enumeration 'AgEStkGraphicsScreenOverlayPinningOrigin'
eStkGraphicsScreenOverlayPinningOriginBottomLeft = 0
eStkGraphicsScreenOverlayPinningOriginBottomCenter = 1
eStkGraphicsScreenOverlayPinningOriginBottomRight = 2
eStkGraphicsScreenOverlayPinningOriginCenterLeft = 3
eStkGraphicsScreenOverlayPinningOriginCenter = 4
eStkGraphicsScreenOverlayPinningOriginCenterRight = 5
eStkGraphicsScreenOverlayPinningOriginTopLeft = 6
eStkGraphicsScreenOverlayPinningOriginTopCenter = 7
eStkGraphicsScreenOverlayPinningOriginTopRight = 8
eStkGraphicsScreenOverlayPinningOriginAutomatic = 9
AgEStkGraphicsScreenOverlayPinningOrigin = c_int # enum
class IAgStkGraphicsScreenOverlayContainer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The interface for screen overlays that contain a collection of other overlays. This interface is implemented by ScreenOverlayManager and ScreenOverlay.'
    _iid_ = GUID('{5E57D9B7-F014-46D7-8B6D-B38D47E7CE41}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "When assigned to objects, such as <topic name='Primitives'>primitives</topic> or <topic name='Globe Overlays'>globe overlays</topic>, display conditions are evaluated to determine if the object should be <topic name='Glossary' anchor='Render'>rendered</..."
    _iid_ = GUID('{5214CE90-6448-4CC7-BC5C-F06485EC5BB8}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsScreenOverlayCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A collection of screen overlays.'
    _iid_ = GUID('{1BF5A224-26B7-4907-AA7D-FD6FC81A51F3}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsOverlay._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.')], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.')], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...')], HRESULT, 'PinningPosition',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...')], HRESULT, 'PinningPosition',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.')], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.')], HRESULT, 'X',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the unit of the x property.')], HRESULT, 'XUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the unit of the x property.')], HRESULT, 'XUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.')], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.')], HRESULT, 'Y',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the unit of the y property.')], HRESULT, 'YUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the unit of the y property.')], HRESULT, 'YUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.')], HRESULT, 'Size',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.')], HRESULT, 'Size',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.')], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.')], HRESULT, 'Width',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the unit of the width property.')], HRESULT, 'WidthUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the unit of the width property.')], HRESULT, 'WidthUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.')], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.')], HRESULT, 'Height',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the unit of the height property.')], HRESULT, 'HeightUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the unit of the height property.')], HRESULT, 'HeightUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small...")], HRESULT, 'MinimumSize',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small...")], HRESULT, 'MinimumSize',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large...")], HRESULT, 'MaximumSize',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large...")], HRESULT, 'MaximumSize',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the bounds of the overlay relative to its parent. The array contains the properties defining the bounds in the order left x location, top y location, width, height.')], HRESULT, 'Bounds',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed.")], HRESULT, 'BorderColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed.")], HRESULT, 'BorderColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed.")], HRESULT, 'BorderSize',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed.")], HRESULT, 'BorderSize',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.')], HRESULT, 'BorderTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.')], HRESULT, 'BorderTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the value with which the overlay will be translated from the X value of the position property.')], HRESULT, 'TranslationX',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the value with which the overlay will be translated from the X value of the position property.')], HRESULT, 'TranslationX',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the value with which the overlay will be translated from the Y value of the position property.')], HRESULT, 'TranslationY',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the value with which the overlay will be translated from the Y value of the position property.')], HRESULT, 'TranslationY',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.')], HRESULT, 'RotationAngle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.')], HRESULT, 'RotationAngle',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...')], HRESULT, 'RotationPoint',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...')], HRESULT, 'RotationPoint',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller.")], HRESULT, 'Scale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller.")], HRESULT, 'Scale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the overlay will be flipped along its X axis.')], HRESULT, 'FlipX',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the overlay will be flipped along its X axis.')], HRESULT, 'FlipX',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the overlay will be flipped along its Y axis.')], HRESULT, 'FlipY',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the overlay will be flipped along its Y axis.')], HRESULT, 'FlipY',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left...")], HRESULT, 'Origin',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayOrigin), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left...")], HRESULT, 'Origin',
              ( ['in'], AgEStkGraphicsScreenOverlayOrigin, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the origin of the pinning position property, relative to the overlay...')], HRESULT, 'PinningOrigin',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayPinningOrigin), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the origin of the pinning position property, relative to the overlay...')], HRESULT, 'PinningOrigin',
              ( ['in'], AgEStkGraphicsScreenOverlayPinningOrigin, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets the overlay's parent. This may be another overlay if this overlay was added to that overlay's overlays collection. Or, it may be the screen overlay manager if this overlay was added to the scene manager'sscreen overlays collection.")], HRESULT, 'Parent',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayContainer)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.")], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.")], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the overlay's color. By default, the overlay is white.")], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the overlay's color. By default, the overlay is white.")], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.')], HRESULT, 'PickingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.')], HRESULT, 'PickingEnabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds.")], HRESULT, 'ClipToParent',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds.")], HRESULT, 'ClipToParent',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>.")], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>.")], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the position of the overlay in coordinates relative to the overall globe control. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.')], HRESULT, 'ControlPosition',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the size of the overlay in coordinates relative to the overall globe control. The elements are in the order width, height, width screen overlay unit, height screen overlay unit.')], HRESULT, 'ControlSize',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the bounds of the overlay in coordinates relative to the overall globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height.')], HRESULT, 'ControlBounds',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered.")], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered.")], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the collection of overlays that are contained within this overlay.')], HRESULT, 'Overlays',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayCollection)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.')], HRESULT, 'Padding',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.')], HRESULT, 'Padding',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([helpstring('Brings the overlay to the front of the z-order, so it is on top of all other overlays with the same parent')], HRESULT, 'BringToFront'),
    COMMETHOD([helpstring('Sends the overlay to the back of the z-order, so it is underneath all other overlays with the same parent')], HRESULT, 'SendToBack'),
    COMMETHOD([helpstring('Transforms a given position, specified relative to the overlay, into coordinates relative to the overall globe control...')], HRESULT, 'OverlayToControl',
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Transforms a given position, specified relative to the overall globe control, into coordinates relative to this overlay...')], HRESULT, 'ControlToOverlay',
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets custom value associated with this primitive.')], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets custom value associated with this primitive.')], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsOverlay implementation
##class IAgStkGraphicsOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'
##    PinningPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'
##    X = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the x property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the x property.'
##    XUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'
##    Y = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the y property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the y property.'
##    YUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'
##    Size = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the width property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the width property.'
##    WidthUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the height property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the height property.'
##    HeightUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."
##    MinimumSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."
##    MaximumSize = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Bounds(self):
##        'Gets the bounds of the overlay relative to its parent. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."
##    BorderColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."
##    BorderSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'
##    BorderTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value with which the overlay will be translated from the X value of the position property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value with which the overlay will be translated from the X value of the position property.'
##    TranslationX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value with which the overlay will be translated from the Y value of the position property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value with which the overlay will be translated from the Y value of the position property.'
##    TranslationY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'
##    RotationAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'
##    RotationPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."
##    Scale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the overlay will be flipped along its X axis.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the overlay will be flipped along its X axis.'
##    FlipX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the overlay will be flipped along its Y axis.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the overlay will be flipped along its Y axis.'
##    FlipY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."
##    Origin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the origin of the pinning position property, relative to the overlay...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the origin of the pinning position property, relative to the overlay...'
##    PinningOrigin = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Parent(self):
##        "Gets the overlay's parent. This may be another overlay if this overlay was added to that overlay's overlays collection. Or, it may be the screen overlay manager if this overlay was added to the scene manager'sscreen overlays collection."
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the overlay's color. By default, the overlay is white."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overlay's color. By default, the overlay is white."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'
##    PickingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."
##    ClipToParent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ControlPosition(self):
##        'Gets the position of the overlay in coordinates relative to the overall globe control. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##        #return ppRetVal
##
##    @property
##    def ControlSize(self):
##        'Gets the size of the overlay in coordinates relative to the overall globe control. The elements are in the order width, height, width screen overlay unit, height screen overlay unit.'
##        #return ppRetVal
##
##    @property
##    def ControlBounds(self):
##        'Gets the bounds of the overlay in coordinates relative to the overall globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Overlays(self):
##        'Gets the collection of overlays that are contained within this overlay.'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'
##    Padding = property(_get, _set, doc = _set.__doc__)
##
##    def BringToFront(self):
##        'Brings the overlay to the front of the z-order, so it is on top of all other overlays with the same parent'
##        #return 
##
##    def SendToBack(self):
##        'Sends the overlay to the back of the z-order, so it is underneath all other overlays with the same parent'
##        #return 
##
##    def OverlayToControl(self, X, Y):
##        'Transforms a given position, specified relative to the overlay, into coordinates relative to the overall globe control...'
##        #return ppRetVal
##
##    def ControlToOverlay(self, X, Y):
##        'Transforms a given position, specified relative to the overall globe control, into coordinates relative to this overlay...'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsDisplayCondition._methods_ = [
]
################################################################
## code template for IAgStkGraphicsDisplayCondition implementation
##class IAgStkGraphicsDisplayCondition_Impl(object):

class IAgStkGraphicsSolidPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Renders filled solid objects and their outlines. Example solids include boxes and ellipsoids. Various effects are supported, such as displaying the solid's silhouette, and hidding the outline of the backside of the solid..."
    _iid_ = GUID('{B76858BC-4B6C-41C0-928A-2AE8FE8D6E03}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsSolidPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Renders filled solid objects and their outlines. Example solids include boxes and ellipsoids. Various effects are supported, such as displaying the solid's silhouette, and hidding the outline of the backside of the solid..."
    _iid_ = GUID('{10AE68B3-EC89-4CED-9B4C-8AAE9123EB24}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsSetHint'
eStkGraphicsSetHintInfrequent = 0
eStkGraphicsSetHintPartial = 1
eStkGraphicsSetHintFrequent = 2
AgEStkGraphicsSetHint = c_int # enum
IAgStkGraphicsSolidPrimitiveFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a default solid primitive. This is equivalent to constructing a solid primitive with a set hint of Frequent.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSolidPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a solid primitive with the specified setHint.')], HRESULT, 'InitializeWithHint',
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSolidPrimitive)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the minimum silhouette width, in pixels, supported by the video card.')], HRESULT, 'MinimumSilhouetteWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the maximum silhouette width, in pixels, supported by the video card.')], HRESULT, 'MaximumSilhouetteWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSolidPrimitiveFactory implementation
##class IAgStkGraphicsSolidPrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default solid primitive. This is equivalent to constructing a solid primitive with a set hint of Frequent.'
##        #return ppRetVal
##
##    def InitializeWithHint(self, SetHint):
##        'Initializes a solid primitive with the specified setHint.'
##        #return ppRetVal
##
##    @property
##    def MinimumSilhouetteWidthSupported(self):
##        'Gets the minimum silhouette width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    @property
##    def MaximumSilhouetteWidthSupported(self):
##        'Gets the maximum silhouette width, in pixels, supported by the video card.'
##        #return pRetVal
##

class _IAgStkGraphicsConstantDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsConstantDisplayConditionFactory'
    _iid_ = GUID('{63C9269A-7FAC-4D30-AB29-5E94D32412D7}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsConstantDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "A display condition that evaluates to a user-defined value. This is commonly used to hide <topic name='Primitives'>primitives</topic> by assigning to a primitive a display condition that always returns false."
    _iid_ = GUID('{EFEDE07B-4D59-4622-BA51-0281A5108AAB}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsConstantDisplayConditionFactory._methods_ = [
    COMMETHOD([dispid(7101), helpstring('Initializes a default constant display condition...')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsConstantDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(7102), helpstring('Initializes a constant display condition with the value the display condition evaluates to.')], HRESULT, 'InitializeDisplay',
              ( ['in'], VARIANT_BOOL, 'Display' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsConstantDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsConstantDisplayConditionFactory implementation
##class _IAgStkGraphicsConstantDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default constant display condition...'
##        #return ppRetVal
##
##    def InitializeDisplay(self, Display):
##        'Initializes a constant display condition with the value the display condition evaluates to.'
##        #return ppRetVal
##

class IAgStkGraphicsCamera(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Implemented by the scene camera. Contains operations to manipulate the camera position, view direction and orientation in the scene.'
    _iid_ = GUID('{C9A35FC4-8868-4B28-8622-13CFA470C315}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsConstrainedUpAxis'
eStkGraphicsConstrainedUpAxisX = 0
eStkGraphicsConstrainedUpAxisY = 1
eStkGraphicsConstrainedUpAxisZ = 2
eStkGraphicsConstrainedUpAxisNegativeX = 3
eStkGraphicsConstrainedUpAxisNegativeY = 4
eStkGraphicsConstrainedUpAxisNegativeZ = 5
eStkGraphicsConstrainedUpAxisNone = 6
AgEStkGraphicsConstrainedUpAxis = c_int # enum
class IAgStkGraphicsCameraSnapshot(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Takes snapshots of the 3D window.'
    _iid_ = GUID('{6B6A8D90-FF4D-49B2-9FB4-5BF459818CD1}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsCameraVideoRecording(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Records the 3D window to either a movie file or to consecutively ordered image files each time the scene is rendered.'
    _iid_ = GUID('{F519EE7A-E452-451A-839D-0EDA6CF69C0A}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsBoundingSphere(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A sphere that encapsulates an object.'
    _iid_ = GUID('{68E2776E-6E9A-449A-8146-99E67CF8D16C}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsVisibility'
eStkGraphicsVisibilityNone = 0
eStkGraphicsVisibilityPartial = 1
eStkGraphicsVisibilityAll = 2
AgEStkGraphicsVisibility = c_int # enum
IAgStkGraphicsCamera._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the position of the camera. The array contains the components of the position arranged in the order x, y, z.')], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the position of the camera. The array contains the components of the position arranged in the order x, y, z.')], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the reference point of the camera. The array contains the components of the reference point arranged in the order x, y, z.')], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the reference point of the camera. The array contains the components of the reference point arranged in the order x, y, z.')], HRESULT, 'ReferencePoint',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z.')], HRESULT, 'Direction',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z.')], HRESULT, 'Direction',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the up direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z.')], HRESULT, 'UpVector',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the up direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z.')], HRESULT, 'UpVector',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the distance the camera position is from the reference point.')], HRESULT, 'Distance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the distance the camera position is from the reference point.')], HRESULT, 'Distance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets camera's axes of rotation.")], HRESULT, 'Axes',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets camera's axes of rotation.")], HRESULT, 'Axes',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the axis to constrain the up vector to.')], HRESULT, 'ConstrainedUpAxis',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsConstrainedUpAxis), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the axis to constrain the up vector to.')], HRESULT, 'ConstrainedUpAxis',
              ( ['in'], AgEStkGraphicsConstrainedUpAxis, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the camera can rotate over the constrained up axis. For example, if true the camera would be able to flip over the North Pole and view the globe upside down.')], HRESULT, 'AllowRotationOverConstrainedUpAxis',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the camera can rotate over the constrained up axis. For example, if true the camera would be able to flip over the North Pole and view the globe upside down.')], HRESULT, 'AllowRotationOverConstrainedUpAxis',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets whether the camera's direction is locked.")], HRESULT, 'LockViewDirection',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets whether the camera's direction is locked.")], HRESULT, 'LockViewDirection',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets field of view in radians. The field of view is applied to the larger of the window dimensions. For example, if the window width was 640 and the height was 480, the field of view applies to the horizontal...')], HRESULT, 'FieldOfView',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets field of view in radians. The field of view is applied to the larger of the window dimensions. For example, if the window width was 640 and the height was 480, the field of view applies to the horizontal...')], HRESULT, 'FieldOfView',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the horizontal field of view in radians.')], HRESULT, 'HorizontalFieldOfView',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the vertical field of view in radians.')], HRESULT, 'VerticalFieldOfView',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the distance in meters from the camera to the near plane.')], HRESULT, 'NearPlane',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the distance in meters from the camera to the near plane.')], HRESULT, 'NearPlane',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the distance in meters from the camera to the far plane.')], HRESULT, 'FarPlane',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the distance in meters from the camera to the far plane.')], HRESULT, 'FarPlane',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the value that is used to compute subdivisions of the viewing frustum. A large value will be faster but lose z-value precision. A small value will have better precision but perform slower...')], HRESULT, 'FarNearPlaneRatio',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the value that is used to compute subdivisions of the viewing frustum. A large value will be faster but lose z-value precision. A small value will have better precision but perform slower...')], HRESULT, 'FarNearPlaneRatio',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Returns the distance that the Camera's Position should be from the ReferencePoint in order to ensure that a sphere with a 1 meter radius centered at the ReferencePoint fits entirely in the view frustum.")], HRESULT, 'DistancePerRadius',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the camera snapshot settings.')], HRESULT, 'Snapshot',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCameraSnapshot)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the camera video recorder.')], HRESULT, 'VideoRecording',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCameraVideoRecording)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the approximate number of meters covered by a pixel that is 1 meter away from the camera. This is commonly multiplied by the distance from the camera to an object to compute the approximate number of meters covered by a pixel of the object.')], HRESULT, 'PixelSizePerDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets the reference frame that the position is returned in. This reference frame is composed of the camera's from point and the axes.")], HRESULT, 'PositionReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets the reference frame that the reference point is returned in. This reference frame is composed of the camera's to point and the axes.")], HRESULT, 'ReferencePointReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([helpstring('Gets the visibility of a sphere against the view frustum and any occluding central bodies.')], HRESULT, 'VisibilityTest',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ReferenceFrame' ),
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'Sphere' ),
              ( ['out', 'retval'], POINTER(AgEStkGraphicsVisibility), 'pRetVal' )),
    COMMETHOD([helpstring('Converts a cartographic position to a pixel coordinate relative to the globe control. This method can throw an exception. Returns an array containing the pixel coordinate (in the order x, y) of the cartographic position relative to the globe control...')], HRESULT, 'CartographicToWindow',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Converts a cartographic position to a pixel coordinate relative to the globe control. This method does not throw an exception.')], HRESULT, 'TryCartographicToWindow',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Converts a pixel coordinate relative to the globe control to a cartographic position. For speed, terrain is not considered; if the pixel coordinate does not intersect the ellipsoid, an exception is thrown. Returns the cartographic position...')], HRESULT, 'WindowToCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring('Converts a pixel coordinate relative to the globe control to a cartographic position. For speed, terrain is not considered. This method does not throw an exception.')], HRESULT, 'TryWindowToCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([helpstring("Zoom to a central body and use the specified axes for rotation. The reference point is set to the center of the central body and the camera's position is set so the entire central body is visible.")], HRESULT, 'ViewCentralBody',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' )),
    COMMETHOD([helpstring('Zooms to a cartographic extent on the centralBody. The camera will be looking straight down at the extent, with the up vector pointing toward local north. The axes is set to an east-north-up axes at the center of extent.')], HRESULT, 'ViewExtent',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' )),
    COMMETHOD([helpstring('Zooms to a rectangular extent composed of west, south, east, north on the centralBody. The camera will be looking straight down at the extent, with the up vector pointing toward local north...')], HRESULT, 'ViewRectangularExtent',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], c_double, 'West' ),
              ( ['in'], c_double, 'South' ),
              ( ['in'], c_double, 'East' ),
              ( ['in'], c_double, 'North' )),
    COMMETHOD([helpstring("Views from a point to a point. Sets the camera's position and the reference point the camera is looking at.")], HRESULT, 'ViewWithUpAxis',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'CameraPosition' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'ReferencePoint' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'UpAxis' )),
    COMMETHOD([helpstring("Views from a point to a point. Sets the camera's position and the reference point the camera is looking at.")], HRESULT, 'View',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'CameraPosition' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'ReferencePoint' )),
    COMMETHOD([helpstring("Views from a point to a direction. Sets the camera's position and the direction vector indicating where the camera is looking.")], HRESULT, 'ViewDirectionWithUpAxis',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'CameraPosition' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnVector), 'Direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'UpAxis' )),
    COMMETHOD([helpstring("Views from a point to a direction. Sets the camera's position and the direction vector indicating where the camera is looking.")], HRESULT, 'ViewDirection',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'CameraPosition' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnVector), 'Direction' )),
    COMMETHOD([helpstring("Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the offset.")], HRESULT, 'ViewOffsetWithUpAxis',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'ReferencePoint' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Offset' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'UpAxis' )),
    COMMETHOD([helpstring("Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the offset.")], HRESULT, 'ViewOffset',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'ReferencePoint' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Offset' )),
    COMMETHOD([helpstring("Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the direction vector.")], HRESULT, 'ViewOffsetDirectionWithUpAxis',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'ReferencePoint' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnVector), 'Direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'UpAxis' )),
    COMMETHOD([helpstring("Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the direction vector.")], HRESULT, 'ViewOffsetDirection',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'ReferencePoint' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnVector), 'Direction' )),
]
################################################################
## code template for IAgStkGraphicsCamera implementation
##class IAgStkGraphicsCamera_Impl(object):
##    def _get(self):
##        'Gets or sets the position of the camera. The array contains the components of the position arranged in the order x, y, z.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the position of the camera. The array contains the components of the position arranged in the order x, y, z.'
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the reference point of the camera. The array contains the components of the reference point arranged in the order x, y, z.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference point of the camera. The array contains the components of the reference point arranged in the order x, y, z.'
##    ReferencePoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z.'
##    Direction = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the up direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the up direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z.'
##    UpVector = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the distance the camera position is from the reference point.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the distance the camera position is from the reference point.'
##    Distance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets camera's axes of rotation."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets camera's axes of rotation."
##    Axes = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the axis to constrain the up vector to.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the axis to constrain the up vector to.'
##    ConstrainedUpAxis = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the camera can rotate over the constrained up axis. For example, if true the camera would be able to flip over the North Pole and view the globe upside down.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the camera can rotate over the constrained up axis. For example, if true the camera would be able to flip over the North Pole and view the globe upside down.'
##    AllowRotationOverConstrainedUpAxis = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether the camera's direction is locked."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether the camera's direction is locked."
##    LockViewDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets field of view in radians. The field of view is applied to the larger of the window dimensions. For example, if the window width was 640 and the height was 480, the field of view applies to the horizontal...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets field of view in radians. The field of view is applied to the larger of the window dimensions. For example, if the window width was 640 and the height was 480, the field of view applies to the horizontal...'
##    FieldOfView = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def HorizontalFieldOfView(self):
##        'Gets the horizontal field of view in radians.'
##        #return pRetVal
##
##    @property
##    def VerticalFieldOfView(self):
##        'Gets the vertical field of view in radians.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the distance in meters from the camera to the near plane.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the distance in meters from the camera to the near plane.'
##    NearPlane = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the distance in meters from the camera to the far plane.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the distance in meters from the camera to the far plane.'
##    FarPlane = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value that is used to compute subdivisions of the viewing frustum. A large value will be faster but lose z-value precision. A small value will have better precision but perform slower...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value that is used to compute subdivisions of the viewing frustum. A large value will be faster but lose z-value precision. A small value will have better precision but perform slower...'
##    FarNearPlaneRatio = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DistancePerRadius(self):
##        "Returns the distance that the Camera's Position should be from the ReferencePoint in order to ensure that a sphere with a 1 meter radius centered at the ReferencePoint fits entirely in the view frustum."
##        #return pRetVal
##
##    @property
##    def Snapshot(self):
##        'Gets the camera snapshot settings.'
##        #return ppRetVal
##
##    @property
##    def VideoRecording(self):
##        'Gets the camera video recorder.'
##        #return ppRetVal
##
##    @property
##    def PixelSizePerDistance(self):
##        'Gets the approximate number of meters covered by a pixel that is 1 meter away from the camera. This is commonly multiplied by the distance from the camera to an object to compute the approximate number of meters covered by a pixel of the object.'
##        #return pRetVal
##
##    @property
##    def PositionReferenceFrame(self):
##        "Gets the reference frame that the position is returned in. This reference frame is composed of the camera's from point and the axes."
##        #return ppRetVal
##
##    @property
##    def ReferencePointReferenceFrame(self):
##        "Gets the reference frame that the reference point is returned in. This reference frame is composed of the camera's to point and the axes."
##        #return ppRetVal
##
##    def VisibilityTest(self, ReferenceFrame, Sphere):
##        'Gets the visibility of a sphere against the view frustum and any occluding central bodies.'
##        #return pRetVal
##
##    def CartographicToWindow(self, CentralBody, Position):
##        'Converts a cartographic position to a pixel coordinate relative to the globe control. This method can throw an exception. Returns an array containing the pixel coordinate (in the order x, y) of the cartographic position relative to the globe control...'
##        #return ppRetVal
##
##    def TryCartographicToWindow(self, CentralBody, Position):
##        'Converts a cartographic position to a pixel coordinate relative to the globe control. This method does not throw an exception.'
##        #return ppRetVal
##
##    def WindowToCartographic(self, CentralBody, Position):
##        'Converts a pixel coordinate relative to the globe control to a cartographic position. For speed, terrain is not considered; if the pixel coordinate does not intersect the ellipsoid, an exception is thrown. Returns the cartographic position...'
##        #return ppRetVal
##
##    def TryWindowToCartographic(self, CentralBody, Position):
##        'Converts a pixel coordinate relative to the globe control to a cartographic position. For speed, terrain is not considered. This method does not throw an exception.'
##        #return ppRetVal
##
##    def ViewCentralBody(self, CentralBody, Axes):
##        "Zoom to a central body and use the specified axes for rotation. The reference point is set to the center of the central body and the camera's position is set so the entire central body is visible."
##        #return 
##
##    def ViewExtent(self, CentralBody, Extent):
##        'Zooms to a cartographic extent on the centralBody. The camera will be looking straight down at the extent, with the up vector pointing toward local north. The axes is set to an east-north-up axes at the center of extent.'
##        #return 
##
##    def ViewRectangularExtent(self, CentralBody, West, South, East, North):
##        'Zooms to a rectangular extent composed of west, south, east, north on the centralBody. The camera will be looking straight down at the extent, with the up vector pointing toward local north...'
##        #return 
##
##    def ViewWithUpAxis(self, Axes, CameraPosition, ReferencePoint, UpAxis):
##        "Views from a point to a point. Sets the camera's position and the reference point the camera is looking at."
##        #return 
##
##    def View(self, Axes, CameraPosition, ReferencePoint):
##        "Views from a point to a point. Sets the camera's position and the reference point the camera is looking at."
##        #return 
##
##    def ViewDirectionWithUpAxis(self, Axes, CameraPosition, Direction, UpAxis):
##        "Views from a point to a direction. Sets the camera's position and the direction vector indicating where the camera is looking."
##        #return 
##
##    def ViewDirection(self, Axes, CameraPosition, Direction):
##        "Views from a point to a direction. Sets the camera's position and the direction vector indicating where the camera is looking."
##        #return 
##
##    def ViewOffsetWithUpAxis(self, Axes, ReferencePoint, Offset, UpAxis):
##        "Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the offset."
##        #return 
##
##    def ViewOffset(self, Axes, ReferencePoint, Offset):
##        "Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the offset."
##        #return 
##
##    def ViewOffsetDirectionWithUpAxis(self, Axes, ReferencePoint, Direction, UpAxis):
##        "Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the direction vector."
##        #return 
##
##    def ViewOffsetDirection(self, Axes, ReferencePoint, Direction):
##        "Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the direction vector."
##        #return 
##

class IAgStkGraphicsSurfaceMeshPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A triangle mesh primitive for meshes on the surface that need to conform to terrain.'
    _iid_ = GUID('{9F13F05B-9C30-4118-8D6B-AB331881ABA6}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsRendererTexture2D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A 2D Texture. A texture represents an image that is ready for use by objects such as primitives and overlays. Textures typically reside in video memory.'
    _iid_ = GUID('{B207AF7E-F2B5-4B2F-89F6-1FC3721102B3}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsWindingOrder'
eStkGraphicsWindingOrderCounterClockwise = 0
eStkGraphicsWindingOrderClockwise = 1
eStkGraphicsWindingOrderCompute = 2
AgEStkGraphicsWindingOrder = c_int # enum

# values for enumeration 'AgEStkGraphicsSurfaceMeshRenderingMethod'
eStkGraphicsSurfaceMeshRenderingMethodGeometryShader = 0
eStkGraphicsSurfaceMeshRenderingMethodVertexShader = 1
eStkGraphicsSurfaceMeshRenderingMethodAutomatic = 2
AgEStkGraphicsSurfaceMeshRenderingMethod = c_int # enum
class IAgStkGraphicsTextureFilter2D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A texture filter.'
    _iid_ = GUID('{C71ED80C-ABBC-4CE5-BF56-A21EA03C4593}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsTextureMatrix(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A 4 by 4 matrix applied to a texture coordinate.'
    _iid_ = GUID('{0A4C4C8F-0131-466F-99A5-1F41F9DB403B}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsSurfaceTriangulatorResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The result from a triangulation on the surface of a central body: a triangle mesh defined using an indexed triangle list and boundary positions surrounding the mesh...'
    _iid_ = GUID('{27CEDD3E-86CD-4D18-862F-EEB0E6DE62AA}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsSurfaceMeshPrimitive._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the texture applied to this primitive when rendering.')], HRESULT, 'Texture',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRendererTexture2D)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the texture applied to this primitive when rendering.')], HRESULT, 'Texture',
              ( ['in'], POINTER(IAgStkGraphicsRendererTexture2D), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.')], HRESULT, 'Wireframe',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.')], HRESULT, 'Wireframe',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the orientation of front-facing triangles in the mesh.')], HRESULT, 'TriangleWindingOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsWindingOrder), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with.")], HRESULT, 'SetHint',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSetHint), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the rendering method used to render the mesh.')], HRESULT, 'RenderingMethod',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSurfaceMeshRenderingMethod), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the filter used when a texture is applied to this primitive.')], HRESULT, 'TextureFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the filter used when a texture is applied to this primitive.')], HRESULT, 'TextureFilter',
              ( ['in'], POINTER(IAgStkGraphicsTextureFilter2D), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the matrix used to transform texture coordinates when a texture is applied to this primitive.')], HRESULT, 'TextureMatrix',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureMatrix)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the matrix used to transform texture coordinates when a texture is applied to this primitive.')], HRESULT, 'TextureMatrix',
              ( ['in'], POINTER(IAgStkGraphicsTextureMatrix), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or set the boolean that defines if the color obtained from texture coordinates beyond the texture border should be considered transparent or not. This is typically used in conjunction with the a texture matrix.')], HRESULT, 'TransparentTextureBorder',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or set the boolean that defines if the color obtained from texture coordinates beyond the texture border should be considered transparent or not. This is typically used in conjunction with the a texture matrix.')], HRESULT, 'TransparentTextureBorder',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([helpstring("Defines the surface mesh using the specified surfaceTriangulator. The mesh is rendered in the primitive's reference frame.")], HRESULT, 'Set',
              ( ['in'], POINTER(IAgStkGraphicsSurfaceTriangulatorResult), 'SurfaceTriangulator' )),
    COMMETHOD([helpstring("Defines the surface mesh using the specified surfaceTriangulator. The mesh is rendered in the primitive's reference frame.")], HRESULT, 'SetWithoutTexturing',
              ( ['in'], POINTER(IAgStkGraphicsSurfaceTriangulatorResult), 'SurfaceTriangulator' )),
    COMMETHOD([helpstring('Determines whether or not the video card supports the surface mesh primitive with the given renderingMethod.')], HRESULT, 'Supported',
              ( ['in'], AgEStkGraphicsSurfaceMeshRenderingMethod, 'RenderingMethod' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Determines whether or not the video card supports the surface mesh primitive. This is equivalent to calling Supported with automatic.')], HRESULT, 'SupportedWithDefaultRenderingMethod',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSurfaceMeshPrimitive implementation
##class IAgStkGraphicsSurfaceMeshPrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets the texture applied to this primitive when rendering.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the texture applied to this primitive when rendering.'
##    Texture = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'
##    Wireframe = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def TriangleWindingOrder(self):
##        'Gets the orientation of front-facing triangles in the mesh.'
##        #return pRetVal
##
##    @property
##    def SetHint(self):
##        "Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."
##        #return pRetVal
##
##    @property
##    def RenderingMethod(self):
##        'Gets the rendering method used to render the mesh.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the filter used when a texture is applied to this primitive.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the filter used when a texture is applied to this primitive.'
##    TextureFilter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the matrix used to transform texture coordinates when a texture is applied to this primitive.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the matrix used to transform texture coordinates when a texture is applied to this primitive.'
##    TextureMatrix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or set the boolean that defines if the color obtained from texture coordinates beyond the texture border should be considered transparent or not. This is typically used in conjunction with the a texture matrix.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or set the boolean that defines if the color obtained from texture coordinates beyond the texture border should be considered transparent or not. This is typically used in conjunction with the a texture matrix.'
##    TransparentTextureBorder = property(_get, _set, doc = _set.__doc__)
##
##    def Set(self, SurfaceTriangulator):
##        "Defines the surface mesh using the specified surfaceTriangulator. The mesh is rendered in the primitive's reference frame."
##        #return 
##
##    def SetWithoutTexturing(self, SurfaceTriangulator):
##        "Defines the surface mesh using the specified surfaceTriangulator. The mesh is rendered in the primitive's reference frame."
##        #return 
##
##    def Supported(self, RenderingMethod):
##        'Determines whether or not the video card supports the surface mesh primitive with the given renderingMethod.'
##        #return pRetVal
##
##    def SupportedWithDefaultRenderingMethod(self):
##        'Determines whether or not the video card supports the surface mesh primitive. This is equivalent to calling Supported with automatic.'
##        #return pRetVal
##

class _IAgStkGraphicsBrightnessFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsBrightnessFilterFactory'
    _iid_ = GUID('{7FAB93CA-A455-45CF-912C-64378AEE3C53}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsBrightnessFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Adjusts the brightness of the source raster's color bands. The adjustment to brightness is a value between -1 and 1, corresponding to least bright to most bright."
    _iid_ = GUID('{FD8324EA-DBC2-42A5-88BA-C2769FD4A28E}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsBrightnessFilterFactory._methods_ = [
    COMMETHOD([dispid(22401), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBrightnessFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(22402), helpstring('Initializes a new instance with the adjustment to brightness.')], HRESULT, 'InitializeWithAdjustment',
              ( ['in'], c_double, 'Adjustment' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBrightnessFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsBrightnessFilterFactory implementation
##class _IAgStkGraphicsBrightnessFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithAdjustment(self, Adjustment):
##        'Initializes a new instance with the adjustment to brightness.'
##        #return ppRetVal
##

class _IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs'
    _iid_ = GUID('{4ABC4A1C-C1C4-4A26-8E3B-ECCBBF5D0811}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsGlobeImageOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A globe overlay that shows an image.'
    _iid_ = GUID('{AC17F1DD-17DC-41BD-8429-80F90234B53F}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs._methods_ = [
    COMMETHOD([dispid(19001), helpstring('The overlay object that was added earlier using AddAsync.'), 'propget'], HRESULT, 'Overlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeImageOverlay)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs implementation
##class _IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs_Impl(object):
##    @property
##    def Overlay(self):
##        'The overlay object that was added earlier using AddAsync.'
##        #return ppRetVal
##

class _IAgStkGraphicsAGIProcessedTerrainOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAGIProcessedTerrainOverlay'
    _iid_ = GUID('{D5CB8980-19F7-4AD5-8EE3-83BDD581169C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgEStkGraphicsGlobeOverlayRole'
eStkGraphicsGlobeOverlayRoleBase = 0
eStkGraphicsGlobeOverlayRoleNight = 1
eStkGraphicsGlobeOverlayRoleSpecular = 2
eStkGraphicsGlobeOverlayRoleNormal = 4
eStkGraphicsGlobeOverlayRoleNone = 5
AgEStkGraphicsGlobeOverlayRole = c_int # enum
_IAgStkGraphicsAGIProcessedTerrainOverlay._methods_ = [
    COMMETHOD([dispid(16901), helpstring('Gets or sets the value from which to offset the terrain height.'), 'propget'], HRESULT, 'AltitudeOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16901), helpstring('Gets or sets the value from which to offset the terrain height.'), 'propput'], HRESULT, 'AltitudeOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16902), helpstring('Gets or sets the value from which to scale the terrain height.'), 'propget'], HRESULT, 'AltitudeScale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16902), helpstring('Gets or sets the value from which to scale the terrain height.'), 'propput'], HRESULT, 'AltitudeScale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16903), helpstring('Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects.'), 'propget'], HRESULT, 'Supported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16801), helpstring("Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16802), helpstring('Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'), 'propget'], HRESULT, 'Extent',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16803), helpstring('Gets the globe overlay role of the globe overlay.'), 'propget'], HRESULT, 'Role',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsGlobeOverlayRole), 'pRetVal' )),
    COMMETHOD([dispid(16804), helpstring('Gets the absolute URI specifying the location of the globe overlay.'), 'propget'], HRESULT, 'UriAsString',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16805), helpstring('Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsAGIProcessedTerrainOverlay implementation
##class _IAgStkGraphicsAGIProcessedTerrainOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the value from which to offset the terrain height.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value from which to offset the terrain height.'
##    AltitudeOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value from which to scale the terrain height.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value from which to scale the terrain height.'
##    AltitudeScale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Supported(self):
##        'Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects.'
##        #return pRetVal
##
##    @property
##    def CentralBody(self):
##        "Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."
##        #return pRetVal
##
##    @property
##    def Extent(self):
##        'Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'
##        #return ppRetVal
##
##    @property
##    def Role(self):
##        'Gets the globe overlay role of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def UriAsString(self):
##        'Gets the absolute URI specifying the location of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsTriangleMeshPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTriangleMeshPrimitive'
    _iid_ = GUID('{B7A2DB6C-0CB2-40A0-B02F-B5DA4AE012EF}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgEStkGraphicsCullFace'
eStkGraphicsECullFaceFront = 0
eStkGraphicsECullFaceBack = 1
eStkGraphicsECullFaceFrontAndBack = 2
eStkGraphicsECullFaceNeither = 3
AgEStkGraphicsCullFace = c_int # enum

# values for enumeration 'AgEStkGraphicsRendererShadeModel'
eStkGraphicsRendererShadeModelFlat = 0
eStkGraphicsRendererShadeModelGouraud = 1
AgEStkGraphicsRendererShadeModel = c_int # enum
class IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Optional parameters for triangle mesh primitive...'
    _iid_ = GUID('{881B260C-4A26-4FB7-9FEC-779B3C540A94}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsTriangulatorResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The result from triangulation: a triangle mesh defined using an indexed triangle list. This is commonly visualized with the triangle mesh primitive or surface mesh primitive.'
    _iid_ = GUID('{9DECE859-D370-4674-8FFA-8CAA98E60632}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsTriangleMeshPrimitive._methods_ = [
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propget'], HRESULT, 'ReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propput'], HRESULT, 'ReferenceFrame',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propput'], HRESULT, 'BoundingSphere',
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'ppRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propget'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propput'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(6001), helpstring('Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'), 'propget'], HRESULT, 'Wireframe',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(6001), helpstring('Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'), 'propput'], HRESULT, 'Wireframe',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(6002), helpstring('Gets or sets whether the primitive is rendered in two passes to improve the visual quality for translucent, convex meshes.'), 'propget'], HRESULT, 'RenderBackThenFrontFaces',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(6002), helpstring('Gets or sets whether the primitive is rendered in two passes to improve the visual quality for translucent, convex meshes.'), 'propput'], HRESULT, 'RenderBackThenFrontFaces',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(6008), helpstring('Gets or sets whether the primitive is lit.'), 'propget'], HRESULT, 'Lighting',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(6008), helpstring('Gets or sets whether the primitive is lit.'), 'propput'], HRESULT, 'Lighting',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(6003), helpstring('Gets or sets the orientation of front-facing triangles. This is used in combination with cull face for culling.'), 'propget'], HRESULT, 'TriangleWindingOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsWindingOrder), 'pRetVal' )),
    COMMETHOD([dispid(6003), helpstring('Gets or sets the orientation of front-facing triangles. This is used in combination with cull face for culling.'), 'propput'], HRESULT, 'TriangleWindingOrder',
              ( ['in'], AgEStkGraphicsWindingOrder, 'pRetVal' )),
    COMMETHOD([dispid(6004), helpstring('Gets or sets whether front and/or back-facing triangles may be culled. This is used in combination with triangle winding order for culling.'), 'propget'], HRESULT, 'CullFace',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsCullFace), 'pRetVal' )),
    COMMETHOD([dispid(6004), helpstring('Gets or sets whether front and/or back-facing triangles may be culled. This is used in combination with triangle winding order for culling.'), 'propput'], HRESULT, 'CullFace',
              ( ['in'], AgEStkGraphicsCullFace, 'pRetVal' )),
    COMMETHOD([dispid(6012), helpstring('Gets or sets the shading model for the mesh.'), 'propget'], HRESULT, 'ShadeModel',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsRendererShadeModel), 'pRetVal' )),
    COMMETHOD([dispid(6012), helpstring('Gets or sets the shading model for the mesh.'), 'propput'], HRESULT, 'ShadeModel',
              ( ['in'], AgEStkGraphicsRendererShadeModel, 'pRetVal' )),
    COMMETHOD([dispid(6009), helpstring('Gets or sets the texture to be drawn on the triangle mesh. Textures can be obtained from textures.'), 'propget'], HRESULT, 'Texture',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRendererTexture2D)), 'ppRetVal' )),
    COMMETHOD([dispid(6009), helpstring('Gets or sets the texture to be drawn on the triangle mesh. Textures can be obtained from textures.'), 'propput'], HRESULT, 'Texture',
              ( ['in'], POINTER(IAgStkGraphicsRendererTexture2D), 'ppRetVal' )),
    COMMETHOD([dispid(6010), helpstring('Gets or sets the filter used for the texture associated with this triangle mesh.'), 'propget'], HRESULT, 'TextureFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([dispid(6010), helpstring('Gets or sets the filter used for the texture associated with this triangle mesh.'), 'propput'], HRESULT, 'TextureFilter',
              ( ['in'], POINTER(IAgStkGraphicsTextureFilter2D), 'ppRetVal' )),
    COMMETHOD([dispid(6005), helpstring("Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."), 'propget'], HRESULT, 'SetHint',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSetHint), 'pRetVal' )),
    COMMETHOD([dispid(6006), helpstring("Defines the triangle mesh using an indexed triangle list specified by positions, normals, and indices. The mesh is rendered in the primitive's reference frame.")], HRESULT, 'Set',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Normals' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(6011), helpstring("Defines the triangle mesh using an indexed triangle list specified by positions, normals, indices, and optionalParameters. The mesh is rendered in the primitive's reference frame.")], HRESULT, 'SetWithOptionalParameters',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Normals' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], POINTER(IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters), 'OptionalParameters' )),
    COMMETHOD([dispid(6007), helpstring("Defines the triangle mesh using the specified triangulator. The mesh is rendered in the primitive's reference frame.")], HRESULT, 'SetTriangulator',
              ( ['in'], POINTER(IAgStkGraphicsTriangulatorResult), 'Triangulator' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
    COMMETHOD([dispid(6013), helpstring('Gets or sets whether individual points will be clipped by the central body.'), 'propget'], HRESULT, 'CentralBodyClipped',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(6013), helpstring('Gets or sets whether individual points will be clipped by the central body.'), 'propput'], HRESULT, 'CentralBodyClipped',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTriangleMeshPrimitive implementation
##class _IAgStkGraphicsTriangleMeshPrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##    ReferenceFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##    BoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##    AutomaticallyComputeBoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's color."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'
##    Wireframe = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the primitive is rendered in two passes to improve the visual quality for translucent, convex meshes.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the primitive is rendered in two passes to improve the visual quality for translucent, convex meshes.'
##    RenderBackThenFrontFaces = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the primitive is lit.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the primitive is lit.'
##    Lighting = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the orientation of front-facing triangles. This is used in combination with cull face for culling.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the orientation of front-facing triangles. This is used in combination with cull face for culling.'
##    TriangleWindingOrder = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether front and/or back-facing triangles may be culled. This is used in combination with triangle winding order for culling.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether front and/or back-facing triangles may be culled. This is used in combination with triangle winding order for culling.'
##    CullFace = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the shading model for the mesh.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the shading model for the mesh.'
##    ShadeModel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the texture to be drawn on the triangle mesh. Textures can be obtained from textures.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the texture to be drawn on the triangle mesh. Textures can be obtained from textures.'
##    Texture = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the filter used for the texture associated with this triangle mesh.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the filter used for the texture associated with this triangle mesh.'
##    TextureFilter = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SetHint(self):
##        "Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."
##        #return pRetVal
##
##    def Set(self, Positions, Normals, Indices):
##        "Defines the triangle mesh using an indexed triangle list specified by positions, normals, and indices. The mesh is rendered in the primitive's reference frame."
##        #return 
##
##    def SetWithOptionalParameters(self, Positions, Normals, Indices, OptionalParameters):
##        "Defines the triangle mesh using an indexed triangle list specified by positions, normals, indices, and optionalParameters. The mesh is rendered in the primitive's reference frame."
##        #return 
##
##    def SetTriangulator(self, Triangulator):
##        "Defines the triangle mesh using the specified triangulator. The mesh is rendered in the primitive's reference frame."
##        #return 
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether individual points will be clipped by the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether individual points will be clipped by the central body.'
##    CentralBodyClipped = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsDistanceDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsDistanceDisplayConditionFactory'
    _iid_ = GUID('{B0AC6006-06B2-4C5D-A1CC-BC20F3940678}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsDistanceDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Defines an inclusive distance interval, in meters, that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the distance, in meters, from the camera to the ..."
    _iid_ = GUID('{B1B3130C-BEBB-4A64-A5B7-2357384E2B8C}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsDistanceDisplayConditionFactory._methods_ = [
    COMMETHOD([dispid(7201), helpstring('Initializes a default distance display condition. minimum distance is set to 0 and maximum distance is set to Double.MaxValue...')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(7202), helpstring('Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]...')], HRESULT, 'InitializeWithDistances',
              ( ['in'], c_double, 'MinimumDistance' ),
              ( ['in'], c_double, 'MaximumDistance' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsDistanceDisplayConditionFactory implementation
##class _IAgStkGraphicsDistanceDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default distance display condition. minimum distance is set to 0 and maximum distance is set to Double.MaxValue...'
##        #return ppRetVal
##
##    def InitializeWithDistances(self, MinimumDistance, MaximumDistance):
##        'Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]...'
##        #return ppRetVal
##


# values for enumeration 'AgEStkGraphicsOutlineAppearance'
eStkGraphicsFrontAndBackLines = 0
eStkGraphicsFrontLinesOnly = 1
eStkGraphicsStylizeBackLines = 2
AgEStkGraphicsOutlineAppearance = c_int # enum
class IAgStkGraphicsSolidTriangulatorResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The result from a triangulation of a solid: a triangle mesh defined using an indexed triangle list and positions outlining the solid. It is recommended to visualize the solid using a solid primitive...'
    _iid_ = GUID('{A7BA0673-F944-4DC6-A450-5CB62915CB7B}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsSolidPrimitive._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets whether the primitive is affected by lighting.')], HRESULT, 'AffectedByLighting',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the primitive is affected by lighting.')], HRESULT, 'AffectedByLighting',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets whether the solid's fill is displayed.")], HRESULT, 'DisplayFill',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets whether the solid's fill is displayed.")], HRESULT, 'DisplayFill',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets whether the solid's silhouette is displayed.")], HRESULT, 'DisplaySilhouette',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets whether the solid's silhouette is displayed.")], HRESULT, 'DisplaySilhouette',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the silhouette's color.")], HRESULT, 'SilhouetteColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the silhouette's color.")], HRESULT, 'SilhouetteColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the silhouette's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.")], HRESULT, 'SilhouetteTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the silhouette's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.")], HRESULT, 'SilhouetteTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the silhouette' width, in pixels.")], HRESULT, 'SilhouetteWidth',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the silhouette' width, in pixels.")], HRESULT, 'SilhouetteWidth',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the minimum silhouette width, in pixels, supported by the video card.')], HRESULT, 'MinimumSilhouetteWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the maximum silhouette width, in pixels, supported by the video card.')], HRESULT, 'MaximumSilhouetteWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets whether the solid's outline is displayed.")], HRESULT, 'DisplayOutline',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets whether the solid's outline is displayed.")], HRESULT, 'DisplayOutline',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the outline's color.")], HRESULT, 'OutlineColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the outline's color.")], HRESULT, 'OutlineColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the outline's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.")], HRESULT, 'OutlineTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the outline's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.")], HRESULT, 'OutlineTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the outline's width, in pixels.")], HRESULT, 'OutlineWidth',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the outline's width, in pixels.")], HRESULT, 'OutlineWidth',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the outline's appearance.")], HRESULT, 'OutlineAppearance',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsOutlineAppearance), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the outline's appearance.")], HRESULT, 'OutlineAppearance',
              ( ['in'], AgEStkGraphicsOutlineAppearance, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the back line's color.")], HRESULT, 'BackLineColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the back line's color.")], HRESULT, 'BackLineColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the back line's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.")], HRESULT, 'BackLineTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the back line's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.")], HRESULT, 'BackLineTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the solid's position. The position is defined in the solid's reference frame. The array contains the components of the position in the order x, y, z.")], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the solid's position. The position is defined in the solid's reference frame. The array contains the components of the position in the order x, y, z.")], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the rotation applied to the solid before rendering.')], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the rotation applied to the solid before rendering.')], HRESULT, 'Rotation',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets a non-uniform scale that is applied to the solid to increase or decrease its rendered size. The array contains the scale for each component of the size in the order x scale, y scale, z scale.')], HRESULT, 'Scale',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets a non-uniform scale that is applied to the solid to increase or decrease its rendered size. The array contains the scale for each component of the size in the order x scale, y scale, z scale.')], HRESULT, 'Scale',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the back line's width, in pixels.")], HRESULT, 'BackLineWidth',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the back line's width, in pixels.")], HRESULT, 'BackLineWidth',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with.")], HRESULT, 'SetHint',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSetHint), 'pRetVal' )),
    COMMETHOD([helpstring("Defines the solid using the specified solidTriangulatorResult. The solid is rendered in the primitive's reference frame.")], HRESULT, 'SetWithResult',
              ( ['in'], POINTER(IAgStkGraphicsSolidTriangulatorResult), 'SolidTriangulatorResult' )),
    COMMETHOD([helpstring("Defines the solid using the specified parameters. The solid is rendered in the primitive's reference frame.")], HRESULT, 'Set',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Normals' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'OutlineIndices' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'WindingOrder' ),
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'BoundingSphere' ),
              ( ['in'], VARIANT_BOOL, 'Closed' )),
]
################################################################
## code template for IAgStkGraphicsSolidPrimitive implementation
##class IAgStkGraphicsSolidPrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets whether the primitive is affected by lighting.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the primitive is affected by lighting.'
##    AffectedByLighting = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether the solid's fill is displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether the solid's fill is displayed."
##    DisplayFill = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether the solid's silhouette is displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether the solid's silhouette is displayed."
##    DisplaySilhouette = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the silhouette's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the silhouette's color."
##    SilhouetteColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the silhouette's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the silhouette's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    SilhouetteTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the silhouette' width, in pixels."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the silhouette' width, in pixels."
##    SilhouetteWidth = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumSilhouetteWidthSupported(self):
##        'Gets the minimum silhouette width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    @property
##    def MaximumSilhouetteWidthSupported(self):
##        'Gets the maximum silhouette width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    def _get(self):
##        "Gets or sets whether the solid's outline is displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether the solid's outline is displayed."
##    DisplayOutline = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the outline's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the outline's color."
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the outline's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the outline's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    OutlineTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the outline's width, in pixels."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the outline's width, in pixels."
##    OutlineWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the outline's appearance."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the outline's appearance."
##    OutlineAppearance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the back line's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the back line's color."
##    BackLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the back line's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the back line's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    BackLineTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the solid's position. The position is defined in the solid's reference frame. The array contains the components of the position in the order x, y, z."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the solid's position. The position is defined in the solid's reference frame. The array contains the components of the position in the order x, y, z."
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the rotation applied to the solid before rendering.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the rotation applied to the solid before rendering.'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a non-uniform scale that is applied to the solid to increase or decrease its rendered size. The array contains the scale for each component of the size in the order x scale, y scale, z scale.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets a non-uniform scale that is applied to the solid to increase or decrease its rendered size. The array contains the scale for each component of the size in the order x scale, y scale, z scale.'
##    Scale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the back line's width, in pixels."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the back line's width, in pixels."
##    BackLineWidth = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SetHint(self):
##        "Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."
##        #return pRetVal
##
##    def SetWithResult(self, SolidTriangulatorResult):
##        "Defines the solid using the specified solidTriangulatorResult. The solid is rendered in the primitive's reference frame."
##        #return 
##
##    def Set(self, Positions, Normals, Indices, OutlineIndices, WindingOrder, BoundingSphere, Closed):
##        "Defines the solid using the specified parameters. The solid is rendered in the primitive's reference frame."
##        #return 
##

class _IAgStkGraphicsModelArticulation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsModelArticulation'
    _iid_ = GUID('{D9DB5E4D-1F0B-4188-8971-90EADB1024CE}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsModelTransformation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A model transformation defines a transformation that is applied to geometry on a model primitive. That geometry is identified by the model articulation which contains the transformation...'
    _iid_ = GUID('{C58F7FC4-2F63-494D-A461-2C385A53B9A2}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsModelArticulation._methods_ = [
    COMMETHOD([dispid(4301), helpstring('Gets the name of the articulation.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Gets the number of transformations in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Gets the transformation at the given index. The index is zero-based.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelTransformation)), 'ppRetVal' )),
    COMMETHOD([dispid(4304), helpstring('Gets a transformation by name.')], HRESULT, 'GetItemByString',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelTransformation)), 'ppRetVal' )),
    COMMETHOD([dispid(4305), helpstring('Gets a transformation by name.')], HRESULT, 'GetByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelTransformation)), 'ppRetVal' )),
    COMMETHOD([dispid(4306), helpstring('Returns true if the collection contains the transformation.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns the enumerator for this collection.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsModelArticulation implementation
##class _IAgStkGraphicsModelArticulation_Impl(object):
##    @property
##    def Name(self):
##        'Gets the name of the articulation.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Gets the number of transformations in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Gets the transformation at the given index. The index is zero-based.'
##        #return ppRetVal
##
##    def GetItemByString(self, Name):
##        'Gets a transformation by name.'
##        #return ppRetVal
##
##    def GetByName(self, Name):
##        'Gets a transformation by name.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Returns true if the collection contains the transformation.'
##        #return pRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns the enumerator for this collection.'
##        #return ppRetVal
##

class IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Optional parameters for triangle mesh primitive...'
    _iid_ = GUID('{DAB0D95C-D51E-4152-9F63-01441CA43AD9}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._methods_ = [
    COMMETHOD([helpstring('Initializes default triangle mesh primitive optional parameters.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory implementation
##class IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory_Impl(object):
##    def Initialize(self):
##        'Initializes default triangle mesh primitive optional parameters.'
##        #return ppRetVal
##

class _IAgStkGraphicsModelTransformation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsModelTransformation'
    _iid_ = GUID('{71981BC3-13E5-4798-95FF-980E9DC84813}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgEStkGraphicsModelTransformationType'
eStkGraphicsModelTransformationTypeTranslateX = 0
eStkGraphicsModelTransformationTypeTranslateY = 1
eStkGraphicsModelTransformationTypeTranslateZ = 2
eStkGraphicsModelTransformationTypeRotateX = 3
eStkGraphicsModelTransformationTypeRotateY = 4
eStkGraphicsModelTransformationTypeRotateZ = 5
eStkGraphicsModelTransformationTypeScaleX = 6
eStkGraphicsModelTransformationTypeScaleY = 7
eStkGraphicsModelTransformationTypeScaleZ = 8
eStkGraphicsModelTransformationTypeScaleUniform = 9
eStkGraphicsModelTransformationTypeTextureTranslateX = 10
eStkGraphicsModelTransformationTypeTextureTranslateY = 11
eStkGraphicsModelTransformationTypeTextureTranslateZ = 12
eStkGraphicsModelTransformationTypeTextureRotateX = 13
eStkGraphicsModelTransformationTypeTextureRotateY = 14
eStkGraphicsModelTransformationTypeTextureRotateZ = 15
eStkGraphicsModelTransformationTypeTextureScaleX = 16
eStkGraphicsModelTransformationTypeTextureScaleY = 17
eStkGraphicsModelTransformationTypeTextureScaleZ = 18
eStkGraphicsModelTransformationTypeTextureScaleUniform = 19
eStkGraphicsModelTransformationTypeTranslateRed = 20
eStkGraphicsModelTransformationTypeTranslateGreen = 21
eStkGraphicsModelTransformationTypeTranslateBlue = 22
AgEStkGraphicsModelTransformationType = c_int # enum
_IAgStkGraphicsModelTransformation._methods_ = [
    COMMETHOD([dispid(4601), helpstring('Gets or sets the current value of the transformation. The current value of the transformation will be reflected in the geometry of the model primitive that it is associated with.'), 'propget'], HRESULT, 'CurrentValue',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(4601), helpstring('Gets or sets the current value of the transformation. The current value of the transformation will be reflected in the geometry of the model primitive that it is associated with.'), 'propput'], HRESULT, 'CurrentValue',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(4602), helpstring('Gets the minimum value of the transformation.'), 'propget'], HRESULT, 'MinimumValue',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(4603), helpstring('Gets the maximum value of the transformation.'), 'propget'], HRESULT, 'MaximumValue',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(4604), helpstring('Gets the default value of the transformation. The current value property of the transformation will have this value when the model primitive is initialized.'), 'propget'], HRESULT, 'DefaultValue',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(4605), helpstring('Gets the value range of the transformation. Equivalent to the difference of the maximum value and minimum value properties.'), 'propget'], HRESULT, 'Range',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(4606), helpstring('Gets the name of the transformation.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(4607), helpstring('Gets the model transformation type associated with the transformation.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsModelTransformationType), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsModelTransformation implementation
##class _IAgStkGraphicsModelTransformation_Impl(object):
##    def _get(self):
##        'Gets or sets the current value of the transformation. The current value of the transformation will be reflected in the geometry of the model primitive that it is associated with.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the current value of the transformation. The current value of the transformation will be reflected in the geometry of the model primitive that it is associated with.'
##    CurrentValue = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumValue(self):
##        'Gets the minimum value of the transformation.'
##        #return pRetVal
##
##    @property
##    def MaximumValue(self):
##        'Gets the maximum value of the transformation.'
##        #return pRetVal
##
##    @property
##    def DefaultValue(self):
##        'Gets the default value of the transformation. The current value property of the transformation will have this value when the model primitive is initialized.'
##        #return pRetVal
##
##    @property
##    def Range(self):
##        'Gets the value range of the transformation. Equivalent to the difference of the maximum value and minimum value properties.'
##        #return pRetVal
##
##    @property
##    def Name(self):
##        'Gets the name of the transformation.'
##        #return pRetVal
##
##    @property
##    def Type(self):
##        'Gets the model transformation type associated with the transformation.'
##        #return pRetVal
##

class IAgStkGraphicsKmlContainer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A KmlContainer contains a collection of children kml features.'
    _iid_ = GUID('{32147BA1-8610-4270-9365-B8966730DD6F}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsKmlFeatureCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A collection of KML features.'
    _iid_ = GUID('{E4F1DFF5-FBB1-4951-BFC0-ABFEEC89ACC8}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsKmlContainer._methods_ = [
    COMMETHOD(['propget', helpstring('The collection of kml features that are children of this container.')], HRESULT, 'Children',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlFeatureCollection)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsKmlContainer implementation
##class IAgStkGraphicsKmlContainer_Impl(object):
##    @property
##    def Children(self):
##        'The collection of kml features that are children of this container.'
##        #return ppRetVal
##

IAgStkGraphicsBoundingSphere._methods_ = [
    COMMETHOD(['propget', helpstring('A center of the bounding sphere. The center point is specified as one-dimensional array with three elements corresponding to (X,Y,Z) cartesian coordinates.')], HRESULT, 'Center',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A radius of the bounding sphere.')], HRESULT, 'Radius',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsBoundingSphere implementation
##class IAgStkGraphicsBoundingSphere_Impl(object):
##    @property
##    def Center(self):
##        'A center of the bounding sphere. The center point is specified as one-dimensional array with three elements corresponding to (X,Y,Z) cartesian coordinates.'
##        #return ppRetVal
##
##    @property
##    def Radius(self):
##        'A radius of the bounding sphere.'
##        #return pRetVal
##

class IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The event is raised when the globe image overlay is displayed for the first time after being added using AddAsync.'
    _iid_ = GUID('{BBE097C9-D64C-4474-BA9A-FB47C76388BA}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs._methods_ = [
    COMMETHOD(['propget', helpstring('The overlay object that was added earlier using AddAsync.')], HRESULT, 'Overlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeImageOverlay)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs implementation
##class IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs_Impl(object):
##    @property
##    def Overlay(self):
##        'The overlay object that was added earlier using AddAsync.'
##        #return ppRetVal
##

class _IAgStkGraphicsTerrainCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTerrainCollection'
    _iid_ = GUID('{FE65E27B-D614-483B-B00D-5F80099DD528}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsTerrainOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A globe overlay which shows terrain.'
    _iid_ = GUID('{DFE57E34-7B31-4360-A7A8-8DB856882670}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsTerrainCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('Gets the number of terrain overlay objects in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13002), helpstring('Gets whether or not the collection is read only.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Gets the terrain overlay at the specified index.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTerrainOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Constructs an iterator that can be used to iterate the collection.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([dispid(13005), helpstring('Checks the presence of a terrain overlay in the collection.')], HRESULT, 'Contains',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(13007), helpstring('Checks the presence of a terrain overlay with the specified Uri in the collection.')], HRESULT, 'ContainsUriString',
              ( ['in'], BSTR, 'StringUri' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(13008), helpstring('Removes a terrain overlay from the collection.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(13009), helpstring('Removes all terrain overlay objects from the collection.')], HRESULT, 'Clear'),
    COMMETHOD([dispid(13010), helpstring('Adds terrainOverlay to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay' )),
    COMMETHOD([dispid(13011), helpstring('Adds terrainOverlay to the collection asynchronously.')], HRESULT, 'AddAsync',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay' )),
    COMMETHOD([dispid(13014), helpstring('Gets the index of the specified terrain overlay.')], HRESULT, 'IndexOf',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13016), helpstring('Gets the index of the terrain overlay with the specified Uri.')], HRESULT, 'IndexOfUriString',
              ( ['in'], BSTR, 'StringUri' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(13019), helpstring('Creates a terrain overlay from the uri, which represents a uri, and adds it to the collection.')], HRESULT, 'AddUriString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTerrainOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(13020), helpstring('Creates a terrain overlay from the uri, which represents a uri, and adds it to the collection asynchronously.')], HRESULT, 'AddAsyncUriString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTerrainOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(13021), helpstring('Swaps the position of two terrain overlay objects.')], HRESULT, 'Swap',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay1' ),
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay2' )),
    COMMETHOD([dispid(13022), helpstring('Swaps the position of two terrain overlay objects at the specified indices.')], HRESULT, 'SwapByIndex',
              ( ['in'], c_int, 'Index1' ),
              ( ['in'], c_int, 'Index2' )),
    COMMETHOD([dispid(13023), helpstring('Moves the terrain overlay to the specified position.')], HRESULT, 'Move',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay' ),
              ( ['in'], c_int, 'NewPosition' )),
    COMMETHOD([dispid(13024), helpstring('Moves the terrain overlay at the specified index to the specified position.')], HRESULT, 'MoveByIndex',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'NewPosition' )),
    COMMETHOD([dispid(13025), helpstring('Brings the terrain overlay to the front of the collection so it is rendered first or on the bottom.')], HRESULT, 'BringToFront',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay' )),
    COMMETHOD([dispid(13026), helpstring('Sends the terrain overlay to the back of the collection so it is rendered last or on the top.')], HRESULT, 'SendToBack',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay' )),
]
################################################################
## code template for _IAgStkGraphicsTerrainCollection implementation
##class _IAgStkGraphicsTerrainCollection_Impl(object):
##    @property
##    def Count(self):
##        'Gets the number of terrain overlay objects in the collection.'
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Gets whether or not the collection is read only.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Gets the terrain overlay at the specified index.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Constructs an iterator that can be used to iterate the collection.'
##        #return ppRetVal
##
##    def Contains(self, TerrainOverlay):
##        'Checks the presence of a terrain overlay in the collection.'
##        #return pRetVal
##
##    def ContainsUriString(self, StringUri):
##        'Checks the presence of a terrain overlay with the specified Uri in the collection.'
##        #return pRetVal
##
##    def Remove(self, TerrainOverlay):
##        'Removes a terrain overlay from the collection.'
##        #return pRetVal
##
##    def Clear(self):
##        'Removes all terrain overlay objects from the collection.'
##        #return 
##
##    def Add(self, TerrainOverlay):
##        'Adds terrainOverlay to the collection.'
##        #return 
##
##    def AddAsync(self, TerrainOverlay):
##        'Adds terrainOverlay to the collection asynchronously.'
##        #return 
##
##    def IndexOf(self, TerrainOverlay):
##        'Gets the index of the specified terrain overlay.'
##        #return pRetVal
##
##    def IndexOfUriString(self, StringUri):
##        'Gets the index of the terrain overlay with the specified Uri.'
##        #return pRetVal
##
##    def AddUriString(self, Uri):
##        'Creates a terrain overlay from the uri, which represents a uri, and adds it to the collection.'
##        #return ppRetVal
##
##    def AddAsyncUriString(self, Uri):
##        'Creates a terrain overlay from the uri, which represents a uri, and adds it to the collection asynchronously.'
##        #return ppRetVal
##
##    def Swap(self, TerrainOverlay1, TerrainOverlay2):
##        'Swaps the position of two terrain overlay objects.'
##        #return 
##
##    def SwapByIndex(self, Index1, Index2):
##        'Swaps the position of two terrain overlay objects at the specified indices.'
##        #return 
##
##    def Move(self, TerrainOverlay, NewPosition):
##        'Moves the terrain overlay to the specified position.'
##        #return 
##
##    def MoveByIndex(self, Index, NewPosition):
##        'Moves the terrain overlay at the specified index to the specified position.'
##        #return 
##
##    def BringToFront(self, TerrainOverlay):
##        'Brings the terrain overlay to the front of the collection so it is rendered first or on the bottom.'
##        #return 
##
##    def SendToBack(self, TerrainOverlay):
##        'Sends the terrain overlay to the back of the collection so it is rendered last or on the top.'
##        #return 
##

class _IAgStkGraphicsTimeIntervalDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTimeIntervalDisplayCondition'
    _iid_ = GUID('{DA1FCAEC-F7B9-46BE-9811-9467BCFCEAD4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsTimeIntervalDisplayCondition._methods_ = [
    COMMETHOD([dispid(5901), helpstring('Gets or sets the minimum time of the inclusive time interval.'), 'propget'], HRESULT, 'MinimumTime',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate)), 'ppRetVal' )),
    COMMETHOD([dispid(5901), helpstring('Gets or sets the minimum time of the inclusive time interval.'), 'propput'], HRESULT, 'MinimumTime',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'ppRetVal' )),
    COMMETHOD([dispid(5902), helpstring('Gets or sets the maximum time of the inclusive time interval.'), 'propget'], HRESULT, 'MaximumTime',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate)), 'ppRetVal' )),
    COMMETHOD([dispid(5902), helpstring('Gets or sets the maximum time of the inclusive time interval.'), 'propput'], HRESULT, 'MaximumTime',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTimeIntervalDisplayCondition implementation
##class _IAgStkGraphicsTimeIntervalDisplayCondition_Impl(object):
##    def _get(self):
##        'Gets or sets the minimum time of the inclusive time interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the minimum time of the inclusive time interval.'
##    MinimumTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the maximum time of the inclusive time interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the maximum time of the inclusive time interval.'
##    MaximumTime = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsColorToLuminanceFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsColorToLuminanceFilterFactory'
    _iid_ = GUID('{949B826C-5CAE-481F-97AA-279396E174D2}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsColorToLuminanceFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Extracts a luminance band derived from the color bands of the source raster.'
    _iid_ = GUID('{BC1D198F-705B-452B-8E51-1C600C547594}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsColorToLuminanceFilterFactory._methods_ = [
    COMMETHOD([dispid(22501), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsColorToLuminanceFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsColorToLuminanceFilterFactory implementation
##class _IAgStkGraphicsColorToLuminanceFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##

class _IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory'
    _iid_ = GUID('{F17C503D-EC72-4B5B-8E25-20A2F7D161CB}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._methods_ = [
    COMMETHOD([dispid(26001), helpstring('Initializes default triangle mesh primitive optional parameters.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory implementation
##class _IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory_Impl(object):
##    def Initialize(self):
##        'Initializes default triangle mesh primitive optional parameters.'
##        #return ppRetVal
##

class _IAgStkGraphicsConstantDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsConstantDisplayCondition'
    _iid_ = GUID('{AFCC5E7B-E4AF-46EE-9BC5-5E4C619A77C4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsConstantDisplayCondition._methods_ = [
    COMMETHOD([dispid(3401), helpstring('Gets or sets the value the display condition evaluates to.'), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(3401), helpstring('Gets or sets the value the display condition evaluates to.'), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsConstantDisplayCondition implementation
##class _IAgStkGraphicsConstantDisplayCondition_Impl(object):
##    def _get(self):
##        'Gets or sets the value the display condition evaluates to.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value the display condition evaluates to.'
##    Display = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsTerrainOverlayAddCompleteEventArgs(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTerrainOverlayAddCompleteEventArgs'
    _iid_ = GUID('{11493DDC-2393-433B-ACA9-03E290782B29}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsTerrainOverlayAddCompleteEventArgs._methods_ = [
    COMMETHOD([dispid(19101), helpstring('The terrain overlay being displayed for the first time.'), 'propget'], HRESULT, 'Overlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTerrainOverlay)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTerrainOverlayAddCompleteEventArgs implementation
##class _IAgStkGraphicsTerrainOverlayAddCompleteEventArgs_Impl(object):
##    @property
##    def Overlay(self):
##        'The terrain overlay being displayed for the first time.'
##        #return ppRetVal
##

class IAgStkGraphicsRasterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A raster dataset. A raster consists of one or more bands, or sets of values, which are most commonly associated with colors when the raster represents an image...'
    _iid_ = GUID('{B4777C93-7685-452A-87DF-8FD8BFD10E6F}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsRaster(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A raster dataset. A raster consists of one or more bands, or sets of values, which are most commonly associated with colors when the raster represents an image...'
    _iid_ = GUID('{E0113161-7DD5-4411-BCA9-6175AAD19B4E}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsRasterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a raster from a Uri, which can be a file, HTTP, HTTPS, or FTP source. See raster for a list of supported formats.')], HRESULT, 'InitializeWithStringUri',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a raster from a Uri. Only the specified subsection of the raster is read. See raster for a list of supported formats.')], HRESULT, 'InitializeWithStringUriXYWidthAndHeight',
              ( ['in'], BSTR, 'Uri' ),
              ( ['in'], c_int, 'X' ),
              ( ['in'], c_int, 'Y' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a raster from another raster.')], HRESULT, 'InitializeWithRaster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsRasterFactory implementation
##class IAgStkGraphicsRasterFactory_Impl(object):
##    def InitializeWithStringUri(self, Uri):
##        'Initializes a raster from a Uri, which can be a file, HTTP, HTTPS, or FTP source. See raster for a list of supported formats.'
##        #return ppRetVal
##
##    def InitializeWithStringUriXYWidthAndHeight(self, Uri, X, Y, Width, Height):
##        'Initializes a raster from a Uri. Only the specified subsection of the raster is read. See raster for a list of supported formats.'
##        #return ppRetVal
##
##    def InitializeWithRaster(self, Raster):
##        'Initializes a raster from another raster.'
##        #return ppRetVal
##

class _IAgStkGraphicsKmlDocument(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsKmlDocument'
    _iid_ = GUID('{C8B32EBC-A5E1-4146-A9BC-82C6B35FCF4A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsKmlDocument._methods_ = [
    COMMETHOD([dispid(26701), helpstring('The collection of kml features that are children of this container.'), 'propget'], HRESULT, 'Children',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlFeatureCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(26601), helpstring('Gets whether the document associated with this feature is loaded.'), 'propget'], HRESULT, 'IsLoaded',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(26602), helpstring('Gets or sets whether this feature will be displayed in the Scene.'), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(26602), helpstring('Gets or sets whether this feature will be displayed in the Scene.'), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(26603), helpstring('Gets the content associated with this feature.'), 'propget'], HRESULT, 'Content',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26604), helpstring('Gets the name of this feature.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26605), helpstring('Gets the description associated with this feature.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26606), helpstring('Gets the snippet associated with this feature.'), 'propget'], HRESULT, 'Snippet',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26607), helpstring('The bounding sphere encompassing the area associated with this feature.'), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(26608), helpstring('Moves the camera to the area encompassing this feature.')], HRESULT, 'FlyTo'),
    COMMETHOD([dispid(26801), helpstring('Gets the uri of the document.'), 'propget'], HRESULT, 'Uri',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsKmlDocument implementation
##class _IAgStkGraphicsKmlDocument_Impl(object):
##    @property
##    def Children(self):
##        'The collection of kml features that are children of this container.'
##        #return ppRetVal
##
##    @property
##    def IsLoaded(self):
##        'Gets whether the document associated with this feature is loaded.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets whether this feature will be displayed in the Scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether this feature will be displayed in the Scene.'
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Content(self):
##        'Gets the content associated with this feature.'
##        #return pRetVal
##
##    @property
##    def Name(self):
##        'Gets the name of this feature.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Gets the description associated with this feature.'
##        #return pRetVal
##
##    @property
##    def Snippet(self):
##        'Gets the snippet associated with this feature.'
##        #return pRetVal
##
##    @property
##    def BoundingSphere(self):
##        'The bounding sphere encompassing the area associated with this feature.'
##        #return ppRetVal
##
##    def FlyTo(self):
##        'Moves the camera to the area encompassing this feature.'
##        #return 
##
##    @property
##    def Uri(self):
##        'Gets the uri of the document.'
##        #return pRetVal
##

class _IAgStkGraphicsKmlFeatureCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsKmlFeatureCollection'
    _iid_ = GUID('{F6D82883-7A86-47AF-B57C-261E6F7A6F53}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsKmlFeature(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A KML feature.'
    _iid_ = GUID('{BC7646CA-DA52-4A62-8EF4-838382F21A08}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsKmlFeatureCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('A total number of elements in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Get an element at the specified position in the collection.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlFeature)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsKmlFeatureCollection implementation
##class _IAgStkGraphicsKmlFeatureCollection_Impl(object):
##    @property
##    def Count(self):
##        'A total number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Get an element at the specified position in the collection.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return ppRetVal
##

class _IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters'
    _iid_ = GUID('{998A3F41-1F74-4B2C-BCD6-08E182A6F93B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters._methods_ = [
    COMMETHOD([dispid(25901), helpstring('Defines a collection of texture coordinates.')], HRESULT, 'SetTextureCoordinates',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'TextureCoordinates' )),
    COMMETHOD([dispid(25902), helpstring('Defines a collection of colors.')], HRESULT, 'SetPerVertexColors',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' )),
]
################################################################
## code template for _IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters implementation
##class _IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters_Impl(object):
##    def SetTextureCoordinates(self, TextureCoordinates):
##        'Defines a collection of texture coordinates.'
##        #return 
##
##    def SetPerVertexColors(self, Colors):
##        'Defines a collection of colors.'
##        #return 
##

class _IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory'
    _iid_ = GUID('{A7333E50-C8EB-4360-9289-D28481E41D44}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Defines an inclusive distance interval, in meters, that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the distance, in meters, from the camera to the ..."
    _iid_ = GUID('{212B00EC-FF3A-4F1B-9FC3-5A900C6536DC}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsGlobeOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The base class of all terrain overlay and globe image overlay objects.'
    _iid_ = GUID('{983949C2-68A3-46EE-9670-F174091286AD}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._methods_ = [
    COMMETHOD([dispid(11301), helpstring("Initializes a default distance to globe overlay display condition. With this constructor, an object is always <topic name='Glossary' anchor='Render'>rendered</topic> regardless of the camera's distance to the globe overlay.")], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(11302), helpstring('Initializes a distance display condition with the globe overlay and the inclusive distance interval [minimumDistance, maximumDistance]...')], HRESULT, 'InitializeWithDistances',
              ( ['in'], POINTER(IAgStkGraphicsGlobeOverlay), 'GlobeOverlay' ),
              ( ['in'], c_double, 'MinimumDistance' ),
              ( ['in'], c_double, 'MaximumDistance' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory implementation
##class _IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        "Initializes a default distance to globe overlay display condition. With this constructor, an object is always <topic name='Glossary' anchor='Render'>rendered</topic> regardless of the camera's distance to the globe overlay."
##        #return ppRetVal
##
##    def InitializeWithDistances(self, GlobeOverlay, MinimumDistance, MaximumDistance):
##        'Initializes a distance display condition with the globe overlay and the inclusive distance interval [minimumDistance, maximumDistance]...'
##        #return ppRetVal
##

IAgStkGraphicsRendererTexture2D._methods_ = [
    COMMETHOD(['propget', helpstring('Gets a template from which the texture was created.')], HRESULT, 'Template',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRendererTextureTemplate2D)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsRendererTexture2D implementation
##class IAgStkGraphicsRendererTexture2D_Impl(object):
##    @property
##    def Template(self):
##        'Gets a template from which the texture was created.'
##        #return ppRetVal
##

class _IAgStkGraphicsModelArticulationCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsModelArticulationCollection'
    _iid_ = GUID('{FD278907-E357-4CD9-9465-EAE3C059A830}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsModelArticulation(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A model articulation identifies geometry on the model and is a collection of transformations that can be applied to that geometry.'
    _iid_ = GUID('{4554A375-123B-4A39-B727-3E9131879196}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsModelArticulationCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('Gets the number of articulations in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Gets the articulation at the given index. The index is zero-based.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelArticulation)), 'ppRetVal' )),
    COMMETHOD([dispid(4403), helpstring('Gets an articulation by name.')], HRESULT, 'GetItemByString',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelArticulation)), 'ppRetVal' )),
    COMMETHOD([dispid(4404), helpstring('Gets an articulation by name.')], HRESULT, 'GetByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelArticulation)), 'ppRetVal' )),
    COMMETHOD([dispid(4405), helpstring('Returns true if the collection contains the articulation.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns the enumerator for this collection.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsModelArticulationCollection implementation
##class _IAgStkGraphicsModelArticulationCollection_Impl(object):
##    @property
##    def Count(self):
##        'Gets the number of articulations in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Gets the articulation at the given index. The index is zero-based.'
##        #return ppRetVal
##
##    def GetItemByString(self, Name):
##        'Gets an articulation by name.'
##        #return ppRetVal
##
##    def GetByName(self, Name):
##        'Gets an articulation by name.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Returns true if the collection contains the articulation.'
##        #return pRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns the enumerator for this collection.'
##        #return ppRetVal
##

class IAgStkGraphicsTerrainOverlayAddCompleteEventArgs(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The event is raised when the terrain overlay is displayed for the first time after having been added using AddAsync.'
    _iid_ = GUID('{76A70982-21B5-427F-9DB1-C0B92950B516}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsTerrainOverlayAddCompleteEventArgs._methods_ = [
    COMMETHOD(['propget', helpstring('The terrain overlay being displayed for the first time.')], HRESULT, 'Overlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTerrainOverlay)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTerrainOverlayAddCompleteEventArgs implementation
##class IAgStkGraphicsTerrainOverlayAddCompleteEventArgs_Impl(object):
##    @property
##    def Overlay(self):
##        'The terrain overlay being displayed for the first time.'
##        #return ppRetVal
##

class _IAgStkGraphicsContrastFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsContrastFilterFactory'
    _iid_ = GUID('{561484BC-D70E-496B-938D-52F6B72721B1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsContrastFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Adjusts the contrast of the source raster. The adjustment to contrast is a value between -1 and 1, corresponding to least contrast to most contrast.'
    _iid_ = GUID('{47EA43C3-5FFD-4935-8569-BB19EE6B0799}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsContrastFilterFactory._methods_ = [
    COMMETHOD([dispid(22601), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsContrastFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(22602), helpstring('Initializes a new instance with the adjustment to contrast.')], HRESULT, 'InitializeWithAdjustment',
              ( ['in'], c_double, 'Adjustment' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsContrastFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsContrastFilterFactory implementation
##class _IAgStkGraphicsContrastFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithAdjustment(self, Adjustment):
##        'Initializes a new instance with the adjustment to contrast.'
##        #return ppRetVal
##

class _IAgStkGraphicsRendererTextureTemplate2D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsRendererTextureTemplate2D'
    _iid_ = GUID('{8F15B6B4-BA9C-4D9E-A1E1-2456CADBBD0C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgEStkGraphicsInternalTextureFormat'
eStkGraphicsInternalTextureFormatAlpha4 = 0
eStkGraphicsInternalTextureFormatAlpha8 = 1
eStkGraphicsInternalTextureFormatAlpha12 = 2
eStkGraphicsInternalTextureFormatAlpha16 = 3
eStkGraphicsInternalTextureFormatR3G3B2 = 4
eStkGraphicsInternalTextureFormatRgb4 = 5
eStkGraphicsInternalTextureFormatRgb5 = 6
eStkGraphicsInternalTextureFormatRgb8 = 7
eStkGraphicsInternalTextureFormatRgb10 = 8
eStkGraphicsInternalTextureFormatRgb12 = 9
eStkGraphicsInternalTextureFormatRgb16 = 10
eStkGraphicsInternalTextureFormatRgb16F = 11
eStkGraphicsInternalTextureFormatRgb32F = 12
eStkGraphicsInternalTextureFormatRgba2 = 13
eStkGraphicsInternalTextureFormatRgba4 = 14
eStkGraphicsInternalTextureFormatRgb5A1 = 15
eStkGraphicsInternalTextureFormatRgba8 = 16
eStkGraphicsInternalTextureFormatRgb10A2 = 17
eStkGraphicsInternalTextureFormatRgba12 = 18
eStkGraphicsInternalTextureFormatRgba16 = 19
eStkGraphicsInternalTextureFormatRgba16F = 20
eStkGraphicsInternalTextureFormatRgba32F = 21
eStkGraphicsInternalTextureFormatLuminance4 = 22
eStkGraphicsInternalTextureFormatLuminance8 = 23
eStkGraphicsInternalTextureFormatLuminance12 = 24
eStkGraphicsInternalTextureFormatLuminance16 = 25
eStkGraphicsInternalTextureFormatLuminance16F = 26
eStkGraphicsInternalTextureFormatLuminance32F = 27
eStkGraphicsInternalTextureFormatLuminance4Alpha4 = 28
eStkGraphicsInternalTextureFormatLuminance6Alpha2 = 29
eStkGraphicsInternalTextureFormatLuminance8Alpha8 = 30
eStkGraphicsInternalTextureFormatLuminance12Alpha4 = 31
eStkGraphicsInternalTextureFormatLuminance12Alpha12 = 32
eStkGraphicsInternalTextureFormatLuminance16Alpha16 = 33
eStkGraphicsInternalTextureFormatLuminance16Alpha16F = 34
eStkGraphicsInternalTextureFormatLuminance32Alpha32F = 35
AgEStkGraphicsInternalTextureFormat = c_int # enum
_IAgStkGraphicsRendererTextureTemplate2D._methods_ = [
    COMMETHOD([dispid(18001), helpstring('Gets an internal format of the texture.'), 'propget'], HRESULT, 'InternalFormat',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsInternalTextureFormat), 'pRetVal' )),
    COMMETHOD([dispid(18002), helpstring('Gets a width of the texture in texels.'), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(18003), helpstring('Gets a height of the texture in texels.'), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsRendererTextureTemplate2D implementation
##class _IAgStkGraphicsRendererTextureTemplate2D_Impl(object):
##    @property
##    def InternalFormat(self):
##        'Gets an internal format of the texture.'
##        #return pRetVal
##
##    @property
##    def Width(self):
##        'Gets a width of the texture in texels.'
##        #return pRetVal
##
##    @property
##    def Height(self):
##        'Gets a height of the texture in texels.'
##        #return pRetVal
##

class _IAgStkGraphicsVectorPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsVectorPrimitiveFactory'
    _iid_ = GUID('{A7B31603-E51B-4E11-A6CC-D242C5C2793C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsGraphicsFont(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A font that is suitable for use with the text batch primitive. For best performance, avoid creating duplicate font objects. Instead assign the same font object to several text batch primitives.'
    _iid_ = GUID('{36A67D60-3F13-435B-92D8-B6A76ED1A74A}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsVectorPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Renders a vector in the 3D scene. A vector is defined by a source (given by an ISystem) and a direction (given by an IVector or IPoint). Length is auto-calculated or can be set separately.'
    _iid_ = GUID('{8244E37A-140A-40A8-9554-37DC0BE9BD1B}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsVectorPrimitiveFactory._methods_ = [
    COMMETHOD([dispid(28101), helpstring('Initializes a vector primitive with the specified ISystem sys as its source and pointing in direction dir.')], HRESULT, 'InitializeWithDirection',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'Sys' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnVector), 'Dir' ),
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsVectorPrimitive)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsVectorPrimitiveFactory implementation
##class _IAgStkGraphicsVectorPrimitiveFactory_Impl(object):
##    def InitializeWithDirection(self, Sys, Dir, Font):
##        'Initializes a vector primitive with the specified ISystem sys as its source and pointing in direction dir.'
##        #return ppRetVal
##

class _IAgStkGraphicsTerrainOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTerrainOverlay'
    _iid_ = GUID('{ED293676-558E-42DE-9AD9-A82B3AA5B34A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsTerrainOverlay._methods_ = [
    COMMETHOD([dispid(16801), helpstring("Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16802), helpstring('Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'), 'propget'], HRESULT, 'Extent',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16803), helpstring('Gets the globe overlay role of the globe overlay.'), 'propget'], HRESULT, 'Role',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsGlobeOverlayRole), 'pRetVal' )),
    COMMETHOD([dispid(16804), helpstring('Gets the absolute URI specifying the location of the globe overlay.'), 'propget'], HRESULT, 'UriAsString',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16805), helpstring('Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(16901), helpstring('Gets or sets the value from which to offset the terrain height.'), 'propget'], HRESULT, 'AltitudeOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16901), helpstring('Gets or sets the value from which to offset the terrain height.'), 'propput'], HRESULT, 'AltitudeOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16902), helpstring('Gets or sets the value from which to scale the terrain height.'), 'propget'], HRESULT, 'AltitudeScale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16902), helpstring('Gets or sets the value from which to scale the terrain height.'), 'propput'], HRESULT, 'AltitudeScale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16903), helpstring('Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects.'), 'propget'], HRESULT, 'Supported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTerrainOverlay implementation
##class _IAgStkGraphicsTerrainOverlay_Impl(object):
##    @property
##    def CentralBody(self):
##        "Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."
##        #return pRetVal
##
##    @property
##    def Extent(self):
##        'Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'
##        #return ppRetVal
##
##    @property
##    def Role(self):
##        'Gets the globe overlay role of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def UriAsString(self):
##        'Gets the absolute URI specifying the location of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value from which to offset the terrain height.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value from which to offset the terrain height.'
##    AltitudeOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value from which to scale the terrain height.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value from which to scale the terrain height.'
##    AltitudeScale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Supported(self):
##        'Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects.'
##        #return pRetVal
##

class _IAgStkGraphicsBoundingSphereFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsBoundingSphereFactory'
    _iid_ = GUID('{DE9C2FFC-7B06-41B9-B8A8-8590FC00665F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsBoundingSphereFactory._methods_ = [
    COMMETHOD([dispid(17701), helpstring('Create instances of BoundingSphere.')], HRESULT, 'Initialize',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(17702), helpstring('Gets the bounding sphere of maximum possible radius.'), 'propget'], HRESULT, 'MaximumRadiusBoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsBoundingSphereFactory implementation
##class _IAgStkGraphicsBoundingSphereFactory_Impl(object):
##    def Initialize(self, Center, Radius):
##        'Create instances of BoundingSphere.'
##        #return ppRetVal
##
##    @property
##    def MaximumRadiusBoundingSphere(self):
##        'Gets the bounding sphere of maximum possible radius.'
##        #return ppRetVal
##

class _IAgStkGraphicsDistanceToPositionDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsDistanceToPositionDisplayConditionFactory'
    _iid_ = GUID('{48A7BF0F-E890-460F-AAB7-70813C22BBDD}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsDistanceToPositionDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Defines an inclusive distance interval, in meters, that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the distance, in meters, from the camera to a po..."
    _iid_ = GUID('{0110DB74-D567-4804-9BEC-D7CCE8ED59D0}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsDistanceToPositionDisplayConditionFactory._methods_ = [
    COMMETHOD([dispid(7301), helpstring("Initializes a default distance to position display condition. With this constructor, an object is always <topic name='Glossary' anchor='Render'>rendered</topic> regardless of the camera's distance to the position.")], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToPositionDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(7302), helpstring('Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]...')], HRESULT, 'InitializeWithDistances',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], c_double, 'MinimumDistance' ),
              ( ['in'], c_double, 'MaximumDistance' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToPositionDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(7303), helpstring('Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]...')], HRESULT, 'InitializeWithReferenceFrameAndDistances',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ReferenceFrame' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], c_double, 'MinimumDistance' ),
              ( ['in'], c_double, 'MaximumDistance' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToPositionDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsDistanceToPositionDisplayConditionFactory implementation
##class _IAgStkGraphicsDistanceToPositionDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        "Initializes a default distance to position display condition. With this constructor, an object is always <topic name='Glossary' anchor='Render'>rendered</topic> regardless of the camera's distance to the position."
##        #return ppRetVal
##
##    def InitializeWithDistances(self, Position, MinimumDistance, MaximumDistance):
##        'Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]...'
##        #return ppRetVal
##
##    def InitializeWithReferenceFrameAndDistances(self, ReferenceFrame, Position, MinimumDistance, MaximumDistance):
##        'Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]...'
##        #return ppRetVal
##

class _IAgStkGraphicsConvolutionFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsConvolutionFilterFactory'
    _iid_ = GUID('{6C4BF836-577C-4843-AA23-577B73732245}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsConvolutionFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Applies convolution to the source raster. Convolution is the modification of a pixel's value based on the values of its surrounding pixels. The kernel is the numerical matrix that is applied to each pixel in this process..."
    _iid_ = GUID('{65E3646D-DFAC-40AF-B37F-15596EF13292}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsConvolutionFilterFactory._methods_ = [
    COMMETHOD([dispid(22701), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsConvolutionFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(22702), helpstring('Initializes a new instance with the specified kernel.')], HRESULT, 'InitializeWithKernel',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Kernel' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsConvolutionFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(22703), helpstring('Initializes a new instance with the specified kernel and divisor.')], HRESULT, 'InitializeWithKernelAndDivisor',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Kernel' ),
              ( ['in'], c_double, 'Divisor' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsConvolutionFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(22704), helpstring('Initializes a new instance with the specified kernel, divisor, and offset.')], HRESULT, 'InitializeWithKernelDivisorAndOffset',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Kernel' ),
              ( ['in'], c_double, 'Divisor' ),
              ( ['in'], c_double, 'Offset' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsConvolutionFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsConvolutionFilterFactory implementation
##class _IAgStkGraphicsConvolutionFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithKernel(self, Kernel):
##        'Initializes a new instance with the specified kernel.'
##        #return ppRetVal
##
##    def InitializeWithKernelAndDivisor(self, Kernel, Divisor):
##        'Initializes a new instance with the specified kernel and divisor.'
##        #return ppRetVal
##
##    def InitializeWithKernelDivisorAndOffset(self, Kernel, Divisor, Offset):
##        'Initializes a new instance with the specified kernel, divisor, and offset.'
##        #return ppRetVal
##

class IAgStkGraphicsTextOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A rectangular overlay that contains text.'
    _iid_ = GUID('{183A48A5-A123-493A-9E6E-688775A7CA79}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsTextOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A rectangular overlay that contains text.'
    _iid_ = GUID('{7D847A28-DFE3-4F2C-923B-683F0250C491}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsTextOverlayFactory._methods_ = [
    COMMETHOD([helpstring("Initializes the overlay with a position of (0, 0), a width of 100 pixels, and a height of 50 pixels. <param name='font'>The graphics font that defines how text is drawn.</param>")], HRESULT, 'Initialize',
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextOverlay)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels.')], HRESULT, 'InitializeWithXYWidthHeight',
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['in'], c_double, 'XPixels' ),
              ( ['in'], c_double, 'YPixels' ),
              ( ['in'], c_double, 'WidthPixels' ),
              ( ['in'], c_double, 'HeightPixels' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextOverlay)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes the overlay with the specified position and size.')], HRESULT, 'InitializeWithPositionSize',
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Size' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextOverlay)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes the overlay with the specified position and size.')], HRESULT, 'InitializeWithWidthHeightUnits',
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['in'], c_double, 'Width' ),
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'WidthUnit' ),
              ( ['in'], c_double, 'Height' ),
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'HeightUnit' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextOverlay)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTextOverlayFactory implementation
##class IAgStkGraphicsTextOverlayFactory_Impl(object):
##    def Initialize(self, Font):
##        "Initializes the overlay with a position of (0, 0), a width of 100 pixels, and a height of 50 pixels. <param name='font'>The graphics font that defines how text is drawn.</param>"
##        #return ppRetVal
##
##    def InitializeWithXYWidthHeight(self, Font, XPixels, YPixels, WidthPixels, HeightPixels):
##        'Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels.'
##        #return ppRetVal
##
##    def InitializeWithPositionSize(self, Font, Position, Size):
##        'Initializes the overlay with the specified position and size.'
##        #return ppRetVal
##
##    def InitializeWithWidthHeightUnits(self, Font, Width, WidthUnit, Height, HeightUnit):
##        'Initializes the overlay with the specified position and size.'
##        #return ppRetVal
##

class _IAgStkGraphicsPickResultCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPickResultCollection'
    _iid_ = GUID('{E9BFE8EA-9724-4718-A230-BB8457B6709D}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsPickResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A single result from Pick.'
    _iid_ = GUID('{55238A64-4C7F-4BE7-ABCB-1D2321F8F64A}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsPickResultCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('A total number of elements in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns a picked object at the specified position in the collection.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPickResult)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsPickResultCollection implementation
##class _IAgStkGraphicsPickResultCollection_Impl(object):
##    @property
##    def Count(self):
##        'A total number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Returns a picked object at the specified position in the collection.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return ppRetVal
##

IAgStkGraphicsKmlFeatureCollection._methods_ = [
    COMMETHOD(['propget', helpstring('A total number of elements in the collection.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get an element at the specified position in the collection.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlFeature)), 'ppRetVal' )),
    COMMETHOD(['propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsKmlFeatureCollection implementation
##class IAgStkGraphicsKmlFeatureCollection_Impl(object):
##    @property
##    def Count(self):
##        'A total number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Get an element at the specified position in the collection.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return ppRetVal
##

IAgStkGraphicsRendererTextureTemplate2D._methods_ = [
    COMMETHOD(['propget', helpstring('Gets an internal format of the texture.')], HRESULT, 'InternalFormat',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsInternalTextureFormat), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a width of the texture in texels.')], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a height of the texture in texels.')], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsRendererTextureTemplate2D implementation
##class IAgStkGraphicsRendererTextureTemplate2D_Impl(object):
##    @property
##    def InternalFormat(self):
##        'Gets an internal format of the texture.'
##        #return pRetVal
##
##    @property
##    def Width(self):
##        'Gets a width of the texture in texels.'
##        #return pRetVal
##
##    @property
##    def Height(self):
##        'Gets a height of the texture in texels.'
##        #return pRetVal
##

class _IAgStkGraphicsCentralBodyGraphics(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsCentralBodyGraphics'
    _iid_ = GUID('{A352878C-11EF-49B6-87D5-A7A9297D9CF1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsTerrainCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A collection of terrain overlay objects.'
    _iid_ = GUID('{6DBD63A6-624B-4318-8FEC-DAF384F070C4}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsImageCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A collection of globe image overlay objects.'
    _iid_ = GUID('{797B7253-9205-47A1-B49B-EDF6E06326C0}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsKmlGraphics(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Provides loading and unloading of kml documents for a particular central body.'
    _iid_ = GUID('{056EB708-4504-4D62-B4D8-3CA00B0B91FA}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsCentralBodyGraphics._methods_ = [
    COMMETHOD([dispid(12801), helpstring('Gets or sets the color of the central body in the scene.'), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(12801), helpstring('Gets or sets the color of the central body in the scene.'), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(12802), helpstring('Gets or sets the specular color of the central body in the scene. The specular color is associated with the specular overlay.'), 'propget'], HRESULT, 'SpecularColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(12802), helpstring('Gets or sets the specular color of the central body in the scene. The specular color is associated with the specular overlay.'), 'propput'], HRESULT, 'SpecularColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(12803), helpstring('Gets or sets the shininess of the central body in the scene. The shininess affects the size and brightness of specular reflection associated with the specular overlay.'), 'propget'], HRESULT, 'Shininess',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(12803), helpstring('Gets or sets the shininess of the central body in the scene. The shininess affects the size and brightness of specular reflection associated with the specular overlay.'), 'propput'], HRESULT, 'Shininess',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(12804), helpstring('Gets or sets whether the imagery for central body in the scene is shown or hidden.'), 'propget'], HRESULT, 'ShowImagery',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(12804), helpstring('Gets or sets whether the imagery for central body in the scene is shown or hidden.'), 'propput'], HRESULT, 'ShowImagery',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(12805), helpstring('Gets or sets whether the central body is shown or hidden in the scene. This only affects the central body itself, not the primitives that are associated with it.'), 'propget'], HRESULT, 'Show',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(12805), helpstring('Gets or sets whether the central body is shown or hidden in the scene. This only affects the central body itself, not the primitives that are associated with it.'), 'propput'], HRESULT, 'Show',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(12806), helpstring('Gets or sets whether a label with the name of the central body should be rendered in the scene when the camera is at certain distance away from the central body.'), 'propget'], HRESULT, 'ShowLabel',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(12806), helpstring('Gets or sets whether a label with the name of the central body should be rendered in the scene when the camera is at certain distance away from the central body.'), 'propput'], HRESULT, 'ShowLabel',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(12807), helpstring('Gets or sets the altitude, in meters, that all terrain and imagery will be offset from the surface of the central body in the scene.'), 'propget'], HRESULT, 'AltitudeOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(12807), helpstring('Gets or sets the altitude, in meters, that all terrain and imagery will be offset from the surface of the central body in the scene.'), 'propput'], HRESULT, 'AltitudeOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(12808), helpstring('Gets or sets the base globe image overlay associated with the central body in the scene. The base overlay is always rendered before any other imagery...'), 'propget'], HRESULT, 'BaseOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeImageOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(12808), helpstring('Gets or sets the base globe image overlay associated with the central body in the scene. The base overlay is always rendered before any other imagery...'), 'propput'], HRESULT, 'BaseOverlay',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ppRetVal' )),
    COMMETHOD([dispid(12809), helpstring('Gets or sets the night globe image overlay associated with the central body in the scene. The night overlay is displayed only on parts of the central body that are not in sun light...'), 'propget'], HRESULT, 'NightOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeImageOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(12809), helpstring('Gets or sets the night globe image overlay associated with the central body in the scene. The night overlay is displayed only on parts of the central body that are not in sun light...'), 'propput'], HRESULT, 'NightOverlay',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ppRetVal' )),
    COMMETHOD([dispid(12810), helpstring('Gets or sets the specular globe image overlay associated with the central body in the scene. The specular overlay is displayed only in the specular highlight of the central body.'), 'propget'], HRESULT, 'SpecularOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeImageOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(12810), helpstring('Gets or sets the specular globe image overlay associated with the central body in the scene. The specular overlay is displayed only in the specular highlight of the central body.'), 'propput'], HRESULT, 'SpecularOverlay',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ppRetVal' )),
    COMMETHOD([dispid(12811), helpstring('Gets the collection of terrain overlay associated with the central body in the scene.'), 'propget'], HRESULT, 'Terrain',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTerrainCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(12812), helpstring('Gets the collection of imagery associated with the central body in the scene.'), 'propget'], HRESULT, 'Imagery',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsImageCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(12813), helpstring('Gets the kml graphics associated with the central body in the scene.'), 'propget'], HRESULT, 'Kml',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlGraphics)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsCentralBodyGraphics implementation
##class _IAgStkGraphicsCentralBodyGraphics_Impl(object):
##    def _get(self):
##        'Gets or sets the color of the central body in the scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the color of the central body in the scene.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the specular color of the central body in the scene. The specular color is associated with the specular overlay.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the specular color of the central body in the scene. The specular color is associated with the specular overlay.'
##    SpecularColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the shininess of the central body in the scene. The shininess affects the size and brightness of specular reflection associated with the specular overlay.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the shininess of the central body in the scene. The shininess affects the size and brightness of specular reflection associated with the specular overlay.'
##    Shininess = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the imagery for central body in the scene is shown or hidden.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the imagery for central body in the scene is shown or hidden.'
##    ShowImagery = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the central body is shown or hidden in the scene. This only affects the central body itself, not the primitives that are associated with it.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the central body is shown or hidden in the scene. This only affects the central body itself, not the primitives that are associated with it.'
##    Show = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether a label with the name of the central body should be rendered in the scene when the camera is at certain distance away from the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether a label with the name of the central body should be rendered in the scene when the camera is at certain distance away from the central body.'
##    ShowLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the altitude, in meters, that all terrain and imagery will be offset from the surface of the central body in the scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the altitude, in meters, that all terrain and imagery will be offset from the surface of the central body in the scene.'
##    AltitudeOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the base globe image overlay associated with the central body in the scene. The base overlay is always rendered before any other imagery...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the base globe image overlay associated with the central body in the scene. The base overlay is always rendered before any other imagery...'
##    BaseOverlay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the night globe image overlay associated with the central body in the scene. The night overlay is displayed only on parts of the central body that are not in sun light...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the night globe image overlay associated with the central body in the scene. The night overlay is displayed only on parts of the central body that are not in sun light...'
##    NightOverlay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the specular globe image overlay associated with the central body in the scene. The specular overlay is displayed only in the specular highlight of the central body.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the specular globe image overlay associated with the central body in the scene. The specular overlay is displayed only in the specular highlight of the central body.'
##    SpecularOverlay = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Terrain(self):
##        'Gets the collection of terrain overlay associated with the central body in the scene.'
##        #return ppRetVal
##
##    @property
##    def Imagery(self):
##        'Gets the collection of imagery associated with the central body in the scene.'
##        #return ppRetVal
##
##    @property
##    def Kml(self):
##        'Gets the kml graphics associated with the central body in the scene.'
##        #return ppRetVal
##

IAgStkGraphicsTextureMatrix._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the element in the first row, first column.')], HRESULT, 'M11',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the element in the first row, second column.')], HRESULT, 'M12',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the element in the first row, third column.')], HRESULT, 'M13',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the element in the first row, fourth column.')], HRESULT, 'M14',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the element in the second row, first column.')], HRESULT, 'M21',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the element in the second row, second column.')], HRESULT, 'M22',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the element in the second row, third column.')], HRESULT, 'M23',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the element in the second row, fourth column.')], HRESULT, 'M24',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the element in the third row, first column.')], HRESULT, 'M31',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the element in the third row, second column.')], HRESULT, 'M32',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the element in the third row, third column.')], HRESULT, 'M33',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the element in the third row, fourth column.')], HRESULT, 'M34',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the element in the fourth row, first column.')], HRESULT, 'M41',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the element in the fourth row, second column.')], HRESULT, 'M42',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the element in the fourth row, third column.')], HRESULT, 'M43',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the element in the fourth row, fourth column.')], HRESULT, 'M44',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTextureMatrix implementation
##class IAgStkGraphicsTextureMatrix_Impl(object):
##    @property
##    def M11(self):
##        'Gets the element in the first row, first column.'
##        #return pRetVal
##
##    @property
##    def M12(self):
##        'Gets the element in the first row, second column.'
##        #return pRetVal
##
##    @property
##    def M13(self):
##        'Gets the element in the first row, third column.'
##        #return pRetVal
##
##    @property
##    def M14(self):
##        'Gets the element in the first row, fourth column.'
##        #return pRetVal
##
##    @property
##    def M21(self):
##        'Gets the element in the second row, first column.'
##        #return pRetVal
##
##    @property
##    def M22(self):
##        'Gets the element in the second row, second column.'
##        #return pRetVal
##
##    @property
##    def M23(self):
##        'Gets the element in the second row, third column.'
##        #return pRetVal
##
##    @property
##    def M24(self):
##        'Gets the element in the second row, fourth column.'
##        #return pRetVal
##
##    @property
##    def M31(self):
##        'Gets the element in the third row, first column.'
##        #return pRetVal
##
##    @property
##    def M32(self):
##        'Gets the element in the third row, second column.'
##        #return pRetVal
##
##    @property
##    def M33(self):
##        'Gets the element in the third row, third column.'
##        #return pRetVal
##
##    @property
##    def M34(self):
##        'Gets the element in the third row, fourth column.'
##        #return pRetVal
##
##    @property
##    def M41(self):
##        'Gets the element in the fourth row, first column.'
##        #return pRetVal
##
##    @property
##    def M42(self):
##        'Gets the element in the fourth row, second column.'
##        #return pRetVal
##
##    @property
##    def M43(self):
##        'Gets the element in the fourth row, third column.'
##        #return pRetVal
##
##    @property
##    def M44(self):
##        'Gets the element in the fourth row, fourth column.'
##        #return pRetVal
##

class _IAgStkGraphicsOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsOverlay'
    _iid_ = GUID('{EE941CC2-13C4-407B-8854-141B879E8047}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsOverlay._methods_ = [
    COMMETHOD([dispid(17301), helpstring('Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17301), helpstring('Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'), 'propput'], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17302), helpstring('Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'), 'propget'], HRESULT, 'PinningPosition',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17302), helpstring('Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'), 'propput'], HRESULT, 'PinningPosition',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17303), helpstring('Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17303), helpstring('Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'), 'propput'], HRESULT, 'X',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17304), helpstring('Gets or sets the unit of the x property.'), 'propget'], HRESULT, 'XUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD([dispid(17304), helpstring('Gets or sets the unit of the x property.'), 'propput'], HRESULT, 'XUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD([dispid(17305), helpstring('Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17305), helpstring('Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'), 'propput'], HRESULT, 'Y',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17306), helpstring('Gets or sets the unit of the y property.'), 'propget'], HRESULT, 'YUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD([dispid(17306), helpstring('Gets or sets the unit of the y property.'), 'propput'], HRESULT, 'YUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD([dispid(17307), helpstring('Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'), 'propget'], HRESULT, 'Size',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17307), helpstring('Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'), 'propput'], HRESULT, 'Size',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17308), helpstring('Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17308), helpstring('Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'), 'propput'], HRESULT, 'Width',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17309), helpstring('Gets or sets the unit of the width property.'), 'propget'], HRESULT, 'WidthUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD([dispid(17309), helpstring('Gets or sets the unit of the width property.'), 'propput'], HRESULT, 'WidthUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD([dispid(17310), helpstring('Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17310), helpstring('Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17311), helpstring('Gets or sets the unit of the height property.'), 'propget'], HRESULT, 'HeightUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD([dispid(17311), helpstring('Gets or sets the unit of the height property.'), 'propput'], HRESULT, 'HeightUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD([dispid(17312), helpstring("Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."), 'propget'], HRESULT, 'MinimumSize',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17312), helpstring("Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."), 'propput'], HRESULT, 'MinimumSize',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17313), helpstring("Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."), 'propget'], HRESULT, 'MaximumSize',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17313), helpstring("Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."), 'propput'], HRESULT, 'MaximumSize',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17314), helpstring('Gets the bounds of the overlay relative to its parent. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'), 'propget'], HRESULT, 'Bounds',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17315), helpstring("Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."), 'propget'], HRESULT, 'BorderColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17315), helpstring("Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."), 'propput'], HRESULT, 'BorderColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17316), helpstring("Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."), 'propget'], HRESULT, 'BorderSize',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17316), helpstring("Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."), 'propput'], HRESULT, 'BorderSize',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(17317), helpstring('Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'), 'propget'], HRESULT, 'BorderTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17317), helpstring('Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'), 'propput'], HRESULT, 'BorderTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(17318), helpstring('Gets or sets the value with which the overlay will be translated from the X value of the position property.'), 'propget'], HRESULT, 'TranslationX',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17318), helpstring('Gets or sets the value with which the overlay will be translated from the X value of the position property.'), 'propput'], HRESULT, 'TranslationX',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17319), helpstring('Gets or sets the value with which the overlay will be translated from the Y value of the position property.'), 'propget'], HRESULT, 'TranslationY',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17319), helpstring('Gets or sets the value with which the overlay will be translated from the Y value of the position property.'), 'propput'], HRESULT, 'TranslationY',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17320), helpstring('Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'), 'propget'], HRESULT, 'RotationAngle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17320), helpstring('Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'), 'propput'], HRESULT, 'RotationAngle',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17321), helpstring('Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'), 'propget'], HRESULT, 'RotationPoint',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17321), helpstring('Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'), 'propput'], HRESULT, 'RotationPoint',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17322), helpstring("Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."), 'propget'], HRESULT, 'Scale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17322), helpstring("Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."), 'propput'], HRESULT, 'Scale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17323), helpstring('Gets or sets whether the overlay will be flipped along its X axis.'), 'propget'], HRESULT, 'FlipX',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17323), helpstring('Gets or sets whether the overlay will be flipped along its X axis.'), 'propput'], HRESULT, 'FlipX',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17324), helpstring('Gets or sets whether the overlay will be flipped along its Y axis.'), 'propget'], HRESULT, 'FlipY',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17324), helpstring('Gets or sets whether the overlay will be flipped along its Y axis.'), 'propput'], HRESULT, 'FlipY',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17325), helpstring("Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."), 'propget'], HRESULT, 'Origin',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayOrigin), 'pRetVal' )),
    COMMETHOD([dispid(17325), helpstring("Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."), 'propput'], HRESULT, 'Origin',
              ( ['in'], AgEStkGraphicsScreenOverlayOrigin, 'pRetVal' )),
    COMMETHOD([dispid(17326), helpstring('Gets or sets the origin of the pinning position property, relative to the overlay...'), 'propget'], HRESULT, 'PinningOrigin',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayPinningOrigin), 'pRetVal' )),
    COMMETHOD([dispid(17326), helpstring('Gets or sets the origin of the pinning position property, relative to the overlay...'), 'propput'], HRESULT, 'PinningOrigin',
              ( ['in'], AgEStkGraphicsScreenOverlayPinningOrigin, 'pRetVal' )),
    COMMETHOD([dispid(17327), helpstring("Gets the overlay's parent. This may be another overlay if this overlay was added to that overlay's overlays collection. Or, it may be the screen overlay manager if this overlay was added to the scene manager'sscreen overlays collection."), 'propget'], HRESULT, 'Parent',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayContainer)), 'ppRetVal' )),
    COMMETHOD([dispid(17328), helpstring("Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17328), helpstring("Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(17329), helpstring("Gets or sets the overlay's color. By default, the overlay is white."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17329), helpstring("Gets or sets the overlay's color. By default, the overlay is white."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17330), helpstring('Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'), 'propget'], HRESULT, 'PickingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17330), helpstring('Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'), 'propput'], HRESULT, 'PickingEnabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17331), helpstring("Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."), 'propget'], HRESULT, 'ClipToParent',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17331), helpstring("Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."), 'propput'], HRESULT, 'ClipToParent',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17332), helpstring("Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17332), helpstring("Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17333), helpstring('Gets the position of the overlay in coordinates relative to the overall globe control. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'), 'propget'], HRESULT, 'ControlPosition',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17334), helpstring('Gets the size of the overlay in coordinates relative to the overall globe control. The elements are in the order width, height, width screen overlay unit, height screen overlay unit.'), 'propget'], HRESULT, 'ControlSize',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17335), helpstring('Gets the bounds of the overlay in coordinates relative to the overall globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'), 'propget'], HRESULT, 'ControlBounds',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17336), helpstring("Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17336), helpstring("Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17338), helpstring('Gets the collection of overlays that are contained within this overlay.'), 'propget'], HRESULT, 'Overlays',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(17339), helpstring('Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'), 'propget'], HRESULT, 'Padding',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17339), helpstring('Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'), 'propput'], HRESULT, 'Padding',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17340), helpstring('Brings the overlay to the front of the z-order, so it is on top of all other overlays with the same parent')], HRESULT, 'BringToFront'),
    COMMETHOD([dispid(17341), helpstring('Sends the overlay to the back of the z-order, so it is underneath all other overlays with the same parent')], HRESULT, 'SendToBack'),
    COMMETHOD([dispid(17342), helpstring('Transforms a given position, specified relative to the overlay, into coordinates relative to the overall globe control...')], HRESULT, 'OverlayToControl',
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17343), helpstring('Transforms a given position, specified relative to the overall globe control, into coordinates relative to this overlay...')], HRESULT, 'ControlToOverlay',
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17337), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17337), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsOverlay implementation
##class _IAgStkGraphicsOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'
##    PinningPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'
##    X = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the x property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the x property.'
##    XUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'
##    Y = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the y property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the y property.'
##    YUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'
##    Size = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the width property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the width property.'
##    WidthUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the height property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the height property.'
##    HeightUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."
##    MinimumSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."
##    MaximumSize = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Bounds(self):
##        'Gets the bounds of the overlay relative to its parent. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."
##    BorderColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."
##    BorderSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'
##    BorderTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value with which the overlay will be translated from the X value of the position property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value with which the overlay will be translated from the X value of the position property.'
##    TranslationX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value with which the overlay will be translated from the Y value of the position property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value with which the overlay will be translated from the Y value of the position property.'
##    TranslationY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'
##    RotationAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'
##    RotationPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."
##    Scale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the overlay will be flipped along its X axis.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the overlay will be flipped along its X axis.'
##    FlipX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the overlay will be flipped along its Y axis.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the overlay will be flipped along its Y axis.'
##    FlipY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."
##    Origin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the origin of the pinning position property, relative to the overlay...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the origin of the pinning position property, relative to the overlay...'
##    PinningOrigin = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Parent(self):
##        "Gets the overlay's parent. This may be another overlay if this overlay was added to that overlay's overlays collection. Or, it may be the screen overlay manager if this overlay was added to the scene manager'sscreen overlays collection."
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the overlay's color. By default, the overlay is white."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overlay's color. By default, the overlay is white."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'
##    PickingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."
##    ClipToParent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ControlPosition(self):
##        'Gets the position of the overlay in coordinates relative to the overall globe control. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##        #return ppRetVal
##
##    @property
##    def ControlSize(self):
##        'Gets the size of the overlay in coordinates relative to the overall globe control. The elements are in the order width, height, width screen overlay unit, height screen overlay unit.'
##        #return ppRetVal
##
##    @property
##    def ControlBounds(self):
##        'Gets the bounds of the overlay in coordinates relative to the overall globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Overlays(self):
##        'Gets the collection of overlays that are contained within this overlay.'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'
##    Padding = property(_get, _set, doc = _set.__doc__)
##
##    def BringToFront(self):
##        'Brings the overlay to the front of the z-order, so it is on top of all other overlays with the same parent'
##        #return 
##
##    def SendToBack(self):
##        'Sends the overlay to the back of the z-order, so it is underneath all other overlays with the same parent'
##        #return 
##
##    def OverlayToControl(self, X, Y):
##        'Transforms a given position, specified relative to the overlay, into coordinates relative to the overall globe control...'
##        #return ppRetVal
##
##    def ControlToOverlay(self, X, Y):
##        'Transforms a given position, specified relative to the overall globe control, into coordinates relative to this overlay...'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##

class IAgStkGraphicsBoundingSphereFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Creates instances of the bounding sphere type.'
    _iid_ = GUID('{FDDE5510-3231-4C01-9C23-8485643E47FF}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsBoundingSphereFactory._methods_ = [
    COMMETHOD([helpstring('Create instances of BoundingSphere.')], HRESULT, 'Initialize',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the bounding sphere of maximum possible radius.')], HRESULT, 'MaximumRadiusBoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsBoundingSphereFactory implementation
##class IAgStkGraphicsBoundingSphereFactory_Impl(object):
##    def Initialize(self, Center, Radius):
##        'Create instances of BoundingSphere.'
##        #return ppRetVal
##
##    @property
##    def MaximumRadiusBoundingSphere(self):
##        'Gets the bounding sphere of maximum possible radius.'
##        #return ppRetVal
##

class _IAgStkGraphicsRenderingEventArgs(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsRenderingEventArgs'
    _iid_ = GUID('{17503DA2-9590-44E2-844C-0051BB3B643F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsRenderingEventArgs._methods_ = [
    COMMETHOD([dispid(19301), helpstring('The time of the rendering event.'), 'propget'], HRESULT, 'Time',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate)), 'ppRetVal' )),
    COMMETHOD([dispid(19302), helpstring("The time of the rendering event (in STK's scenario epoch units)."), 'propget'], HRESULT, 'TimeInEpSecs',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsRenderingEventArgs implementation
##class _IAgStkGraphicsRenderingEventArgs_Impl(object):
##    @property
##    def Time(self):
##        'The time of the rendering event.'
##        #return ppRetVal
##
##    @property
##    def TimeInEpSecs(self):
##        "The time of the rendering event (in STK's scenario epoch units)."
##        #return pRetVal
##


# values for enumeration 'AgEStkGraphicsRefreshRate'
eStkGraphicsRefreshRateFastest = 0
eStkGraphicsRefreshRateTargetedFramesPerSecond = 1
AgEStkGraphicsRefreshRate = c_int # enum
IAgStkGraphicsTextOverlay._methods_ = [
    COMMETHOD(['propget', helpstring("Sets the Text to be rendered to an overlay. Newline characters ('\n') will mark the start of the next line in the text.")], HRESULT, 'Text',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Sets the Text to be rendered to an overlay. Newline characters ('\n') will mark the start of the next line in the text.")], HRESULT, 'Text',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the text's outline color.")], HRESULT, 'OutlineColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the text's outline color.")], HRESULT, 'OutlineColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get the graphics font used to style the text.')], HRESULT, 'Font',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGraphicsFont)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Get the graphics font used to style the text.')], HRESULT, 'Font',
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTextOverlay implementation
##class IAgStkGraphicsTextOverlay_Impl(object):
##    def _get(self):
##        "Sets the Text to be rendered to an overlay. Newline characters ('\n') will mark the start of the next line in the text."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Sets the Text to be rendered to an overlay. Newline characters ('\n') will mark the start of the next line in the text."
##    Text = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the text's outline color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the text's outline color."
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the graphics font used to style the text.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the graphics font used to style the text.'
##    Font = property(_get, _set, doc = _set.__doc__)
##

class IAgStkGraphicsImageCollectionEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Events raised by the instances of ImageCollection.'
    _iid_ = GUID('{26D3CC1E-CF8B-49A5-853A-97FCAD8272C8}')
    _idlflags_ = []
    _methods_ = []
IAgStkGraphicsImageCollectionEvents._disp_methods_ = [
    DISPMETHOD([dispid(13301), helpstring('Raised when an asynchronous add is completed.')], None, 'AddComplete',
               ( [], VARIANT, 'Sender' ),
               ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs), 'Args' )),
]
class _IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory'
    _iid_ = GUID('{15FA16D0-33F5-47F4-8AF5-658502A97401}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsDistanceToPrimitiveDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Defines an inclusive distance interval, in meters, that determines when an object, such as a <topic name='Screen Overlays'>screen overlay</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the distance, in meters, from the came..."
    _iid_ = GUID('{BF9664C2-E8C4-471B-A071-865F1448A031}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Primitives represent objects rendered in the 3D scene.'
    _iid_ = GUID('{B593DC7B-315A-4C37-9F3C-42DFBD996AC2}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._methods_ = [
    COMMETHOD([dispid(7401), helpstring("Initializes a default distance to primitive display condition. With this constructor, an object is always <topic name='Glossary' anchor='Render'>rendered</topic> regardless of the camera's distance to the primitive.")], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToPrimitiveDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(7402), helpstring('Initializes a distance to primitive display condition with the inclusive distance interval [minimumDistance, maximumDistance]...')], HRESULT, 'InitializeWithDistances',
              ( ['in'], POINTER(IAgStkGraphicsPrimitive), 'Primitive' ),
              ( ['in'], c_double, 'MinimumDistance' ),
              ( ['in'], c_double, 'MaximumDistance' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToPrimitiveDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory implementation
##class _IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        "Initializes a default distance to primitive display condition. With this constructor, an object is always <topic name='Glossary' anchor='Render'>rendered</topic> regardless of the camera's distance to the primitive."
##        #return ppRetVal
##
##    def InitializeWithDistances(self, Primitive, MinimumDistance, MaximumDistance):
##        'Initializes a distance to primitive display condition with the inclusive distance interval [minimumDistance, maximumDistance]...'
##        #return ppRetVal
##

class _IAgStkGraphicsAGIRoamImageGlobeOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAGIRoamImageGlobeOverlay'
    _iid_ = GUID('{195BCAF0-EE08-4D29-B918-04540DD96C9D}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsAGIRoamImageGlobeOverlay._methods_ = [
    COMMETHOD([dispid(16701), helpstring('Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16701), helpstring('Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16703), helpstring("Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."), 'propget'], HRESULT, 'UseAltitudeBasedTranslucency',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16703), helpstring("Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."), 'propput'], HRESULT, 'UseAltitudeBasedTranslucency',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(16704), helpstring("Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyLowerTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16704), helpstring("Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyLowerTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16705), helpstring("Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyUpperTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16705), helpstring("Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyUpperTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16706), helpstring("Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyLowerAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16706), helpstring("Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyLowerAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16707), helpstring("Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyUpperAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16707), helpstring("Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyUpperAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16702), helpstring('Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'), 'propget'], HRESULT, 'MoreThanOneImageGlobeOverlaySupported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16801), helpstring("Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16802), helpstring('Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'), 'propget'], HRESULT, 'Extent',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16803), helpstring('Gets the globe overlay role of the globe overlay.'), 'propget'], HRESULT, 'Role',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsGlobeOverlayRole), 'pRetVal' )),
    COMMETHOD([dispid(16804), helpstring('Gets the absolute URI specifying the location of the globe overlay.'), 'propget'], HRESULT, 'UriAsString',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16805), helpstring('Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsAGIRoamImageGlobeOverlay implementation
##class _IAgStkGraphicsAGIRoamImageGlobeOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."
##    UseAltitudeBasedTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."
##    AltitudeBasedTranslucencyLowerTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."
##    AltitudeBasedTranslucencyUpperTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##    AltitudeBasedTranslucencyLowerAltitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##    AltitudeBasedTranslucencyUpperAltitude = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MoreThanOneImageGlobeOverlaySupported(self):
##        'Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'
##        #return pRetVal
##
##    @property
##    def CentralBody(self):
##        "Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."
##        #return pRetVal
##
##    @property
##    def Extent(self):
##        'Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'
##        #return ppRetVal
##
##    @property
##    def Role(self):
##        'Gets the globe overlay role of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def UriAsString(self):
##        'Gets the absolute URI specifying the location of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsEdgeDetectFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsEdgeDetectFilterFactory'
    _iid_ = GUID('{87280E66-2578-4EA4-8AAF-157B6A1FCB4F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsEdgeDetectFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Applies a convolution filter to detect edges in the source raster.'
    _iid_ = GUID('{0919D5B6-9497-4027-9FA2-69AFE60C5F02}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsEdgeDetectMethod'
eStkGraphicsEdgeDetectMethodVertical = 0
eStkGraphicsEdgeDetectMethodHorizontal = 1
eStkGraphicsEdgeDetectMethodLeftDiagonal = 2
eStkGraphicsEdgeDetectMethodRightDiagonal = 3
eStkGraphicsEdgeDetectMethodLaplacian = 4
eStkGraphicsEdgeDetectMethodPrewittLaplacian = 5
eStkGraphicsEdgeDetectMethodSobelVertical = 6
eStkGraphicsEdgeDetectMethodSobelHorizontal = 7
AgEStkGraphicsEdgeDetectMethod = c_int # enum
_IAgStkGraphicsEdgeDetectFilterFactory._methods_ = [
    COMMETHOD([dispid(22801), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsEdgeDetectFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(22802), helpstring('Initializes a new instance with the specified edge detect method.')], HRESULT, 'InitializeWithMethod',
              ( ['in'], AgEStkGraphicsEdgeDetectMethod, 'Method' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsEdgeDetectFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsEdgeDetectFilterFactory implementation
##class _IAgStkGraphicsEdgeDetectFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithMethod(self, Method):
##        'Initializes a new instance with the specified edge detect method.'
##        #return ppRetVal
##

IAgStkGraphicsKmlFeature._methods_ = [
    COMMETHOD(['propget', helpstring('Gets whether the document associated with this feature is loaded.')], HRESULT, 'IsLoaded',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether this feature will be displayed in the Scene.')], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether this feature will be displayed in the Scene.')], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the content associated with this feature.')], HRESULT, 'Content',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the name of this feature.')], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the description associated with this feature.')], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the snippet associated with this feature.')], HRESULT, 'Snippet',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The bounding sphere encompassing the area associated with this feature.')], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([helpstring('Moves the camera to the area encompassing this feature.')], HRESULT, 'FlyTo'),
]
################################################################
## code template for IAgStkGraphicsKmlFeature implementation
##class IAgStkGraphicsKmlFeature_Impl(object):
##    @property
##    def IsLoaded(self):
##        'Gets whether the document associated with this feature is loaded.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets whether this feature will be displayed in the Scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether this feature will be displayed in the Scene.'
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Content(self):
##        'Gets the content associated with this feature.'
##        #return pRetVal
##
##    @property
##    def Name(self):
##        'Gets the name of this feature.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Gets the description associated with this feature.'
##        #return pRetVal
##
##    @property
##    def Snippet(self):
##        'Gets the snippet associated with this feature.'
##        #return pRetVal
##
##    @property
##    def BoundingSphere(self):
##        'The bounding sphere encompassing the area associated with this feature.'
##        #return ppRetVal
##
##    def FlyTo(self):
##        'Moves the camera to the area encompassing this feature.'
##        #return 
##

class _IAgStkGraphicsKmlFeature(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsKmlFeature'
    _iid_ = GUID('{9DB25F35-FC7D-447C-B1CF-8512F7ED41E7}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsKmlFeature._methods_ = [
    COMMETHOD([dispid(26601), helpstring('Gets whether the document associated with this feature is loaded.'), 'propget'], HRESULT, 'IsLoaded',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(26602), helpstring('Gets or sets whether this feature will be displayed in the Scene.'), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(26602), helpstring('Gets or sets whether this feature will be displayed in the Scene.'), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(26603), helpstring('Gets the content associated with this feature.'), 'propget'], HRESULT, 'Content',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26604), helpstring('Gets the name of this feature.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26605), helpstring('Gets the description associated with this feature.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26606), helpstring('Gets the snippet associated with this feature.'), 'propget'], HRESULT, 'Snippet',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26607), helpstring('The bounding sphere encompassing the area associated with this feature.'), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(26608), helpstring('Moves the camera to the area encompassing this feature.')], HRESULT, 'FlyTo'),
]
################################################################
## code template for _IAgStkGraphicsKmlFeature implementation
##class _IAgStkGraphicsKmlFeature_Impl(object):
##    @property
##    def IsLoaded(self):
##        'Gets whether the document associated with this feature is loaded.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets whether this feature will be displayed in the Scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether this feature will be displayed in the Scene.'
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Content(self):
##        'Gets the content associated with this feature.'
##        #return pRetVal
##
##    @property
##    def Name(self):
##        'Gets the name of this feature.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Gets the description associated with this feature.'
##        #return pRetVal
##
##    @property
##    def Snippet(self):
##        'Gets the snippet associated with this feature.'
##        #return pRetVal
##
##    @property
##    def BoundingSphere(self):
##        'The bounding sphere encompassing the area associated with this feature.'
##        #return ppRetVal
##
##    def FlyTo(self):
##        'Moves the camera to the area encompassing this feature.'
##        #return 
##

class IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Optional per-marker parameters for marker batch primitive that overrides the marker batch's per-batch parameters..."
    _iid_ = GUID('{7303B63E-A1B7-445E-90E0-508A6937DE86}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._methods_ = [
    COMMETHOD([helpstring('Defines a collection of textures, one for each marker in the batch.')], HRESULT, 'SetTextures',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Textures' )),
    COMMETHOD([helpstring('Defines a collection of sizes, one for each marker in the batch.')], HRESULT, 'SetSizes',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Sizes' )),
    COMMETHOD([helpstring('Defines a collection of colors, one for each marker in the batch.')], HRESULT, 'SetColors',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' )),
    COMMETHOD([helpstring('Defines a collection of origins, one for each marker in the batch.')], HRESULT, 'SetOrigins',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Origins' )),
    COMMETHOD([helpstring('Defines a collection of pixel offsets, one for each marker in the batch.')], HRESULT, 'SetPixelOffsets',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'PixelOffsets' )),
    COMMETHOD([helpstring('Defines a collection of eye offsets, one for each marker in the batch.')], HRESULT, 'SetEyeOffsets',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'EyeOffsets' )),
    COMMETHOD([helpstring('Defines a collection of rotation angles in radians, one for each marker in the batch.')], HRESULT, 'SetRotations',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'RotationAngles' )),
    COMMETHOD([helpstring('Defines a collection of texture coordinates, one for each marker in the batch.')], HRESULT, 'SetTextureCoordinates',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'TextureCoordinates' )),
    COMMETHOD([helpstring('Defines a collection of time interval display conditions, one for each marker in the batch.')], HRESULT, 'SetTimeIntervalDisplayConditions',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'TimeIntervals' )),
    COMMETHOD([helpstring('Defines a collection of boolean display flags, one for each marker in the batch.')], HRESULT, 'SetDisplays',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Displays' )),
]
################################################################
## code template for IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters implementation
##class IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters_Impl(object):
##    def SetTextures(self, Textures):
##        'Defines a collection of textures, one for each marker in the batch.'
##        #return 
##
##    def SetSizes(self, Sizes):
##        'Defines a collection of sizes, one for each marker in the batch.'
##        #return 
##
##    def SetColors(self, Colors):
##        'Defines a collection of colors, one for each marker in the batch.'
##        #return 
##
##    def SetOrigins(self, Origins):
##        'Defines a collection of origins, one for each marker in the batch.'
##        #return 
##
##    def SetPixelOffsets(self, PixelOffsets):
##        'Defines a collection of pixel offsets, one for each marker in the batch.'
##        #return 
##
##    def SetEyeOffsets(self, EyeOffsets):
##        'Defines a collection of eye offsets, one for each marker in the batch.'
##        #return 
##
##    def SetRotations(self, RotationAngles):
##        'Defines a collection of rotation angles in radians, one for each marker in the batch.'
##        #return 
##
##    def SetTextureCoordinates(self, TextureCoordinates):
##        'Defines a collection of texture coordinates, one for each marker in the batch.'
##        #return 
##
##    def SetTimeIntervalDisplayConditions(self, TimeIntervals):
##        'Defines a collection of time interval display conditions, one for each marker in the batch.'
##        #return 
##
##    def SetDisplays(self, Displays):
##        'Defines a collection of boolean display flags, one for each marker in the batch.'
##        #return 
##

class _IAgStkGraphicsModelPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsModelPrimitive'
    _iid_ = GUID('{7271AB5A-B51B-4B77-B7CE-602FB3F41CE4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsModelArticulationCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "A collection containing a model primitive's available articulations. A model articulation identifies geometry on the model and is a collection of transformations that can be applied to that geometry."
    _iid_ = GUID('{CF6E3054-4D92-42F8-AC4D-E43BFD93D23D}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsModelUpAxis'
eStkGraphicsModelUpAxisX = 0
eStkGraphicsModelUpAxisY = 1
eStkGraphicsModelUpAxisZ = 2
eStkGraphicsModelUpAxisNegativeX = 3
eStkGraphicsModelUpAxisNegativeY = 4
eStkGraphicsModelUpAxisNegativeZ = 5
AgEStkGraphicsModelUpAxis = c_int # enum
_IAgStkGraphicsModelPrimitive._methods_ = [
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propget'], HRESULT, 'ReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propput'], HRESULT, 'ReferenceFrame',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propput'], HRESULT, 'BoundingSphere',
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'ppRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propget'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propput'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(4511), helpstring('Gets the URI of the file used to load the file.'), 'propget'], HRESULT, 'UriAsString',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(4502), helpstring('Gets or sets the linear scale used to increase or decrease the size of the rendered model.'), 'propget'], HRESULT, 'Scale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(4502), helpstring('Gets or sets the linear scale used to increase or decrease the size of the rendered model.'), 'propput'], HRESULT, 'Scale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(4503), helpstring("Gets or sets the position of the model. The position is defined in the model's reference frame. The array contains the components of the position in the order x, y, z."), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(4503), helpstring("Gets or sets the position of the model. The position is defined in the model's reference frame. The array contains the components of the position in the order x, y, z."), 'propput'], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(4504), helpstring("Gets or sets the model's orientation. The quaternion is a rotation from the model's local axes to the axes of the model's reference frame."), 'propget'], HRESULT, 'Orientation',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation)), 'ppRetVal' )),
    COMMETHOD([dispid(4504), helpstring("Gets or sets the model's orientation. The quaternion is a rotation from the model's local axes to the axes of the model's reference frame."), 'propput'], HRESULT, 'Orientation',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation), 'ppRetVal' )),
    COMMETHOD([dispid(4505), helpstring("Gets the model's articulations. Articulations identify geometry and contain transformations for manipulating that geometry."), 'propget'], HRESULT, 'Articulations',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelArticulationCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(4507), helpstring("For convenience. Loads a <a href='http://www.collada.org/'>COLLADA</a> (DAE) or AGI <a href='http://www.agi.com/resources/models/models0.cfm'>MDL</a> (MDL) model using a file path.")], HRESULT, 'LoadWithStringUri',
              ( ['in'], BSTR, 'Uri' )),
    COMMETHOD([dispid(4509), helpstring("For convenience. Loads a <a href='http://www.collada.org/'>COLLADA</a> (DAE) or AGI <a href='http://www.agi.com/resources/models/models0.cfm'>MDL</a> (MDL) model using a file path.")], HRESULT, 'LoadWithStringUriAndUpAxis',
              ( ['in'], BSTR, 'Uri' ),
              ( ['in'], AgEStkGraphicsModelUpAxis, 'UpAxis' )),
    COMMETHOD([dispid(4510), helpstring('For convenience. Sets the cartographic position of the model. Longitude and latitude are in radians, and altitude is in meters. This also sets position.')], HRESULT, 'SetPositionCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsModelPrimitive implementation
##class _IAgStkGraphicsModelPrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##    ReferenceFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##    BoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##    AutomaticallyComputeBoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's color."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def UriAsString(self):
##        'Gets the URI of the file used to load the file.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the linear scale used to increase or decrease the size of the rendered model.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the linear scale used to increase or decrease the size of the rendered model.'
##    Scale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the position of the model. The position is defined in the model's reference frame. The array contains the components of the position in the order x, y, z."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the position of the model. The position is defined in the model's reference frame. The array contains the components of the position in the order x, y, z."
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the model's orientation. The quaternion is a rotation from the model's local axes to the axes of the model's reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the model's orientation. The quaternion is a rotation from the model's local axes to the axes of the model's reference frame."
##    Orientation = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Articulations(self):
##        "Gets the model's articulations. Articulations identify geometry and contain transformations for manipulating that geometry."
##        #return ppRetVal
##
##    def LoadWithStringUri(self, Uri):
##        "For convenience. Loads a <a href='http://www.collada.org/'>COLLADA</a> (DAE) or AGI <a href='http://www.agi.com/resources/models/models0.cfm'>MDL</a> (MDL) model using a file path."
##        #return 
##
##    def LoadWithStringUriAndUpAxis(self, Uri, UpAxis):
##        "For convenience. Loads a <a href='http://www.collada.org/'>COLLADA</a> (DAE) or AGI <a href='http://www.agi.com/resources/models/models0.cfm'>MDL</a> (MDL) model using a file path."
##        #return 
##
##    def SetPositionCartographic(self, CentralBody, Position):
##        'For convenience. Sets the cartographic position of the model. Longitude and latitude are in radians, and altitude is in meters. This also sets position.'
##        #return 
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory'
    _iid_ = GUID('{6B75D9D4-819C-453B-8A54-7B2B72E30E60}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsDurationPathPrimitiveUpdatePolicy(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'path primitive update policy that removes points from remove location after a given duration.'
    _iid_ = GUID('{23D3C9C4-B242-4A5A-89CF-58387BD9F935}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsPathPrimitiveRemoveLocation'
eStkGraphicsRemoveLocationFront = 0
eStkGraphicsRemoveLocationBack = 1
AgEStkGraphicsPathPrimitiveRemoveLocation = c_int # enum
_IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._methods_ = [
    COMMETHOD([dispid(11401), helpstring('Constructs a default update policy. This is equivalent to constructing a policy with duration set to 0 and a remove location of Front.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy)), 'ppRetVal' )),
    COMMETHOD([dispid(11402), helpstring('Initializes a policy with the specified duration and removeLocation.')], HRESULT, 'InitializeWithParameters',
              ( ['in'], c_double, 'Duration' ),
              ( ['in'], AgEStkGraphicsPathPrimitiveRemoveLocation, 'RemoveLocation' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory implementation
##class _IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory_Impl(object):
##    def Initialize(self):
##        'Constructs a default update policy. This is equivalent to constructing a policy with duration set to 0 and a remove location of Front.'
##        #return ppRetVal
##
##    def InitializeWithParameters(self, Duration, RemoveLocation):
##        'Initializes a policy with the specified duration and removeLocation.'
##        #return ppRetVal
##

class Library(object):
    'AGI STK Graphics 11'
    name = 'AgSTKGraphicsLib'
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)


# values for enumeration 'AgEStkGraphicsKmlNetworkLinkViewRefreshMode'
eStkGraphicsKmlNetworkLinkViewRefreshModeNever = 0
eStkGraphicsKmlNetworkLinkViewRefreshModeOnRequest = 1
eStkGraphicsKmlNetworkLinkViewRefreshModeOnStop = 2
eStkGraphicsKmlNetworkLinkViewRefreshModeOnRegion = 3
AgEStkGraphicsKmlNetworkLinkViewRefreshMode = c_int # enum
class _IAgStkGraphicsPathPoint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPathPoint'
    _iid_ = GUID('{49EE5D85-028E-4B8E-BBA4-14D24ACEFB9F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsPathPoint._methods_ = [
    COMMETHOD([dispid(17401), helpstring('A path point position as a one-dimensional array of three elements corresponding to (X,Y,Z) cartesian coordinates.'), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17401), helpstring('A path point position as a one-dimensional array of three elements corresponding to (X,Y,Z) cartesian coordinates.'), 'propput'], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17402), helpstring('A date/time of the path point.'), 'propget'], HRESULT, 'Date',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate)), 'ppRetVal' )),
    COMMETHOD([dispid(17403), helpstring('The path point color.'), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17403), helpstring('The path point color.'), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17404), helpstring('The path point translucency.'), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17404), helpstring('The path point translucency.'), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17405), helpstring('The path point outline color.'), 'propget'], HRESULT, 'OutlineColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17405), helpstring('The path point outline color.'), 'propput'], HRESULT, 'OutlineColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17409), helpstring('The path point outline translucency.'), 'propget'], HRESULT, 'OutlineTranslucency',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17409), helpstring('The path point outline translucency.'), 'propput'], HRESULT, 'OutlineTranslucency',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17407), helpstring('Whether the path point is translucent.'), 'propget'], HRESULT, 'IsTranslucent',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsPathPoint implementation
##class _IAgStkGraphicsPathPoint_Impl(object):
##    def _get(self):
##        'A path point position as a one-dimensional array of three elements corresponding to (X,Y,Z) cartesian coordinates.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A path point position as a one-dimensional array of three elements corresponding to (X,Y,Z) cartesian coordinates.'
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Date(self):
##        'A date/time of the path point.'
##        #return ppRetVal
##
##    def _get(self):
##        'The path point color.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The path point color.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The path point translucency.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The path point translucency.'
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The path point outline color.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The path point outline color.'
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The path point outline translucency.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The path point outline translucency.'
##    OutlineTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsTranslucent(self):
##        'Whether the path point is translucent.'
##        #return pRetVal
##

class _IAgStkGraphicsVideoStreamFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsVideoStreamFactory'
    _iid_ = GUID('{B8BD0C96-6723-4BB1-8EF1-AF4FB6CE2E10}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsVideoStream(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "A raster stream that streams from a video. The video can be read from a file, or streamed from an HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage."
    _iid_ = GUID('{95FCC91E-A95A-48C4-A34F-9ED67F8E4F4A}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsVideoStreamFactory._methods_ = [
    COMMETHOD([dispid(20001), helpstring("Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage.")], HRESULT, 'InitializeWithStringUri',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsVideoStream)), 'ppRetVal' )),
    COMMETHOD([dispid(20003), helpstring("Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage.")], HRESULT, 'InitializeWithStringUriAndAudio',
              ( ['in'], BSTR, 'Uri' ),
              ( ['in'], VARIANT_BOOL, 'LoadAudio' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsVideoStream)), 'ppRetVal' )),
    COMMETHOD([dispid(20004), helpstring("Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage.")], HRESULT, 'InitializeAudioVideoWithStringUri',
              ( ['in'], BSTR, 'Uri' ),
              ( ['in'], BSTR, 'AudioUri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsVideoStream)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsVideoStreamFactory implementation
##class _IAgStkGraphicsVideoStreamFactory_Impl(object):
##    def InitializeWithStringUri(self, Uri):
##        "Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage."
##        #return ppRetVal
##
##    def InitializeWithStringUriAndAudio(self, Uri, LoadAudio):
##        "Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage."
##        #return ppRetVal
##
##    def InitializeAudioVideoWithStringUri(self, Uri, AudioUri):
##        "Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage."
##        #return ppRetVal
##

class IAgStkGraphicsPathPoint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A path point used with the Path Primitive.'
    _iid_ = GUID('{9107FCA2-51B8-4347-9391-9EE6C6B792E3}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsPathPoint._methods_ = [
    COMMETHOD(['propget', helpstring('A path point position as a one-dimensional array of three elements corresponding to (X,Y,Z) cartesian coordinates.')], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('A path point position as a one-dimensional array of three elements corresponding to (X,Y,Z) cartesian coordinates.')], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('A date/time of the path point.')], HRESULT, 'Date',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('The path point color.')], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The path point color.')], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The path point translucency.')], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The path point translucency.')], HRESULT, 'Translucency',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The path point outline color.')], HRESULT, 'OutlineColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The path point outline color.')], HRESULT, 'OutlineColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The path point outline translucency.')], HRESULT, 'OutlineTranslucency',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('The path point outline translucency.')], HRESULT, 'OutlineTranslucency',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Whether the path point is translucent.')], HRESULT, 'IsTranslucent',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsPathPoint implementation
##class IAgStkGraphicsPathPoint_Impl(object):
##    def _get(self):
##        'A path point position as a one-dimensional array of three elements corresponding to (X,Y,Z) cartesian coordinates.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'A path point position as a one-dimensional array of three elements corresponding to (X,Y,Z) cartesian coordinates.'
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Date(self):
##        'A date/time of the path point.'
##        #return ppRetVal
##
##    def _get(self):
##        'The path point color.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The path point color.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The path point translucency.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The path point translucency.'
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The path point outline color.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The path point outline color.'
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'The path point outline translucency.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'The path point outline translucency.'
##    OutlineTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsTranslucent(self):
##        'Whether the path point is translucent.'
##        #return pRetVal
##

class IAgStkGraphicsAlphaFromRasterFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Adds an alpha band to the source raster derived from the color bands or alpha of another raster. This filter can be used to apply an alpha mask to the source raster.'
    _iid_ = GUID('{77326F5E-C3F3-4660-8DF4-6225CFDC0870}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsAlphaFromRasterFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the raster that the source raster will use to derive an alpha band.')], HRESULT, 'Raster',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the raster that the source raster will use to derive an alpha band.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsAlphaFromRasterFilter implementation
##class IAgStkGraphicsAlphaFromRasterFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the raster that the source raster will use to derive an alpha band.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the raster that the source raster will use to derive an alpha band.'
##    Raster = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsCameraVideoRecording(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsCameraVideoRecording'
    _iid_ = GUID('{D04B52EB-CDAA-40B1-8B0E-FD9743DC9296}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgEStkGraphicsCameraSnapshotFileFormat'
eStkGraphicsCameraSnapshotFileFormatBmp = 0
eStkGraphicsCameraSnapshotFileFormatRas = 1
eStkGraphicsCameraSnapshotFileFormatTiff = 2
eStkGraphicsCameraSnapshotFileFormatJpeg = 3
AgEStkGraphicsCameraSnapshotFileFormat = c_int # enum
_IAgStkGraphicsCameraVideoRecording._methods_ = [
    COMMETHOD([dispid(25201), helpstring('Gets if recording is occurring or not.'), 'propget'], HRESULT, 'IsRecording',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(25202), helpstring('Starts recording a file in the WMV format at the specified bit and frame rate.')], HRESULT, 'StartRecording',
              ( ['in'], BSTR, 'WmvFilename' ),
              ( ['in'], c_int, 'VideoBitRate' ),
              ( ['in'], c_int, 'VideoFrameRate' )),
    COMMETHOD([dispid(25203), helpstring('Starts recording a frame stack. Each frame is saved as a separate image file. The filename of each frame is defined by a prefix followed by a frame number.')], HRESULT, 'StartRecordingFrameStack',
              ( ['in'], BSTR, 'FileDirectory' ),
              ( ['in'], BSTR, 'FilePrefix' ),
              ( ['in'], AgEStkGraphicsCameraSnapshotFileFormat, 'CameraSnapshotFileFormat' ),
              ( ['in'], c_int, 'StartingFrameNumber' ),
              ( ['in'], c_int, 'NumberOfFrameDigits' )),
    COMMETHOD([dispid(25204), helpstring('Stops recording.')], HRESULT, 'StopRecording'),
]
################################################################
## code template for _IAgStkGraphicsCameraVideoRecording implementation
##class _IAgStkGraphicsCameraVideoRecording_Impl(object):
##    @property
##    def IsRecording(self):
##        'Gets if recording is occurring or not.'
##        #return pRetVal
##
##    def StartRecording(self, WmvFilename, VideoBitRate, VideoFrameRate):
##        'Starts recording a file in the WMV format at the specified bit and frame rate.'
##        #return 
##
##    def StartRecordingFrameStack(self, FileDirectory, FilePrefix, CameraSnapshotFileFormat, StartingFrameNumber, NumberOfFrameDigits):
##        'Starts recording a frame stack. Each frame is saved as a separate image file. The filename of each frame is defined by a prefix followed by a frame number.'
##        #return 
##
##    def StopRecording(self):
##        'Stops recording.'
##        #return 
##

class IAgStkGraphicsGammaCorrectionFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Applies gamma correction to the source raster. The gamma is a value between .2 and 5. The default gamma value is 2.2.'
    _iid_ = GUID('{4E0BE3D1-F9CA-47B6-BC7B-31FD98C824A6}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsGammaCorrectionFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Applies gamma correction to the source raster. The gamma is a value between .2 and 5. The default gamma value is 2.2.'
    _iid_ = GUID('{C4B3703D-C059-47C7-8B49-11BBEDD7975A}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsGammaCorrectionFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGammaCorrectionFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with the specified gamma.')], HRESULT, 'InitializeWithGamma',
              ( ['in'], c_double, 'Gamma' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGammaCorrectionFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsGammaCorrectionFilterFactory implementation
##class IAgStkGraphicsGammaCorrectionFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithGamma(self, Gamma):
##        'Initializes a new instance with the specified gamma.'
##        #return ppRetVal
##

class _IAgStkGraphicsGradientDetectFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGradientDetectFilterFactory'
    _iid_ = GUID('{B2B0AAC8-E2B5-4BDF-AC80-7D62E23B1AE4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsGradientDetectFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Applies a convolution filter to detect gradients in the source raster.'
    _iid_ = GUID('{5A9E0D4C-4F36-47C8-8F81-FFDFE63CB112}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsGradientDetectMethod'
eStkGraphicsGradientDetectMethodEast = 0
eStkGraphicsGradientDetectMethodNorth = 1
eStkGraphicsGradientDetectMethodWest = 2
eStkGraphicsGradientDetectMethodSouth = 3
eStkGraphicsGradientDetectMethodNorthEast = 4
eStkGraphicsGradientDetectMethodNorthWest = 5
eStkGraphicsGradientDetectMethodSouthEast = 6
eStkGraphicsGradientDetectMethodSouthWest = 7
AgEStkGraphicsGradientDetectMethod = c_int # enum
_IAgStkGraphicsGradientDetectFilterFactory._methods_ = [
    COMMETHOD([dispid(23201), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGradientDetectFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(23202), helpstring('Initializes a new instance with specified gradient detect method.')], HRESULT, 'InitializeWithMethod',
              ( ['in'], AgEStkGraphicsGradientDetectMethod, 'Method' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGradientDetectFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGradientDetectFilterFactory implementation
##class _IAgStkGraphicsGradientDetectFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithMethod(self, Method):
##        'Initializes a new instance with specified gradient detect method.'
##        #return ppRetVal
##

class _IAgStkGraphicsModelPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsModelPrimitiveFactory'
    _iid_ = GUID('{6A522543-68D2-484E-B624-A9EDB2DB69A2}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsModelPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "The model primitive loads and renders <a href='http://www.collada.org/'>COLLADA</a> (DAE) and AGI <a href='http://www.agi.com/resources/models/models0.cfm'>MDL</a> (MDL) models."
    _iid_ = GUID('{67A2AD57-E9B2-4DC9-B509-62CBEBC405CA}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsModelPrimitiveFactory._methods_ = [
    COMMETHOD([dispid(7901), helpstring('Initializes a default model primitive.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(7903), helpstring('For convenience. Initializes a model primitive with the specified file path.')], HRESULT, 'InitializeWithStringUri',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(7905), helpstring('For convenience. Initializes a model primitive with the specified file path and up axis.')], HRESULT, 'InitializeWithStringUriAndUpAxis',
              ( ['in'], BSTR, 'Uri' ),
              ( ['in'], AgEStkGraphicsModelUpAxis, 'UpAxis' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelPrimitive)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsModelPrimitiveFactory implementation
##class _IAgStkGraphicsModelPrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default model primitive.'
##        #return ppRetVal
##
##    def InitializeWithStringUri(self, Uri):
##        'For convenience. Initializes a model primitive with the specified file path.'
##        #return ppRetVal
##
##    def InitializeWithStringUriAndUpAxis(self, Uri, UpAxis):
##        'For convenience. Initializes a model primitive with the specified file path and up axis.'
##        #return ppRetVal
##

IAgStkGraphicsDistanceToPositionDisplayCondition._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the minimum distance, in meters, of the inclusive distance interval.')], HRESULT, 'MinimumDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the minimum distance, in meters, of the inclusive distance interval.')], HRESULT, 'MinimumDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the squared minimum distance, in meters, of the inclusive distance interval.')], HRESULT, 'MinimumDistanceSquared',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.')], HRESULT, 'MaximumDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.')], HRESULT, 'MaximumDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the squared maximum distance, in meters, of the inclusive distance interval.')], HRESULT, 'MaximumDistanceSquared',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the position used to compute the distance from the camera. The array contains the components of the position arranged in the order x, y, z.')], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the position used to compute the distance from the camera. The array contains the components of the position arranged in the order x, y, z.')], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the reference frame that position is defined in.')], HRESULT, 'ReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the reference frame that position is defined in.')], HRESULT, 'ReferenceFrame',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsDistanceToPositionDisplayCondition implementation
##class IAgStkGraphicsDistanceToPositionDisplayCondition_Impl(object):
##    def _get(self):
##        'Gets or sets the minimum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the minimum distance, in meters, of the inclusive distance interval.'
##    MinimumDistance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumDistanceSquared(self):
##        'Gets the squared minimum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'
##    MaximumDistance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MaximumDistanceSquared(self):
##        'Gets the squared maximum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the position used to compute the distance from the camera. The array contains the components of the position arranged in the order x, y, z.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the position used to compute the distance from the camera. The array contains the components of the position arranged in the order x, y, z.'
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the reference frame that position is defined in.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference frame that position is defined in.'
##    ReferenceFrame = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AgEStkGraphicsPolylineType'
eStkGraphicsPolylineTypeLines = 0
eStkGraphicsPolylineTypeLineStrip = 1
eStkGraphicsPolylineTypePoints = 2
AgEStkGraphicsPolylineType = c_int # enum
IAgStkGraphicsSolidTriangulatorResult._methods_ = [
    COMMETHOD(['propget', helpstring('Gets indices into positions that define the positions outlining the solid. The indices returned consider the three components of a position (x, y, and z) as a single array element...')], HRESULT, 'OutlineIndices',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the positions outlining the solid. Three array elements (in the order x, y, z) constitute one position.')], HRESULT, 'OutlinePositions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the polyline type of outline indices and outline positions.')], HRESULT, 'OutlinePolylineType',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPolylineType), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets whether the solid is closed. For example, a box with six faces is closed. If one face is removed, the box is open.')], HRESULT, 'Closed',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSolidTriangulatorResult implementation
##class IAgStkGraphicsSolidTriangulatorResult_Impl(object):
##    @property
##    def OutlineIndices(self):
##        'Gets indices into positions that define the positions outlining the solid. The indices returned consider the three components of a position (x, y, and z) as a single array element...'
##        #return ppRetVal
##
##    @property
##    def OutlinePositions(self):
##        'Gets the positions outlining the solid. Three array elements (in the order x, y, z) constitute one position.'
##        #return ppRetVal
##
##    @property
##    def OutlinePolylineType(self):
##        'Gets the polyline type of outline indices and outline positions.'
##        #return pRetVal
##
##    @property
##    def Closed(self):
##        'Gets whether the solid is closed. For example, a box with six faces is closed. If one face is removed, the box is open.'
##        #return pRetVal
##

class IAgStkGraphicsTextBatchPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    " Renders one or more strings in the 3D scene.  For best performance, avoid creating lots of batches with only a few strings each. See the <topic name='Batching'>Batching Performance Overview</topic>. "
    _iid_ = GUID('{037722FB-C0E5-4052-B34D-60AA662B5D2B}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsTextBatchPrimitiveOptionalParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Optional per-string and per-batch parameters for text batch primitive...'
    _iid_ = GUID('{E18B012F-840D-4F32-8810-DD253C38CE7F}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsRenderPassHint'
eStkGraphicsRenderPassHintOpaque = 0
eStkGraphicsRenderPassHintTranslucent = 1
eStkGraphicsRenderPassHintUnknown = 2
AgEStkGraphicsRenderPassHint = c_int # enum

# values for enumeration 'AgEStkGraphicsIndicesOrderHint'
eStkGraphicsIndicesOrderHintNotSorted = 0
eStkGraphicsIndicesOrderHintSortedAscending = 1
AgEStkGraphicsIndicesOrderHint = c_int # enum
IAgStkGraphicsTextBatchPrimitive._methods_ = [
    COMMETHOD(['propget', helpstring("Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with.")], HRESULT, 'SetHint',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSetHint), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the scale applied to the radius of this primitive's bounding sphere.")], HRESULT, 'BoundingSphereScale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the scale applied to the radius of this primitive's bounding sphere.")], HRESULT, 'BoundingSphereScale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the font used to render the text batch.')], HRESULT, 'Font',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGraphicsFont)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the text's outline color.")], HRESULT, 'OutlineColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the text's outline color.")], HRESULT, 'OutlineColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the text's outline translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.")], HRESULT, 'OutlineTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the text's outline translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.")], HRESULT, 'OutlineTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the screen space position of each string is aligned to a pixel.')], HRESULT, 'AlignToPixel',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the screen space position of each string is aligned to a pixel.')], HRESULT, 'AlignToPixel',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets a distance display condition that is evaluated per string in the text batch during rendering. This is different than display condition, which is evaluated once for the entire text batch...')], HRESULT, 'DistanceDisplayConditionPerString',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceDisplayCondition)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets a distance display condition that is evaluated per string in the text batch during rendering. This is different than display condition, which is evaluated once for the entire text batch...')], HRESULT, 'DistanceDisplayConditionPerString',
              ( ['in'], POINTER(IAgStkGraphicsDistanceDisplayCondition), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets whether individual text indices will be included in the pick results returned from the scene's Pick method. Each text index that is picked will be returned as a batch primitive index.")], HRESULT, 'PerItemPickingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets whether individual text indices will be included in the pick results returned from the scene's Pick method. Each text index that is picked will be returned as a batch primitive index.")], HRESULT, 'PerItemPickingEnabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the filter used to filter the texture-based font.')], HRESULT, 'TextureFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the filter used to filter the texture-based font.')], HRESULT, 'TextureFilter',
              ( ['in'], POINTER(IAgStkGraphicsTextureFilter2D), 'ppRetVal' )),
    COMMETHOD([helpstring("Defines the positions and text of strings in a text batch. The strings are rendered in the primitive's reference frame.")], HRESULT, 'Set',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' )),
    COMMETHOD([helpstring("Defines the positions, text, and optional parameters of strings in a text batch. The strings are rendered in the primitive's reference frame.")], HRESULT, 'SetWithOptionalParameters',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters), 'OptionalParameters' )),
    COMMETHOD([helpstring("Defines the positions, text, and optional parameters of strings in a text batch. The strings are rendered in the primitive's reference frame. renderPassHint is provided for efficiency.")], HRESULT, 'SetWithOptionalParametersAndRenderPass',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([helpstring('For convenience. Defines the positions and text of strings in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' )),
    COMMETHOD([helpstring('For convenience. Defines the positions, text, and optional parameters of strings in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetCartographicWithOptionalParameters',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters), 'OptionalParameters' )),
    COMMETHOD([helpstring('For convenience. Defines the positions, text, and optional parameters of strings in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetCartographicWithOptionalParametersAndRenderPass',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([helpstring('Updates a subset of positions and/or text in a text batch.')], HRESULT, 'SetPartial',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring('Updates a subset of positions and/or text in a text batch.')], HRESULT, 'SetPartialWithIndicesOrder',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' )),
    COMMETHOD([helpstring('Updates a subset of positions, text, and/or optional per-string parameters in a text batch.')], HRESULT, 'SetPartialWithOptionalParameters',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring('Updates a subset of positions, text, and/or optional per-string parameters in a text batch.')], HRESULT, 'SetPartialWithOptionalParametersIndicesOrderAndRenderPass',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([helpstring('For convenience. Updates a subset of positions and/or text in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring('For convenience. Updates a subset of positions and/or text in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithIndicesOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' )),
    COMMETHOD([helpstring('For convenience. Updates a subset of positions, text, and/or per-string parameters in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithOptionalParameters',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring('For convenience. Updates a subset of positions, text, and/or per-string parameters in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the primitive is positioned and rendered in screen space coordinates.')], HRESULT, 'RenderInScreenSpace',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the primitive is positioned and rendered in screen space coordinates.')], HRESULT, 'RenderInScreenSpace',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTextBatchPrimitive implementation
##class IAgStkGraphicsTextBatchPrimitive_Impl(object):
##    @property
##    def SetHint(self):
##        "Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."
##        #return pRetVal
##
##    def _get(self):
##        "Gets or sets the scale applied to the radius of this primitive's bounding sphere."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the scale applied to the radius of this primitive's bounding sphere."
##    BoundingSphereScale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Font(self):
##        'Gets the font used to render the text batch.'
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the text's outline color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the text's outline color."
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the text's outline translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the text's outline translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    OutlineTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the screen space position of each string is aligned to a pixel.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the screen space position of each string is aligned to a pixel.'
##    AlignToPixel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a distance display condition that is evaluated per string in the text batch during rendering. This is different than display condition, which is evaluated once for the entire text batch...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets a distance display condition that is evaluated per string in the text batch during rendering. This is different than display condition, which is evaluated once for the entire text batch...'
##    DistanceDisplayConditionPerString = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether individual text indices will be included in the pick results returned from the scene's Pick method. Each text index that is picked will be returned as a batch primitive index."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether individual text indices will be included in the pick results returned from the scene's Pick method. Each text index that is picked will be returned as a batch primitive index."
##    PerItemPickingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the filter used to filter the texture-based font.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the filter used to filter the texture-based font.'
##    TextureFilter = property(_get, _set, doc = _set.__doc__)
##
##    def Set(self, Positions, Text):
##        "Defines the positions and text of strings in a text batch. The strings are rendered in the primitive's reference frame."
##        #return 
##
##    def SetWithOptionalParameters(self, Positions, Text, OptionalParameters):
##        "Defines the positions, text, and optional parameters of strings in a text batch. The strings are rendered in the primitive's reference frame."
##        #return 
##
##    def SetWithOptionalParametersAndRenderPass(self, Positions, Text, OptionalParameters, RenderPassHint):
##        "Defines the positions, text, and optional parameters of strings in a text batch. The strings are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."
##        #return 
##
##    def SetCartographic(self, CentralBody, Positions, Text):
##        'For convenience. Defines the positions and text of strings in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetCartographicWithOptionalParameters(self, CentralBody, Positions, Text, OptionalParameters):
##        'For convenience. Defines the positions, text, and optional parameters of strings in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetCartographicWithOptionalParametersAndRenderPass(self, CentralBody, Positions, Text, OptionalParameters, RenderPassHint):
##        'For convenience. Defines the positions, text, and optional parameters of strings in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartial(self, Positions, Text, Indices):
##        'Updates a subset of positions and/or text in a text batch.'
##        #return 
##
##    def SetPartialWithIndicesOrder(self, Positions, Text, Indices, IndicesOrderHint):
##        'Updates a subset of positions and/or text in a text batch.'
##        #return 
##
##    def SetPartialWithOptionalParameters(self, Positions, Text, OptionalParameters, Indices):
##        'Updates a subset of positions, text, and/or optional per-string parameters in a text batch.'
##        #return 
##
##    def SetPartialWithOptionalParametersIndicesOrderAndRenderPass(self, Positions, Text, OptionalParameters, Indices, IndicesOrderHint, RenderPassHint):
##        'Updates a subset of positions, text, and/or optional per-string parameters in a text batch.'
##        #return 
##
##    def SetPartialCartographic(self, CentralBody, Positions, Text, Indices):
##        'For convenience. Updates a subset of positions and/or text in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartialCartographicWithIndicesOrder(self, CentralBody, Positions, Text, Indices, IndicesOrderHint):
##        'For convenience. Updates a subset of positions and/or text in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartialCartographicWithOptionalParameters(self, CentralBody, Positions, Text, OptionalParameters, Indices):
##        'For convenience. Updates a subset of positions, text, and/or per-string parameters in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass(self, CentralBody, Positions, Text, OptionalParameters, Indices, IndicesOrderHint, RenderPassHint):
##        'For convenience. Updates a subset of positions, text, and/or per-string parameters in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def _get(self):
##        'Gets or sets whether the primitive is positioned and rendered in screen space coordinates.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the primitive is positioned and rendered in screen space coordinates.'
##    RenderInScreenSpace = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsGradientDetectFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGradientDetectFilter'
    _iid_ = GUID('{5D3A676A-4967-4432-B516-AD2A290FBEDE}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsGradientDetectFilter._methods_ = [
    COMMETHOD([dispid(20501), helpstring('Gets or sets the divisor for the result of the convolution kernel operation.'), 'propget'], HRESULT, 'Divisor',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(20501), helpstring('Gets or sets the divisor for the result of the convolution kernel operation.'), 'propput'], HRESULT, 'Divisor',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(20502), helpstring('Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'), 'propget'], HRESULT, 'Offset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(20502), helpstring('Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'), 'propput'], HRESULT, 'Offset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(20503), helpstring('Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'), 'propget'], HRESULT, 'Kernel',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(20503), helpstring('Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'), 'propput'], HRESULT, 'Kernel',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(21201), helpstring('Gets or sets the method used to detect gradients in the source raster.'), 'propget'], HRESULT, 'Method',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsGradientDetectMethod), 'pRetVal' )),
    COMMETHOD([dispid(21201), helpstring('Gets or sets the method used to detect gradients in the source raster.'), 'propput'], HRESULT, 'Method',
              ( ['in'], AgEStkGraphicsGradientDetectMethod, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGradientDetectFilter implementation
##class _IAgStkGraphicsGradientDetectFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the divisor for the result of the convolution kernel operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the divisor for the result of the convolution kernel operation.'
##    Divisor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'
##    Offset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'
##    Kernel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the method used to detect gradients in the source raster.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the method used to detect gradients in the source raster.'
##    Method = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsJpeg2000WriterInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsJpeg2000WriterInitializer'
    _iid_ = GUID('{707530D9-BC4A-4D1B-9A2B-A8CBEF31DD9D}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgEStkGraphicsJpeg2000CompressionProfile'
eStkGraphicsJpeg2000CompressionProfileDefault = 0
eStkGraphicsJpeg2000CompressionProfileNITF_BIIF_NPJE = 1
eStkGraphicsJpeg2000CompressionProfileNITF_BIIF_EPJE = 2
AgEStkGraphicsJpeg2000CompressionProfile = c_int # enum
_IAgStkGraphicsJpeg2000WriterInitializer._methods_ = [
    COMMETHOD([dispid(23802), helpstring('Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image must be in the image, as in a GeoTIFF.')], HRESULT, 'WriteString',
              ( ['in'], BSTR, 'ImageUri' ),
              ( ['in'], AgEStkGraphicsJpeg2000CompressionProfile, 'CompressionProfile' ),
              ( ['in'], c_int, 'CompressionRate' ),
              ( ['in'], BSTR, 'Jpeg2000Uri' ),
              ( ['in'], VARIANT_BOOL, 'OverwriteExistingFile' )),
    COMMETHOD([dispid(23804), helpstring('Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary.')], HRESULT, 'WriteExtentString',
              ( ['in'], BSTR, 'ImageUri' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['in'], AgEStkGraphicsJpeg2000CompressionProfile, 'CompressionProfile' ),
              ( ['in'], c_int, 'CompressionRate' ),
              ( ['in'], BSTR, 'Jpeg2000Uri' ),
              ( ['in'], VARIANT_BOOL, 'OverwriteExistingFile' )),
    COMMETHOD([dispid(23806), helpstring('Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary.')], HRESULT, 'WriteExtentAndSubExtentString',
              ( ['in'], BSTR, 'ImageUri' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'SubExtent' ),
              ( ['in'], AgEStkGraphicsJpeg2000CompressionProfile, 'CompressionProfile' ),
              ( ['in'], c_int, 'CompressionRate' ),
              ( ['in'], BSTR, 'Jpeg2000Uri' ),
              ( ['in'], VARIANT_BOOL, 'OverwriteExistingFile' )),
    COMMETHOD([dispid(23808), helpstring('Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary.')], HRESULT, 'WriteExtentAndSubExtentTransparentColorString',
              ( ['in'], BSTR, 'ImageUri' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'SubExtent' ),
              ( ['in'], AgEStkGraphicsJpeg2000CompressionProfile, 'CompressionProfile' ),
              ( ['in'], c_int, 'CompressionRate' ),
              ( ['in'], BSTR, 'Jpeg2000Uri' ),
              ( ['in'], VARIANT_BOOL, 'OverwriteExistingFile' ),
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'TransparentColor' )),
]
################################################################
## code template for _IAgStkGraphicsJpeg2000WriterInitializer implementation
##class _IAgStkGraphicsJpeg2000WriterInitializer_Impl(object):
##    def WriteString(self, ImageUri, CompressionProfile, CompressionRate, Jpeg2000Uri, OverwriteExistingFile):
##        'Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image must be in the image, as in a GeoTIFF.'
##        #return 
##
##    def WriteExtentString(self, ImageUri, Extent, CompressionProfile, CompressionRate, Jpeg2000Uri, OverwriteExistingFile):
##        'Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary.'
##        #return 
##
##    def WriteExtentAndSubExtentString(self, ImageUri, Extent, SubExtent, CompressionProfile, CompressionRate, Jpeg2000Uri, OverwriteExistingFile):
##        'Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary.'
##        #return 
##
##    def WriteExtentAndSubExtentTransparentColorString(self, ImageUri, Extent, SubExtent, CompressionProfile, CompressionRate, Jpeg2000Uri, OverwriteExistingFile, TransparentColor):
##        'Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary.'
##        #return 
##

class IAgStkGraphicsSurfaceExtentTriangulatorInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Triangulates an extent on a central body into a triangle mesh and a surrounding boundary. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive. The boundary is commonly visualized with the polyline primitive.'
    _iid_ = GUID('{74B85E21-B114-46B6-820D-2BE8ADC7EA7A}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsSurfaceExtentTriangulatorInitializer._methods_ = [
    COMMETHOD([helpstring('Computes a triangulation on the specified centralBody for the specified extent. This is equivalent to calling Compute with an altitude of 0 and a granularity of 1 degree.')], HRESULT, 'ComputeSimple',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes a triangulation on the specified centralBody for the specified extent.')], HRESULT, 'Compute',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceTriangulatorResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSurfaceExtentTriangulatorInitializer implementation
##class IAgStkGraphicsSurfaceExtentTriangulatorInitializer_Impl(object):
##    def ComputeSimple(self, CentralBody, Extent):
##        'Computes a triangulation on the specified centralBody for the specified extent. This is equivalent to calling Compute with an altitude of 0 and a granularity of 1 degree.'
##        #return ppRetVal
##
##    def Compute(self, CentralBody, Extent, Altitude, Granularity):
##        'Computes a triangulation on the specified centralBody for the specified extent.'
##        #return ppRetVal
##

class _IAgStkGraphicsColorToLuminanceFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsColorToLuminanceFilter'
    _iid_ = GUID('{56E0CB35-7AFD-4926-9FA8-EE098E666502}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsColorToLuminanceFilter._methods_ = [
]
################################################################
## code template for _IAgStkGraphicsColorToLuminanceFilter implementation
##class _IAgStkGraphicsColorToLuminanceFilter_Impl(object):

class IAgStkGraphicsScreenOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window.'
    _iid_ = GUID('{E9BDC8AD-DC02-4B22-9513-EB0CDFA85CF3}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsScreenOverlay._methods_ = [
]
################################################################
## code template for IAgStkGraphicsScreenOverlay implementation
##class IAgStkGraphicsScreenOverlay_Impl(object):

class _IAgStkGraphicsPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPrimitive'
    _iid_ = GUID('{D9958702-369B-4D95-82A8-B70A7D42CCA9}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsPrimitive._methods_ = [
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propget'], HRESULT, 'ReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propput'], HRESULT, 'ReferenceFrame',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propput'], HRESULT, 'BoundingSphere',
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'ppRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propget'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propput'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsPrimitive implementation
##class _IAgStkGraphicsPrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##    ReferenceFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##    BoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##    AutomaticallyComputeBoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's color."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsGammaCorrectionFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the gamma value for the filter. The value must be between .2 and 5. The default gamma value is 2.2.')], HRESULT, 'Gamma',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the gamma value for the filter. The value must be between .2 and 5. The default gamma value is 2.2.')], HRESULT, 'Gamma',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsGammaCorrectionFilter implementation
##class IAgStkGraphicsGammaCorrectionFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the gamma value for the filter. The value must be between .2 and 5. The default gamma value is 2.2.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the gamma value for the filter. The value must be between .2 and 5. The default gamma value is 2.2.'
##    Gamma = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsCentralBodyGraphicsIndexer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsCentralBodyGraphicsIndexer'
    _iid_ = GUID('{78ACB4CB-51A1-40B7-9AB6-378AE46CA9D1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsCentralBodyGraphics(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The graphical properties associated with a particular central body. Changing the central body graphics will affect how the associated central body is rendered in a scene. For instance, to show or hide the central body, use the show property...'
    _iid_ = GUID('{27F5D32B-5ADF-4FC7-A8B8-83ADA5EBC0CA}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsCentralBodyGraphicsIndexer._methods_ = [
    COMMETHOD([dispid(12701), helpstring('Gets the central body graphics for the planet Earth. This is equivalent to passing a central body equal to an instance of earth central body to the indexer.'), 'propget'], HRESULT, 'Earth',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCentralBodyGraphics)), 'ppRetVal' )),
    COMMETHOD([dispid(12702), helpstring('Gets the central body graphics for the Moon.'), 'propget'], HRESULT, 'Moon',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCentralBodyGraphics)), 'ppRetVal' )),
    COMMETHOD([dispid(12703), helpstring('Gets the central body graphics for the Sun.'), 'propget'], HRESULT, 'Sun',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCentralBodyGraphics)), 'ppRetVal' )),
    COMMETHOD([dispid(0), helpstring('Gets the central body graphics for the specified central body.'), 'propget'], HRESULT, 'Item',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCentralBodyGraphics)), 'ppRetVal' )),
    COMMETHOD([dispid(12705), helpstring('Returns the central body graphics for the central body with the given name.')], HRESULT, 'GetByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCentralBodyGraphics)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsCentralBodyGraphicsIndexer implementation
##class _IAgStkGraphicsCentralBodyGraphicsIndexer_Impl(object):
##    @property
##    def Earth(self):
##        'Gets the central body graphics for the planet Earth. This is equivalent to passing a central body equal to an instance of earth central body to the indexer.'
##        #return ppRetVal
##
##    @property
##    def Moon(self):
##        'Gets the central body graphics for the Moon.'
##        #return ppRetVal
##
##    @property
##    def Sun(self):
##        'Gets the central body graphics for the Sun.'
##        #return ppRetVal
##
##    @property
##    def Item(self, CentralBody):
##        'Gets the central body graphics for the specified central body.'
##        #return ppRetVal
##
##    def GetByName(self, Name):
##        'Returns the central body graphics for the central body with the given name.'
##        #return ppRetVal
##

class _IAgStkGraphicsMarkerBatchPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsMarkerBatchPrimitiveFactory'
    _iid_ = GUID('{888A9537-FBD8-4E2F-8E0E-8E7A1A4D04D1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsMarkerBatchPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    ' Renders one or more markers in the 3D scene. Markers are 2D images that always face the viewer which can be sized in pixels or meters. Markers are also referred to as sprites or billboards...'
    _iid_ = GUID('{235878C1-62D9-4CE6-85FF-9D82AFF701E9}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsMarkerBatchSizeSource'
eStkGraphicsMarkerBatchSizeSourceFromTexture = 0
eStkGraphicsMarkerBatchSizeSourceUserDefined = 1
AgEStkGraphicsMarkerBatchSizeSource = c_int # enum

# values for enumeration 'AgEStkGraphicsMarkerBatchSortOrder'
eStkGraphicsMarkerBatchSortOrderBackToFront = 0
eStkGraphicsMarkerBatchSortOrderFrontToBack = 1
eStkGraphicsMarkerBatchSortOrderByTexture = 2
AgEStkGraphicsMarkerBatchSortOrder = c_int # enum

# values for enumeration 'AgEStkGraphicsMarkerBatchRenderingMethod'
eStkGraphicsMarkerBatchRenderingMethodGeometryShader = 0
eStkGraphicsMarkerBatchRenderingMethodVertexShader = 1
eStkGraphicsMarkerBatchRenderingMethodAutomatic = 2
eStkGraphicsMarkerBatchRenderingMethodFixedFunction = 3
AgEStkGraphicsMarkerBatchRenderingMethod = c_int # enum
_IAgStkGraphicsMarkerBatchPrimitiveFactory._methods_ = [
    COMMETHOD([dispid(7701), helpstring('Initializes a default marker batch primitive...')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(7702), helpstring('Initializes a marker batch primitive with the specified setHint...')], HRESULT, 'InitializeWithSetHint',
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(7703), helpstring('Initializes a marker batch primitive with the specified sizeSource...')], HRESULT, 'InitializeWithSizeSource',
              ( ['in'], AgEStkGraphicsMarkerBatchSizeSource, 'SizeSource' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(7704), helpstring('Initializes a marker batch primitive with the specified sizeSource and sortOrder...')], HRESULT, 'InitializeWithSizeSourceAndSortOrder',
              ( ['in'], AgEStkGraphicsMarkerBatchSizeSource, 'SizeSource' ),
              ( ['in'], AgEStkGraphicsMarkerBatchSortOrder, 'SortOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(7705), helpstring('Initializes a marker batch primitive with the specified sizeSource, sortOrder, and setHint. This is equivalent to constructing a marker batch with the specified arguments and a marker batch rendering method of Automatic.')], HRESULT, 'InitializeSizeSourceSortOrderAndSetHint',
              ( ['in'], AgEStkGraphicsMarkerBatchSizeSource, 'SizeSource' ),
              ( ['in'], AgEStkGraphicsMarkerBatchSortOrder, 'SortOrder' ),
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(7706), helpstring('Initializes a marker batch primitive with the specified arguments.')], HRESULT, 'InitializeSizeSourceSortOrderSetHintAndRenderingMethod',
              ( ['in'], AgEStkGraphicsMarkerBatchSizeSource, 'SizeSource' ),
              ( ['in'], AgEStkGraphicsMarkerBatchSortOrder, 'SortOrder' ),
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['in'], AgEStkGraphicsMarkerBatchRenderingMethod, 'RenderingMethod' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(7707), helpstring('Determines whether or not the video card supports the marker batch primitive with the given renderingMethod.')], HRESULT, 'Supported',
              ( ['in'], AgEStkGraphicsMarkerBatchRenderingMethod, 'RenderingMethod' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsMarkerBatchPrimitiveFactory implementation
##class _IAgStkGraphicsMarkerBatchPrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default marker batch primitive...'
##        #return ppRetVal
##
##    def InitializeWithSetHint(self, SetHint):
##        'Initializes a marker batch primitive with the specified setHint...'
##        #return ppRetVal
##
##    def InitializeWithSizeSource(self, SizeSource):
##        'Initializes a marker batch primitive with the specified sizeSource...'
##        #return ppRetVal
##
##    def InitializeWithSizeSourceAndSortOrder(self, SizeSource, SortOrder):
##        'Initializes a marker batch primitive with the specified sizeSource and sortOrder...'
##        #return ppRetVal
##
##    def InitializeSizeSourceSortOrderAndSetHint(self, SizeSource, SortOrder, SetHint):
##        'Initializes a marker batch primitive with the specified sizeSource, sortOrder, and setHint. This is equivalent to constructing a marker batch with the specified arguments and a marker batch rendering method of Automatic.'
##        #return ppRetVal
##
##    def InitializeSizeSourceSortOrderSetHintAndRenderingMethod(self, SizeSource, SortOrder, SetHint, RenderingMethod):
##        'Initializes a marker batch primitive with the specified arguments.'
##        #return ppRetVal
##
##    def Supported(self, RenderingMethod):
##        'Determines whether or not the video card supports the marker batch primitive with the given renderingMethod.'
##        #return pRetVal
##

class _IAgStkGraphicsPathPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPathPrimitiveFactory'
    _iid_ = GUID('{6F773B6F-F175-43EE-A38E-AD62BACFC479}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsPathPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Renders a line to the 3D scene. Similar to the polyline primitive; however, the PathPrimitive was designed for the efficient addition/removal of points to/from the front or back of the line.'
    _iid_ = GUID('{264EF2E0-AE0D-412D-9D89-F5F17F095A52}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsPathPrimitiveFactory._methods_ = [
    COMMETHOD([dispid(11801), helpstring('Initializes a default path primitive. This is equivalent to constructing a path primitive with an initial capacity of 16.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(11802), helpstring('Initializes a path primitive with the specified capacity.')], HRESULT, 'InitializeWithCapacity',
              ( ['in'], c_int, 'Capacity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(11803), helpstring('Gets the minimum width, in pixels, supported by the video card.'), 'propget'], HRESULT, 'MinimumWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(11804), helpstring('Gets the maximum width, in pixels, supported by the video card.'), 'propget'], HRESULT, 'MaximumWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsPathPrimitiveFactory implementation
##class _IAgStkGraphicsPathPrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default path primitive. This is equivalent to constructing a path primitive with an initial capacity of 16.'
##        #return ppRetVal
##
##    def InitializeWithCapacity(self, Capacity):
##        'Initializes a path primitive with the specified capacity.'
##        #return ppRetVal
##
##    @property
##    def MinimumWidthSupported(self):
##        'Gets the minimum width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    @property
##    def MaximumWidthSupported(self):
##        'Gets the maximum width, in pixels, supported by the video card.'
##        #return pRetVal
##

class IAgStkGraphicsTriangleMeshPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Renders a triangle mesh in the 3D scene. Examples of triangle meshes includes polygons on the globe (e.g. states or countries), terrain and imagery extents, ellipses, and extrusions.'
    _iid_ = GUID('{EFD9AC8C-E2F0-4A06-9E92-15EBE59D5C38}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsTriangleMeshPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Renders a triangle mesh in the 3D scene. Examples of triangle meshes includes polygons on the globe (e.g. states or countries), terrain and imagery extents, ellipses, and extrusions.'
    _iid_ = GUID('{B878E10C-0FC9-446E-88BA-1E1088970150}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsTriangleMeshPrimitiveFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a default triangle mesh primitive. This is equivalent to constructing a triangle mesh with a set hint of Frequent.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTriangleMeshPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a triangle mesh primitive with the specified setHint .')], HRESULT, 'InitializeWithSetHint',
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTriangleMeshPrimitive)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTriangleMeshPrimitiveFactory implementation
##class IAgStkGraphicsTriangleMeshPrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default triangle mesh primitive. This is equivalent to constructing a triangle mesh with a set hint of Frequent.'
##        #return ppRetVal
##
##    def InitializeWithSetHint(self, SetHint):
##        'Initializes a triangle mesh primitive with the specified setHint .'
##        #return ppRetVal
##

class _IAgStkGraphicsPrimitiveManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPrimitiveManager'
    _iid_ = GUID('{952DF8D5-AAA1-45A6-8FE6-06F291A18CD2}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgEStkGraphicsPrimitivesSortOrder'
eStkGraphicsPrimitivesSortOrderByState = 0
eStkGraphicsPrimitivesSortOrderBackToFront = 1
eStkGraphicsPrimitivesSortOrderPrimitivesSortOrderByState = 0
eStkGraphicsPrimitivesSortOrderPrimitivesSortOrderBackToFront = 1
AgEStkGraphicsPrimitivesSortOrder = c_int # enum
_IAgStkGraphicsPrimitiveManager._methods_ = [
    COMMETHOD([dispid(1), helpstring('Gets the number of primitives in the manager.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5002), helpstring('Gets or sets the exponent used to compute the maximum precision for primitive rendering. For example, a value of -3 indicates the maximum precision of 2^-3, 0.125 m along the x, y, or z axis...'), 'propget'], HRESULT, 'PrecisionExponent',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5002), helpstring('Gets or sets the exponent used to compute the maximum precision for primitive rendering. For example, a value of -3 indicates the maximum precision of 2^-3, 0.125 m along the x, y, or z axis...'), 'propput'], HRESULT, 'PrecisionExponent',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(5003), helpstring('Gets or sets the sort order for translucent primitives in the primitive manager. This determines a trade-off between rendering speed and quality...'), 'propget'], HRESULT, 'TranslucentPrimitivesSortOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPrimitivesSortOrder), 'pRetVal' )),
    COMMETHOD([dispid(5003), helpstring('Gets or sets the sort order for translucent primitives in the primitive manager. This determines a trade-off between rendering speed and quality...'), 'propput'], HRESULT, 'TranslucentPrimitivesSortOrder',
              ( ['in'], AgEStkGraphicsPrimitivesSortOrder, 'pRetVal' )),
    COMMETHOD([dispid(5004), helpstring('Adds a primitive to the manager. Primitives must be added to the manager to be rendered.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAgStkGraphicsPrimitive), 'Primitive' )),
    COMMETHOD([dispid(5005), helpstring('Removes a primitive from the manager. The primitive is no longer rendered unless it is added back into the manager.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAgStkGraphicsPrimitive), 'Primitive' )),
    COMMETHOD([dispid(5006), helpstring('Determines whether the manager contains a primitive.')], HRESULT, 'Contains',
              ( ['in'], POINTER(IAgStkGraphicsPrimitive), 'Primitive' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5007), helpstring('Removes all primitives from the manager.')], HRESULT, 'Clear'),
    COMMETHOD([dispid(-4), helpstring('Returns an enumerator that iterates through the collection. The order of the primitives is not guaranteed to be the order that the primitives were added.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsPrimitiveManager implementation
##class _IAgStkGraphicsPrimitiveManager_Impl(object):
##    @property
##    def Count(self):
##        'Gets the number of primitives in the manager.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the exponent used to compute the maximum precision for primitive rendering. For example, a value of -3 indicates the maximum precision of 2^-3, 0.125 m along the x, y, or z axis...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the exponent used to compute the maximum precision for primitive rendering. For example, a value of -3 indicates the maximum precision of 2^-3, 0.125 m along the x, y, or z axis...'
##    PrecisionExponent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the sort order for translucent primitives in the primitive manager. This determines a trade-off between rendering speed and quality...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the sort order for translucent primitives in the primitive manager. This determines a trade-off between rendering speed and quality...'
##    TranslucentPrimitivesSortOrder = property(_get, _set, doc = _set.__doc__)
##
##    def Add(self, Primitive):
##        'Adds a primitive to the manager. Primitives must be added to the manager to be rendered.'
##        #return 
##
##    def Remove(self, Primitive):
##        'Removes a primitive from the manager. The primitive is no longer rendered unless it is added back into the manager.'
##        #return 
##
##    def Contains(self, Primitive):
##        'Determines whether the manager contains a primitive.'
##        #return pRetVal
##
##    def Clear(self):
##        'Removes all primitives from the manager.'
##        #return 
##
##    @property
##    def _NewEnum(self):
##        'Returns an enumerator that iterates through the collection. The order of the primitives is not guaranteed to be the order that the primitives were added.'
##        #return ppRetVal
##

class IAgStkGraphicsRasterAttributesFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The attributes describing a raster dataset. raster attributes define the memory layout of a raster, and includes properties defining the order of each raster band that the raster contains, as specified by the raster format...'
    _iid_ = GUID('{5E2AEFF9-22FF-4A0F-984D-DC0D92D738C9}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsRasterFormat'
eStkGraphicsRasterFormatRed = 0
eStkGraphicsRasterFormatGreen = 1
eStkGraphicsRasterFormatBlue = 2
eStkGraphicsRasterFormatAlpha = 3
eStkGraphicsRasterFormatRgb = 4
eStkGraphicsRasterFormatBgr = 5
eStkGraphicsRasterFormatRgba = 6
eStkGraphicsRasterFormatBgra = 7
eStkGraphicsRasterFormatLuminance = 8
eStkGraphicsRasterFormatLuminanceAlpha = 9
AgEStkGraphicsRasterFormat = c_int # enum
class IAgStkGraphicsRasterAttributes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The attributes describing a raster dataset. raster attributes define the memory layout of a raster, and includes properties defining the order of each raster band that the raster contains, as specified by the raster format...'
    _iid_ = GUID('{067E0CD7-C1C5-41B7-93A8-F9AE8B67DF25}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsRasterType'
eStkGraphicsRasterTypeUnsignedByte = 0
eStkGraphicsRasterTypeByte = 1
eStkGraphicsRasterTypeUnsignedShort = 2
eStkGraphicsRasterTypeShort = 3
eStkGraphicsRasterTypeUnsignedInt = 4
eStkGraphicsRasterTypeInt = 5
eStkGraphicsRasterTypeFloat = 6
eStkGraphicsRasterTypeDouble = 7
AgEStkGraphicsRasterType = c_int # enum

# values for enumeration 'AgEStkGraphicsRasterOrientation'
eStkGraphicsRasterOrientationTopToBottom = 0
eStkGraphicsRasterOrientationBottomToTop = 1
AgEStkGraphicsRasterOrientation = c_int # enum
IAgStkGraphicsRasterAttributesFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance with the width and height of the raster in pixels, and the given raster format.')], HRESULT, 'InitializeWithFormat',
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], AgEStkGraphicsRasterFormat, 'RasterFormat' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with the width and height of the raster in pixels, and the given raster format and raster type.')], HRESULT, 'InitializeWithFormatAndType',
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], AgEStkGraphicsRasterFormat, 'RasterFormat' ),
              ( ['in'], AgEStkGraphicsRasterType, 'RasterType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, and raster orientation.')], HRESULT, 'InitializeWithFormatTypeAndOrientation',
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], AgEStkGraphicsRasterFormat, 'RasterFormat' ),
              ( ['in'], AgEStkGraphicsRasterType, 'RasterType' ),
              ( ['in'], AgEStkGraphicsRasterOrientation, 'RasterOrientation' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, raster orientation, and row alignment.')], HRESULT, 'InitializeWithFormatTypeOrientationAndAlignment',
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], AgEStkGraphicsRasterFormat, 'RasterFormat' ),
              ( ['in'], AgEStkGraphicsRasterType, 'RasterType' ),
              ( ['in'], AgEStkGraphicsRasterOrientation, 'RasterOrientation' ),
              ( ['in'], c_int, 'RowAlignment' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, raster orientation, row alignment, and pixel aspect ratio.')], HRESULT, 'InitializeWithFormatTypeOrientationAlignmentAndRatio',
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], AgEStkGraphicsRasterFormat, 'RasterFormat' ),
              ( ['in'], AgEStkGraphicsRasterType, 'RasterType' ),
              ( ['in'], AgEStkGraphicsRasterOrientation, 'RasterOrientation' ),
              ( ['in'], c_int, 'RowAlignment' ),
              ( ['in'], c_double, 'PixelAspectRatio' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with the attributes of the specified raster')], HRESULT, 'InitializeWithRaster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsRasterAttributesFactory implementation
##class IAgStkGraphicsRasterAttributesFactory_Impl(object):
##    def InitializeWithFormat(self, Width, Height, RasterFormat):
##        'Initializes a new instance with the width and height of the raster in pixels, and the given raster format.'
##        #return ppRetVal
##
##    def InitializeWithFormatAndType(self, Width, Height, RasterFormat, RasterType):
##        'Initializes a new instance with the width and height of the raster in pixels, and the given raster format and raster type.'
##        #return ppRetVal
##
##    def InitializeWithFormatTypeAndOrientation(self, Width, Height, RasterFormat, RasterType, RasterOrientation):
##        'Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, and raster orientation.'
##        #return ppRetVal
##
##    def InitializeWithFormatTypeOrientationAndAlignment(self, Width, Height, RasterFormat, RasterType, RasterOrientation, RowAlignment):
##        'Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, raster orientation, and row alignment.'
##        #return ppRetVal
##
##    def InitializeWithFormatTypeOrientationAlignmentAndRatio(self, Width, Height, RasterFormat, RasterType, RasterOrientation, RowAlignment, PixelAspectRatio):
##        'Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, raster orientation, row alignment, and pixel aspect ratio.'
##        #return ppRetVal
##
##    def InitializeWithRaster(self, Raster):
##        'Initializes a new instance with the attributes of the specified raster'
##        #return ppRetVal
##

class IAgStkGraphicsCompositePrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    " A primitive that is composed of multiple other primitives. Since composites can contain other composites, they are commonly used to build hierarchies of primitives to efficiently evaluate <topic name='Display Conditions'>display conditions</topic>..."
    _iid_ = GUID('{6828C6A1-7018-4B65-90AF-8BB36F478A6D}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsCompositePrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    " A primitive that is composed of multiple other primitives. Since composites can contain other composites, they are commonly used to build hierarchies of primitives to efficiently evaluate <topic name='Display Conditions'>display conditions</topic>..."
    _iid_ = GUID('{C24448A9-4FE7-4905-86E0-70A71346FCF2}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsCompositePrimitiveFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a default composite primitive.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCompositePrimitive)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsCompositePrimitiveFactory implementation
##class IAgStkGraphicsCompositePrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default composite primitive.'
##        #return ppRetVal
##

class IAgStkGraphicsBandExtractFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Extracts a band or set of bands from the source raster. The extract format property specifies the bands and the order of the bands that will be extracted.'
    _iid_ = GUID('{76A65E3A-1868-4312-8A66-8E16A525EFFD}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsBandExtractFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Extracts a band or set of bands from the source raster. The extract format property specifies the bands and the order of the bands that will be extracted.'
    _iid_ = GUID('{68723EBB-619A-4D11-BB5A-27200EF0E15C}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsRasterBand'
eStkGraphicsRasterBandRed = 0
eStkGraphicsRasterBandGreen = 1
eStkGraphicsRasterBandBlue = 2
eStkGraphicsRasterBandAlpha = 3
eStkGraphicsRasterBandLuminance = 4
AgEStkGraphicsRasterBand = c_int # enum
IAgStkGraphicsBandExtractFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBandExtractFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with the raster band to be extracted from the source raster.')], HRESULT, 'InitializeWithBand',
              ( ['in'], AgEStkGraphicsRasterBand, 'RasterBand' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBandExtractFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with the raster format containing the bands to be extracted from the source raster.')], HRESULT, 'InitializeWithFormat',
              ( ['in'], AgEStkGraphicsRasterFormat, 'RasterFormat' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBandExtractFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsBandExtractFilterFactory implementation
##class IAgStkGraphicsBandExtractFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithBand(self, RasterBand):
##        'Initializes a new instance with the raster band to be extracted from the source raster.'
##        #return ppRetVal
##
##    def InitializeWithFormat(self, RasterFormat):
##        'Initializes a new instance with the raster format containing the bands to be extracted from the source raster.'
##        #return ppRetVal
##

class _IAgStkGraphicsMarkerBatchPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsMarkerBatchPrimitive'
    _iid_ = GUID('{A745A3B2-9CB1-4A76-A4F5-C2A1AE2C96D6}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgEStkGraphicsMarkerBatchRenderPass'
eStkGraphicsMarkerBatchRenderPassOpaque = 0
eStkGraphicsMarkerBatchRenderPassTranslucent = 1
eStkGraphicsMarkerBatchRenderPassBasedOnTranslucency = 2
AgEStkGraphicsMarkerBatchRenderPass = c_int # enum

# values for enumeration 'AgEStkGraphicsMarkerBatchUnit'
eStkGraphicsMarkerBatchUnitPixels = 0
eStkGraphicsMarkerBatchUnitMeters = 1
AgEStkGraphicsMarkerBatchUnit = c_int # enum

# values for enumeration 'AgEStkGraphicsOrigin'
eStkGraphicsOriginBottomLeft = 0
eStkGraphicsOriginBottomCenter = 1
eStkGraphicsOriginBottomRight = 2
eStkGraphicsOriginCenterLeft = 3
eStkGraphicsOriginCenter = 4
eStkGraphicsOriginCenterRight = 5
eStkGraphicsOriginTopLeft = 6
eStkGraphicsOriginTopCenter = 7
eStkGraphicsOriginTopRight = 8
AgEStkGraphicsOrigin = c_int # enum
_IAgStkGraphicsMarkerBatchPrimitive._methods_ = [
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propget'], HRESULT, 'ReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propput'], HRESULT, 'ReferenceFrame',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propput'], HRESULT, 'BoundingSphere',
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'ppRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propget'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propput'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(4101), helpstring('Gets the source used for the size of markers in the batch.'), 'propget'], HRESULT, 'SizeSource',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMarkerBatchSizeSource), 'pRetVal' )),
    COMMETHOD([dispid(4102), helpstring('Gets the order in which markers in the marker batch are sorted before rendering.'), 'propget'], HRESULT, 'SortOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMarkerBatchSortOrder), 'pRetVal' )),
    COMMETHOD([dispid(4103), helpstring("Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."), 'propget'], HRESULT, 'SetHint',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSetHint), 'pRetVal' )),
    COMMETHOD([dispid(4104), helpstring('Gets the rendering method used to render the marker batch.'), 'propget'], HRESULT, 'RenderingMethod',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMarkerBatchRenderingMethod), 'pRetVal' )),
    COMMETHOD([dispid(4105), helpstring('Gets or sets the pass during which the marker batch is rendered.'), 'propget'], HRESULT, 'RenderPass',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMarkerBatchRenderPass), 'pRetVal' )),
    COMMETHOD([dispid(4105), helpstring('Gets or sets the pass during which the marker batch is rendered.'), 'propput'], HRESULT, 'RenderPass',
              ( ['in'], AgEStkGraphicsMarkerBatchRenderPass, 'pRetVal' )),
    COMMETHOD([dispid(4106), helpstring("Gets or sets the scale applied to the radius of this primitive's bounding sphere."), 'propget'], HRESULT, 'BoundingSphereScale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(4106), helpstring("Gets or sets the scale applied to the radius of this primitive's bounding sphere."), 'propput'], HRESULT, 'BoundingSphereScale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(4107), helpstring('Gets or sets a distance display condition that is evaluated per marker in the marker batch during rendering. This is different than display condition, which is evaluated once for the entire marker batch...'), 'propget'], HRESULT, 'DistanceDisplayConditionPerMarker',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(4107), helpstring('Gets or sets a distance display condition that is evaluated per marker in the marker batch during rendering. This is different than display condition, which is evaluated once for the entire marker batch...'), 'propput'], HRESULT, 'DistanceDisplayConditionPerMarker',
              ( ['in'], POINTER(IAgStkGraphicsDistanceDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(4108), helpstring('Gets or sets the per-batch texture, which is applied to each marker in the batch.'), 'propget'], HRESULT, 'Texture',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRendererTexture2D)), 'ppRetVal' )),
    COMMETHOD([dispid(4108), helpstring('Gets or sets the per-batch texture, which is applied to each marker in the batch.'), 'propput'], HRESULT, 'Texture',
              ( ['in'], POINTER(IAgStkGraphicsRendererTexture2D), 'ppRetVal' )),
    COMMETHOD([dispid(4109), helpstring("Gets or sets the unit that each marker's size is defined in."), 'propget'], HRESULT, 'SizeUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMarkerBatchUnit), 'pRetVal' )),
    COMMETHOD([dispid(4109), helpstring("Gets or sets the unit that each marker's size is defined in."), 'propput'], HRESULT, 'SizeUnit',
              ( ['in'], AgEStkGraphicsMarkerBatchUnit, 'pRetVal' )),
    COMMETHOD([dispid(4110), helpstring('Gets or sets the per-batch size, which is applied to each marker in the batch. The array contains one width followed by one height.'), 'propget'], HRESULT, 'Size',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(4110), helpstring('Gets or sets the per-batch size, which is applied to each marker in the batch. The array contains one width followed by one height.'), 'propput'], HRESULT, 'Size',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(4111), helpstring('Gets or sets the per-batch origin, which is applied to each marker in the batch.'), 'propget'], HRESULT, 'Origin',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsOrigin), 'pRetVal' )),
    COMMETHOD([dispid(4111), helpstring('Gets or sets the per-batch origin, which is applied to each marker in the batch.'), 'propput'], HRESULT, 'Origin',
              ( ['in'], AgEStkGraphicsOrigin, 'pRetVal' )),
    COMMETHOD([dispid(4112), helpstring('Gets or sets the per-batch pixel offset, which is applied to each marker in the batch. The array contains one x pixel offset followed by one y pixel offset.'), 'propget'], HRESULT, 'PixelOffset',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(4112), helpstring('Gets or sets the per-batch pixel offset, which is applied to each marker in the batch. The array contains one x pixel offset followed by one y pixel offset.'), 'propput'], HRESULT, 'PixelOffset',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(4113), helpstring('Gets or sets the per-batch eye offset, which is applied to each marker in the batch. The array contains the components of the eye offset in the order x, y, z.'), 'propget'], HRESULT, 'EyeOffset',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(4113), helpstring('Gets or sets the per-batch eye offset, which is applied to each marker in the batch. The array contains the components of the eye offset in the order x, y, z.'), 'propput'], HRESULT, 'EyeOffset',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(4114), helpstring('Gets or sets the per-batch rotation angle, in radians, which is applied to each marker in the batch.'), 'propget'], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(4114), helpstring('Gets or sets the per-batch rotation angle, in radians, which is applied to each marker in the batch.'), 'propput'], HRESULT, 'Rotation',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(4115), helpstring('Gets or sets the per-batch texture coordinate, which is applied to each marker in the batch. The array contains the texture coordinates arranged in the order s, t, p, q.'), 'propget'], HRESULT, 'TextureCoordinate',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(4115), helpstring('Gets or sets the per-batch texture coordinate, which is applied to each marker in the batch. The array contains the texture coordinates arranged in the order s, t, p, q.'), 'propput'], HRESULT, 'TextureCoordinate',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(4116), helpstring('This property is deprecated. This property has been deprecated in favor of ClampToPixel. Gets or sets whether the screen space position of each marker is aligned to a pixel.'), 'propget'], HRESULT, 'AlignToPixel',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(4116), helpstring('This property is deprecated. This property has been deprecated in favor of ClampToPixel. Gets or sets whether the screen space position of each marker is aligned to a pixel.'), 'propput'], HRESULT, 'AlignToPixel',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(4117), helpstring('Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'), 'propget'], HRESULT, 'Wireframe',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(4117), helpstring('Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'), 'propput'], HRESULT, 'Wireframe',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(4118), helpstring("Gets or sets whether individual marker indices will be included in the pick results returned from the scene's Pick method. Each marker index that is picked will be returned as a batch primitive index."), 'propget'], HRESULT, 'PerItemPickingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(4118), helpstring("Gets or sets whether individual marker indices will be included in the pick results returned from the scene's Pick method. Each marker index that is picked will be returned as a batch primitive index."), 'propput'], HRESULT, 'PerItemPickingEnabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(4119), helpstring('Gets or sets the filter used for per-marker or per-batch textures.'), 'propget'], HRESULT, 'TextureFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([dispid(4119), helpstring('Gets or sets the filter used for per-marker or per-batch textures.'), 'propput'], HRESULT, 'TextureFilter',
              ( ['in'], POINTER(IAgStkGraphicsTextureFilter2D), 'ppRetVal' )),
    COMMETHOD([dispid(4120), helpstring("Defines the positions of markers in a marker batch. The markers are rendered in the primitive's reference frame.")], HRESULT, 'Set',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' )),
    COMMETHOD([dispid(4121), helpstring("Defines the positions and optional per-marker parameters of markers in a marker batch. The markers are rendered in the primitive's reference frame.")], HRESULT, 'SetWithOptionalParameters',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters), 'OptionalParameters' )),
    COMMETHOD([dispid(4122), helpstring("Defines the positions and optional per-marker parameters of markers in a marker batch. The markers are rendered in the primitive's reference frame. renderPassHint is provided for efficiency.")], HRESULT, 'SetWithOptionalParametersAndRenderPassHint',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([dispid(4123), helpstring('For convenience. Defines the positions of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling Set.')], HRESULT, 'SetCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' )),
    COMMETHOD([dispid(4124), helpstring('For convenience. Defines the positions and optional per-marker parameters of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetCartographicWithOptionalParameters',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters), 'OptionalParameters' )),
    COMMETHOD([dispid(4125), helpstring('For convenience. Defines the positions and optional per-marker parameters of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. renderPassHint is provided for efficiency...')], HRESULT, 'SetCartographicWithOptionalParametersAndRenderPassHint',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([dispid(4126), helpstring('Updates a subset of marker positions in a marker batch.')], HRESULT, 'SetPartial',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(4127), helpstring('Updates a subset of marker positions in a marker batch.')], HRESULT, 'SetPartialWithIndicesOrder',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' )),
    COMMETHOD([dispid(4128), helpstring('Updates a subset of marker positions and/or per-marker parameters in a marker batch.')], HRESULT, 'SetPartialWithOptionalParameters',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(4129), helpstring('Updates a subset of marker positions and/or per-marker parameters in a marker batch.')], HRESULT, 'SetPartialWithOptionalParametersIndicesOrderAndRenderPass',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([dispid(4130), helpstring('For convenience. Updates a subset of positions in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(4131), helpstring('For convenience. Updates a subset of positions in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithIndicesOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' )),
    COMMETHOD([dispid(4132), helpstring('For convenience. Updates a subset of positions and/or optional per-marker parameters of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithOptionalParameters',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(4133), helpstring('For convenience. Updates a subset of positions and/or optional per-marker parameters of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. renderPassHint is provided for efficiency...')], HRESULT, 'SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([dispid(4134), helpstring('Determines whether or not the video card supports the marker batch primitive with the given renderingMethod.')], HRESULT, 'Supported',
              ( ['in'], AgEStkGraphicsMarkerBatchRenderingMethod, 'RenderingMethod' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
    COMMETHOD([dispid(4136), helpstring('Gets or sets whether the screen space position of each marker is clamped to a pixel.'), 'propget'], HRESULT, 'ClampToPixel',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(4136), helpstring('Gets or sets whether the screen space position of each marker is clamped to a pixel.'), 'propput'], HRESULT, 'ClampToPixel',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(4135), helpstring('Gets or sets whether the markers are clipped by the central body.'), 'propget'], HRESULT, 'CentralBodyClipped',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(4135), helpstring('Gets or sets whether the markers are clipped by the central body.'), 'propput'], HRESULT, 'CentralBodyClipped',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(4137), helpstring('Sets the up vector of the markers to always be aligned to the up vector of the camera. This is the default alignment.')], HRESULT, 'AlignToScreen'),
    COMMETHOD([dispid(4138), helpstring('Sets the up vector of the markers to point towards the north axis of centralBody. It will be aligned with the tangent vector of the surface that points north.')], HRESULT, 'AlignToNorth',
              ( ['in'], BSTR, 'CentralBody' )),
    COMMETHOD([dispid(4139), helpstring('Sets the up vector of the markers to point towards the axis of centralBody. It will be aligned with the tangent vector of the surface that points towards the axis...')], HRESULT, 'AlignToAxis',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Axis' )),
]
################################################################
## code template for _IAgStkGraphicsMarkerBatchPrimitive implementation
##class _IAgStkGraphicsMarkerBatchPrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##    ReferenceFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##    BoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##    AutomaticallyComputeBoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's color."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SizeSource(self):
##        'Gets the source used for the size of markers in the batch.'
##        #return pRetVal
##
##    @property
##    def SortOrder(self):
##        'Gets the order in which markers in the marker batch are sorted before rendering.'
##        #return pRetVal
##
##    @property
##    def SetHint(self):
##        "Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."
##        #return pRetVal
##
##    @property
##    def RenderingMethod(self):
##        'Gets the rendering method used to render the marker batch.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the pass during which the marker batch is rendered.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the pass during which the marker batch is rendered.'
##    RenderPass = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the scale applied to the radius of this primitive's bounding sphere."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the scale applied to the radius of this primitive's bounding sphere."
##    BoundingSphereScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a distance display condition that is evaluated per marker in the marker batch during rendering. This is different than display condition, which is evaluated once for the entire marker batch...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets a distance display condition that is evaluated per marker in the marker batch during rendering. This is different than display condition, which is evaluated once for the entire marker batch...'
##    DistanceDisplayConditionPerMarker = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch texture, which is applied to each marker in the batch.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the per-batch texture, which is applied to each marker in the batch.'
##    Texture = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the unit that each marker's size is defined in."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the unit that each marker's size is defined in."
##    SizeUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch size, which is applied to each marker in the batch. The array contains one width followed by one height.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the per-batch size, which is applied to each marker in the batch. The array contains one width followed by one height.'
##    Size = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch origin, which is applied to each marker in the batch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the per-batch origin, which is applied to each marker in the batch.'
##    Origin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch pixel offset, which is applied to each marker in the batch. The array contains one x pixel offset followed by one y pixel offset.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the per-batch pixel offset, which is applied to each marker in the batch. The array contains one x pixel offset followed by one y pixel offset.'
##    PixelOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch eye offset, which is applied to each marker in the batch. The array contains the components of the eye offset in the order x, y, z.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the per-batch eye offset, which is applied to each marker in the batch. The array contains the components of the eye offset in the order x, y, z.'
##    EyeOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch rotation angle, in radians, which is applied to each marker in the batch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the per-batch rotation angle, in radians, which is applied to each marker in the batch.'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch texture coordinate, which is applied to each marker in the batch. The array contains the texture coordinates arranged in the order s, t, p, q.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the per-batch texture coordinate, which is applied to each marker in the batch. The array contains the texture coordinates arranged in the order s, t, p, q.'
##    TextureCoordinate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'This property is deprecated. This property has been deprecated in favor of ClampToPixel. Gets or sets whether the screen space position of each marker is aligned to a pixel.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'This property is deprecated. This property has been deprecated in favor of ClampToPixel. Gets or sets whether the screen space position of each marker is aligned to a pixel.'
##    AlignToPixel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'
##    Wireframe = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether individual marker indices will be included in the pick results returned from the scene's Pick method. Each marker index that is picked will be returned as a batch primitive index."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether individual marker indices will be included in the pick results returned from the scene's Pick method. Each marker index that is picked will be returned as a batch primitive index."
##    PerItemPickingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the filter used for per-marker or per-batch textures.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the filter used for per-marker or per-batch textures.'
##    TextureFilter = property(_get, _set, doc = _set.__doc__)
##
##    def Set(self, Positions):
##        "Defines the positions of markers in a marker batch. The markers are rendered in the primitive's reference frame."
##        #return 
##
##    def SetWithOptionalParameters(self, Positions, OptionalParameters):
##        "Defines the positions and optional per-marker parameters of markers in a marker batch. The markers are rendered in the primitive's reference frame."
##        #return 
##
##    def SetWithOptionalParametersAndRenderPassHint(self, Positions, OptionalParameters, RenderPassHint):
##        "Defines the positions and optional per-marker parameters of markers in a marker batch. The markers are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."
##        #return 
##
##    def SetCartographic(self, CentralBody, Positions):
##        'For convenience. Defines the positions of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling Set.'
##        #return 
##
##    def SetCartographicWithOptionalParameters(self, CentralBody, Positions, OptionalParameters):
##        'For convenience. Defines the positions and optional per-marker parameters of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetCartographicWithOptionalParametersAndRenderPassHint(self, CentralBody, Positions, OptionalParameters, RenderPassHint):
##        'For convenience. Defines the positions and optional per-marker parameters of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. renderPassHint is provided for efficiency...'
##        #return 
##
##    def SetPartial(self, Positions, Indices):
##        'Updates a subset of marker positions in a marker batch.'
##        #return 
##
##    def SetPartialWithIndicesOrder(self, Positions, Indices, IndicesOrderHint):
##        'Updates a subset of marker positions in a marker batch.'
##        #return 
##
##    def SetPartialWithOptionalParameters(self, Positions, OptionalParameters, Indices):
##        'Updates a subset of marker positions and/or per-marker parameters in a marker batch.'
##        #return 
##
##    def SetPartialWithOptionalParametersIndicesOrderAndRenderPass(self, Positions, OptionalParameters, Indices, IndicesOrderHint, RenderPassHint):
##        'Updates a subset of marker positions and/or per-marker parameters in a marker batch.'
##        #return 
##
##    def SetPartialCartographic(self, CentralBody, Positions, Indices):
##        'For convenience. Updates a subset of positions in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartialCartographicWithIndicesOrder(self, CentralBody, Positions, Indices, IndicesOrderHint):
##        'For convenience. Updates a subset of positions in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartialCartographicWithOptionalParameters(self, CentralBody, Positions, OptionalParameters, Indices):
##        'For convenience. Updates a subset of positions and/or optional per-marker parameters of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass(self, CentralBody, Positions, OptionalParameters, Indices, IndicesOrderHint, RenderPassHint):
##        'For convenience. Updates a subset of positions and/or optional per-marker parameters of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. renderPassHint is provided for efficiency...'
##        #return 
##
##    def Supported(self, RenderingMethod):
##        'Determines whether or not the video card supports the marker batch primitive with the given renderingMethod.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the screen space position of each marker is clamped to a pixel.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the screen space position of each marker is clamped to a pixel.'
##    ClampToPixel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the markers are clipped by the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the markers are clipped by the central body.'
##    CentralBodyClipped = property(_get, _set, doc = _set.__doc__)
##
##    def AlignToScreen(self):
##        'Sets the up vector of the markers to always be aligned to the up vector of the camera. This is the default alignment.'
##        #return 
##
##    def AlignToNorth(self, CentralBody):
##        'Sets the up vector of the markers to point towards the north axis of centralBody. It will be aligned with the tangent vector of the surface that points north.'
##        #return 
##
##    def AlignToAxis(self, CentralBody, Axis):
##        'Sets the up vector of the markers to point towards the axis of centralBody. It will be aligned with the tangent vector of the surface that points towards the axis...'
##        #return 
##

class _IAgStkGraphicsLighting(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsLighting'
    _iid_ = GUID('{14443D95-FE9E-47B8-9B2C-AA87E03AD080}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsLighting._methods_ = [
    COMMETHOD([dispid(13701), helpstring('Gets or sets whether or not lighting is enabled.'), 'propget'], HRESULT, 'Enabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(13701), helpstring('Gets or sets whether or not lighting is enabled.'), 'propput'], HRESULT, 'Enabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(13702), helpstring('Gets or sets the ambient intensity throughout the scene.'), 'propget'], HRESULT, 'AmbientIntensity',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(13702), helpstring('Gets or sets the ambient intensity throughout the scene.'), 'propput'], HRESULT, 'AmbientIntensity',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(13703), helpstring('Gets or sets the diffuse intensity from the sun.'), 'propget'], HRESULT, 'DiffuseIntensity',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(13703), helpstring('Gets or sets the diffuse intensity from the sun.'), 'propput'], HRESULT, 'DiffuseIntensity',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(13704), helpstring("Gets or sets the overall brightness for the night light's image overlay, night overlay."), 'propget'], HRESULT, 'NightLightsIntensity',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(13704), helpstring("Gets or sets the overall brightness for the night light's image overlay, night overlay."), 'propput'], HRESULT, 'NightLightsIntensity',
              ( ['in'], c_float, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsLighting implementation
##class _IAgStkGraphicsLighting_Impl(object):
##    def _get(self):
##        'Gets or sets whether or not lighting is enabled.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether or not lighting is enabled.'
##    Enabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the ambient intensity throughout the scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the ambient intensity throughout the scene.'
##    AmbientIntensity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the diffuse intensity from the sun.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the diffuse intensity from the sun.'
##    DiffuseIntensity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the overall brightness for the night light's image overlay, night overlay."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overall brightness for the night light's image overlay, night overlay."
##    NightLightsIntensity = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsSurfaceTriangulatorResult._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the granularity, in radians, used when the triangulation was computed. Lower granularities are more precise but create more triangles.')], HRESULT, 'Granularity',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets indices into positions that define the boundary positions that surround the mesh. The indices returned consider the three components of a position (x, y, and z) as a single array element...')], HRESULT, 'BoundaryIndices',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the boundary positions that surround the mesh. Three array elements (in the order x, y, z) constitute one position.')], HRESULT, 'BoundaryPositions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the winding order of boundary positions.')], HRESULT, 'BoundaryPositionsWindingOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsWindingOrder), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the polyline type of boundary positions.')], HRESULT, 'BoundaryPolylineType',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPolylineType), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSurfaceTriangulatorResult implementation
##class IAgStkGraphicsSurfaceTriangulatorResult_Impl(object):
##    @property
##    def Granularity(self):
##        'Gets the granularity, in radians, used when the triangulation was computed. Lower granularities are more precise but create more triangles.'
##        #return pRetVal
##
##    @property
##    def BoundaryIndices(self):
##        'Gets indices into positions that define the boundary positions that surround the mesh. The indices returned consider the three components of a position (x, y, and z) as a single array element...'
##        #return ppRetVal
##
##    @property
##    def BoundaryPositions(self):
##        'Gets the boundary positions that surround the mesh. Three array elements (in the order x, y, z) constitute one position.'
##        #return ppRetVal
##
##    @property
##    def BoundaryPositionsWindingOrder(self):
##        'Gets the winding order of boundary positions.'
##        #return pRetVal
##
##    @property
##    def BoundaryPolylineType(self):
##        'Gets the polyline type of boundary positions.'
##        #return pRetVal
##

class _IAgStkGraphicsContrastFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsContrastFilter'
    _iid_ = GUID('{B62C8BD7-9C82-44BE-A521-BBD0ECC03111}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsContrastFilter._methods_ = [
    COMMETHOD([dispid(20801), helpstring('Gets or sets the contrast adjustment value for the filter. The value must be between -1 and 1, corresponding to least contrast to most contrast.'), 'propget'], HRESULT, 'Adjustment',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(20801), helpstring('Gets or sets the contrast adjustment value for the filter. The value must be between -1 and 1, corresponding to least contrast to most contrast.'), 'propput'], HRESULT, 'Adjustment',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsContrastFilter implementation
##class _IAgStkGraphicsContrastFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the contrast adjustment value for the filter. The value must be between -1 and 1, corresponding to least contrast to most contrast.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the contrast adjustment value for the filter. The value must be between -1 and 1, corresponding to least contrast to most contrast.'
##    Adjustment = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsLevelsFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsLevelsFilterFactory'
    _iid_ = GUID('{9260E17F-E9A7-4B45-AA91-9C09E89163C0}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsLevelsFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Adjusts the band levels of the source raster linearly.'
    _iid_ = GUID('{E0D6DAD5-CFCB-476A-95FD-2CD486114A68}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsLevelsFilterFactory._methods_ = [
    COMMETHOD([dispid(23301), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsLevelsFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsLevelsFilterFactory implementation
##class _IAgStkGraphicsLevelsFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##

class IAgStkGraphicsCylinderTriangulatorInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Triangulates a cylinder. It is recommended to visualize the cylinder using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used...'
    _iid_ = GUID('{EE39D933-CE2C-4087-8C8A-F38EBE83842F}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsCylinderFill'
eStkGraphicsCylinderFillWall = 1
eStkGraphicsCylinderFillBottomCap = 2
eStkGraphicsCylinderFillTopCap = 4
eStkGraphicsCylinderFillAll = 7
AgEStkGraphicsCylinderFill = c_int # enum
IAgStkGraphicsCylinderTriangulatorInitializer._methods_ = [
    COMMETHOD([helpstring('Computes the triangulation for a cylinder centered at the origin.')], HRESULT, 'CreateSimple',
              ( ['in'], c_double, 'Length' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSolidTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes the triangulation for a cylinder centered at the origin.')], HRESULT, 'Compute',
              ( ['in'], c_double, 'Length' ),
              ( ['in'], c_double, 'BottomRadius' ),
              ( ['in'], c_double, 'TopRadius' ),
              ( ['in'], c_int, 'Slices' ),
              ( ['in'], AgEStkGraphicsCylinderFill, 'CylinderFill' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSolidTriangulatorResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsCylinderTriangulatorInitializer implementation
##class IAgStkGraphicsCylinderTriangulatorInitializer_Impl(object):
##    def CreateSimple(self, Length, Radius):
##        'Computes the triangulation for a cylinder centered at the origin.'
##        #return ppRetVal
##
##    def Compute(self, Length, BottomRadius, TopRadius, Slices, CylinderFill):
##        'Computes the triangulation for a cylinder centered at the origin.'
##        #return ppRetVal
##

class _IAgStkGraphicsLevelsFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsLevelsFilter'
    _iid_ = GUID('{B79BCFB0-F005-45A4-96BB-460969DE7DEF}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsLevelsFilter._methods_ = [
    COMMETHOD([dispid(21301), helpstring('Sets the linear level adjustment value for the given raster band. Both negative and positive values are accepted.')], HRESULT, 'SetLevelAdjustment',
              ( ['in'], AgEStkGraphicsRasterBand, 'Band' ),
              ( ['in'], c_int, 'Adjustment' )),
    COMMETHOD([dispid(21302), helpstring('Clears the level adjustment values for all bands.')], HRESULT, 'ClearAdjustments'),
]
################################################################
## code template for _IAgStkGraphicsLevelsFilter implementation
##class _IAgStkGraphicsLevelsFilter_Impl(object):
##    def SetLevelAdjustment(self, Band, Adjustment):
##        'Sets the linear level adjustment value for the given raster band. Both negative and positive values are accepted.'
##        #return 
##
##    def ClearAdjustments(self):
##        'Clears the level adjustment values for all bands.'
##        #return 
##


# values for enumeration 'AgEStkGraphicsAntiAliasing'
eStkGraphicsAntiAliasingOff = 0
eStkGraphicsAntiAliasingFXAA = 1
eStkGraphicsAntiAliasingTwoX = 2
eStkGraphicsAntiAliasingFourX = 4
eStkGraphicsAntiAliasingEightX = 8
eStkGraphicsAntiAliasingSixteenX = 16
eStkGraphicsAntiAliasingThirtyTwoX = 32
eStkGraphicsAntiAliasingSixtyFourX = 64
AgEStkGraphicsAntiAliasing = c_int # enum
class IAgStkGraphicsGaussianBlurFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Applies a convolution filter to blur the source raster using the Gaussian function.'
    _iid_ = GUID('{C4F3B576-0D25-4B06-9A79-773821D5C97B}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsGaussianBlurFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Applies a convolution filter to blur the source raster using the Gaussian function.'
    _iid_ = GUID('{B5B0A55E-980A-453F-B7B4-7C7024F92EF4}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsGaussianBlurFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGaussianBlurFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsGaussianBlurFilterFactory implementation
##class IAgStkGraphicsGaussianBlurFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##

class IAgStkGraphicsAGICustomTerrainOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A terrain overlay for handling AGI Cesium Terrain.'
    _iid_ = GUID('{1AF28259-1C26-45F4-8156-079012D5BCE3}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsAGICustomTerrainOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A terrain overlay for handling AGI Cesium Terrain.'
    _iid_ = GUID('{59EF8436-AEEC-4E60-8E3D-920E0F11FEBA}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsAGICustomTerrainOverlayFactory._methods_ = [
    COMMETHOD([helpstring('Initializes an agi custom terrain overlay with the provided values.')], HRESULT, 'InitializeWithString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAGICustomTerrainOverlay)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsAGICustomTerrainOverlayFactory implementation
##class IAgStkGraphicsAGICustomTerrainOverlayFactory_Impl(object):
##    def InitializeWithString(self, Uri):
##        'Initializes an agi custom terrain overlay with the provided values.'
##        #return ppRetVal
##

class _IAgStkGraphicsConvolutionFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsConvolutionFilter'
    _iid_ = GUID('{92A18FC3-2E65-4BD9-8EF7-DBC93C534332}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsConvolutionFilter._methods_ = [
    COMMETHOD([dispid(20501), helpstring('Gets or sets the divisor for the result of the convolution kernel operation.'), 'propget'], HRESULT, 'Divisor',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(20501), helpstring('Gets or sets the divisor for the result of the convolution kernel operation.'), 'propput'], HRESULT, 'Divisor',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(20502), helpstring('Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'), 'propget'], HRESULT, 'Offset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(20502), helpstring('Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'), 'propput'], HRESULT, 'Offset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(20503), helpstring('Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'), 'propget'], HRESULT, 'Kernel',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(20503), helpstring('Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'), 'propput'], HRESULT, 'Kernel',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsConvolutionFilter implementation
##class _IAgStkGraphicsConvolutionFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the divisor for the result of the convolution kernel operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the divisor for the result of the convolution kernel operation.'
##    Divisor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'
##    Offset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'
##    Kernel = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsTriangleMeshPrimitive._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.')], HRESULT, 'Wireframe',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.')], HRESULT, 'Wireframe',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the primitive is rendered in two passes to improve the visual quality for translucent, convex meshes.')], HRESULT, 'RenderBackThenFrontFaces',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the primitive is rendered in two passes to improve the visual quality for translucent, convex meshes.')], HRESULT, 'RenderBackThenFrontFaces',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the primitive is lit.')], HRESULT, 'Lighting',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the primitive is lit.')], HRESULT, 'Lighting',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the orientation of front-facing triangles. This is used in combination with cull face for culling.')], HRESULT, 'TriangleWindingOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsWindingOrder), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the orientation of front-facing triangles. This is used in combination with cull face for culling.')], HRESULT, 'TriangleWindingOrder',
              ( ['in'], AgEStkGraphicsWindingOrder, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether front and/or back-facing triangles may be culled. This is used in combination with triangle winding order for culling.')], HRESULT, 'CullFace',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsCullFace), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether front and/or back-facing triangles may be culled. This is used in combination with triangle winding order for culling.')], HRESULT, 'CullFace',
              ( ['in'], AgEStkGraphicsCullFace, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the shading model for the mesh.')], HRESULT, 'ShadeModel',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsRendererShadeModel), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the shading model for the mesh.')], HRESULT, 'ShadeModel',
              ( ['in'], AgEStkGraphicsRendererShadeModel, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the texture to be drawn on the triangle mesh. Textures can be obtained from textures.')], HRESULT, 'Texture',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRendererTexture2D)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the texture to be drawn on the triangle mesh. Textures can be obtained from textures.')], HRESULT, 'Texture',
              ( ['in'], POINTER(IAgStkGraphicsRendererTexture2D), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the filter used for the texture associated with this triangle mesh.')], HRESULT, 'TextureFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the filter used for the texture associated with this triangle mesh.')], HRESULT, 'TextureFilter',
              ( ['in'], POINTER(IAgStkGraphicsTextureFilter2D), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with.")], HRESULT, 'SetHint',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSetHint), 'pRetVal' )),
    COMMETHOD([helpstring("Defines the triangle mesh using an indexed triangle list specified by positions, normals, and indices. The mesh is rendered in the primitive's reference frame.")], HRESULT, 'Set',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Normals' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring("Defines the triangle mesh using an indexed triangle list specified by positions, normals, indices, and optionalParameters. The mesh is rendered in the primitive's reference frame.")], HRESULT, 'SetWithOptionalParameters',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Normals' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], POINTER(IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters), 'OptionalParameters' )),
    COMMETHOD([helpstring("Defines the triangle mesh using the specified triangulator. The mesh is rendered in the primitive's reference frame.")], HRESULT, 'SetTriangulator',
              ( ['in'], POINTER(IAgStkGraphicsTriangulatorResult), 'Triangulator' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether individual points will be clipped by the central body.')], HRESULT, 'CentralBodyClipped',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether individual points will be clipped by the central body.')], HRESULT, 'CentralBodyClipped',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTriangleMeshPrimitive implementation
##class IAgStkGraphicsTriangleMeshPrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'
##    Wireframe = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the primitive is rendered in two passes to improve the visual quality for translucent, convex meshes.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the primitive is rendered in two passes to improve the visual quality for translucent, convex meshes.'
##    RenderBackThenFrontFaces = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the primitive is lit.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the primitive is lit.'
##    Lighting = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the orientation of front-facing triangles. This is used in combination with cull face for culling.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the orientation of front-facing triangles. This is used in combination with cull face for culling.'
##    TriangleWindingOrder = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether front and/or back-facing triangles may be culled. This is used in combination with triangle winding order for culling.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether front and/or back-facing triangles may be culled. This is used in combination with triangle winding order for culling.'
##    CullFace = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the shading model for the mesh.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the shading model for the mesh.'
##    ShadeModel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the texture to be drawn on the triangle mesh. Textures can be obtained from textures.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the texture to be drawn on the triangle mesh. Textures can be obtained from textures.'
##    Texture = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the filter used for the texture associated with this triangle mesh.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the filter used for the texture associated with this triangle mesh.'
##    TextureFilter = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SetHint(self):
##        "Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."
##        #return pRetVal
##
##    def Set(self, Positions, Normals, Indices):
##        "Defines the triangle mesh using an indexed triangle list specified by positions, normals, and indices. The mesh is rendered in the primitive's reference frame."
##        #return 
##
##    def SetWithOptionalParameters(self, Positions, Normals, Indices, OptionalParameters):
##        "Defines the triangle mesh using an indexed triangle list specified by positions, normals, indices, and optionalParameters. The mesh is rendered in the primitive's reference frame."
##        #return 
##
##    def SetTriangulator(self, Triangulator):
##        "Defines the triangle mesh using the specified triangulator. The mesh is rendered in the primitive's reference frame."
##        #return 
##
##    def _get(self):
##        'Gets or sets whether individual points will be clipped by the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether individual points will be clipped by the central body.'
##    CentralBodyClipped = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsCustomImageGlobeOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsCustomImageGlobeOverlay'
    _iid_ = GUID('{FD129A46-F352-4E7F-9B66-147C6B4AB24A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgEStkGraphicsMapProjection'
eStkGraphicsMapProjectionMercator = 0
eStkGraphicsMapProjectionEquidistantCylindrical = 1
AgEStkGraphicsMapProjection = c_int # enum
class IAgStkGraphicsScene(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "A scene provides properties and functionality that are reflected in the rendering of the globe control that it is associated with. An globe control's scene is available from the scene property..."
    _iid_ = GUID('{2D15C682-EFB5-499F-8851-A49599B2097D}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsCustomImageGlobeOverlay._methods_ = [
    COMMETHOD([dispid(16701), helpstring('Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16701), helpstring('Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16703), helpstring("Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."), 'propget'], HRESULT, 'UseAltitudeBasedTranslucency',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16703), helpstring("Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."), 'propput'], HRESULT, 'UseAltitudeBasedTranslucency',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(16704), helpstring("Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyLowerTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16704), helpstring("Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyLowerTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16705), helpstring("Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyUpperTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16705), helpstring("Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyUpperTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16706), helpstring("Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyLowerAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16706), helpstring("Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyLowerAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16707), helpstring("Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyUpperAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16707), helpstring("Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyUpperAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16702), helpstring('Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'), 'propget'], HRESULT, 'MoreThanOneImageGlobeOverlaySupported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16801), helpstring("Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16802), helpstring('Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'), 'propget'], HRESULT, 'Extent',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16803), helpstring('Gets the globe overlay role of the globe overlay.'), 'propget'], HRESULT, 'Role',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsGlobeOverlayRole), 'pRetVal' )),
    COMMETHOD([dispid(16804), helpstring('Gets the absolute URI specifying the location of the globe overlay.'), 'propget'], HRESULT, 'UriAsString',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16805), helpstring('Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(25702), helpstring('Gets whether the overlay contains translucent imagery.'), 'propget'], HRESULT, 'IsTranslucent',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(25703), helpstring('Gets the maximum resolution of the inlay in meters per pixel.'), 'propget'], HRESULT, 'MaximumMetersPerPixel',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(25704), helpstring('Gets the map projection. Valid values are mercator and equidistant cylindical.'), 'propget'], HRESULT, 'Projection',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMapProjection), 'pRetVal' )),
    COMMETHOD([dispid(25705), helpstring('Called automatically when imagery is being added to the globe.')], HRESULT, 'StartUp',
              ( ['in'], POINTER(IAgStkGraphicsScene), 'Scene' )),
    COMMETHOD([dispid(25706), helpstring('Called automatically when imagery is being removed from the globe.')], HRESULT, 'ShutDown',
              ( ['in'], POINTER(IAgStkGraphicsScene), 'Scene' )),
    COMMETHOD([dispid(25707), helpstring('Clears the image data cache associated with this instance. This is equivalent to deleting and re-adding the overlay.')], HRESULT, 'ClearCache'),
    COMMETHOD([dispid(25708), helpstring('Reloads the image data associated with this instance. Preserves the current image data until new image data replaces it.')], HRESULT, 'Reload'),
    COMMETHOD([dispid(25709), helpstring('Reads a tile from the specified extent, scales it to and stores the result in image.')], HRESULT, 'Read',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['in'], VARIANT, 'UserTileData' ),
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp), 'Image' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsCustomImageGlobeOverlay implementation
##class _IAgStkGraphicsCustomImageGlobeOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."
##    UseAltitudeBasedTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."
##    AltitudeBasedTranslucencyLowerTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."
##    AltitudeBasedTranslucencyUpperTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##    AltitudeBasedTranslucencyLowerAltitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##    AltitudeBasedTranslucencyUpperAltitude = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MoreThanOneImageGlobeOverlaySupported(self):
##        'Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'
##        #return pRetVal
##
##    @property
##    def CentralBody(self):
##        "Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."
##        #return pRetVal
##
##    @property
##    def Extent(self):
##        'Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'
##        #return ppRetVal
##
##    @property
##    def Role(self):
##        'Gets the globe overlay role of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def UriAsString(self):
##        'Gets the absolute URI specifying the location of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsTranslucent(self):
##        'Gets whether the overlay contains translucent imagery.'
##        #return pRetVal
##
##    @property
##    def MaximumMetersPerPixel(self):
##        'Gets the maximum resolution of the inlay in meters per pixel.'
##        #return pRetVal
##
##    @property
##    def Projection(self):
##        'Gets the map projection. Valid values are mercator and equidistant cylindical.'
##        #return pRetVal
##
##    def StartUp(self, Scene):
##        'Called automatically when imagery is being added to the globe.'
##        #return 
##
##    def ShutDown(self, Scene):
##        'Called automatically when imagery is being removed from the globe.'
##        #return 
##
##    def ClearCache(self):
##        'Clears the image data cache associated with this instance. This is equivalent to deleting and re-adding the overlay.'
##        #return 
##
##    def Reload(self):
##        'Reloads the image data associated with this instance. Preserves the current image data until new image data replaces it.'
##        #return 
##
##    def Read(self, Extent, UserTileData, Image):
##        'Reads a tile from the specified extent, scales it to and stores the result in image.'
##        #return pRetVal
##

IAgStkGraphicsCompositePrimitive._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the number of primitives in the composite.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the sort order for translucent primitives in this composite. This determines a trade-off between rendering speed and quality...')], HRESULT, 'TranslucentPrimitivesSortOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPrimitivesSortOrder), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the sort order for translucent primitives in this composite. This determines a trade-off between rendering speed and quality...')], HRESULT, 'TranslucentPrimitivesSortOrder',
              ( ['in'], AgEStkGraphicsPrimitivesSortOrder, 'pRetVal' )),
    COMMETHOD([helpstring('Adds a primitive to the composite.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAgStkGraphicsPrimitive), 'Primitive' )),
    COMMETHOD([helpstring('Removes a primitive from the composite.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAgStkGraphicsPrimitive), 'Primitive' )),
    COMMETHOD([helpstring('Determines whether the composite contains a primitive.')], HRESULT, 'Contains',
              ( ['in'], POINTER(IAgStkGraphicsPrimitive), 'Primitive' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Removes all primitives from the composite.')], HRESULT, 'Clear'),
    COMMETHOD(['propget', helpstring('Returns an enumerator that iterates through the collection. The order of the primitives is not guaranteed to be the order that the primitives were added.')], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsCompositePrimitive implementation
##class IAgStkGraphicsCompositePrimitive_Impl(object):
##    @property
##    def Count(self):
##        'Gets the number of primitives in the composite.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the sort order for translucent primitives in this composite. This determines a trade-off between rendering speed and quality...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the sort order for translucent primitives in this composite. This determines a trade-off between rendering speed and quality...'
##    TranslucentPrimitivesSortOrder = property(_get, _set, doc = _set.__doc__)
##
##    def Add(self, Primitive):
##        'Adds a primitive to the composite.'
##        #return 
##
##    def Remove(self, Primitive):
##        'Removes a primitive from the composite.'
##        #return 
##
##    def Contains(self, Primitive):
##        'Determines whether the composite contains a primitive.'
##        #return pRetVal
##
##    def Clear(self):
##        'Removes all primitives from the composite.'
##        #return 
##
##    @property
##    def _NewEnum(self):
##        'Returns an enumerator that iterates through the collection. The order of the primitives is not guaranteed to be the order that the primitives were added.'
##        #return ppRetVal
##

IAgStkGraphicsBandExtractFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the raster format containing the bands and the order of the bands that will be extracted.')], HRESULT, 'ExtractFormat',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsRasterFormat), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the raster format containing the bands and the order of the bands that will be extracted.')], HRESULT, 'ExtractFormat',
              ( ['in'], AgEStkGraphicsRasterFormat, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsBandExtractFilter implementation
##class IAgStkGraphicsBandExtractFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the raster format containing the bands and the order of the bands that will be extracted.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the raster format containing the bands and the order of the bands that will be extracted.'
##    ExtractFormat = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsSolidTriangulatorResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSolidTriangulatorResult'
    _iid_ = GUID('{309394D2-2C69-4C34-BC54-B7CA1D878A90}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsSolidTriangulatorResult._methods_ = [
    COMMETHOD([dispid(16601), helpstring('Gets the positions of the mesh. Three array elements (in the order x, y, z) constitute one position.'), 'propget'], HRESULT, 'Positions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16602), helpstring('Gets the normals of the mesh. Every position in positions has corresponding normal. Normals are commonly used for lighting. Three array elements (in the order x, y, z) constitute one normal.'), 'propget'], HRESULT, 'Normals',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16603), helpstring('Gets indices into positions and normals. Every 3 indices represent 1 triangle. The indices returned consider the three components of a position or normal (x, y, and z) as a single array element...'), 'propget'], HRESULT, 'Indices',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16604), helpstring('Gets the orientation of front-facing triangles in the mesh.'), 'propget'], HRESULT, 'TriangleWindingOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsWindingOrder), 'pRetVal' )),
    COMMETHOD([dispid(16605), helpstring('Gets the bounding sphere that encompasses the mesh.'), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(2501), helpstring('Gets indices into positions that define the positions outlining the solid. The indices returned consider the three components of a position (x, y, and z) as a single array element...'), 'propget'], HRESULT, 'OutlineIndices',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(2502), helpstring('Gets the positions outlining the solid. Three array elements (in the order x, y, z) constitute one position.'), 'propget'], HRESULT, 'OutlinePositions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(2503), helpstring('Gets the polyline type of outline indices and outline positions.'), 'propget'], HRESULT, 'OutlinePolylineType',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPolylineType), 'pRetVal' )),
    COMMETHOD([dispid(2504), helpstring('Gets whether the solid is closed. For example, a box with six faces is closed. If one face is removed, the box is open.'), 'propget'], HRESULT, 'Closed',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSolidTriangulatorResult implementation
##class _IAgStkGraphicsSolidTriangulatorResult_Impl(object):
##    @property
##    def Positions(self):
##        'Gets the positions of the mesh. Three array elements (in the order x, y, z) constitute one position.'
##        #return ppRetVal
##
##    @property
##    def Normals(self):
##        'Gets the normals of the mesh. Every position in positions has corresponding normal. Normals are commonly used for lighting. Three array elements (in the order x, y, z) constitute one normal.'
##        #return ppRetVal
##
##    @property
##    def Indices(self):
##        'Gets indices into positions and normals. Every 3 indices represent 1 triangle. The indices returned consider the three components of a position or normal (x, y, and z) as a single array element...'
##        #return ppRetVal
##
##    @property
##    def TriangleWindingOrder(self):
##        'Gets the orientation of front-facing triangles in the mesh.'
##        #return pRetVal
##
##    @property
##    def BoundingSphere(self):
##        'Gets the bounding sphere that encompasses the mesh.'
##        #return ppRetVal
##
##    @property
##    def OutlineIndices(self):
##        'Gets indices into positions that define the positions outlining the solid. The indices returned consider the three components of a position (x, y, and z) as a single array element...'
##        #return ppRetVal
##
##    @property
##    def OutlinePositions(self):
##        'Gets the positions outlining the solid. Three array elements (in the order x, y, z) constitute one position.'
##        #return ppRetVal
##
##    @property
##    def OutlinePolylineType(self):
##        'Gets the polyline type of outline indices and outline positions.'
##        #return pRetVal
##
##    @property
##    def Closed(self):
##        'Gets whether the solid is closed. For example, a box with six faces is closed. If one face is removed, the box is open.'
##        #return pRetVal
##

class _IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory'
    _iid_ = GUID('{FB05CE13-9227-42BC-AEB6-9ECD0162D721}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._methods_ = [
    COMMETHOD([dispid(7801), helpstring('Initializes default marker batch primitive optional parameters. All per-marker parameters are initially empty.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory implementation
##class _IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory_Impl(object):
##    def Initialize(self):
##        'Initializes default marker batch primitive optional parameters. All per-marker parameters are initially empty.'
##        #return ppRetVal
##

class _IAgStkGraphicsPixelSizeDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPixelSizeDisplayConditionFactory'
    _iid_ = GUID('{29703747-5639-441B-AB7C-6AFFB05BD783}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsPixelSizeDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Defines an inclusive interval, in pixels, that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the number of pixels the object's bounding sphere (or in ..."
    _iid_ = GUID('{E5CCD610-A3B3-4F0C-9D51-E367A9EA5ABF}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsPixelSizeDisplayConditionFactory._methods_ = [
    COMMETHOD([dispid(8001), helpstring('Initializes a default pixel size display condition. minimum pixel size is set to 0 and maximum pixel size is set to Int32.MaxValue...')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPixelSizeDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(8002), helpstring('Initializes a pixel size display condition with the inclusive interval [minimumPixelSize, maximumPixelSize]...')], HRESULT, 'InitializeWithPixelSizes',
              ( ['in'], c_int, 'MinimumPixelSize' ),
              ( ['in'], c_int, 'MaximumPixelSize' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPixelSizeDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsPixelSizeDisplayConditionFactory implementation
##class _IAgStkGraphicsPixelSizeDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default pixel size display condition. minimum pixel size is set to 0 and maximum pixel size is set to Int32.MaxValue...'
##        #return ppRetVal
##
##    def InitializeWithPixelSizes(self, MinimumPixelSize, MaximumPixelSize):
##        'Initializes a pixel size display condition with the inclusive interval [minimumPixelSize, maximumPixelSize]...'
##        #return ppRetVal
##

class _IAgStkGraphicsPathPointFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPathPointFactory'
    _iid_ = GUID('{3BEE0E8A-72EF-4C17-A953-98CCA8A8A3FC}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsPathPointFactory._methods_ = [
    COMMETHOD([dispid(17501), helpstring('Initializes a new path point.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(17502), helpstring('Initializes a new path point with the given date.')], HRESULT, 'InitializeWithDate',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'PathPointDate' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(17503), helpstring('Initializes a new path point with the given date and position.')], HRESULT, 'InitializeWithDateAndPosition',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'PathPointDate' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(17504), helpstring('Initializes a new path point with the given date, position and color.')], HRESULT, 'InitializeWithDatePositionAndColor',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'PathPointDate' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'Color' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(17505), helpstring('Initializes a new path point with the given date, position, color and translucency.')], HRESULT, 'InitializeWithDatePositionColorAndTranslucency',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'PathPointDate' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'Color' ),
              ( ['in'], c_double, 'Translucency' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsPathPointFactory implementation
##class _IAgStkGraphicsPathPointFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new path point.'
##        #return ppRetVal
##
##    def InitializeWithDate(self, PathPointDate):
##        'Initializes a new path point with the given date.'
##        #return ppRetVal
##
##    def InitializeWithDateAndPosition(self, PathPointDate, Position):
##        'Initializes a new path point with the given date and position.'
##        #return ppRetVal
##
##    def InitializeWithDatePositionAndColor(self, PathPointDate, Position, Color):
##        'Initializes a new path point with the given date, position and color.'
##        #return ppRetVal
##
##    def InitializeWithDatePositionColorAndTranslucency(self, PathPointDate, Position, Color, Translucency):
##        'Initializes a new path point with the given date, position, color and translucency.'
##        #return ppRetVal
##

class _IAgStkGraphicsEdgeDetectFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsEdgeDetectFilter'
    _iid_ = GUID('{502B4E62-B19F-4CD4-831A-51AF6C5D2D78}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsEdgeDetectFilter._methods_ = [
    COMMETHOD([dispid(20501), helpstring('Gets or sets the divisor for the result of the convolution kernel operation.'), 'propget'], HRESULT, 'Divisor',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(20501), helpstring('Gets or sets the divisor for the result of the convolution kernel operation.'), 'propput'], HRESULT, 'Divisor',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(20502), helpstring('Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'), 'propget'], HRESULT, 'Offset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(20502), helpstring('Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'), 'propput'], HRESULT, 'Offset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(20503), helpstring('Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'), 'propget'], HRESULT, 'Kernel',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(20503), helpstring('Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'), 'propput'], HRESULT, 'Kernel',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(20901), helpstring('Gets or sets the method used to detect edges in the source raster.'), 'propget'], HRESULT, 'Method',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsEdgeDetectMethod), 'pRetVal' )),
    COMMETHOD([dispid(20901), helpstring('Gets or sets the method used to detect edges in the source raster.'), 'propput'], HRESULT, 'Method',
              ( ['in'], AgEStkGraphicsEdgeDetectMethod, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsEdgeDetectFilter implementation
##class _IAgStkGraphicsEdgeDetectFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the divisor for the result of the convolution kernel operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the divisor for the result of the convolution kernel operation.'
##    Divisor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'
##    Offset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'
##    Kernel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the method used to detect edges in the source raster.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the method used to detect edges in the source raster.'
##    Method = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsGaussianBlurFilter._methods_ = [
]
################################################################
## code template for IAgStkGraphicsGaussianBlurFilter implementation
##class IAgStkGraphicsGaussianBlurFilter_Impl(object):

class _IAgStkGraphicsPathPrimitiveUpdatePolicy(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPathPrimitiveUpdatePolicy'
    _iid_ = GUID('{428B559F-63EA-4E8E-9595-62439DB0B25B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsPathPrimitiveUpdatePolicy._methods_ = [
    COMMETHOD([dispid(17101), helpstring('Updates the pathPrimitive at the specified date.')], HRESULT, 'Update',
              ( ['in'], POINTER(IAgStkGraphicsPathPrimitive), 'PathPrimitive' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'Date' )),
]
################################################################
## code template for _IAgStkGraphicsPathPrimitiveUpdatePolicy implementation
##class _IAgStkGraphicsPathPrimitiveUpdatePolicy_Impl(object):
##    def Update(self, PathPrimitive, Date):
##        'Updates the pathPrimitive at the specified date.'
##        #return 
##

class _IAgStkGraphicsProjectionRasterStreamPluginActivator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsProjectionRasterStreamPluginActivator'
    _iid_ = GUID('{AA59DCF0-3C76-4321-A05E-18DD75E1EC0A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsProjectionRasterStreamPluginProxy(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A proxy class provides access to the raster and projection streams implemented by a plugin. Proxies are instantiated using projection raster stream plugin activator.'
    _iid_ = GUID('{5A28D922-9211-4860-81AE-0D98D38CA6D7}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsProjectionRasterStreamPluginActivator._methods_ = [
    COMMETHOD([dispid(24405), helpstring('Loads a projection/raster COM plugin associated with the specified display name and returns a proxy object that allows accessing the raster and projection streams implemented by the plugin.')], HRESULT, 'CreateFromDisplayName',
              ( ['in'], BSTR, 'DisplayName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjectionRasterStreamPluginProxy)), 'ppRetVal' )),
    COMMETHOD([dispid(24404), helpstring("Gets a list of available projection/raster plugins' Display Names (Programmatic Identifiers).")], HRESULT, 'GetAvailableDisplayNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsProjectionRasterStreamPluginActivator implementation
##class _IAgStkGraphicsProjectionRasterStreamPluginActivator_Impl(object):
##    def CreateFromDisplayName(self, DisplayName):
##        'Loads a projection/raster COM plugin associated with the specified display name and returns a proxy object that allows accessing the raster and projection streams implemented by the plugin.'
##        #return ppRetVal
##
##    def GetAvailableDisplayNames(self):
##        "Gets a list of available projection/raster plugins' Display Names (Programmatic Identifiers)."
##        #return ppRetVal
##

class _IAgStkGraphicsScreenOverlayPickResultCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsScreenOverlayPickResultCollection'
    _iid_ = GUID('{A6D2DDC5-5EAF-4B36-9B93-4EBDDB0F664F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsScreenOverlayPickResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Describes a picked screen overlay as a result of a call to pick screen overlays.'
    _iid_ = GUID('{4872A8D1-B96F-4713-96F8-5ED5E5D6B8B4}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsScreenOverlayPickResultCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('A total number of elements in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Get an element at the specified position in the collection.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayPickResult)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsScreenOverlayPickResultCollection implementation
##class _IAgStkGraphicsScreenOverlayPickResultCollection_Impl(object):
##    @property
##    def Count(self):
##        'A total number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Get an element at the specified position in the collection.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return ppRetVal
##

class IAgStkGraphicsGradientDetectFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Applies a convolution filter to detect gradients in the source raster.'
    _iid_ = GUID('{AB421E7C-80F3-4503-A29C-5BECB2178D44}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsGradientDetectFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGradientDetectFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with specified gradient detect method.')], HRESULT, 'InitializeWithMethod',
              ( ['in'], AgEStkGraphicsGradientDetectMethod, 'Method' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGradientDetectFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsGradientDetectFilterFactory implementation
##class IAgStkGraphicsGradientDetectFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithMethod(self, Method):
##        'Initializes a new instance with specified gradient detect method.'
##        #return ppRetVal
##

class _IAgStkGraphicsSurfacePolygonTriangulatorInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSurfacePolygonTriangulatorInitializer'
    _iid_ = GUID('{EAA1854F-7232-421E-BB65-89794DE686E2}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsSurfacePolygonTriangulatorInitializer._methods_ = [
    COMMETHOD([dispid(6601), helpstring('Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions. This is equivalent to calling Compute with an altitude of 0, a granularity of 1 degree, and a positionsWindingOrder of compute.')], HRESULT, 'Compute',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6602), helpstring('For convenience. Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6603), helpstring('Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions with a hole specified by holePositions. This is equivalent to calling Compute with an altitude of 0 and a granularity of 1 degree.')], HRESULT, 'ComputeWithHole',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'HolePositions' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6604), helpstring('Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions with a hole specified by holePositions.')], HRESULT, 'ComputeWithHoleAltitudeAndGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'HolePositions' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6605), helpstring('Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions.')], HRESULT, 'ComputeWithAltitudeAndGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'PositionsWindingOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6606), helpstring('For convenience. Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeCartographicWithAltitudeAndGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'PositionsWindingOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceTriangulatorResult)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSurfacePolygonTriangulatorInitializer implementation
##class _IAgStkGraphicsSurfacePolygonTriangulatorInitializer_Impl(object):
##    def Compute(self, CentralBody, Positions):
##        'Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions. This is equivalent to calling Compute with an altitude of 0, a granularity of 1 degree, and a positionsWindingOrder of compute.'
##        #return ppRetVal
##
##    def ComputeCartographic(self, CentralBody, Positions):
##        'For convenience. Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeWithHole(self, CentralBody, Positions, HolePositions):
##        'Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions with a hole specified by holePositions. This is equivalent to calling Compute with an altitude of 0 and a granularity of 1 degree.'
##        #return ppRetVal
##
##    def ComputeWithHoleAltitudeAndGranularity(self, CentralBody, Positions, HolePositions, Altitude, Granularity):
##        'Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions with a hole specified by holePositions.'
##        #return ppRetVal
##
##    def ComputeWithAltitudeAndGranularity(self, CentralBody, Positions, Altitude, Granularity, PositionsWindingOrder):
##        'Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions.'
##        #return ppRetVal
##
##    def ComputeCartographicWithAltitudeAndGranularity(self, CentralBody, Positions, Altitude, Granularity, PositionsWindingOrder):
##        'For convenience. Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##

class _IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory'
    _iid_ = GUID('{5E50D808-F143-434B-A9C3-580A9A1C724D}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsProjectionRasterStreamPluginActivator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The Activator class provides methods to load COM plugins that implement projection and raster streaming. For more information about the projection and raster plugins, see the STK Programming Interface.'
    _iid_ = GUID('{0C1E9236-42E6-4539-9003-06E06F906432}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory._methods_ = [
    COMMETHOD([dispid(24601), helpstring('Initializes a new instance of the Activator type.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjectionRasterStreamPluginActivator)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory implementation
##class _IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance of the Activator type.'
##        #return ppRetVal
##

IAgStkGraphicsAGICustomTerrainOverlay._methods_ = [
]
################################################################
## code template for IAgStkGraphicsAGICustomTerrainOverlay implementation
##class IAgStkGraphicsAGICustomTerrainOverlay_Impl(object):

class _IAgStkGraphicsTextureScreenOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTextureScreenOverlay'
    _iid_ = GUID('{78AE9714-2472-4393-B81D-13E81160497B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgEStkGraphicsMaintainAspectRatio'
eStkGraphicsMaintainAspectRatioNone = 0
eStkGraphicsMaintainAspectRatioWidth = 1
eStkGraphicsMaintainAspectRatioHeight = 2
AgEStkGraphicsMaintainAspectRatio = c_int # enum
_IAgStkGraphicsTextureScreenOverlay._methods_ = [
    COMMETHOD([dispid(17301), helpstring('Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17301), helpstring('Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'), 'propput'], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17302), helpstring('Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'), 'propget'], HRESULT, 'PinningPosition',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17302), helpstring('Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'), 'propput'], HRESULT, 'PinningPosition',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17303), helpstring('Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17303), helpstring('Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'), 'propput'], HRESULT, 'X',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17304), helpstring('Gets or sets the unit of the x property.'), 'propget'], HRESULT, 'XUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD([dispid(17304), helpstring('Gets or sets the unit of the x property.'), 'propput'], HRESULT, 'XUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD([dispid(17305), helpstring('Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17305), helpstring('Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'), 'propput'], HRESULT, 'Y',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17306), helpstring('Gets or sets the unit of the y property.'), 'propget'], HRESULT, 'YUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD([dispid(17306), helpstring('Gets or sets the unit of the y property.'), 'propput'], HRESULT, 'YUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD([dispid(17307), helpstring('Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'), 'propget'], HRESULT, 'Size',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17307), helpstring('Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'), 'propput'], HRESULT, 'Size',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17308), helpstring('Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17308), helpstring('Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'), 'propput'], HRESULT, 'Width',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17309), helpstring('Gets or sets the unit of the width property.'), 'propget'], HRESULT, 'WidthUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD([dispid(17309), helpstring('Gets or sets the unit of the width property.'), 'propput'], HRESULT, 'WidthUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD([dispid(17310), helpstring('Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17310), helpstring('Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17311), helpstring('Gets or sets the unit of the height property.'), 'propget'], HRESULT, 'HeightUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD([dispid(17311), helpstring('Gets or sets the unit of the height property.'), 'propput'], HRESULT, 'HeightUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD([dispid(17312), helpstring("Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."), 'propget'], HRESULT, 'MinimumSize',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17312), helpstring("Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."), 'propput'], HRESULT, 'MinimumSize',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17313), helpstring("Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."), 'propget'], HRESULT, 'MaximumSize',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17313), helpstring("Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."), 'propput'], HRESULT, 'MaximumSize',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17314), helpstring('Gets the bounds of the overlay relative to its parent. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'), 'propget'], HRESULT, 'Bounds',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17315), helpstring("Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."), 'propget'], HRESULT, 'BorderColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17315), helpstring("Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."), 'propput'], HRESULT, 'BorderColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17316), helpstring("Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."), 'propget'], HRESULT, 'BorderSize',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17316), helpstring("Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."), 'propput'], HRESULT, 'BorderSize',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(17317), helpstring('Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'), 'propget'], HRESULT, 'BorderTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17317), helpstring('Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'), 'propput'], HRESULT, 'BorderTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(17318), helpstring('Gets or sets the value with which the overlay will be translated from the X value of the position property.'), 'propget'], HRESULT, 'TranslationX',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17318), helpstring('Gets or sets the value with which the overlay will be translated from the X value of the position property.'), 'propput'], HRESULT, 'TranslationX',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17319), helpstring('Gets or sets the value with which the overlay will be translated from the Y value of the position property.'), 'propget'], HRESULT, 'TranslationY',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17319), helpstring('Gets or sets the value with which the overlay will be translated from the Y value of the position property.'), 'propput'], HRESULT, 'TranslationY',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17320), helpstring('Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'), 'propget'], HRESULT, 'RotationAngle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17320), helpstring('Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'), 'propput'], HRESULT, 'RotationAngle',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17321), helpstring('Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'), 'propget'], HRESULT, 'RotationPoint',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17321), helpstring('Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'), 'propput'], HRESULT, 'RotationPoint',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17322), helpstring("Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."), 'propget'], HRESULT, 'Scale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17322), helpstring("Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."), 'propput'], HRESULT, 'Scale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17323), helpstring('Gets or sets whether the overlay will be flipped along its X axis.'), 'propget'], HRESULT, 'FlipX',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17323), helpstring('Gets or sets whether the overlay will be flipped along its X axis.'), 'propput'], HRESULT, 'FlipX',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17324), helpstring('Gets or sets whether the overlay will be flipped along its Y axis.'), 'propget'], HRESULT, 'FlipY',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17324), helpstring('Gets or sets whether the overlay will be flipped along its Y axis.'), 'propput'], HRESULT, 'FlipY',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17325), helpstring("Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."), 'propget'], HRESULT, 'Origin',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayOrigin), 'pRetVal' )),
    COMMETHOD([dispid(17325), helpstring("Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."), 'propput'], HRESULT, 'Origin',
              ( ['in'], AgEStkGraphicsScreenOverlayOrigin, 'pRetVal' )),
    COMMETHOD([dispid(17326), helpstring('Gets or sets the origin of the pinning position property, relative to the overlay...'), 'propget'], HRESULT, 'PinningOrigin',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayPinningOrigin), 'pRetVal' )),
    COMMETHOD([dispid(17326), helpstring('Gets or sets the origin of the pinning position property, relative to the overlay...'), 'propput'], HRESULT, 'PinningOrigin',
              ( ['in'], AgEStkGraphicsScreenOverlayPinningOrigin, 'pRetVal' )),
    COMMETHOD([dispid(17327), helpstring("Gets the overlay's parent. This may be another overlay if this overlay was added to that overlay's overlays collection. Or, it may be the screen overlay manager if this overlay was added to the scene manager'sscreen overlays collection."), 'propget'], HRESULT, 'Parent',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayContainer)), 'ppRetVal' )),
    COMMETHOD([dispid(17328), helpstring("Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17328), helpstring("Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(17329), helpstring("Gets or sets the overlay's color. By default, the overlay is white."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17329), helpstring("Gets or sets the overlay's color. By default, the overlay is white."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17330), helpstring('Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'), 'propget'], HRESULT, 'PickingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17330), helpstring('Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'), 'propput'], HRESULT, 'PickingEnabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17331), helpstring("Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."), 'propget'], HRESULT, 'ClipToParent',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17331), helpstring("Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."), 'propput'], HRESULT, 'ClipToParent',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17332), helpstring("Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17332), helpstring("Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17333), helpstring('Gets the position of the overlay in coordinates relative to the overall globe control. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'), 'propget'], HRESULT, 'ControlPosition',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17334), helpstring('Gets the size of the overlay in coordinates relative to the overall globe control. The elements are in the order width, height, width screen overlay unit, height screen overlay unit.'), 'propget'], HRESULT, 'ControlSize',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17335), helpstring('Gets the bounds of the overlay in coordinates relative to the overall globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'), 'propget'], HRESULT, 'ControlBounds',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17336), helpstring("Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17336), helpstring("Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17338), helpstring('Gets the collection of overlays that are contained within this overlay.'), 'propget'], HRESULT, 'Overlays',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(17339), helpstring('Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'), 'propget'], HRESULT, 'Padding',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17339), helpstring('Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'), 'propput'], HRESULT, 'Padding',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17340), helpstring('Brings the overlay to the front of the z-order, so it is on top of all other overlays with the same parent')], HRESULT, 'BringToFront'),
    COMMETHOD([dispid(17341), helpstring('Sends the overlay to the back of the z-order, so it is underneath all other overlays with the same parent')], HRESULT, 'SendToBack'),
    COMMETHOD([dispid(17342), helpstring('Transforms a given position, specified relative to the overlay, into coordinates relative to the overall globe control...')], HRESULT, 'OverlayToControl',
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17343), helpstring('Transforms a given position, specified relative to the overall globe control, into coordinates relative to this overlay...')], HRESULT, 'ControlToOverlay',
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(10601), helpstring('Gets or sets the texture (image) to be drawn on the overlay. Textures can be obtained from textures.'), 'propget'], HRESULT, 'Texture',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRendererTexture2D)), 'ppRetVal' )),
    COMMETHOD([dispid(10601), helpstring('Gets or sets the texture (image) to be drawn on the overlay. Textures can be obtained from textures.'), 'propput'], HRESULT, 'Texture',
              ( ['in'], POINTER(IAgStkGraphicsRendererTexture2D), 'ppRetVal' )),
    COMMETHOD([dispid(10602), helpstring('Gets or sets the filter used for the texture associated with this overlay.'), 'propget'], HRESULT, 'TextureFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([dispid(10602), helpstring('Gets or sets the filter used for the texture associated with this overlay.'), 'propput'], HRESULT, 'TextureFilter',
              ( ['in'], POINTER(IAgStkGraphicsTextureFilter2D), 'ppRetVal' )),
    COMMETHOD([dispid(10603), helpstring('Gets or sets a value indicating whether the aspect ratio of the texture screen overlay is maintained or not.'), 'propget'], HRESULT, 'MaintainAspectRatio',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMaintainAspectRatio), 'pRetVal' )),
    COMMETHOD([dispid(10603), helpstring('Gets or sets a value indicating whether the aspect ratio of the texture screen overlay is maintained or not.'), 'propput'], HRESULT, 'MaintainAspectRatio',
              ( ['in'], AgEStkGraphicsMaintainAspectRatio, 'pRetVal' )),
    COMMETHOD([dispid(17337), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17337), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTextureScreenOverlay implementation
##class _IAgStkGraphicsTextureScreenOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'
##    PinningPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'
##    X = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the x property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the x property.'
##    XUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'
##    Y = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the y property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the y property.'
##    YUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'
##    Size = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the width property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the width property.'
##    WidthUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the height property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the height property.'
##    HeightUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."
##    MinimumSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."
##    MaximumSize = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Bounds(self):
##        'Gets the bounds of the overlay relative to its parent. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."
##    BorderColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."
##    BorderSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'
##    BorderTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value with which the overlay will be translated from the X value of the position property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value with which the overlay will be translated from the X value of the position property.'
##    TranslationX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value with which the overlay will be translated from the Y value of the position property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value with which the overlay will be translated from the Y value of the position property.'
##    TranslationY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'
##    RotationAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'
##    RotationPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."
##    Scale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the overlay will be flipped along its X axis.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the overlay will be flipped along its X axis.'
##    FlipX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the overlay will be flipped along its Y axis.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the overlay will be flipped along its Y axis.'
##    FlipY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."
##    Origin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the origin of the pinning position property, relative to the overlay...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the origin of the pinning position property, relative to the overlay...'
##    PinningOrigin = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Parent(self):
##        "Gets the overlay's parent. This may be another overlay if this overlay was added to that overlay's overlays collection. Or, it may be the screen overlay manager if this overlay was added to the scene manager'sscreen overlays collection."
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the overlay's color. By default, the overlay is white."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overlay's color. By default, the overlay is white."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'
##    PickingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."
##    ClipToParent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ControlPosition(self):
##        'Gets the position of the overlay in coordinates relative to the overall globe control. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##        #return ppRetVal
##
##    @property
##    def ControlSize(self):
##        'Gets the size of the overlay in coordinates relative to the overall globe control. The elements are in the order width, height, width screen overlay unit, height screen overlay unit.'
##        #return ppRetVal
##
##    @property
##    def ControlBounds(self):
##        'Gets the bounds of the overlay in coordinates relative to the overall globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Overlays(self):
##        'Gets the collection of overlays that are contained within this overlay.'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'
##    Padding = property(_get, _set, doc = _set.__doc__)
##
##    def BringToFront(self):
##        'Brings the overlay to the front of the z-order, so it is on top of all other overlays with the same parent'
##        #return 
##
##    def SendToBack(self):
##        'Sends the overlay to the back of the z-order, so it is underneath all other overlays with the same parent'
##        #return 
##
##    def OverlayToControl(self, X, Y):
##        'Transforms a given position, specified relative to the overlay, into coordinates relative to the overall globe control...'
##        #return ppRetVal
##
##    def ControlToOverlay(self, X, Y):
##        'Transforms a given position, specified relative to the overall globe control, into coordinates relative to this overlay...'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets the texture (image) to be drawn on the overlay. Textures can be obtained from textures.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the texture (image) to be drawn on the overlay. Textures can be obtained from textures.'
##    Texture = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the filter used for the texture associated with this overlay.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the filter used for the texture associated with this overlay.'
##    TextureFilter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a value indicating whether the aspect ratio of the texture screen overlay is maintained or not.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a value indicating whether the aspect ratio of the texture screen overlay is maintained or not.'
##    MaintainAspectRatio = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsProjectionFactory(CoClass):
    'A projection represents a simplified camera with a position, orientation, and field of view horizontal and field of view vertical...'
    _reg_clsid_ = GUID('{A041941A-C90D-46C7-B7C7-C3995D4D6380}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsProjectionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsProjectionFactory'
    _iid_ = GUID('{53637EEC-BC39-4EEB-A6E2-166631FB634B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsProjectionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A projection represents a simplified camera with a position, orientation, and field of view horizontal and field of view vertical...'
    _iid_ = GUID('{DB047D3D-5AFD-4B64-B396-034FD95EC57A}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsProjectionFactory._com_interfaces_ = [_IAgStkGraphicsProjectionFactory, IAgStkGraphicsProjectionFactory]

class IAgStkGraphicsEllipsoidTriangulatorInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Triangulates an ellipsoid. It is recommended to visualize the ellipsoid using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used...'
    _iid_ = GUID('{8C50173B-E1E0-4321-AEAC-5C75E4EF323F}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsEllipsoidTriangulatorInitializer._methods_ = [
    COMMETHOD([helpstring('Computes the triangulation for an ellipsoid with the specified radii, centered at the origin, using 32 slices and 16 stacks.')], HRESULT, 'ComputeSimple',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Radii' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSolidTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes the triangulation for an ellipsoid with the specified radii, centered at the origin.')], HRESULT, 'Compute',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Radii' ),
              ( ['in'], c_int, 'Slices' ),
              ( ['in'], c_int, 'Stacks' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSolidTriangulatorResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsEllipsoidTriangulatorInitializer implementation
##class IAgStkGraphicsEllipsoidTriangulatorInitializer_Impl(object):
##    def ComputeSimple(self, Radii):
##        'Computes the triangulation for an ellipsoid with the specified radii, centered at the origin, using 32 slices and 16 stacks.'
##        #return ppRetVal
##
##    def Compute(self, Radii, Slices, Stacks):
##        'Computes the triangulation for an ellipsoid with the specified radii, centered at the origin.'
##        #return ppRetVal
##

class IAgStkGraphicsBandOrderFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Reorders or swizzles the bands of the source raster to match the band order of the raster format specified by the band order property. When maintain raster format is true, the source raster's format is maintained after swizzling."
    _iid_ = GUID('{1BFCF1DD-1ADA-47B7-829B-EA60FC04B61D}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsBandOrderFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Reorders or swizzles the bands of the source raster to match the band order of the raster format specified by the band order property. When maintain raster format is true, the source raster's format is maintained after swizzling."
    _iid_ = GUID('{A4A76805-E8E4-4BB6-878C-DCB0DA6D84D3}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsBandOrderFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBandOrderFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with a raster format indicating the desired order of the bands in the source raster.')], HRESULT, 'InitializeWithOrder',
              ( ['in'], AgEStkGraphicsRasterFormat, 'BandOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBandOrderFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring("Initializes a new instance with a raster format indicating the desired order of the bands in the source raster, and whether to maintain the source raster's format after swizzling.")], HRESULT, 'InitializeWithOrderAndBool',
              ( ['in'], AgEStkGraphicsRasterFormat, 'BandOrder' ),
              ( ['in'], VARIANT_BOOL, 'MaintainImageFormat' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBandOrderFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsBandOrderFilterFactory implementation
##class IAgStkGraphicsBandOrderFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithOrder(self, BandOrder):
##        'Initializes a new instance with a raster format indicating the desired order of the bands in the source raster.'
##        #return ppRetVal
##
##    def InitializeWithOrderAndBool(self, BandOrder, MaintainImageFormat):
##        "Initializes a new instance with a raster format indicating the desired order of the bands in the source raster, and whether to maintain the source raster's format after swizzling."
##        #return ppRetVal
##

class _IAgStkGraphicsCustomImageGlobeOverlayPluginActivator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsCustomImageGlobeOverlayPluginActivator'
    _iid_ = GUID('{79CBA3B6-DDB6-4085-BC1F-4D0FFDBC7749}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsCustomImageGlobeOverlayPluginProxy(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A proxy class provides access to a custom image globe overlay implemented by a plugin. Proxies are instantiated using custom image globe overlay plugin activator.'
    _iid_ = GUID('{197FBAFD-0F9C-44D9-B2D0-14C8B30F312E}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsCustomImageGlobeOverlayPluginActivator._methods_ = [
    COMMETHOD([dispid(25403), helpstring('Loads a custom image globe overlay COM plugin associated with the specified display name and returns a proxy object that allows accessing the custom image globe overlays implemented by the plugin.')], HRESULT, 'CreateFromDisplayName',
              ( ['in'], BSTR, 'DisplayName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCustomImageGlobeOverlayPluginProxy)), 'ppRetVal' )),
    COMMETHOD([dispid(25402), helpstring('Gets a list of available custom image globe overlay Display Names (Programmatic Identifiers).')], HRESULT, 'GetAvailableDisplayNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsCustomImageGlobeOverlayPluginActivator implementation
##class _IAgStkGraphicsCustomImageGlobeOverlayPluginActivator_Impl(object):
##    def CreateFromDisplayName(self, DisplayName):
##        'Loads a custom image globe overlay COM plugin associated with the specified display name and returns a proxy object that allows accessing the custom image globe overlays implemented by the plugin.'
##        #return ppRetVal
##
##    def GetAvailableDisplayNames(self):
##        'Gets a list of available custom image globe overlay Display Names (Programmatic Identifiers).'
##        #return ppRetVal
##

IAgStkGraphicsScreenOverlayContainer._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the collection of overlays that are contained within this overlay.')], HRESULT, 'Overlays',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayCollection)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.')], HRESULT, 'Padding',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.')], HRESULT, 'Padding',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>.")], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>.")], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsScreenOverlayContainer implementation
##class IAgStkGraphicsScreenOverlayContainer_Impl(object):
##    @property
##    def Overlays(self):
##        'Gets the collection of overlays that are contained within this overlay.'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'
##    Padding = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."
##    Display = property(_get, _set, doc = _set.__doc__)
##

class IAgStkGraphicsAxesPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Renders an axes in the 3D scene.'
    _iid_ = GUID('{FF0A767C-8A84-47F9-A108-32CC0BFF8366}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsAxesPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Renders an axes in the 3D scene.'
    _iid_ = GUID('{8892FB91-4AA2-4663-9307-68A737163045}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsAxesPrimitiveFactory._methods_ = [
    COMMETHOD([helpstring('Initializes an axes primitive with the specified ISystem sys as its source.')], HRESULT, 'InitializeWithDirection',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'Sys' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAxesPrimitive)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsAxesPrimitiveFactory implementation
##class IAgStkGraphicsAxesPrimitiveFactory_Impl(object):
##    def InitializeWithDirection(self, Sys, Axes, Font):
##        'Initializes an axes primitive with the specified ISystem sys as its source.'
##        #return ppRetVal
##

class _IAgStkGraphicsFilteringRasterStream(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsFilteringRasterStream'
    _iid_ = GUID('{97E42BF7-24A6-45A3-94E2-3766F34E4DFD}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgEStkGraphicsFlipAxis'
eStkGraphicsFlipAxisHorizontal = 0
eStkGraphicsFlipAxisVertical = 1
AgEStkGraphicsFlipAxis = c_int # enum
class IAgStkGraphicsRasterFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A filter for processing raster datasets. RasterFilter is the base class for all raster filters...'
    _iid_ = GUID('{1D21525D-4204-47CC-8457-996E1A6EAB7E}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsRasterStream(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A raster, the data of which, is updated dynamically at the specified update delta. The class can be used to stream video and other dynamic raster data to textures and other raster clients...'
    _iid_ = GUID('{63F024CA-7113-4841-8D26-7A286458BD7C}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsFilteringRasterStream._methods_ = [
    COMMETHOD([dispid(19601), helpstring('Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes...'), 'propget'], HRESULT, 'UpdateDelta',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(19601), helpstring('Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes...'), 'propput'], HRESULT, 'UpdateDelta',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(19602), helpstring('When overridden in a derived class, updates the raster data associated with the raster stream at the specified time...')], HRESULT, 'Update',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'Time' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'NextTime' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9801), helpstring('Gets the raster attributes that define the raster data.'), 'propget'], HRESULT, 'Attributes',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
    COMMETHOD([dispid(9802), helpstring('Gets the width of the raster in pixels.'), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9803), helpstring('Gets the height of the raster in pixels.'), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9804), helpstring('Flips the raster along the given axis.')], HRESULT, 'Flip',
              ( ['in'], AgEStkGraphicsFlipAxis, 'Axis' )),
    COMMETHOD([dispid(9805), helpstring('Rotates the raster by the given angle.')], HRESULT, 'Rotate',
              ( ['in'], c_double, 'Angle' )),
    COMMETHOD([dispid(9806), helpstring('Applies a raster filter to the raster and returns a new raster with the results of the filtering. The current raster is not modified.')], HRESULT, 'Apply',
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(9807), helpstring('Applies a raster filter to the raster. The current raster will contain the results of the filtering.')], HRESULT, 'ApplyInPlace',
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' )),
    COMMETHOD([dispid(9808), helpstring('Extracts the band of raster data associated with the given raster band.')], HRESULT, 'ExtractBand',
              ( ['in'], AgEStkGraphicsRasterBand, 'Band' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(9809), helpstring('Extracts the bands of raster data associated with the given raster format.')], HRESULT, 'ExtractBandFromRasterFormat',
              ( ['in'], AgEStkGraphicsRasterFormat, 'Format' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(9810), helpstring('Copies the data associated with the given raster into this raster.')], HRESULT, 'CopyFromRaster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' )),
    COMMETHOD([dispid(19701), helpstring('Gets the raster filter that will be applied to the raster stream on each update.'), 'propget'], HRESULT, 'Filter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(19702), helpstring('Gets the raster stream that will have the raster filter applied on each update.'), 'propget'], HRESULT, 'Stream',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterStream)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsFilteringRasterStream implementation
##class _IAgStkGraphicsFilteringRasterStream_Impl(object):
##    def _get(self):
##        'Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes...'
##    UpdateDelta = property(_get, _set, doc = _set.__doc__)
##
##    def Update(self, Time, NextTime):
##        'When overridden in a derived class, updates the raster data associated with the raster stream at the specified time...'
##        #return pRetVal
##
##    @property
##    def Attributes(self):
##        'Gets the raster attributes that define the raster data.'
##        #return ppRetVal
##
##    @property
##    def Width(self):
##        'Gets the width of the raster in pixels.'
##        #return pRetVal
##
##    @property
##    def Height(self):
##        'Gets the height of the raster in pixels.'
##        #return pRetVal
##
##    def Flip(self, Axis):
##        'Flips the raster along the given axis.'
##        #return 
##
##    def Rotate(self, Angle):
##        'Rotates the raster by the given angle.'
##        #return 
##
##    def Apply(self, Filter):
##        'Applies a raster filter to the raster and returns a new raster with the results of the filtering. The current raster is not modified.'
##        #return ppRetVal
##
##    def ApplyInPlace(self, Filter):
##        'Applies a raster filter to the raster. The current raster will contain the results of the filtering.'
##        #return 
##
##    def ExtractBand(self, Band):
##        'Extracts the band of raster data associated with the given raster band.'
##        #return ppRetVal
##
##    def ExtractBandFromRasterFormat(self, Format):
##        'Extracts the bands of raster data associated with the given raster format.'
##        #return ppRetVal
##
##    def CopyFromRaster(self, Raster):
##        'Copies the data associated with the given raster into this raster.'
##        #return 
##
##    @property
##    def Filter(self):
##        'Gets the raster filter that will be applied to the raster stream on each update.'
##        #return ppRetVal
##
##    @property
##    def Stream(self):
##        'Gets the raster stream that will have the raster filter applied on each update.'
##        #return ppRetVal
##

class IAgStkGraphicsSurfacePolygonTriangulatorInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Triangulates a polygon, with an optional hole, on a central body, into a triangle mesh and a surrounding boundary. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive...'
    _iid_ = GUID('{52654C8A-3C27-415F-B346-C0E433241B49}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsSurfacePolygonTriangulatorInitializer._methods_ = [
    COMMETHOD([helpstring('Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions. This is equivalent to calling Compute with an altitude of 0, a granularity of 1 degree, and a positionsWindingOrder of compute.')], HRESULT, 'Compute',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('For convenience. Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions with a hole specified by holePositions. This is equivalent to calling Compute with an altitude of 0 and a granularity of 1 degree.')], HRESULT, 'ComputeWithHole',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'HolePositions' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions with a hole specified by holePositions.')], HRESULT, 'ComputeWithHoleAltitudeAndGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'HolePositions' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions.')], HRESULT, 'ComputeWithAltitudeAndGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'PositionsWindingOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('For convenience. Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeCartographicWithAltitudeAndGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'PositionsWindingOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceTriangulatorResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSurfacePolygonTriangulatorInitializer implementation
##class IAgStkGraphicsSurfacePolygonTriangulatorInitializer_Impl(object):
##    def Compute(self, CentralBody, Positions):
##        'Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions. This is equivalent to calling Compute with an altitude of 0, a granularity of 1 degree, and a positionsWindingOrder of compute.'
##        #return ppRetVal
##
##    def ComputeCartographic(self, CentralBody, Positions):
##        'For convenience. Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeWithHole(self, CentralBody, Positions, HolePositions):
##        'Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions with a hole specified by holePositions. This is equivalent to calling Compute with an altitude of 0 and a granularity of 1 degree.'
##        #return ppRetVal
##
##    def ComputeWithHoleAltitudeAndGranularity(self, CentralBody, Positions, HolePositions, Altitude, Granularity):
##        'Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions with a hole specified by holePositions.'
##        #return ppRetVal
##
##    def ComputeWithAltitudeAndGranularity(self, CentralBody, Positions, Altitude, Granularity, PositionsWindingOrder):
##        'Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified positions.'
##        #return ppRetVal
##
##    def ComputeCartographicWithAltitudeAndGranularity(self, CentralBody, Positions, Altitude, Granularity, PositionsWindingOrder):
##        'For convenience. Computes the triangulation on the specified centralBody for a polygon whose boundary is defined by the specified cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##

class _IAgStkGraphicsPointBatchPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPointBatchPrimitiveFactory'
    _iid_ = GUID('{485B18D4-BB4C-48CB-80E5-104775B55EFE}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsPointBatchPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    ' Renders one or more points in the 3D scene. Each point in the batch has a unique position and an optional color. All points in the batch share the same pixel size. For best performance, avoid creating lots of batches with only a few points each...'
    _iid_ = GUID('{AE6C6DCA-3AFE-4419-8AAD-DD56BEE51446}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsPointBatchPrimitiveFactory._methods_ = [
    COMMETHOD([dispid(8101), helpstring('Initializes a default point batch primitive. This is equivalent to constructing a point batch with a set hint of Frequent.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPointBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(8102), helpstring('Initializes a new instance of a point batch primitive with the specified set hint.')], HRESULT, 'InitializeWithSetHint',
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPointBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(8103), helpstring('Gets the minimum pixel size supported by the video card.'), 'propget'], HRESULT, 'MinimumPixelSizeSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(8104), helpstring('Gets the maximum pixel size supported by the video card.'), 'propget'], HRESULT, 'MaximumPixelSizeSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsPointBatchPrimitiveFactory implementation
##class _IAgStkGraphicsPointBatchPrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default point batch primitive. This is equivalent to constructing a point batch with a set hint of Frequent.'
##        #return ppRetVal
##
##    def InitializeWithSetHint(self, SetHint):
##        'Initializes a new instance of a point batch primitive with the specified set hint.'
##        #return ppRetVal
##
##    @property
##    def MinimumPixelSizeSupported(self):
##        'Gets the minimum pixel size supported by the video card.'
##        #return pRetVal
##
##    @property
##    def MaximumPixelSizeSupported(self):
##        'Gets the maximum pixel size supported by the video card.'
##        #return pRetVal
##

class IAgStkGraphicsRotateFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Rotates the source raster clockwise by the specified angle.'
    _iid_ = GUID('{413B5F7F-9FA5-48BA-BB49-D57948ACC6ED}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsRotateFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Rotates the source raster clockwise by the specified angle.'
    _iid_ = GUID('{4B6DC620-04E1-4956-BE55-890FDB25BD40}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsRotateFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRotateFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with a counterclockwise rotation angle specified in radians.')], HRESULT, 'InitializeWithAngle',
              ( ['in'], c_double, 'RotateAngle' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRotateFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsRotateFilterFactory implementation
##class IAgStkGraphicsRotateFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithAngle(self, RotateAngle):
##        'Initializes a new instance with a counterclockwise rotation angle specified in radians.'
##        #return ppRetVal
##

class _IAgStkGraphicsProjectionRasterStreamPluginProxy(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsProjectionRasterStreamPluginProxy'
    _iid_ = GUID('{7FCD5139-01AA-405F-A359-1F69E9DBBAF4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsProjectionStream(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A projection that is updated dynamically at the specified update delta. The class can be used to stream projection data to projection clients, like projected raster overlay...'
    _iid_ = GUID('{7AF66BCF-C123-47B2-AC63-168BBDEDEC66}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsProjectionRasterStreamPluginProxy._methods_ = [
    COMMETHOD([dispid(24501), helpstring('Returns a raster stream.'), 'propget'], HRESULT, 'RasterStream',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterStream)), 'ppRetVal' )),
    COMMETHOD([dispid(24502), helpstring('Returns a projection stream.'), 'propget'], HRESULT, 'ProjectionStream',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjectionStream)), 'ppRetVal' )),
    COMMETHOD([dispid(24503), helpstring('Returns true if the raster streaming is supported.'), 'propget'], HRESULT, 'IsRasterStreamSupported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(24504), helpstring('Returns true if the projection streaming is supported.'), 'propget'], HRESULT, 'IsProjectionStreamSupported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(24505), helpstring("Returns a pointer to plugin object's IUnknown interface."), 'propget'], HRESULT, 'RealPluginObject',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsProjectionRasterStreamPluginProxy implementation
##class _IAgStkGraphicsProjectionRasterStreamPluginProxy_Impl(object):
##    @property
##    def RasterStream(self):
##        'Returns a raster stream.'
##        #return ppRetVal
##
##    @property
##    def ProjectionStream(self):
##        'Returns a projection stream.'
##        #return ppRetVal
##
##    @property
##    def IsRasterStreamSupported(self):
##        'Returns true if the raster streaming is supported.'
##        #return pRetVal
##
##    @property
##    def IsProjectionStreamSupported(self):
##        'Returns true if the projection streaming is supported.'
##        #return pRetVal
##
##    @property
##    def RealPluginObject(self):
##        "Returns a pointer to plugin object's IUnknown interface."
##        #return ppRetVal
##

class IAgStkGraphicsPathPointFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Creates Path Primitive's path points."
    _iid_ = GUID('{EFB486C4-09F0-4918-B051-7776ACD13F66}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsPathPointFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new path point.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new path point with the given date.')], HRESULT, 'InitializeWithDate',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'PathPointDate' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new path point with the given date and position.')], HRESULT, 'InitializeWithDateAndPosition',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'PathPointDate' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new path point with the given date, position and color.')], HRESULT, 'InitializeWithDatePositionAndColor',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'PathPointDate' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'Color' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new path point with the given date, position, color and translucency.')], HRESULT, 'InitializeWithDatePositionColorAndTranslucency',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'PathPointDate' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'Color' ),
              ( ['in'], c_double, 'Translucency' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsPathPointFactory implementation
##class IAgStkGraphicsPathPointFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new path point.'
##        #return ppRetVal
##
##    def InitializeWithDate(self, PathPointDate):
##        'Initializes a new path point with the given date.'
##        #return ppRetVal
##
##    def InitializeWithDateAndPosition(self, PathPointDate, Position):
##        'Initializes a new path point with the given date and position.'
##        #return ppRetVal
##
##    def InitializeWithDatePositionAndColor(self, PathPointDate, Position, Color):
##        'Initializes a new path point with the given date, position and color.'
##        #return ppRetVal
##
##    def InitializeWithDatePositionColorAndTranslucency(self, PathPointDate, Position, Color, Translucency):
##        'Initializes a new path point with the given date, position, color and translucency.'
##        #return ppRetVal
##

class IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Defines an inclusive distance interval, in meters, that determines when an object, such as a <topic name='Screen Overlays'>screen overlay</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the distance, in meters, from the came..."
    _iid_ = GUID('{F103B596-F16C-4AD6-8242-BEF8ECB83383}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._methods_ = [
    COMMETHOD([helpstring("Initializes a default distance to primitive display condition. With this constructor, an object is always <topic name='Glossary' anchor='Render'>rendered</topic> regardless of the camera's distance to the primitive.")], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToPrimitiveDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a distance to primitive display condition with the inclusive distance interval [minimumDistance, maximumDistance]...')], HRESULT, 'InitializeWithDistances',
              ( ['in'], POINTER(IAgStkGraphicsPrimitive), 'Primitive' ),
              ( ['in'], c_double, 'MinimumDistance' ),
              ( ['in'], c_double, 'MaximumDistance' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToPrimitiveDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory implementation
##class IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        "Initializes a default distance to primitive display condition. With this constructor, an object is always <topic name='Glossary' anchor='Render'>rendered</topic> regardless of the camera's distance to the primitive."
##        #return ppRetVal
##
##    def InitializeWithDistances(self, Primitive, MinimumDistance, MaximumDistance):
##        'Initializes a distance to primitive display condition with the inclusive distance interval [minimumDistance, maximumDistance]...'
##        #return ppRetVal
##

IAgStkGraphicsGradientDetectFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the method used to detect gradients in the source raster.')], HRESULT, 'Method',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsGradientDetectMethod), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the method used to detect gradients in the source raster.')], HRESULT, 'Method',
              ( ['in'], AgEStkGraphicsGradientDetectMethod, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsGradientDetectFilter implementation
##class IAgStkGraphicsGradientDetectFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the method used to detect gradients in the source raster.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the method used to detect gradients in the source raster.'
##    Method = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsRasterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsRasterFactory'
    _iid_ = GUID('{6167D52C-EEA2-418D-BB11-D8ABE37A4BAF}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsRasterFactory._methods_ = [
    COMMETHOD([dispid(11502), helpstring('Initializes a raster from a Uri, which can be a file, HTTP, HTTPS, or FTP source. See raster for a list of supported formats.')], HRESULT, 'InitializeWithStringUri',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(11504), helpstring('Initializes a raster from a Uri. Only the specified subsection of the raster is read. See raster for a list of supported formats.')], HRESULT, 'InitializeWithStringUriXYWidthAndHeight',
              ( ['in'], BSTR, 'Uri' ),
              ( ['in'], c_int, 'X' ),
              ( ['in'], c_int, 'Y' ),
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(11505), helpstring('Initializes a raster from another raster.')], HRESULT, 'InitializeWithRaster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsRasterFactory implementation
##class _IAgStkGraphicsRasterFactory_Impl(object):
##    def InitializeWithStringUri(self, Uri):
##        'Initializes a raster from a Uri, which can be a file, HTTP, HTTPS, or FTP source. See raster for a list of supported formats.'
##        #return ppRetVal
##
##    def InitializeWithStringUriXYWidthAndHeight(self, Uri, X, Y, Width, Height):
##        'Initializes a raster from a Uri. Only the specified subsection of the raster is read. See raster for a list of supported formats.'
##        #return ppRetVal
##
##    def InitializeWithRaster(self, Raster):
##        'Initializes a raster from another raster.'
##        #return ppRetVal
##

class _IAgStkGraphicsExtrudedPolylineTriangulatorResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsExtrudedPolylineTriangulatorResult'
    _iid_ = GUID('{6388E15B-611E-454D-BBAC-81D864672D2C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsExtrudedPolylineTriangulatorResult._methods_ = [
    COMMETHOD([dispid(16601), helpstring('Gets the positions of the mesh. Three array elements (in the order x, y, z) constitute one position.'), 'propget'], HRESULT, 'Positions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16602), helpstring('Gets the normals of the mesh. Every position in positions has corresponding normal. Normals are commonly used for lighting. Three array elements (in the order x, y, z) constitute one normal.'), 'propget'], HRESULT, 'Normals',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16603), helpstring('Gets indices into positions and normals. Every 3 indices represent 1 triangle. The indices returned consider the three components of a position or normal (x, y, and z) as a single array element...'), 'propget'], HRESULT, 'Indices',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16604), helpstring('Gets the orientation of front-facing triangles in the mesh.'), 'propget'], HRESULT, 'TriangleWindingOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsWindingOrder), 'pRetVal' )),
    COMMETHOD([dispid(16605), helpstring('Gets the bounding sphere that encompasses the mesh.'), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(2401), helpstring('Gets the boundary positions along the top of the extrusion. Three array elements (in the order x, y, z) constitute one position.'), 'propget'], HRESULT, 'TopBoundaryPositions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(2402), helpstring('Gets the boundary positions along the bottom of the extrusion. Three array elements (in the order x, y, z) constitute one position.'), 'propget'], HRESULT, 'BottomBoundaryPositions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(2403), helpstring('Gets the winding order of top boundary positions and bottom boundary positions.'), 'propget'], HRESULT, 'BoundaryPositionsWindingOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsWindingOrder), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsExtrudedPolylineTriangulatorResult implementation
##class _IAgStkGraphicsExtrudedPolylineTriangulatorResult_Impl(object):
##    @property
##    def Positions(self):
##        'Gets the positions of the mesh. Three array elements (in the order x, y, z) constitute one position.'
##        #return ppRetVal
##
##    @property
##    def Normals(self):
##        'Gets the normals of the mesh. Every position in positions has corresponding normal. Normals are commonly used for lighting. Three array elements (in the order x, y, z) constitute one normal.'
##        #return ppRetVal
##
##    @property
##    def Indices(self):
##        'Gets indices into positions and normals. Every 3 indices represent 1 triangle. The indices returned consider the three components of a position or normal (x, y, and z) as a single array element...'
##        #return ppRetVal
##
##    @property
##    def TriangleWindingOrder(self):
##        'Gets the orientation of front-facing triangles in the mesh.'
##        #return pRetVal
##
##    @property
##    def BoundingSphere(self):
##        'Gets the bounding sphere that encompasses the mesh.'
##        #return ppRetVal
##
##    @property
##    def TopBoundaryPositions(self):
##        'Gets the boundary positions along the top of the extrusion. Three array elements (in the order x, y, z) constitute one position.'
##        #return ppRetVal
##
##    @property
##    def BottomBoundaryPositions(self):
##        'Gets the boundary positions along the bottom of the extrusion. Three array elements (in the order x, y, z) constitute one position.'
##        #return ppRetVal
##
##    @property
##    def BoundaryPositionsWindingOrder(self):
##        'Gets the winding order of top boundary positions and bottom boundary positions.'
##        #return pRetVal
##

IAgStkGraphicsBandOrderFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the raster format indicating the desired order of the bands in the source raster.')], HRESULT, 'BandOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsRasterFormat), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the raster format indicating the desired order of the bands in the source raster.')], HRESULT, 'BandOrder',
              ( ['in'], AgEStkGraphicsRasterFormat, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets a value indicating whether to maintain the source raster's format after the filter is applied. When true, the source raster's format is maintained after swizzling.")], HRESULT, 'MaintainRasterFormat',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets a value indicating whether to maintain the source raster's format after the filter is applied. When true, the source raster's format is maintained after swizzling.")], HRESULT, 'MaintainRasterFormat',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsBandOrderFilter implementation
##class IAgStkGraphicsBandOrderFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the raster format indicating the desired order of the bands in the source raster.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the raster format indicating the desired order of the bands in the source raster.'
##    BandOrder = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets a value indicating whether to maintain the source raster's format after the filter is applied. When true, the source raster's format is maintained after swizzling."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets a value indicating whether to maintain the source raster's format after the filter is applied. When true, the source raster's format is maintained after swizzling."
##    MaintainRasterFormat = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsProjectedRasterOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsProjectedRasterOverlay'
    _iid_ = GUID('{76F6A184-95EA-4D75-96F4-96226C981FD9}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsProjection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A projection represents a simplified camera with a position, orientation, and field of view horizontal and field of view vertical...'
    _iid_ = GUID('{152E3A02-23B0-4DC8-A7E5-9EE19619BCAB}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsProjectedRasterOverlay._methods_ = [
    COMMETHOD([dispid(16701), helpstring('Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16701), helpstring('Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16703), helpstring("Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."), 'propget'], HRESULT, 'UseAltitudeBasedTranslucency',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16703), helpstring("Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."), 'propput'], HRESULT, 'UseAltitudeBasedTranslucency',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(16704), helpstring("Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyLowerTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16704), helpstring("Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyLowerTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16705), helpstring("Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyUpperTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16705), helpstring("Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyUpperTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16706), helpstring("Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyLowerAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16706), helpstring("Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyLowerAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16707), helpstring("Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyUpperAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16707), helpstring("Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyUpperAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16702), helpstring('Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'), 'propget'], HRESULT, 'MoreThanOneImageGlobeOverlaySupported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16801), helpstring("Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16802), helpstring('Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'), 'propget'], HRESULT, 'Extent',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16803), helpstring('Gets the globe overlay role of the globe overlay.'), 'propget'], HRESULT, 'Role',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsGlobeOverlayRole), 'pRetVal' )),
    COMMETHOD([dispid(16804), helpstring('Gets the absolute URI specifying the location of the globe overlay.'), 'propget'], HRESULT, 'UriAsString',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16805), helpstring('Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(9201), helpstring('Gets or sets the raster that is projected.'), 'propget'], HRESULT, 'Raster',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(9201), helpstring('Gets or sets the raster that is projected.'), 'propput'], HRESULT, 'Raster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'ppRetVal' )),
    COMMETHOD([dispid(9202), helpstring('Gets or sets the projection that projects the raster.'), 'propget'], HRESULT, 'Projection',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjection)), 'ppRetVal' )),
    COMMETHOD([dispid(9202), helpstring('Gets or sets the projection that projects the raster.'), 'propput'], HRESULT, 'Projection',
              ( ['in'], POINTER(IAgStkGraphicsProjection), 'ppRetVal' )),
    COMMETHOD([dispid(9203), helpstring("Gets or sets whether to show shadows or not. When set to true, the raster will only be projected onto parts of the terrain visible from the projection's position. When false, the raster will project onto any terrain inside the projection's view frustum..."), 'propget'], HRESULT, 'ShowShadows',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9203), helpstring("Gets or sets whether to show shadows or not. When set to true, the raster will only be projected onto parts of the terrain visible from the projection's position. When false, the raster will project onto any terrain inside the projection's view frustum..."), 'propput'], HRESULT, 'ShowShadows',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(9204), helpstring('Gets or sets whether to show the frustum of the projection.'), 'propget'], HRESULT, 'ShowFrustum',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9204), helpstring('Gets or sets whether to show the frustum of the projection.'), 'propput'], HRESULT, 'ShowFrustum',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(9205), helpstring('Gets or sets whether to show the far plane of the projection. If this is set to true, you will see the projected raster even when it does not intersect terrain.'), 'propget'], HRESULT, 'ShowFarPlane',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9205), helpstring('Gets or sets whether to show the far plane of the projection. If this is set to true, you will see the projected raster even when it does not intersect terrain.'), 'propput'], HRESULT, 'ShowFarPlane',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(9206), helpstring('Gets or sets the color of the projected raster.'), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(9206), helpstring('Gets or sets the color of the projected raster.'), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(9207), helpstring("Gets or sets the color of the projection's frustum."), 'propget'], HRESULT, 'FrustumColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(9207), helpstring("Gets or sets the color of the projection's frustum."), 'propput'], HRESULT, 'FrustumColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(9208), helpstring("Gets or sets the color of the projection's far plane."), 'propget'], HRESULT, 'FarPlaneColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(9208), helpstring("Gets or sets the color of the projection's far plane."), 'propput'], HRESULT, 'FarPlaneColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(9209), helpstring("Gets or sets the color of the projection's shadow."), 'propget'], HRESULT, 'ShadowColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(9209), helpstring("Gets or sets the color of the projection's shadow."), 'propput'], HRESULT, 'ShadowColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(9210), helpstring("Gets or sets the color of the projection's border."), 'propget'], HRESULT, 'BorderColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(9210), helpstring("Gets or sets the color of the projection's border."), 'propput'], HRESULT, 'BorderColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(9211), helpstring("Gets or sets the width of the projection's border."), 'propget'], HRESULT, 'BorderWidth',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(9211), helpstring("Gets or sets the width of the projection's border."), 'propput'], HRESULT, 'BorderWidth',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(9212), helpstring("Gets or sets the translucency of the projection's frustum."), 'propget'], HRESULT, 'FrustumTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(9212), helpstring("Gets or sets the translucency of the projection's frustum."), 'propput'], HRESULT, 'FrustumTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(9213), helpstring("Gets or sets the translucency of the projection's far plane."), 'propget'], HRESULT, 'FarPlaneTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(9213), helpstring("Gets or sets the translucency of the projection's far plane."), 'propput'], HRESULT, 'FarPlaneTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(9214), helpstring("Gets or sets the translucency of the projection's shadow."), 'propget'], HRESULT, 'ShadowTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(9214), helpstring("Gets or sets the translucency of the projection's shadow."), 'propput'], HRESULT, 'ShadowTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(9215), helpstring("Gets or sets the translucency of the projection's border."), 'propget'], HRESULT, 'BorderTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(9215), helpstring("Gets or sets the translucency of the projection's border."), 'propput'], HRESULT, 'BorderTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(9216), helpstring('Gets or sets whether transparent color should be used.'), 'propget'], HRESULT, 'UseTransparentColor',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9216), helpstring('Gets or sets whether transparent color should be used.'), 'propput'], HRESULT, 'UseTransparentColor',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(9217), helpstring('Gets or sets the color that will become transparent.'), 'propget'], HRESULT, 'TransparentColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(9217), helpstring('Gets or sets the color that will become transparent.'), 'propput'], HRESULT, 'TransparentColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(9218), helpstring("Gets the direction vectors in the central body's fixed reference frame that define the projection's frustum..."), 'propget'], HRESULT, 'Directions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(9219), helpstring('Gets whether or not the video card supports the projected raster overlay.'), 'propget'], HRESULT, 'Supported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsProjectedRasterOverlay implementation
##class _IAgStkGraphicsProjectedRasterOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."
##    UseAltitudeBasedTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."
##    AltitudeBasedTranslucencyLowerTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."
##    AltitudeBasedTranslucencyUpperTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##    AltitudeBasedTranslucencyLowerAltitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##    AltitudeBasedTranslucencyUpperAltitude = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MoreThanOneImageGlobeOverlaySupported(self):
##        'Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'
##        #return pRetVal
##
##    @property
##    def CentralBody(self):
##        "Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."
##        #return pRetVal
##
##    @property
##    def Extent(self):
##        'Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'
##        #return ppRetVal
##
##    @property
##    def Role(self):
##        'Gets the globe overlay role of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def UriAsString(self):
##        'Gets the absolute URI specifying the location of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the raster that is projected.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the raster that is projected.'
##    Raster = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the projection that projects the raster.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the projection that projects the raster.'
##    Projection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether to show shadows or not. When set to true, the raster will only be projected onto parts of the terrain visible from the projection's position. When false, the raster will project onto any terrain inside the projection's view frustum..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether to show shadows or not. When set to true, the raster will only be projected onto parts of the terrain visible from the projection's position. When false, the raster will project onto any terrain inside the projection's view frustum..."
##    ShowShadows = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether to show the frustum of the projection.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether to show the frustum of the projection.'
##    ShowFrustum = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether to show the far plane of the projection. If this is set to true, you will see the projected raster even when it does not intersect terrain.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether to show the far plane of the projection. If this is set to true, you will see the projected raster even when it does not intersect terrain.'
##    ShowFarPlane = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the color of the projected raster.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the color of the projected raster.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the color of the projection's frustum."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the color of the projection's frustum."
##    FrustumColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the color of the projection's far plane."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the color of the projection's far plane."
##    FarPlaneColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the color of the projection's shadow."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the color of the projection's shadow."
##    ShadowColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the color of the projection's border."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the color of the projection's border."
##    BorderColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the width of the projection's border."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the width of the projection's border."
##    BorderWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the translucency of the projection's frustum."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the translucency of the projection's frustum."
##    FrustumTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the translucency of the projection's far plane."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the translucency of the projection's far plane."
##    FarPlaneTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the translucency of the projection's shadow."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the translucency of the projection's shadow."
##    ShadowTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the translucency of the projection's border."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the translucency of the projection's border."
##    BorderTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether transparent color should be used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether transparent color should be used.'
##    UseTransparentColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the color that will become transparent.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the color that will become transparent.'
##    TransparentColor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Directions(self):
##        "Gets the direction vectors in the central body's fixed reference frame that define the projection's frustum..."
##        #return ppRetVal
##
##    @property
##    def Supported(self):
##        'Gets whether or not the video card supports the projected raster overlay.'
##        #return pRetVal
##

class IAgStkGraphicsConstantDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "A display condition that evaluates to a user-defined value. This is commonly used to hide <topic name='Primitives'>primitives</topic> by assigning to a primitive a display condition that always returns false."
    _iid_ = GUID('{4C5226F9-A98E-4AF0-A9A4-1E5926908D4C}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsConstantDisplayConditionFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a default constant display condition...')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsConstantDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a constant display condition with the value the display condition evaluates to.')], HRESULT, 'InitializeDisplay',
              ( ['in'], VARIANT_BOOL, 'Display' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsConstantDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsConstantDisplayConditionFactory implementation
##class IAgStkGraphicsConstantDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default constant display condition...'
##        #return ppRetVal
##
##    def InitializeDisplay(self, Display):
##        'Initializes a constant display condition with the value the display condition evaluates to.'
##        #return ppRetVal
##

IAgStkGraphicsScreenOverlayCollection._methods_ = [
]
################################################################
## code template for IAgStkGraphicsScreenOverlayCollection implementation
##class IAgStkGraphicsScreenOverlayCollection_Impl(object):

class _IAgStkGraphicsSurfaceShapesInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSurfaceShapesInitializer'
    _iid_ = GUID('{E0A2E684-87AD-4260-B4B7-A122FF88E78E}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsSurfaceShapesResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents the boundary positions of a shape on the surface computed from by a surface shapes method.'
    _iid_ = GUID('{0EFD15DB-D9F7-4E1F-925B-ADE0B0A22A21}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsSurfaceShapesInitializer._methods_ = [
    COMMETHOD([dispid(6701), helpstring('Computes boundary positions for a circle on the specified centralBody with the specified center, radius and granularity.')], HRESULT, 'ComputeCircleWithGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6702), helpstring('Computes boundary positions for a circle on the specified centralBody with the specified center and radius. This is equivalent to calling ComputeCircle with a granularity of 1 degree.')], HRESULT, 'ComputeCircle',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6703), helpstring('For convenience. Computes boundary positions for a circle on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeCircleCartographicWithGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6704), helpstring('For convenience. Computes boundary positions for a circle on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeCircleCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6705), helpstring('Computes boundary positions for an ellipse on the specified centralBody.')], HRESULT, 'ComputeEllipseWithGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'MajorAxisRadius' ),
              ( ['in'], c_double, 'MinorAxisRadius' ),
              ( ['in'], c_double, 'Bearing' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6706), helpstring('Computes boundary positions for an ellipse on the specified centralBody This is equivalent to calling ComputeEllipse with a granularity of 1 degree.')], HRESULT, 'ComputeEllipse',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'MajorAxisRadius' ),
              ( ['in'], c_double, 'MinorAxisRadius' ),
              ( ['in'], c_double, 'Bearing' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6707), helpstring('For convenience. Computes boundary positions for an ellipse on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeEllipseCartographicWithGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'MajorAxisRadius' ),
              ( ['in'], c_double, 'MinorAxisRadius' ),
              ( ['in'], c_double, 'Bearing' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6708), helpstring('For convenience. Computes boundary positions for an ellipse on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeEllipseCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'MajorAxisRadius' ),
              ( ['in'], c_double, 'MinorAxisRadius' ),
              ( ['in'], c_double, 'Bearing' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6709), helpstring('Computes boundary positions for a sector on the specified centralBody.')], HRESULT, 'ComputeSectorWithGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'InnerRadius' ),
              ( ['in'], c_double, 'OuterRadius' ),
              ( ['in'], c_double, 'StartBearing' ),
              ( ['in'], c_double, 'EndBearing' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6710), helpstring('Computes boundary positions for a sector on the specified centralBody This is equivalent to calling ComputeSector with a granularity of 1 degree.')], HRESULT, 'ComputeSector',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'InnerRadius' ),
              ( ['in'], c_double, 'OuterRadius' ),
              ( ['in'], c_double, 'StartBearing' ),
              ( ['in'], c_double, 'EndBearing' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6711), helpstring('For convenience. Computes boundary positions for a sector on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeSectorCartographicWithGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'InnerRadius' ),
              ( ['in'], c_double, 'OuterRadius' ),
              ( ['in'], c_double, 'StartBearing' ),
              ( ['in'], c_double, 'EndBearing' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6712), helpstring('For convenience. Computes boundary positions for a sector on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeSectorCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'InnerRadius' ),
              ( ['in'], c_double, 'OuterRadius' ),
              ( ['in'], c_double, 'StartBearing' ),
              ( ['in'], c_double, 'EndBearing' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSurfaceShapesInitializer implementation
##class _IAgStkGraphicsSurfaceShapesInitializer_Impl(object):
##    def ComputeCircleWithGranularity(self, CentralBody, Center, Radius, Granularity):
##        'Computes boundary positions for a circle on the specified centralBody with the specified center, radius and granularity.'
##        #return ppRetVal
##
##    def ComputeCircle(self, CentralBody, Center, Radius):
##        'Computes boundary positions for a circle on the specified centralBody with the specified center and radius. This is equivalent to calling ComputeCircle with a granularity of 1 degree.'
##        #return ppRetVal
##
##    def ComputeCircleCartographicWithGranularity(self, CentralBody, Center, Radius, Granularity):
##        'For convenience. Computes boundary positions for a circle on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeCircleCartographic(self, CentralBody, Center, Radius):
##        'For convenience. Computes boundary positions for a circle on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeEllipseWithGranularity(self, CentralBody, Center, MajorAxisRadius, MinorAxisRadius, Bearing, Granularity):
##        'Computes boundary positions for an ellipse on the specified centralBody.'
##        #return ppRetVal
##
##    def ComputeEllipse(self, CentralBody, Center, MajorAxisRadius, MinorAxisRadius, Bearing):
##        'Computes boundary positions for an ellipse on the specified centralBody This is equivalent to calling ComputeEllipse with a granularity of 1 degree.'
##        #return ppRetVal
##
##    def ComputeEllipseCartographicWithGranularity(self, CentralBody, Center, MajorAxisRadius, MinorAxisRadius, Bearing, Granularity):
##        'For convenience. Computes boundary positions for an ellipse on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeEllipseCartographic(self, CentralBody, Center, MajorAxisRadius, MinorAxisRadius, Bearing):
##        'For convenience. Computes boundary positions for an ellipse on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeSectorWithGranularity(self, CentralBody, Center, InnerRadius, OuterRadius, StartBearing, EndBearing, Granularity):
##        'Computes boundary positions for a sector on the specified centralBody.'
##        #return ppRetVal
##
##    def ComputeSector(self, CentralBody, Center, InnerRadius, OuterRadius, StartBearing, EndBearing):
##        'Computes boundary positions for a sector on the specified centralBody This is equivalent to calling ComputeSector with a granularity of 1 degree.'
##        #return ppRetVal
##
##    def ComputeSectorCartographicWithGranularity(self, CentralBody, Center, InnerRadius, OuterRadius, StartBearing, EndBearing, Granularity):
##        'For convenience. Computes boundary positions for a sector on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeSectorCartographic(self, CentralBody, Center, InnerRadius, OuterRadius, StartBearing, EndBearing):
##        'For convenience. Computes boundary positions for a sector on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##

IAgStkGraphicsRotateFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the counterclockwise rotation angle measured in radians.')], HRESULT, 'Angle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the counterclockwise rotation angle measured in radians.')], HRESULT, 'Angle',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsRotateFilter implementation
##class IAgStkGraphicsRotateFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the counterclockwise rotation angle measured in radians.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the counterclockwise rotation angle measured in radians.'
##    Angle = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsProjection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsProjection'
    _iid_ = GUID('{1DB916E6-D9BD-4AFD-A023-03929556C73C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsProjection._methods_ = [
    COMMETHOD([dispid(9301), helpstring("Gets or sets the cartesian defining the position of the projection in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(9301), helpstring("Gets or sets the cartesian defining the position of the projection in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."), 'propput'], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(9302), helpstring("Gets or sets the unit quaternion defining the orientation of the projection in the central body's fixed reference frame."), 'propget'], HRESULT, 'Orientation',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation)), 'ppRetVal' )),
    COMMETHOD([dispid(9302), helpstring("Gets or sets the unit quaternion defining the orientation of the projection in the central body's fixed reference frame."), 'propput'], HRESULT, 'Orientation',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation), 'ppRetVal' )),
    COMMETHOD([dispid(9303), helpstring('Gets or sets the horizontal field of view associated with the projection.'), 'propget'], HRESULT, 'FieldOfViewHorizontal',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(9303), helpstring('Gets or sets the horizontal field of view associated with the projection.'), 'propput'], HRESULT, 'FieldOfViewHorizontal',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(9304), helpstring('Gets or sets the vertical field of view associated with the projection.'), 'propget'], HRESULT, 'FieldOfViewVertical',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(9304), helpstring('Gets or sets the vertical field of view associated with the projection.'), 'propput'], HRESULT, 'FieldOfViewVertical',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(9305), helpstring('Gets or sets the near plane associated with the projection.'), 'propget'], HRESULT, 'NearPlane',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(9305), helpstring('Gets or sets the near plane associated with the projection.'), 'propput'], HRESULT, 'NearPlane',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(9306), helpstring('Gets or sets the far plane associated with the projection.'), 'propget'], HRESULT, 'FarPlane',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(9306), helpstring('Gets or sets the far plane associated with the projection.'), 'propput'], HRESULT, 'FarPlane',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsProjection implementation
##class _IAgStkGraphicsProjection_Impl(object):
##    def _get(self):
##        "Gets or sets the cartesian defining the position of the projection in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the cartesian defining the position of the projection in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the unit quaternion defining the orientation of the projection in the central body's fixed reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the unit quaternion defining the orientation of the projection in the central body's fixed reference frame."
##    Orientation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the horizontal field of view associated with the projection.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the horizontal field of view associated with the projection.'
##    FieldOfViewHorizontal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the vertical field of view associated with the projection.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the vertical field of view associated with the projection.'
##    FieldOfViewVertical = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the near plane associated with the projection.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the near plane associated with the projection.'
##    NearPlane = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the far plane associated with the projection.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the far plane associated with the projection.'
##    FarPlane = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsRaster(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsRaster'
    _iid_ = GUID('{7B25CC11-1894-4754-921E-E64EF4E2A5E9}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsRaster._methods_ = [
    COMMETHOD([dispid(9801), helpstring('Gets the raster attributes that define the raster data.'), 'propget'], HRESULT, 'Attributes',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
    COMMETHOD([dispid(9802), helpstring('Gets the width of the raster in pixels.'), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9803), helpstring('Gets the height of the raster in pixels.'), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9804), helpstring('Flips the raster along the given axis.')], HRESULT, 'Flip',
              ( ['in'], AgEStkGraphicsFlipAxis, 'Axis' )),
    COMMETHOD([dispid(9805), helpstring('Rotates the raster by the given angle.')], HRESULT, 'Rotate',
              ( ['in'], c_double, 'Angle' )),
    COMMETHOD([dispid(9806), helpstring('Applies a raster filter to the raster and returns a new raster with the results of the filtering. The current raster is not modified.')], HRESULT, 'Apply',
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(9807), helpstring('Applies a raster filter to the raster. The current raster will contain the results of the filtering.')], HRESULT, 'ApplyInPlace',
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' )),
    COMMETHOD([dispid(9808), helpstring('Extracts the band of raster data associated with the given raster band.')], HRESULT, 'ExtractBand',
              ( ['in'], AgEStkGraphicsRasterBand, 'Band' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(9809), helpstring('Extracts the bands of raster data associated with the given raster format.')], HRESULT, 'ExtractBandFromRasterFormat',
              ( ['in'], AgEStkGraphicsRasterFormat, 'Format' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(9810), helpstring('Copies the data associated with the given raster into this raster.')], HRESULT, 'CopyFromRaster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' )),
]
################################################################
## code template for _IAgStkGraphicsRaster implementation
##class _IAgStkGraphicsRaster_Impl(object):
##    @property
##    def Attributes(self):
##        'Gets the raster attributes that define the raster data.'
##        #return ppRetVal
##
##    @property
##    def Width(self):
##        'Gets the width of the raster in pixels.'
##        #return pRetVal
##
##    @property
##    def Height(self):
##        'Gets the height of the raster in pixels.'
##        #return pRetVal
##
##    def Flip(self, Axis):
##        'Flips the raster along the given axis.'
##        #return 
##
##    def Rotate(self, Angle):
##        'Rotates the raster by the given angle.'
##        #return 
##
##    def Apply(self, Filter):
##        'Applies a raster filter to the raster and returns a new raster with the results of the filtering. The current raster is not modified.'
##        #return ppRetVal
##
##    def ApplyInPlace(self, Filter):
##        'Applies a raster filter to the raster. The current raster will contain the results of the filtering.'
##        #return 
##
##    def ExtractBand(self, Band):
##        'Extracts the band of raster data associated with the given raster band.'
##        #return ppRetVal
##
##    def ExtractBandFromRasterFormat(self, Format):
##        'Extracts the bands of raster data associated with the given raster format.'
##        #return ppRetVal
##
##    def CopyFromRaster(self, Raster):
##        'Copies the data associated with the given raster into this raster.'
##        #return 
##

class _IAgStkGraphicsRasterAttributesFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsRasterAttributesFactory'
    _iid_ = GUID('{D635164D-94D9-40ED-8FD0-F1050EB97F3E}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsRasterAttributesFactory._methods_ = [
    COMMETHOD([dispid(11601), helpstring('Initializes a new instance with the width and height of the raster in pixels, and the given raster format.')], HRESULT, 'InitializeWithFormat',
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], AgEStkGraphicsRasterFormat, 'RasterFormat' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
    COMMETHOD([dispid(11602), helpstring('Initializes a new instance with the width and height of the raster in pixels, and the given raster format and raster type.')], HRESULT, 'InitializeWithFormatAndType',
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], AgEStkGraphicsRasterFormat, 'RasterFormat' ),
              ( ['in'], AgEStkGraphicsRasterType, 'RasterType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
    COMMETHOD([dispid(11603), helpstring('Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, and raster orientation.')], HRESULT, 'InitializeWithFormatTypeAndOrientation',
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], AgEStkGraphicsRasterFormat, 'RasterFormat' ),
              ( ['in'], AgEStkGraphicsRasterType, 'RasterType' ),
              ( ['in'], AgEStkGraphicsRasterOrientation, 'RasterOrientation' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
    COMMETHOD([dispid(11604), helpstring('Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, raster orientation, and row alignment.')], HRESULT, 'InitializeWithFormatTypeOrientationAndAlignment',
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], AgEStkGraphicsRasterFormat, 'RasterFormat' ),
              ( ['in'], AgEStkGraphicsRasterType, 'RasterType' ),
              ( ['in'], AgEStkGraphicsRasterOrientation, 'RasterOrientation' ),
              ( ['in'], c_int, 'RowAlignment' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
    COMMETHOD([dispid(11605), helpstring('Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, raster orientation, row alignment, and pixel aspect ratio.')], HRESULT, 'InitializeWithFormatTypeOrientationAlignmentAndRatio',
              ( ['in'], c_int, 'Width' ),
              ( ['in'], c_int, 'Height' ),
              ( ['in'], AgEStkGraphicsRasterFormat, 'RasterFormat' ),
              ( ['in'], AgEStkGraphicsRasterType, 'RasterType' ),
              ( ['in'], AgEStkGraphicsRasterOrientation, 'RasterOrientation' ),
              ( ['in'], c_int, 'RowAlignment' ),
              ( ['in'], c_double, 'PixelAspectRatio' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
    COMMETHOD([dispid(11606), helpstring('Initializes a new instance with the attributes of the specified raster')], HRESULT, 'InitializeWithRaster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsRasterAttributesFactory implementation
##class _IAgStkGraphicsRasterAttributesFactory_Impl(object):
##    def InitializeWithFormat(self, Width, Height, RasterFormat):
##        'Initializes a new instance with the width and height of the raster in pixels, and the given raster format.'
##        #return ppRetVal
##
##    def InitializeWithFormatAndType(self, Width, Height, RasterFormat, RasterType):
##        'Initializes a new instance with the width and height of the raster in pixels, and the given raster format and raster type.'
##        #return ppRetVal
##
##    def InitializeWithFormatTypeAndOrientation(self, Width, Height, RasterFormat, RasterType, RasterOrientation):
##        'Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, and raster orientation.'
##        #return ppRetVal
##
##    def InitializeWithFormatTypeOrientationAndAlignment(self, Width, Height, RasterFormat, RasterType, RasterOrientation, RowAlignment):
##        'Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, raster orientation, and row alignment.'
##        #return ppRetVal
##
##    def InitializeWithFormatTypeOrientationAlignmentAndRatio(self, Width, Height, RasterFormat, RasterType, RasterOrientation, RowAlignment, PixelAspectRatio):
##        'Initializes a new instance with the width and height of the raster in pixels, and the given raster format, raster type, raster orientation, row alignment, and pixel aspect ratio.'
##        #return ppRetVal
##
##    def InitializeWithRaster(self, Raster):
##        'Initializes a new instance with the attributes of the specified raster'
##        #return ppRetVal
##

class _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory'
    _iid_ = GUID('{6770735D-5892-48FD-B74E-EE6980FBAB86}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'path primitive update policy that removes points from remove location when the number of points in the path exceeds maximum count.'
    _iid_ = GUID('{FCACFB20-3FFB-46C4-9E07-495B1446C52B}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._methods_ = [
    COMMETHOD([dispid(11701), helpstring('Constructs a default update policy. This is equivalent to constructing a policy with maximum count set to 0 and a remove location of Front.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy)), 'ppRetVal' )),
    COMMETHOD([dispid(11702), helpstring('Initializes a policy with the specified maximumCount and removeLocation.')], HRESULT, 'InitializeWithParameters',
              ( ['in'], c_int, 'MaximumCount' ),
              ( ['in'], AgEStkGraphicsPathPrimitiveRemoveLocation, 'RemoveLocation' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory implementation
##class _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory_Impl(object):
##    def Initialize(self):
##        'Constructs a default update policy. This is equivalent to constructing a policy with maximum count set to 0 and a remove location of Front.'
##        #return ppRetVal
##
##    def InitializeWithParameters(self, MaximumCount, RemoveLocation):
##        'Initializes a policy with the specified maximumCount and removeLocation.'
##        #return ppRetVal
##

class _IAgStkGraphicsAltitudeDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAltitudeDisplayCondition'
    _iid_ = GUID('{9F32D169-ED79-4F50-8B9A-7FE23565563A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsAltitudeDisplayCondition._methods_ = [
    COMMETHOD([dispid(3101), helpstring('Gets or sets the minimum altitude, in meters, of the inclusive altitude interval. Use Double.MinValue to ignore checking the minimum altitude.'), 'propget'], HRESULT, 'MinimumAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(3101), helpstring('Gets or sets the minimum altitude, in meters, of the inclusive altitude interval. Use Double.MinValue to ignore checking the minimum altitude.'), 'propput'], HRESULT, 'MinimumAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(3102), helpstring('Gets or sets the maximum altitude, in meters, of the inclusive altitude interval. Use Double.MaxValue to ignore checking the maximum altitude.'), 'propget'], HRESULT, 'MaximumAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(3102), helpstring('Gets or sets the maximum altitude, in meters, of the inclusive altitude interval. Use Double.MaxValue to ignore checking the maximum altitude.'), 'propput'], HRESULT, 'MaximumAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(3103), helpstring('Gets or sets the central body to which the altitude is relative.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(3103), helpstring('Gets or sets the central body to which the altitude is relative.'), 'propput'], HRESULT, 'CentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsAltitudeDisplayCondition implementation
##class _IAgStkGraphicsAltitudeDisplayCondition_Impl(object):
##    def _get(self):
##        'Gets or sets the minimum altitude, in meters, of the inclusive altitude interval. Use Double.MinValue to ignore checking the minimum altitude.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the minimum altitude, in meters, of the inclusive altitude interval. Use Double.MinValue to ignore checking the minimum altitude.'
##    MinimumAltitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the maximum altitude, in meters, of the inclusive altitude interval. Use Double.MaxValue to ignore checking the maximum altitude.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum altitude, in meters, of the inclusive altitude interval. Use Double.MaxValue to ignore checking the maximum altitude.'
##    MaximumAltitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the central body to which the altitude is relative.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the central body to which the altitude is relative.'
##    CentralBody = property(_get, _set, doc = _set.__doc__)
##


# values for enumeration 'AgEStkGraphicsSharpenMethod'
eStkGraphicsSharpenMethodMeanRemoval = 0
eStkGraphicsSharpenMethodBasic = 1
AgEStkGraphicsSharpenMethod = c_int # enum
class _IAgStkGraphicsDistanceToPrimitiveDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsDistanceToPrimitiveDisplayCondition'
    _iid_ = GUID('{6CD1A08A-18B2-42F0-8852-CC59E8BB5CE4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsDistanceToPrimitiveDisplayCondition._methods_ = [
    COMMETHOD([dispid(3701), helpstring('Gets or sets the primitive associated with this instance.'), 'propget'], HRESULT, 'Primitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(3701), helpstring('Gets or sets the primitive associated with this instance.'), 'propput'], HRESULT, 'Primitive',
              ( ['in'], POINTER(IAgStkGraphicsPrimitive), 'ppRetVal' )),
    COMMETHOD([dispid(3702), helpstring('Gets or sets the minimum distance, in meters, of the inclusive distance interval.'), 'propget'], HRESULT, 'MinimumDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(3702), helpstring('Gets or sets the minimum distance, in meters, of the inclusive distance interval.'), 'propput'], HRESULT, 'MinimumDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(3703), helpstring('Gets the squared minimum distance, in meters, of the inclusive distance interval.'), 'propget'], HRESULT, 'MinimumDistanceSquared',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(3704), helpstring('Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'), 'propget'], HRESULT, 'MaximumDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(3704), helpstring('Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'), 'propput'], HRESULT, 'MaximumDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(3705), helpstring('Gets the squared maximum distance, in meters, of the inclusive distance interval.'), 'propget'], HRESULT, 'MaximumDistanceSquared',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsDistanceToPrimitiveDisplayCondition implementation
##class _IAgStkGraphicsDistanceToPrimitiveDisplayCondition_Impl(object):
##    def _get(self):
##        'Gets or sets the primitive associated with this instance.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the primitive associated with this instance.'
##    Primitive = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the minimum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the minimum distance, in meters, of the inclusive distance interval.'
##    MinimumDistance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumDistanceSquared(self):
##        'Gets the squared minimum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'
##    MaximumDistance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MaximumDistanceSquared(self):
##        'Gets the squared maximum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##

class _IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory'
    _iid_ = GUID('{DC808D40-4CDB-42B6-BCCF-2F4CAE0BB169}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsAGIProcessedImageGlobeOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A globe image overlay for handling AGI Processed Image (PDTTX) files.'
    _iid_ = GUID('{5C2D7CCA-54F6-4B27-93D6-58BDDAC0BEFE}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory._methods_ = [
    COMMETHOD([dispid(10701), helpstring('Initializes an agi processed image globe overlay with the provided values.')], HRESULT, 'InitializeWithString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAGIProcessedImageGlobeOverlay)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory implementation
##class _IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory_Impl(object):
##    def InitializeWithString(self, Uri):
##        'Initializes an agi processed image globe overlay with the provided values.'
##        #return ppRetVal
##

class IAgStkGraphicsVideoStreamFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "A raster stream that streams from a video. The video can be read from a file, or streamed from an HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage."
    _iid_ = GUID('{FBDE7847-CCFF-4C4E-83CF-5F7B05468709}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsVideoStreamFactory._methods_ = [
    COMMETHOD([helpstring("Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage.")], HRESULT, 'InitializeWithStringUri',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsVideoStream)), 'ppRetVal' )),
    COMMETHOD([helpstring("Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage.")], HRESULT, 'InitializeWithStringUriAndAudio',
              ( ['in'], BSTR, 'Uri' ),
              ( ['in'], VARIANT_BOOL, 'LoadAudio' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsVideoStream)), 'ppRetVal' )),
    COMMETHOD([helpstring("Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage.")], HRESULT, 'InitializeAudioVideoWithStringUri',
              ( ['in'], BSTR, 'Uri' ),
              ( ['in'], BSTR, 'AudioUri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsVideoStream)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsVideoStreamFactory implementation
##class IAgStkGraphicsVideoStreamFactory_Impl(object):
##    def InitializeWithStringUri(self, Uri):
##        "Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage."
##        #return ppRetVal
##
##    def InitializeWithStringUriAndAudio(self, Uri, LoadAudio):
##        "Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage."
##        #return ppRetVal
##
##    def InitializeAudioVideoWithStringUri(self, Uri, AudioUri):
##        "Initializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage."
##        #return ppRetVal
##

class IAgStkGraphicsModelPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "The model primitive loads and renders <a href='http://www.collada.org/'>COLLADA</a> (DAE) and AGI <a href='http://www.agi.com/resources/models/models0.cfm'>MDL</a> (MDL) models."
    _iid_ = GUID('{93EA79EF-8DA7-4992-B8FA-81D372D4258A}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsModelPrimitiveFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a default model primitive.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('For convenience. Initializes a model primitive with the specified file path.')], HRESULT, 'InitializeWithStringUri',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('For convenience. Initializes a model primitive with the specified file path and up axis.')], HRESULT, 'InitializeWithStringUriAndUpAxis',
              ( ['in'], BSTR, 'Uri' ),
              ( ['in'], AgEStkGraphicsModelUpAxis, 'UpAxis' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelPrimitive)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsModelPrimitiveFactory implementation
##class IAgStkGraphicsModelPrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default model primitive.'
##        #return ppRetVal
##
##    def InitializeWithStringUri(self, Uri):
##        'For convenience. Initializes a model primitive with the specified file path.'
##        #return ppRetVal
##
##    def InitializeWithStringUriAndUpAxis(self, Uri, UpAxis):
##        'For convenience. Initializes a model primitive with the specified file path and up axis.'
##        #return ppRetVal
##

class _IAgStkGraphicsAltitudeDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAltitudeDisplayConditionFactory'
    _iid_ = GUID('{2FA80EF1-107D-46CA-A6BE-2D8328887508}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsAltitudeDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Defines an inclusive altitude interval, in meters, that determines when an object is <topic name='Glossary' anchor='Render'>rendered</topic> based on the camera's altitude relative to a central body."
    _iid_ = GUID('{A6225AA6-608D-4AD8-B5F6-2AFDD29B96F9}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsAltitudeDisplayConditionFactory._methods_ = [
    COMMETHOD([dispid(6801), helpstring("Initializes a default altitude display condition. With this constructor, an object is always <topic name='Glossary' anchor='Render'>rendered</topic> regardless of the camera's altitude.")], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAltitudeDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(6802), helpstring('Initializes an altitude display condition with the inclusive altitude interval [minimumAltitude, maximumAltitude]...')], HRESULT, 'InitializeWithAltitudes',
              ( ['in'], c_double, 'MinimumAltitude' ),
              ( ['in'], c_double, 'MaximumAltitude' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAltitudeDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(6803), helpstring('Initializes an altitude display condition with the inclusive altitude interval [minimumAltitude, maximumAltitude]...')], HRESULT, 'InitializeWithCentralBodyAndAltitudes',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], c_double, 'MinimumAltitude' ),
              ( ['in'], c_double, 'MaximumAltitude' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAltitudeDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsAltitudeDisplayConditionFactory implementation
##class _IAgStkGraphicsAltitudeDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        "Initializes a default altitude display condition. With this constructor, an object is always <topic name='Glossary' anchor='Render'>rendered</topic> regardless of the camera's altitude."
##        #return ppRetVal
##
##    def InitializeWithAltitudes(self, MinimumAltitude, MaximumAltitude):
##        'Initializes an altitude display condition with the inclusive altitude interval [minimumAltitude, maximumAltitude]...'
##        #return ppRetVal
##
##    def InitializeWithCentralBodyAndAltitudes(self, CentralBody, MinimumAltitude, MaximumAltitude):
##        'Initializes an altitude display condition with the inclusive altitude interval [minimumAltitude, maximumAltitude]...'
##        #return ppRetVal
##

class _IAgStkGraphicsAxesPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAxesPrimitive'
    _iid_ = GUID('{846E3D58-4172-434C-93DE-CFC47E155990}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsAxesPrimitive._methods_ = [
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propget'], HRESULT, 'ReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propput'], HRESULT, 'ReferenceFrame',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propput'], HRESULT, 'BoundingSphere',
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'ppRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propget'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propput'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(28201), helpstring('Gets or Sets whether the primitive is lit.'), 'propget'], HRESULT, 'Lighting',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28201), helpstring('Gets or Sets whether the primitive is lit.'), 'propput'], HRESULT, 'Lighting',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28212), helpstring('Gets or Sets the axes label.'), 'propget'], HRESULT, 'Label',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(28212), helpstring('Gets or Sets the axes label.'), 'propput'], HRESULT, 'Label',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(28213), helpstring("Gets or Sets whether the axes' label is displayed."), 'propget'], HRESULT, 'DisplayLabel',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28213), helpstring("Gets or Sets whether the axes' label is displayed."), 'propput'], HRESULT, 'DisplayLabel',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28204), helpstring('Gets or Sets whether the persistence trace (points) is displayed.'), 'propget'], HRESULT, 'DisplayTrace',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28204), helpstring('Gets or Sets whether the persistence trace (points) is displayed.'), 'propput'], HRESULT, 'DisplayTrace',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28205), helpstring('Gets or Sets whether the persistence sweep (triangles) is displayed.'), 'propget'], HRESULT, 'DisplaySweep',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28205), helpstring('Gets or Sets whether the persistence sweep (triangles) is displayed.'), 'propput'], HRESULT, 'DisplaySweep',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28206), helpstring('Gets or Sets whether persistence lines are displayed.'), 'propget'], HRESULT, 'DisplayLines',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28206), helpstring('Gets or Sets whether persistence lines are displayed.'), 'propput'], HRESULT, 'DisplayLines',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28207), helpstring('Gets or Sets persistence point/line width.'), 'propget'], HRESULT, 'PersistenceWidth',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(28207), helpstring('Gets or Sets persistence point/line width.'), 'propput'], HRESULT, 'PersistenceWidth',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(28208), helpstring('Gets or Sets whether the persistence path should fade over time.'), 'propget'], HRESULT, 'FadePersistence',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28208), helpstring('Gets or Sets whether the persistence path should fade over time.'), 'propput'], HRESULT, 'FadePersistence',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28209), helpstring('Gets or Sets the maximum length (in seconds) of the persistence path.'), 'propget'], HRESULT, 'PersistenceDuration',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(28209), helpstring('Gets or Sets the maximum length (in seconds) of the persistence path.'), 'propput'], HRESULT, 'PersistenceDuration',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(28210), helpstring("Gets or Sets the axes' source-to-arrow-tip length."), 'propget'], HRESULT, 'Length',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(28210), helpstring("Gets or Sets the axes' source-to-arrow-tip length."), 'propput'], HRESULT, 'Length',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(28211), helpstring('Gets or Sets the width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness.'), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(28211), helpstring('Gets or Sets the width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness.'), 'propput'], HRESULT, 'Width',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsAxesPrimitive implementation
##class _IAgStkGraphicsAxesPrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##    ReferenceFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##    BoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##    AutomaticallyComputeBoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's color."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether the primitive is lit.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether the primitive is lit.'
##    Lighting = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets the axes label.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets the axes label.'
##    Label = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or Sets whether the axes' label is displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or Sets whether the axes' label is displayed."
##    DisplayLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether the persistence trace (points) is displayed.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether the persistence trace (points) is displayed.'
##    DisplayTrace = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether the persistence sweep (triangles) is displayed.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether the persistence sweep (triangles) is displayed.'
##    DisplaySweep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether persistence lines are displayed.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether persistence lines are displayed.'
##    DisplayLines = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets persistence point/line width.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets persistence point/line width.'
##    PersistenceWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether the persistence path should fade over time.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether the persistence path should fade over time.'
##    FadePersistence = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets the maximum length (in seconds) of the persistence path.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets the maximum length (in seconds) of the persistence path.'
##    PersistenceDuration = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or Sets the axes' source-to-arrow-tip length."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or Sets the axes' source-to-arrow-tip length."
##    Length = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets the width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets the width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##

class IAgStkGraphicsBlurFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Applies a convolution filter to blur or smooth the source raster. Can be used to reduce noise in the raster.'
    _iid_ = GUID('{99188B11-F0F6-4452-B2E9-C53472860AA1}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsBlurFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Applies a convolution filter to blur or smooth the source raster. Can be used to reduce noise in the raster.'
    _iid_ = GUID('{78E623B1-DC80-478D-ACB8-A552FA136CCC}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsBlurMethod'
eStkGraphicsBlurMethodMean = 0
eStkGraphicsBlurMethodBasic = 1
AgEStkGraphicsBlurMethod = c_int # enum
IAgStkGraphicsBlurFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBlurFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initialize a new instance with the specified blur method.')], HRESULT, 'InitializeWithMethod',
              ( ['in'], AgEStkGraphicsBlurMethod, 'Method' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBlurFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsBlurFilterFactory implementation
##class IAgStkGraphicsBlurFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithMethod(self, Method):
##        'Initialize a new instance with the specified blur method.'
##        #return ppRetVal
##

class IAgStkGraphicsRhumbLineInterpolatorFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The rhumb line interpolator computes interpolated positions along a rhumb line. Rhumb lines are lines of constant bearing. They appear as straight lines on a Mercator 2D map projection and are well suited to navigation.'
    _iid_ = GUID('{1CF08578-668B-431A-9DF2-8BB329E3FDF5}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsRhumbLineInterpolator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The rhumb line interpolator computes interpolated positions along a rhumb line. Rhumb lines are lines of constant bearing. They appear as straight lines on a Mercator 2D map projection and are well suited to navigation.'
    _iid_ = GUID('{CCDEC605-222E-4DEA-A897-2632B43AF87F}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsRhumbLineInterpolatorFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a default rhumb line interpolator. This is equivalent to constructing a rhumb line interpolator with a central body equal to an instance of earth central body and a granularity of 1 degree.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRhumbLineInterpolator)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a rhumb line interpolator with the specified centralBody and a granularity of 1 degree.')], HRESULT, 'InitializeWithCentralBody',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRhumbLineInterpolator)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a rhumb line interpolator with the specified centralBody and granularity.')], HRESULT, 'InitializeWithCentralBodyAndGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRhumbLineInterpolator)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsRhumbLineInterpolatorFactory implementation
##class IAgStkGraphicsRhumbLineInterpolatorFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default rhumb line interpolator. This is equivalent to constructing a rhumb line interpolator with a central body equal to an instance of earth central body and a granularity of 1 degree.'
##        #return ppRetVal
##
##    def InitializeWithCentralBody(self, CentralBody):
##        'Initializes a rhumb line interpolator with the specified centralBody and a granularity of 1 degree.'
##        #return ppRetVal
##
##    def InitializeWithCentralBodyAndGranularity(self, CentralBody, Granularity):
##        'Initializes a rhumb line interpolator with the specified centralBody and granularity.'
##        #return ppRetVal
##

class _IAgStkGraphicsAGIProcessedTerrainOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAGIProcessedTerrainOverlayFactory'
    _iid_ = GUID('{A49E071C-83F8-4B52-82A6-EEEFDF12371F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsAGIProcessedTerrainOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A terrain overlay for handling AGI Processed Terrain (PDTT) files.'
    _iid_ = GUID('{093A5B12-ABDD-4029-ADC5-2CBAB7E4216D}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsAGIProcessedTerrainOverlayFactory._methods_ = [
    COMMETHOD([dispid(10801), helpstring('Initializes an agi processed terrain overlay with the provided values.')], HRESULT, 'InitializeWithString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAGIProcessedTerrainOverlay)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsAGIProcessedTerrainOverlayFactory implementation
##class _IAgStkGraphicsAGIProcessedTerrainOverlayFactory_Impl(object):
##    def InitializeWithString(self, Uri):
##        'Initializes an agi processed terrain overlay with the provided values.'
##        #return ppRetVal
##

class IAgStkGraphicsScreenOverlayCollectionBase(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The common base class for collections of overlays held by screen overlay and by screen overlay manager.'
    _iid_ = GUID('{49EA6365-0B8D-4FC5-AD52-C1D16AC7568D}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsScreenOverlayCollectionBase._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the number of screen overlays in the collection.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a value indicating whether the collection is read-only.')], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the overlay at the specified index.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlay)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns an enumerator that iterates through the collection.')], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([helpstring('Determines whether the collection contains a specific overlay.')], HRESULT, 'Contains',
              ( ['in'], POINTER(IAgStkGraphicsScreenOverlay), 'Item' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Removes the first occurrence of a specific overlay from the collection.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAgStkGraphicsScreenOverlay), 'Item' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Removes all overlays from the collection.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring('Adds an overlay to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAgStkGraphicsScreenOverlay), 'Item' )),
]
################################################################
## code template for IAgStkGraphicsScreenOverlayCollectionBase implementation
##class IAgStkGraphicsScreenOverlayCollectionBase_Impl(object):
##    @property
##    def Count(self):
##        'Gets the number of screen overlays in the collection.'
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Gets a value indicating whether the collection is read-only.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Gets the overlay at the specified index.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns an enumerator that iterates through the collection.'
##        #return ppRetVal
##
##    def Contains(self, Item):
##        'Determines whether the collection contains a specific overlay.'
##        #return pRetVal
##
##    def Remove(self, Item):
##        'Removes the first occurrence of a specific overlay from the collection.'
##        #return pRetVal
##
##    def Clear(self):
##        'Removes all overlays from the collection.'
##        #return 
##
##    def Add(self, Item):
##        'Adds an overlay to the collection.'
##        #return 
##

class _IAgStkGraphicsRotateFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsRotateFilterFactory'
    _iid_ = GUID('{1A43C398-BEFC-4622-A707-0357EA5640AC}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsRotateFilterFactory._methods_ = [
    COMMETHOD([dispid(23401), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRotateFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(23402), helpstring('Initializes a new instance with a counterclockwise rotation angle specified in radians.')], HRESULT, 'InitializeWithAngle',
              ( ['in'], c_double, 'RotateAngle' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRotateFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsRotateFilterFactory implementation
##class _IAgStkGraphicsRotateFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithAngle(self, RotateAngle):
##        'Initializes a new instance with a counterclockwise rotation angle specified in radians.'
##        #return ppRetVal
##


# values for enumeration 'AgEStkGraphicsVideoPlayback'
eStkGraphicsVideoPlaybackRealTime = 0
eStkGraphicsVideoPlaybackTimeInterval = 1
AgEStkGraphicsVideoPlayback = c_int # enum
IAgStkGraphicsVideoStream._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the uri of the video.')], HRESULT, 'Uri',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the video playback mode of the video.')], HRESULT, 'Playback',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsVideoPlayback), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the video playback mode of the video.')], HRESULT, 'Playback',
              ( ['in'], AgEStkGraphicsVideoPlayback, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the frame rate of the video when the playback property is set to real time. If this property is not set, the internal framerate of the video is used.')], HRESULT, 'FrameRate',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the frame rate of the video when the playback property is set to real time. If this property is not set, the internal framerate of the video is used.')], HRESULT, 'FrameRate',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the scene manager time at which the video will begin playing when the playback property is set to time interval.')], HRESULT, 'IntervalStartTime',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the scene manager time at which the video will begin playing when the playback property is set to time interval.')], HRESULT, 'IntervalStartTime',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the scene manager time at which the video will stop playing when the playback property is set to time interval.')], HRESULT, 'IntervalEndTime',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the scene manager time at which the video will stop playing when the playback property is set to time interval.')], HRESULT, 'IntervalEndTime',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the start time of the video in seconds. Changing the start time property also changes the start frame property to the frame in the video that corresponds to the specified time.')], HRESULT, 'StartTime',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the start time of the video in seconds. Changing the start time property also changes the start frame property to the frame in the video that corresponds to the specified time.')], HRESULT, 'StartTime',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the end time of the video in seconds. Changing the end time property also changes the end frame property to the frame in the video that corresponds to the specified time.')], HRESULT, 'EndTime',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the end time of the video in seconds. Changing the end time property also changes the end frame property to the frame in the video that corresponds to the specified time.')], HRESULT, 'EndTime',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the start frame of the video. Changing the start frame property also changes the start time property to the time in the video that corresponds to the specified frame.')], HRESULT, 'StartFrame',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the start frame of the video. Changing the start frame property also changes the start time property to the time in the video that corresponds to the specified frame.')], HRESULT, 'StartFrame',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the end frame of the video. Changing the end frame property also changes the end time property to the time in the video that corresponds to the specified frame.')], HRESULT, 'EndFrame',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the end frame of the video. Changing the end frame property also changes the end time property to the time in the video that corresponds to the specified frame.')], HRESULT, 'EndFrame',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the video will loop when it reaches its last frame when the playback property is set to real time.')], HRESULT, 'Loop',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the video will loop when it reaches its last frame when the playback property is set to real time.')], HRESULT, 'Loop',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets whether or not the video is playing. Use the play, pause, stop, and Reset methods to control the playback of the video when the playback property is set to real time.')], HRESULT, 'IsPlaying',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the thread processing yield time for asynchronous streaming of video over common protocols like udp. Setting a high value may increase performance, but may cause frames or packets to drop, effecting visual quality...')], HRESULT, 'PacketAcquirementYieldTime',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the thread processing yield time for asynchronous streaming of video over common protocols like udp. Setting a high value may increase performance, but may cause frames or packets to drop, effecting visual quality...')], HRESULT, 'PacketAcquirementYieldTime',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets a value indicating the buffering limit for packets when processing a video stream...')], HRESULT, 'PacketBufferLimit',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets a value indicating the buffering limit for packets when processing a video stream...')], HRESULT, 'PacketBufferLimit',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets a value indicating if frames should be dropped if video processing can not keep up with a video stream. If this is set to false, the video quality may degrade when the processing load is too high...')], HRESULT, 'AllowFrameDrop',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets a value indicating if frames should be dropped if video processing can not keep up with a video stream. If this is set to false, the video quality may degrade when the processing load is too high...')], HRESULT, 'AllowFrameDrop',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets a value indicating if the encoded audio stream should be synchronized to video playback If this is set to false, the audio stream will be disabled...')], HRESULT, 'EnableAudio',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets a value indicating if the encoded audio stream should be synchronized to video playback If this is set to false, the audio stream will be disabled...')], HRESULT, 'EnableAudio',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([helpstring("Reinitializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage.")], HRESULT, 'ReinitializeWithStringUri',
              ( ['in'], BSTR, 'Uri' )),
    COMMETHOD([helpstring('Begins playing the video when the playback property is set to real time.')], HRESULT, 'Play'),
    COMMETHOD([helpstring('Pauses the video when the playback property is set to real time.')], HRESULT, 'Pause'),
    COMMETHOD([helpstring('Stops the video when the playback property is set to real time. Stopping the video will seek to the first frame and pause playback. Use the Play method to begin playing the video again.')], HRESULT, 'Stop'),
    COMMETHOD([helpstring('Seeks the video to its first frame and begins playing the video when the playback property is set to real time.')], HRESULT, 'Reset'),
    COMMETHOD([helpstring('Closes the video stream and any associated resources.')], HRESULT, 'Close'),
    COMMETHOD(['propget', helpstring('Gets the uri of the audio.')], HRESULT, 'AudioUri',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsVideoStream implementation
##class IAgStkGraphicsVideoStream_Impl(object):
##    @property
##    def Uri(self):
##        'Gets the uri of the video.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the video playback mode of the video.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the video playback mode of the video.'
##    Playback = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the frame rate of the video when the playback property is set to real time. If this property is not set, the internal framerate of the video is used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the frame rate of the video when the playback property is set to real time. If this property is not set, the internal framerate of the video is used.'
##    FrameRate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the scene manager time at which the video will begin playing when the playback property is set to time interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the scene manager time at which the video will begin playing when the playback property is set to time interval.'
##    IntervalStartTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the scene manager time at which the video will stop playing when the playback property is set to time interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the scene manager time at which the video will stop playing when the playback property is set to time interval.'
##    IntervalEndTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the start time of the video in seconds. Changing the start time property also changes the start frame property to the frame in the video that corresponds to the specified time.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the start time of the video in seconds. Changing the start time property also changes the start frame property to the frame in the video that corresponds to the specified time.'
##    StartTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the end time of the video in seconds. Changing the end time property also changes the end frame property to the frame in the video that corresponds to the specified time.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the end time of the video in seconds. Changing the end time property also changes the end frame property to the frame in the video that corresponds to the specified time.'
##    EndTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the start frame of the video. Changing the start frame property also changes the start time property to the time in the video that corresponds to the specified frame.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the start frame of the video. Changing the start frame property also changes the start time property to the time in the video that corresponds to the specified frame.'
##    StartFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the end frame of the video. Changing the end frame property also changes the end time property to the time in the video that corresponds to the specified frame.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the end frame of the video. Changing the end frame property also changes the end time property to the time in the video that corresponds to the specified frame.'
##    EndFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the video will loop when it reaches its last frame when the playback property is set to real time.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the video will loop when it reaches its last frame when the playback property is set to real time.'
##    Loop = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsPlaying(self):
##        'Gets whether or not the video is playing. Use the play, pause, stop, and Reset methods to control the playback of the video when the playback property is set to real time.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the thread processing yield time for asynchronous streaming of video over common protocols like udp. Setting a high value may increase performance, but may cause frames or packets to drop, effecting visual quality...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the thread processing yield time for asynchronous streaming of video over common protocols like udp. Setting a high value may increase performance, but may cause frames or packets to drop, effecting visual quality...'
##    PacketAcquirementYieldTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a value indicating the buffering limit for packets when processing a video stream...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a value indicating the buffering limit for packets when processing a video stream...'
##    PacketBufferLimit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a value indicating if frames should be dropped if video processing can not keep up with a video stream. If this is set to false, the video quality may degrade when the processing load is too high...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a value indicating if frames should be dropped if video processing can not keep up with a video stream. If this is set to false, the video quality may degrade when the processing load is too high...'
##    AllowFrameDrop = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a value indicating if the encoded audio stream should be synchronized to video playback If this is set to false, the audio stream will be disabled...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a value indicating if the encoded audio stream should be synchronized to video playback If this is set to false, the audio stream will be disabled...'
##    EnableAudio = property(_get, _set, doc = _set.__doc__)
##
##    def ReinitializeWithStringUri(self, Uri):
##        "Reinitializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage."
##        #return 
##
##    def Play(self):
##        'Begins playing the video when the playback property is set to real time.'
##        #return 
##
##    def Pause(self):
##        'Pauses the video when the playback property is set to real time.'
##        #return 
##
##    def Stop(self):
##        'Stops the video when the playback property is set to real time. Stopping the video will seek to the first frame and pause playback. Use the Play method to begin playing the video again.'
##        #return 
##
##    def Reset(self):
##        'Seeks the video to its first frame and begins playing the video when the playback property is set to real time.'
##        #return 
##
##    def Close(self):
##        'Closes the video stream and any associated resources.'
##        #return 
##
##    @property
##    def AudioUri(self):
##        'Gets the uri of the audio.'
##        #return pRetVal
##

class _IAgStkGraphicsTextOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTextOverlay'
    _iid_ = GUID('{B89FB40C-5D0C-47C6-B1BB-AA0862B46CFC}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsTextOverlay._methods_ = [
    COMMETHOD([dispid(17301), helpstring('Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17301), helpstring('Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'), 'propput'], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17302), helpstring('Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'), 'propget'], HRESULT, 'PinningPosition',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17302), helpstring('Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'), 'propput'], HRESULT, 'PinningPosition',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17303), helpstring('Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17303), helpstring('Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'), 'propput'], HRESULT, 'X',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17304), helpstring('Gets or sets the unit of the x property.'), 'propget'], HRESULT, 'XUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD([dispid(17304), helpstring('Gets or sets the unit of the x property.'), 'propput'], HRESULT, 'XUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD([dispid(17305), helpstring('Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17305), helpstring('Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'), 'propput'], HRESULT, 'Y',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17306), helpstring('Gets or sets the unit of the y property.'), 'propget'], HRESULT, 'YUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD([dispid(17306), helpstring('Gets or sets the unit of the y property.'), 'propput'], HRESULT, 'YUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD([dispid(17307), helpstring('Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'), 'propget'], HRESULT, 'Size',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17307), helpstring('Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'), 'propput'], HRESULT, 'Size',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17308), helpstring('Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17308), helpstring('Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'), 'propput'], HRESULT, 'Width',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17309), helpstring('Gets or sets the unit of the width property.'), 'propget'], HRESULT, 'WidthUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD([dispid(17309), helpstring('Gets or sets the unit of the width property.'), 'propput'], HRESULT, 'WidthUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD([dispid(17310), helpstring('Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17310), helpstring('Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17311), helpstring('Gets or sets the unit of the height property.'), 'propget'], HRESULT, 'HeightUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD([dispid(17311), helpstring('Gets or sets the unit of the height property.'), 'propput'], HRESULT, 'HeightUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD([dispid(17312), helpstring("Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."), 'propget'], HRESULT, 'MinimumSize',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17312), helpstring("Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."), 'propput'], HRESULT, 'MinimumSize',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17313), helpstring("Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."), 'propget'], HRESULT, 'MaximumSize',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17313), helpstring("Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."), 'propput'], HRESULT, 'MaximumSize',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17314), helpstring('Gets the bounds of the overlay relative to its parent. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'), 'propget'], HRESULT, 'Bounds',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17315), helpstring("Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."), 'propget'], HRESULT, 'BorderColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17315), helpstring("Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."), 'propput'], HRESULT, 'BorderColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17316), helpstring("Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."), 'propget'], HRESULT, 'BorderSize',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17316), helpstring("Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."), 'propput'], HRESULT, 'BorderSize',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(17317), helpstring('Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'), 'propget'], HRESULT, 'BorderTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17317), helpstring('Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'), 'propput'], HRESULT, 'BorderTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(17318), helpstring('Gets or sets the value with which the overlay will be translated from the X value of the position property.'), 'propget'], HRESULT, 'TranslationX',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17318), helpstring('Gets or sets the value with which the overlay will be translated from the X value of the position property.'), 'propput'], HRESULT, 'TranslationX',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17319), helpstring('Gets or sets the value with which the overlay will be translated from the Y value of the position property.'), 'propget'], HRESULT, 'TranslationY',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17319), helpstring('Gets or sets the value with which the overlay will be translated from the Y value of the position property.'), 'propput'], HRESULT, 'TranslationY',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17320), helpstring('Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'), 'propget'], HRESULT, 'RotationAngle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17320), helpstring('Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'), 'propput'], HRESULT, 'RotationAngle',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17321), helpstring('Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'), 'propget'], HRESULT, 'RotationPoint',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17321), helpstring('Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'), 'propput'], HRESULT, 'RotationPoint',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17322), helpstring("Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."), 'propget'], HRESULT, 'Scale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17322), helpstring("Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."), 'propput'], HRESULT, 'Scale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17323), helpstring('Gets or sets whether the overlay will be flipped along its X axis.'), 'propget'], HRESULT, 'FlipX',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17323), helpstring('Gets or sets whether the overlay will be flipped along its X axis.'), 'propput'], HRESULT, 'FlipX',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17324), helpstring('Gets or sets whether the overlay will be flipped along its Y axis.'), 'propget'], HRESULT, 'FlipY',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17324), helpstring('Gets or sets whether the overlay will be flipped along its Y axis.'), 'propput'], HRESULT, 'FlipY',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17325), helpstring("Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."), 'propget'], HRESULT, 'Origin',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayOrigin), 'pRetVal' )),
    COMMETHOD([dispid(17325), helpstring("Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."), 'propput'], HRESULT, 'Origin',
              ( ['in'], AgEStkGraphicsScreenOverlayOrigin, 'pRetVal' )),
    COMMETHOD([dispid(17326), helpstring('Gets or sets the origin of the pinning position property, relative to the overlay...'), 'propget'], HRESULT, 'PinningOrigin',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayPinningOrigin), 'pRetVal' )),
    COMMETHOD([dispid(17326), helpstring('Gets or sets the origin of the pinning position property, relative to the overlay...'), 'propput'], HRESULT, 'PinningOrigin',
              ( ['in'], AgEStkGraphicsScreenOverlayPinningOrigin, 'pRetVal' )),
    COMMETHOD([dispid(17327), helpstring("Gets the overlay's parent. This may be another overlay if this overlay was added to that overlay's overlays collection. Or, it may be the screen overlay manager if this overlay was added to the scene manager'sscreen overlays collection."), 'propget'], HRESULT, 'Parent',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayContainer)), 'ppRetVal' )),
    COMMETHOD([dispid(17328), helpstring("Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17328), helpstring("Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(17329), helpstring("Gets or sets the overlay's color. By default, the overlay is white."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17329), helpstring("Gets or sets the overlay's color. By default, the overlay is white."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17330), helpstring('Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'), 'propget'], HRESULT, 'PickingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17330), helpstring('Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'), 'propput'], HRESULT, 'PickingEnabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17331), helpstring("Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."), 'propget'], HRESULT, 'ClipToParent',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17331), helpstring("Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."), 'propput'], HRESULT, 'ClipToParent',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17332), helpstring("Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17332), helpstring("Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17333), helpstring('Gets the position of the overlay in coordinates relative to the overall globe control. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'), 'propget'], HRESULT, 'ControlPosition',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17334), helpstring('Gets the size of the overlay in coordinates relative to the overall globe control. The elements are in the order width, height, width screen overlay unit, height screen overlay unit.'), 'propget'], HRESULT, 'ControlSize',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17335), helpstring('Gets the bounds of the overlay in coordinates relative to the overall globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'), 'propget'], HRESULT, 'ControlBounds',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17336), helpstring("Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17336), helpstring("Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17338), helpstring('Gets the collection of overlays that are contained within this overlay.'), 'propget'], HRESULT, 'Overlays',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(17339), helpstring('Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'), 'propget'], HRESULT, 'Padding',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17339), helpstring('Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'), 'propput'], HRESULT, 'Padding',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17340), helpstring('Brings the overlay to the front of the z-order, so it is on top of all other overlays with the same parent')], HRESULT, 'BringToFront'),
    COMMETHOD([dispid(17341), helpstring('Sends the overlay to the back of the z-order, so it is underneath all other overlays with the same parent')], HRESULT, 'SendToBack'),
    COMMETHOD([dispid(17342), helpstring('Transforms a given position, specified relative to the overlay, into coordinates relative to the overall globe control...')], HRESULT, 'OverlayToControl',
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17343), helpstring('Transforms a given position, specified relative to the overall globe control, into coordinates relative to this overlay...')], HRESULT, 'ControlToOverlay',
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(27505), helpstring("Sets the Text to be rendered to an overlay. Newline characters ('\n') will mark the start of the next line in the text."), 'propget'], HRESULT, 'Text',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(27505), helpstring("Sets the Text to be rendered to an overlay. Newline characters ('\n') will mark the start of the next line in the text."), 'propput'], HRESULT, 'Text',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(27506), helpstring("Gets or sets the text's outline color."), 'propget'], HRESULT, 'OutlineColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(27506), helpstring("Gets or sets the text's outline color."), 'propput'], HRESULT, 'OutlineColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(27511), helpstring('Get the graphics font used to style the text.'), 'propget'], HRESULT, 'Font',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGraphicsFont)), 'ppRetVal' )),
    COMMETHOD([dispid(27511), helpstring('Get the graphics font used to style the text.'), 'propput'], HRESULT, 'Font',
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'ppRetVal' )),
    COMMETHOD([dispid(17337), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17337), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTextOverlay implementation
##class _IAgStkGraphicsTextOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'
##    PinningPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'
##    X = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the x property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the x property.'
##    XUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'
##    Y = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the y property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the y property.'
##    YUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'
##    Size = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the width property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the width property.'
##    WidthUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the height property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the height property.'
##    HeightUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."
##    MinimumSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."
##    MaximumSize = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Bounds(self):
##        'Gets the bounds of the overlay relative to its parent. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."
##    BorderColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."
##    BorderSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'
##    BorderTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value with which the overlay will be translated from the X value of the position property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value with which the overlay will be translated from the X value of the position property.'
##    TranslationX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value with which the overlay will be translated from the Y value of the position property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value with which the overlay will be translated from the Y value of the position property.'
##    TranslationY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'
##    RotationAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'
##    RotationPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."
##    Scale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the overlay will be flipped along its X axis.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the overlay will be flipped along its X axis.'
##    FlipX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the overlay will be flipped along its Y axis.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the overlay will be flipped along its Y axis.'
##    FlipY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."
##    Origin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the origin of the pinning position property, relative to the overlay...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the origin of the pinning position property, relative to the overlay...'
##    PinningOrigin = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Parent(self):
##        "Gets the overlay's parent. This may be another overlay if this overlay was added to that overlay's overlays collection. Or, it may be the screen overlay manager if this overlay was added to the scene manager'sscreen overlays collection."
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the overlay's color. By default, the overlay is white."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overlay's color. By default, the overlay is white."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'
##    PickingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."
##    ClipToParent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ControlPosition(self):
##        'Gets the position of the overlay in coordinates relative to the overall globe control. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##        #return ppRetVal
##
##    @property
##    def ControlSize(self):
##        'Gets the size of the overlay in coordinates relative to the overall globe control. The elements are in the order width, height, width screen overlay unit, height screen overlay unit.'
##        #return ppRetVal
##
##    @property
##    def ControlBounds(self):
##        'Gets the bounds of the overlay in coordinates relative to the overall globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Overlays(self):
##        'Gets the collection of overlays that are contained within this overlay.'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'
##    Padding = property(_get, _set, doc = _set.__doc__)
##
##    def BringToFront(self):
##        'Brings the overlay to the front of the z-order, so it is on top of all other overlays with the same parent'
##        #return 
##
##    def SendToBack(self):
##        'Sends the overlay to the back of the z-order, so it is underneath all other overlays with the same parent'
##        #return 
##
##    def OverlayToControl(self, X, Y):
##        'Transforms a given position, specified relative to the overlay, into coordinates relative to the overall globe control...'
##        #return ppRetVal
##
##    def ControlToOverlay(self, X, Y):
##        'Transforms a given position, specified relative to the overall globe control, into coordinates relative to this overlay...'
##        #return ppRetVal
##
##    def _get(self):
##        "Sets the Text to be rendered to an overlay. Newline characters ('\n') will mark the start of the next line in the text."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Sets the Text to be rendered to an overlay. Newline characters ('\n') will mark the start of the next line in the text."
##    Text = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the text's outline color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the text's outline color."
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Get the graphics font used to style the text.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Get the graphics font used to style the text.'
##    Font = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##

class IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A globe image overlay for handling AGI Processed Image (PDTTX) files.'
    _iid_ = GUID('{0D8E18A4-CDA4-4B24-9AB0-2F25C83EB32E}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory._methods_ = [
    COMMETHOD([helpstring('Initializes an agi processed image globe overlay with the provided values.')], HRESULT, 'InitializeWithString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAGIProcessedImageGlobeOverlay)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory implementation
##class IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory_Impl(object):
##    def InitializeWithString(self, Uri):
##        'Initializes an agi processed image globe overlay with the provided values.'
##        #return ppRetVal
##

IAgStkGraphicsModelPrimitive._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the URI of the file used to load the file.')], HRESULT, 'UriAsString',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the linear scale used to increase or decrease the size of the rendered model.')], HRESULT, 'Scale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the linear scale used to increase or decrease the size of the rendered model.')], HRESULT, 'Scale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the position of the model. The position is defined in the model's reference frame. The array contains the components of the position in the order x, y, z.")], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the position of the model. The position is defined in the model's reference frame. The array contains the components of the position in the order x, y, z.")], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the model's orientation. The quaternion is a rotation from the model's local axes to the axes of the model's reference frame.")], HRESULT, 'Orientation',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the model's orientation. The quaternion is a rotation from the model's local axes to the axes of the model's reference frame.")], HRESULT, 'Orientation',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets the model's articulations. Articulations identify geometry and contain transformations for manipulating that geometry.")], HRESULT, 'Articulations',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelArticulationCollection)), 'ppRetVal' )),
    COMMETHOD([helpstring("For convenience. Loads a <a href='http://www.collada.org/'>COLLADA</a> (DAE) or AGI <a href='http://www.agi.com/resources/models/models0.cfm'>MDL</a> (MDL) model using a file path.")], HRESULT, 'LoadWithStringUri',
              ( ['in'], BSTR, 'Uri' )),
    COMMETHOD([helpstring("For convenience. Loads a <a href='http://www.collada.org/'>COLLADA</a> (DAE) or AGI <a href='http://www.agi.com/resources/models/models0.cfm'>MDL</a> (MDL) model using a file path.")], HRESULT, 'LoadWithStringUriAndUpAxis',
              ( ['in'], BSTR, 'Uri' ),
              ( ['in'], AgEStkGraphicsModelUpAxis, 'UpAxis' )),
    COMMETHOD([helpstring('For convenience. Sets the cartographic position of the model. Longitude and latitude are in radians, and altitude is in meters. This also sets position.')], HRESULT, 'SetPositionCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' )),
]
################################################################
## code template for IAgStkGraphicsModelPrimitive implementation
##class IAgStkGraphicsModelPrimitive_Impl(object):
##    @property
##    def UriAsString(self):
##        'Gets the URI of the file used to load the file.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the linear scale used to increase or decrease the size of the rendered model.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the linear scale used to increase or decrease the size of the rendered model.'
##    Scale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the position of the model. The position is defined in the model's reference frame. The array contains the components of the position in the order x, y, z."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the position of the model. The position is defined in the model's reference frame. The array contains the components of the position in the order x, y, z."
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the model's orientation. The quaternion is a rotation from the model's local axes to the axes of the model's reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the model's orientation. The quaternion is a rotation from the model's local axes to the axes of the model's reference frame."
##    Orientation = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Articulations(self):
##        "Gets the model's articulations. Articulations identify geometry and contain transformations for manipulating that geometry."
##        #return ppRetVal
##
##    def LoadWithStringUri(self, Uri):
##        "For convenience. Loads a <a href='http://www.collada.org/'>COLLADA</a> (DAE) or AGI <a href='http://www.agi.com/resources/models/models0.cfm'>MDL</a> (MDL) model using a file path."
##        #return 
##
##    def LoadWithStringUriAndUpAxis(self, Uri, UpAxis):
##        "For convenience. Loads a <a href='http://www.collada.org/'>COLLADA</a> (DAE) or AGI <a href='http://www.agi.com/resources/models/models0.cfm'>MDL</a> (MDL) model using a file path."
##        #return 
##
##    def SetPositionCartographic(self, CentralBody, Position):
##        'For convenience. Sets the cartographic position of the model. Longitude and latitude are in radians, and altitude is in meters. This also sets position.'
##        #return 
##

class _IAgStkGraphicsAlphaFromPixelFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAlphaFromPixelFilter'
    _iid_ = GUID('{F4D7D64B-F841-4F85-9BA1-E2679851D025}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsAlphaFromPixelFilter._methods_ = [
]
################################################################
## code template for _IAgStkGraphicsAlphaFromPixelFilter implementation
##class _IAgStkGraphicsAlphaFromPixelFilter_Impl(object):

class _IAgStkGraphicsSceneGlobeOverlaySettings(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSceneGlobeOverlaySettings'
    _iid_ = GUID('{57CB8D32-6C6B-4999-9931-F47CF489BA60}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsSceneGlobeOverlaySettings._methods_ = [
    COMMETHOD([dispid(9401), helpstring('Gets or sets a value indicating whether or not imagery is anti-aliased.'), 'propget'], HRESULT, 'AntiAliasImagery',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9401), helpstring('Gets or sets a value indicating whether or not imagery is anti-aliased.'), 'propput'], HRESULT, 'AntiAliasImagery',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(9402), helpstring('Gets or sets the pixel error for terrain meshes. This is the number of pixels that the rendered terrain is different from the actual terrain data. The default is 2.0 pixels.'), 'propget'], HRESULT, 'TerrainMeshPixelError',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(9402), helpstring('Gets or sets the pixel error for terrain meshes. This is the number of pixels that the rendered terrain is different from the actual terrain data. The default is 2.0 pixels.'), 'propput'], HRESULT, 'TerrainMeshPixelError',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(9403), helpstring('Gets or sets the pixel error for imagery. This is the number of pixels that the rendered imagery is different from the actual imagery data. The default is 1.0 pixel.'), 'propget'], HRESULT, 'ImageryPixelError',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(9403), helpstring('Gets or sets the pixel error for imagery. This is the number of pixels that the rendered imagery is different from the actual imagery data. The default is 1.0 pixel.'), 'propput'], HRESULT, 'ImageryPixelError',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(9404), helpstring('Gets or sets whether projected raster globe overlays will also project onto models.'), 'propget'], HRESULT, 'ProjectedRasterModelProjection',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9404), helpstring('Gets or sets whether projected raster globe overlays will also project onto models.'), 'propput'], HRESULT, 'ProjectedRasterModelProjection',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSceneGlobeOverlaySettings implementation
##class _IAgStkGraphicsSceneGlobeOverlaySettings_Impl(object):
##    def _get(self):
##        'Gets or sets a value indicating whether or not imagery is anti-aliased.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a value indicating whether or not imagery is anti-aliased.'
##    AntiAliasImagery = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the pixel error for terrain meshes. This is the number of pixels that the rendered terrain is different from the actual terrain data. The default is 2.0 pixels.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the pixel error for terrain meshes. This is the number of pixels that the rendered terrain is different from the actual terrain data. The default is 2.0 pixels.'
##    TerrainMeshPixelError = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the pixel error for imagery. This is the number of pixels that the rendered imagery is different from the actual imagery data. The default is 1.0 pixel.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the pixel error for imagery. This is the number of pixels that the rendered imagery is different from the actual imagery data. The default is 1.0 pixel.'
##    ImageryPixelError = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether projected raster globe overlays will also project onto models.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether projected raster globe overlays will also project onto models.'
##    ProjectedRasterModelProjection = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsAGIRoamImageGlobeOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAGIRoamImageGlobeOverlayFactory'
    _iid_ = GUID('{26025481-CDBA-4451-93EF-6F531E0F4DEA}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsAGIRoamImageGlobeOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A globe image overlay for handling ROAM (TXM/TXB) files.'
    _iid_ = GUID('{D76D82B7-7A13-452D-B661-1D416FAE732E}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsAGIRoamImageGlobeOverlayFactory._methods_ = [
    COMMETHOD([dispid(10901), helpstring('Initializes an agi roam image globe overlay with the provided values.')], HRESULT, 'InitializeWithString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAGIRoamImageGlobeOverlay)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsAGIRoamImageGlobeOverlayFactory implementation
##class _IAgStkGraphicsAGIRoamImageGlobeOverlayFactory_Impl(object):
##    def InitializeWithString(self, Uri):
##        'Initializes an agi roam image globe overlay with the provided values.'
##        #return ppRetVal
##

IAgStkGraphicsBlurFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the method used to blur the source raster.')], HRESULT, 'Method',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsBlurMethod), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the method used to blur the source raster.')], HRESULT, 'Method',
              ( ['in'], AgEStkGraphicsBlurMethod, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsBlurFilter implementation
##class IAgStkGraphicsBlurFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the method used to blur the source raster.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the method used to blur the source raster.'
##    Method = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsRhumbLineInterpolator._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the central body used when interpolating with interpolate.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the central body used when interpolating with interpolate.')], HRESULT, 'CentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the granularity, in radians, used when interpolating with interpolate. Lower granularities are more precise but create more positions.')], HRESULT, 'Granularity',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the granularity, in radians, used when interpolating with interpolate. Lower granularities are more precise but create more positions.')], HRESULT, 'Granularity',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsRhumbLineInterpolator implementation
##class IAgStkGraphicsRhumbLineInterpolator_Impl(object):
##    def _get(self):
##        'Gets or sets the central body used when interpolating with interpolate.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the central body used when interpolating with interpolate.'
##    CentralBody = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the granularity, in radians, used when interpolating with interpolate. Lower granularities are more precise but create more positions.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the granularity, in radians, used when interpolating with interpolate. Lower granularities are more precise but create more positions.'
##    Granularity = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsAlphaFromRasterFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAlphaFromRasterFilter'
    _iid_ = GUID('{7E2FCFCE-41E4-45BB-879B-ACDF1CF15AA9}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsAlphaFromRasterFilter._methods_ = [
    COMMETHOD([dispid(20201), helpstring('Gets or sets the raster that the source raster will use to derive an alpha band.'), 'propget'], HRESULT, 'Raster',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(20201), helpstring('Gets or sets the raster that the source raster will use to derive an alpha band.'), 'propput'], HRESULT, 'Raster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsAlphaFromRasterFilter implementation
##class _IAgStkGraphicsAlphaFromRasterFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the raster that the source raster will use to derive an alpha band.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the raster that the source raster will use to derive an alpha band.'
##    Raster = property(_get, _set, doc = _set.__doc__)
##

class IAgStkGraphicsStereoscopic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Gets the stereoscopic options for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled.'
    _iid_ = GUID('{41D0E11B-D00C-4255-B869-2FC8430F994E}')
    _idlflags_ = ['oleautomation']

# values for enumeration 'AgEStkGraphicsStereoscopicDisplayMode'
eStkGraphicsStereoscopicDisplayModeOff = 0
eStkGraphicsStereoscopicDisplayModeQuadBuffer = 1
eStkGraphicsStereoscopicDisplayModeAnaglyph = 2
eStkGraphicsStereoscopicDisplayModeLeftEye = 3
eStkGraphicsStereoscopicDisplayModeRightEye = 4
eStkGraphicsStereoscopicDisplayModeSideBySide = 5
AgEStkGraphicsStereoscopicDisplayMode = c_int # enum

# values for enumeration 'AgEStkGraphicsStereoProjectionMode'
eStkGraphicsStereoProjectionParallel = 0
eStkGraphicsStereoProjectionFixedDistance = 1
eStkGraphicsStereoProjectionAutomatic = 2
AgEStkGraphicsStereoProjectionMode = c_int # enum
IAgStkGraphicsStereoscopic._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the stereoscopic display mode for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled.')], HRESULT, 'DisplayMode',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsStereoscopicDisplayMode), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the stereoscopic display mode for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled.')], HRESULT, 'DisplayMode',
              ( ['in'], AgEStkGraphicsStereoscopicDisplayMode, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("This property is deprecated. This property has been deprecated in favor of ProjectionMode. Gets or sets whether the projection distance will be automatically computed based on the camera's reference point...")], HRESULT, 'AutomaticallyComputeProjectionDistance',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("This property is deprecated. This property has been deprecated in favor of ProjectionMode. Gets or sets whether the projection distance will be automatically computed based on the camera's reference point...")], HRESULT, 'AutomaticallyComputeProjectionDistance',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the type of stereo projection that will be used.')], HRESULT, 'ProjectionMode',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsStereoProjectionMode), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the type of stereo projection that will be used.')], HRESULT, 'ProjectionMode',
              ( ['in'], AgEStkGraphicsStereoProjectionMode, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the projection distance. If automatically compute projection distance is set to true, the value of this property will be ignored.')], HRESULT, 'ProjectionDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the projection distance. If automatically compute projection distance is set to true, the value of this property will be ignored.')], HRESULT, 'ProjectionDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the eye separation factor.')], HRESULT, 'EyeSeparationFactor',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the eye separation factor.')], HRESULT, 'EyeSeparationFactor',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsStereoscopic implementation
##class IAgStkGraphicsStereoscopic_Impl(object):
##    def _get(self):
##        'Gets or sets the stereoscopic display mode for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the stereoscopic display mode for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled.'
##    DisplayMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "This property is deprecated. This property has been deprecated in favor of ProjectionMode. Gets or sets whether the projection distance will be automatically computed based on the camera's reference point..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "This property is deprecated. This property has been deprecated in favor of ProjectionMode. Gets or sets whether the projection distance will be automatically computed based on the camera's reference point..."
##    AutomaticallyComputeProjectionDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the type of stereo projection that will be used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the type of stereo projection that will be used.'
##    ProjectionMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the projection distance. If automatically compute projection distance is set to true, the value of this property will be ignored.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the projection distance. If automatically compute projection distance is set to true, the value of this property will be ignored.'
##    ProjectionDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the eye separation factor.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the eye separation factor.'
##    EyeSeparationFactor = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsAGIProcessedImageGlobeOverlay._methods_ = [
]
################################################################
## code template for IAgStkGraphicsAGIProcessedImageGlobeOverlay implementation
##class IAgStkGraphicsAGIProcessedImageGlobeOverlay_Impl(object):

class _IAgStkGraphicsDurationPathPrimitiveUpdatePolicy(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsDurationPathPrimitiveUpdatePolicy'
    _iid_ = GUID('{7B966DF4-8080-4CB1-98F4-B4F0EDBB7E99}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._methods_ = [
    COMMETHOD([dispid(17101), helpstring('Updates the pathPrimitive at the specified date.')], HRESULT, 'Update',
              ( ['in'], POINTER(IAgStkGraphicsPathPrimitive), 'PathPrimitive' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'Date' )),
    COMMETHOD([dispid(9701), helpstring('Gets or sets the maximum duration that a point will lie on the line.'), 'propget'], HRESULT, 'Duration',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(9701), helpstring('Gets or sets the maximum duration that a point will lie on the line.'), 'propput'], HRESULT, 'Duration',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(9702), helpstring('Gets or sets where the positions on the path are removed from.'), 'propget'], HRESULT, 'RemoveLocation',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPathPrimitiveRemoveLocation), 'pRetVal' )),
    COMMETHOD([dispid(9702), helpstring('Gets or sets where the positions on the path are removed from.'), 'propput'], HRESULT, 'RemoveLocation',
              ( ['in'], AgEStkGraphicsPathPrimitiveRemoveLocation, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsDurationPathPrimitiveUpdatePolicy implementation
##class _IAgStkGraphicsDurationPathPrimitiveUpdatePolicy_Impl(object):
##    def Update(self, PathPrimitive, Date):
##        'Updates the pathPrimitive at the specified date.'
##        #return 
##
##    def _get(self):
##        'Gets or sets the maximum duration that a point will lie on the line.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum duration that a point will lie on the line.'
##    Duration = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets where the positions on the path are removed from.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets where the positions on the path are removed from.'
##    RemoveLocation = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsAxesPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAxesPrimitiveFactory'
    _iid_ = GUID('{A4BB30EC-B707-4F52-B642-B913386CE91F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsAxesPrimitiveFactory._methods_ = [
    COMMETHOD([dispid(28301), helpstring('Initializes an axes primitive with the specified ISystem sys as its source.')], HRESULT, 'InitializeWithDirection',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'Sys' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAxesPrimitive)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsAxesPrimitiveFactory implementation
##class _IAgStkGraphicsAxesPrimitiveFactory_Impl(object):
##    def InitializeWithDirection(self, Sys, Axes, Font):
##        'Initializes an axes primitive with the specified ISystem sys as its source.'
##        #return ppRetVal
##

class _IAgStkGraphicsCamera(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsCamera'
    _iid_ = GUID('{383A0860-9010-4ACA-B2BC-B452F4C63030}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsCamera._methods_ = [
    COMMETHOD([dispid(16501), helpstring('Gets or sets the position of the camera. The array contains the components of the position arranged in the order x, y, z.'), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16501), helpstring('Gets or sets the position of the camera. The array contains the components of the position arranged in the order x, y, z.'), 'propput'], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(16502), helpstring('Gets or sets the reference point of the camera. The array contains the components of the reference point arranged in the order x, y, z.'), 'propget'], HRESULT, 'ReferencePoint',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16502), helpstring('Gets or sets the reference point of the camera. The array contains the components of the reference point arranged in the order x, y, z.'), 'propput'], HRESULT, 'ReferencePoint',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(16503), helpstring('Gets or sets the direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z.'), 'propget'], HRESULT, 'Direction',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16503), helpstring('Gets or sets the direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z.'), 'propput'], HRESULT, 'Direction',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(16504), helpstring('Gets or sets the up direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z.'), 'propget'], HRESULT, 'UpVector',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16504), helpstring('Gets or sets the up direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z.'), 'propput'], HRESULT, 'UpVector',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(16505), helpstring('Gets or sets the distance the camera position is from the reference point.'), 'propget'], HRESULT, 'Distance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16505), helpstring('Gets or sets the distance the camera position is from the reference point.'), 'propput'], HRESULT, 'Distance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16506), helpstring("Gets or sets camera's axes of rotation."), 'propget'], HRESULT, 'Axes',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes)), 'ppRetVal' )),
    COMMETHOD([dispid(16506), helpstring("Gets or sets camera's axes of rotation."), 'propput'], HRESULT, 'Axes',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'ppRetVal' )),
    COMMETHOD([dispid(16507), helpstring('Gets or sets the axis to constrain the up vector to.'), 'propget'], HRESULT, 'ConstrainedUpAxis',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsConstrainedUpAxis), 'pRetVal' )),
    COMMETHOD([dispid(16507), helpstring('Gets or sets the axis to constrain the up vector to.'), 'propput'], HRESULT, 'ConstrainedUpAxis',
              ( ['in'], AgEStkGraphicsConstrainedUpAxis, 'pRetVal' )),
    COMMETHOD([dispid(16508), helpstring('Gets or sets whether the camera can rotate over the constrained up axis. For example, if true the camera would be able to flip over the North Pole and view the globe upside down.'), 'propget'], HRESULT, 'AllowRotationOverConstrainedUpAxis',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16508), helpstring('Gets or sets whether the camera can rotate over the constrained up axis. For example, if true the camera would be able to flip over the North Pole and view the globe upside down.'), 'propput'], HRESULT, 'AllowRotationOverConstrainedUpAxis',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(16509), helpstring("Gets or sets whether the camera's direction is locked."), 'propget'], HRESULT, 'LockViewDirection',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16509), helpstring("Gets or sets whether the camera's direction is locked."), 'propput'], HRESULT, 'LockViewDirection',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(16510), helpstring('Gets or sets field of view in radians. The field of view is applied to the larger of the window dimensions. For example, if the window width was 640 and the height was 480, the field of view applies to the horizontal...'), 'propget'], HRESULT, 'FieldOfView',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16510), helpstring('Gets or sets field of view in radians. The field of view is applied to the larger of the window dimensions. For example, if the window width was 640 and the height was 480, the field of view applies to the horizontal...'), 'propput'], HRESULT, 'FieldOfView',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16511), helpstring('Gets the horizontal field of view in radians.'), 'propget'], HRESULT, 'HorizontalFieldOfView',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16512), helpstring('Gets the vertical field of view in radians.'), 'propget'], HRESULT, 'VerticalFieldOfView',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16513), helpstring('Gets or sets the distance in meters from the camera to the near plane.'), 'propget'], HRESULT, 'NearPlane',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16513), helpstring('Gets or sets the distance in meters from the camera to the near plane.'), 'propput'], HRESULT, 'NearPlane',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16514), helpstring('Gets or sets the distance in meters from the camera to the far plane.'), 'propget'], HRESULT, 'FarPlane',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16514), helpstring('Gets or sets the distance in meters from the camera to the far plane.'), 'propput'], HRESULT, 'FarPlane',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16515), helpstring('Gets or sets the value that is used to compute subdivisions of the viewing frustum. A large value will be faster but lose z-value precision. A small value will have better precision but perform slower...'), 'propget'], HRESULT, 'FarNearPlaneRatio',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16515), helpstring('Gets or sets the value that is used to compute subdivisions of the viewing frustum. A large value will be faster but lose z-value precision. A small value will have better precision but perform slower...'), 'propput'], HRESULT, 'FarNearPlaneRatio',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16516), helpstring("Returns the distance that the Camera's Position should be from the ReferencePoint in order to ensure that a sphere with a 1 meter radius centered at the ReferencePoint fits entirely in the view frustum."), 'propget'], HRESULT, 'DistancePerRadius',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16536), helpstring('Gets the camera snapshot settings.'), 'propget'], HRESULT, 'Snapshot',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCameraSnapshot)), 'ppRetVal' )),
    COMMETHOD([dispid(16537), helpstring('Gets the camera video recorder.'), 'propget'], HRESULT, 'VideoRecording',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCameraVideoRecording)), 'ppRetVal' )),
    COMMETHOD([dispid(16517), helpstring('Gets the approximate number of meters covered by a pixel that is 1 meter away from the camera. This is commonly multiplied by the distance from the camera to an object to compute the approximate number of meters covered by a pixel of the object.'), 'propget'], HRESULT, 'PixelSizePerDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16518), helpstring("Gets the reference frame that the position is returned in. This reference frame is composed of the camera's from point and the axes."), 'propget'], HRESULT, 'PositionReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(16519), helpstring("Gets the reference frame that the reference point is returned in. This reference frame is composed of the camera's to point and the axes."), 'propget'], HRESULT, 'ReferencePointReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(16520), helpstring('Gets the visibility of a sphere against the view frustum and any occluding central bodies.')], HRESULT, 'VisibilityTest',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ReferenceFrame' ),
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'Sphere' ),
              ( ['out', 'retval'], POINTER(AgEStkGraphicsVisibility), 'pRetVal' )),
    COMMETHOD([dispid(16521), helpstring('Converts a cartographic position to a pixel coordinate relative to the globe control. This method can throw an exception. Returns an array containing the pixel coordinate (in the order x, y) of the cartographic position relative to the globe control...')], HRESULT, 'CartographicToWindow',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16522), helpstring('Converts a cartographic position to a pixel coordinate relative to the globe control. This method does not throw an exception.')], HRESULT, 'TryCartographicToWindow',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16523), helpstring('Converts a pixel coordinate relative to the globe control to a cartographic position. For speed, terrain is not considered; if the pixel coordinate does not intersect the ellipsoid, an exception is thrown. Returns the cartographic position...')], HRESULT, 'WindowToCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16524), helpstring('Converts a pixel coordinate relative to the globe control to a cartographic position. For speed, terrain is not considered. This method does not throw an exception.')], HRESULT, 'TryWindowToCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16525), helpstring("Zoom to a central body and use the specified axes for rotation. The reference point is set to the center of the central body and the camera's position is set so the entire central body is visible.")], HRESULT, 'ViewCentralBody',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' )),
    COMMETHOD([dispid(16526), helpstring('Zooms to a cartographic extent on the centralBody. The camera will be looking straight down at the extent, with the up vector pointing toward local north. The axes is set to an east-north-up axes at the center of extent.')], HRESULT, 'ViewExtent',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' )),
    COMMETHOD([dispid(16527), helpstring('Zooms to a rectangular extent composed of west, south, east, north on the centralBody. The camera will be looking straight down at the extent, with the up vector pointing toward local north...')], HRESULT, 'ViewRectangularExtent',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], c_double, 'West' ),
              ( ['in'], c_double, 'South' ),
              ( ['in'], c_double, 'East' ),
              ( ['in'], c_double, 'North' )),
    COMMETHOD([dispid(16528), helpstring("Views from a point to a point. Sets the camera's position and the reference point the camera is looking at.")], HRESULT, 'ViewWithUpAxis',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'CameraPosition' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'ReferencePoint' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'UpAxis' )),
    COMMETHOD([dispid(16529), helpstring("Views from a point to a point. Sets the camera's position and the reference point the camera is looking at.")], HRESULT, 'View',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'CameraPosition' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'ReferencePoint' )),
    COMMETHOD([dispid(16530), helpstring("Views from a point to a direction. Sets the camera's position and the direction vector indicating where the camera is looking.")], HRESULT, 'ViewDirectionWithUpAxis',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'CameraPosition' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnVector), 'Direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'UpAxis' )),
    COMMETHOD([dispid(16531), helpstring("Views from a point to a direction. Sets the camera's position and the direction vector indicating where the camera is looking.")], HRESULT, 'ViewDirection',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'CameraPosition' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnVector), 'Direction' )),
    COMMETHOD([dispid(16532), helpstring("Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the offset.")], HRESULT, 'ViewOffsetWithUpAxis',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'ReferencePoint' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Offset' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'UpAxis' )),
    COMMETHOD([dispid(16533), helpstring("Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the offset.")], HRESULT, 'ViewOffset',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'ReferencePoint' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Offset' )),
    COMMETHOD([dispid(16534), helpstring("Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the direction vector.")], HRESULT, 'ViewOffsetDirectionWithUpAxis',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'ReferencePoint' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnVector), 'Direction' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'UpAxis' )),
    COMMETHOD([dispid(16535), helpstring("Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the direction vector.")], HRESULT, 'ViewOffsetDirection',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnAxes), 'Axes' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnPoint), 'ReferencePoint' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnVector), 'Direction' )),
]
################################################################
## code template for _IAgStkGraphicsCamera implementation
##class _IAgStkGraphicsCamera_Impl(object):
##    def _get(self):
##        'Gets or sets the position of the camera. The array contains the components of the position arranged in the order x, y, z.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the position of the camera. The array contains the components of the position arranged in the order x, y, z.'
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the reference point of the camera. The array contains the components of the reference point arranged in the order x, y, z.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference point of the camera. The array contains the components of the reference point arranged in the order x, y, z.'
##    ReferencePoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z.'
##    Direction = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the up direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the up direction of the camera in axes. The array contains the components of the direction arranged in the order x, y, z.'
##    UpVector = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the distance the camera position is from the reference point.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the distance the camera position is from the reference point.'
##    Distance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets camera's axes of rotation."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets camera's axes of rotation."
##    Axes = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the axis to constrain the up vector to.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the axis to constrain the up vector to.'
##    ConstrainedUpAxis = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the camera can rotate over the constrained up axis. For example, if true the camera would be able to flip over the North Pole and view the globe upside down.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the camera can rotate over the constrained up axis. For example, if true the camera would be able to flip over the North Pole and view the globe upside down.'
##    AllowRotationOverConstrainedUpAxis = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether the camera's direction is locked."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether the camera's direction is locked."
##    LockViewDirection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets field of view in radians. The field of view is applied to the larger of the window dimensions. For example, if the window width was 640 and the height was 480, the field of view applies to the horizontal...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets field of view in radians. The field of view is applied to the larger of the window dimensions. For example, if the window width was 640 and the height was 480, the field of view applies to the horizontal...'
##    FieldOfView = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def HorizontalFieldOfView(self):
##        'Gets the horizontal field of view in radians.'
##        #return pRetVal
##
##    @property
##    def VerticalFieldOfView(self):
##        'Gets the vertical field of view in radians.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the distance in meters from the camera to the near plane.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the distance in meters from the camera to the near plane.'
##    NearPlane = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the distance in meters from the camera to the far plane.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the distance in meters from the camera to the far plane.'
##    FarPlane = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value that is used to compute subdivisions of the viewing frustum. A large value will be faster but lose z-value precision. A small value will have better precision but perform slower...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value that is used to compute subdivisions of the viewing frustum. A large value will be faster but lose z-value precision. A small value will have better precision but perform slower...'
##    FarNearPlaneRatio = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def DistancePerRadius(self):
##        "Returns the distance that the Camera's Position should be from the ReferencePoint in order to ensure that a sphere with a 1 meter radius centered at the ReferencePoint fits entirely in the view frustum."
##        #return pRetVal
##
##    @property
##    def Snapshot(self):
##        'Gets the camera snapshot settings.'
##        #return ppRetVal
##
##    @property
##    def VideoRecording(self):
##        'Gets the camera video recorder.'
##        #return ppRetVal
##
##    @property
##    def PixelSizePerDistance(self):
##        'Gets the approximate number of meters covered by a pixel that is 1 meter away from the camera. This is commonly multiplied by the distance from the camera to an object to compute the approximate number of meters covered by a pixel of the object.'
##        #return pRetVal
##
##    @property
##    def PositionReferenceFrame(self):
##        "Gets the reference frame that the position is returned in. This reference frame is composed of the camera's from point and the axes."
##        #return ppRetVal
##
##    @property
##    def ReferencePointReferenceFrame(self):
##        "Gets the reference frame that the reference point is returned in. This reference frame is composed of the camera's to point and the axes."
##        #return ppRetVal
##
##    def VisibilityTest(self, ReferenceFrame, Sphere):
##        'Gets the visibility of a sphere against the view frustum and any occluding central bodies.'
##        #return pRetVal
##
##    def CartographicToWindow(self, CentralBody, Position):
##        'Converts a cartographic position to a pixel coordinate relative to the globe control. This method can throw an exception. Returns an array containing the pixel coordinate (in the order x, y) of the cartographic position relative to the globe control...'
##        #return ppRetVal
##
##    def TryCartographicToWindow(self, CentralBody, Position):
##        'Converts a cartographic position to a pixel coordinate relative to the globe control. This method does not throw an exception.'
##        #return ppRetVal
##
##    def WindowToCartographic(self, CentralBody, Position):
##        'Converts a pixel coordinate relative to the globe control to a cartographic position. For speed, terrain is not considered; if the pixel coordinate does not intersect the ellipsoid, an exception is thrown. Returns the cartographic position...'
##        #return ppRetVal
##
##    def TryWindowToCartographic(self, CentralBody, Position):
##        'Converts a pixel coordinate relative to the globe control to a cartographic position. For speed, terrain is not considered. This method does not throw an exception.'
##        #return ppRetVal
##
##    def ViewCentralBody(self, CentralBody, Axes):
##        "Zoom to a central body and use the specified axes for rotation. The reference point is set to the center of the central body and the camera's position is set so the entire central body is visible."
##        #return 
##
##    def ViewExtent(self, CentralBody, Extent):
##        'Zooms to a cartographic extent on the centralBody. The camera will be looking straight down at the extent, with the up vector pointing toward local north. The axes is set to an east-north-up axes at the center of extent.'
##        #return 
##
##    def ViewRectangularExtent(self, CentralBody, West, South, East, North):
##        'Zooms to a rectangular extent composed of west, south, east, north on the centralBody. The camera will be looking straight down at the extent, with the up vector pointing toward local north...'
##        #return 
##
##    def ViewWithUpAxis(self, Axes, CameraPosition, ReferencePoint, UpAxis):
##        "Views from a point to a point. Sets the camera's position and the reference point the camera is looking at."
##        #return 
##
##    def View(self, Axes, CameraPosition, ReferencePoint):
##        "Views from a point to a point. Sets the camera's position and the reference point the camera is looking at."
##        #return 
##
##    def ViewDirectionWithUpAxis(self, Axes, CameraPosition, Direction, UpAxis):
##        "Views from a point to a direction. Sets the camera's position and the direction vector indicating where the camera is looking."
##        #return 
##
##    def ViewDirection(self, Axes, CameraPosition, Direction):
##        "Views from a point to a direction. Sets the camera's position and the direction vector indicating where the camera is looking."
##        #return 
##
##    def ViewOffsetWithUpAxis(self, Axes, ReferencePoint, Offset, UpAxis):
##        "Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the offset."
##        #return 
##
##    def ViewOffset(self, Axes, ReferencePoint, Offset):
##        "Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the offset."
##        #return 
##
##    def ViewOffsetDirectionWithUpAxis(self, Axes, ReferencePoint, Direction, UpAxis):
##        "Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the direction vector."
##        #return 
##
##    def ViewOffsetDirection(self, Axes, ReferencePoint, Direction):
##        "Sets the camera's reference point - the point the camera is looking at. The camera's position is the reference point translated by the direction vector."
##        #return 
##

class _IAgStkGraphicsBandExtractFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsBandExtractFilter'
    _iid_ = GUID('{E76B02A6-F5F2-4CE3-8D4D-6CAF7A09CA05}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsBandExtractFilter._methods_ = [
    COMMETHOD([dispid(20301), helpstring('Gets or sets the raster format containing the bands and the order of the bands that will be extracted.'), 'propget'], HRESULT, 'ExtractFormat',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsRasterFormat), 'pRetVal' )),
    COMMETHOD([dispid(20301), helpstring('Gets or sets the raster format containing the bands and the order of the bands that will be extracted.'), 'propput'], HRESULT, 'ExtractFormat',
              ( ['in'], AgEStkGraphicsRasterFormat, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsBandExtractFilter implementation
##class _IAgStkGraphicsBandExtractFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the raster format containing the bands and the order of the bands that will be extracted.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the raster format containing the bands and the order of the bands that will be extracted.'
##    ExtractFormat = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory'
    _iid_ = GUID('{C0E4975C-2754-40D7-876F-69CFAA805C65}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsCustomImageGlobeOverlayPluginActivator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The Activator class provides methods to load COM plugins that implement custom image globe overlays. For more information about custom image globe overlays, see the STK Programming Interface.'
    _iid_ = GUID('{EFB59B20-9F79-4043-A3BD-6CD1A3395738}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._methods_ = [
    COMMETHOD([dispid(25601), helpstring('Initializes a new instance of the Activator type.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCustomImageGlobeOverlayPluginActivator)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory implementation
##class _IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance of the Activator type.'
##        #return ppRetVal
##

class IAgStkGraphicsAGIProcessedTerrainOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A terrain overlay for handling AGI Processed Terrain (PDTT) files.'
    _iid_ = GUID('{DFEEE7D8-CD40-43A5-B168-843F26B027EA}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsAGIProcessedTerrainOverlayFactory._methods_ = [
    COMMETHOD([helpstring('Initializes an agi processed terrain overlay with the provided values.')], HRESULT, 'InitializeWithString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAGIProcessedTerrainOverlay)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsAGIProcessedTerrainOverlayFactory implementation
##class IAgStkGraphicsAGIProcessedTerrainOverlayFactory_Impl(object):
##    def InitializeWithString(self, Uri):
##        'Initializes an agi processed terrain overlay with the provided values.'
##        #return ppRetVal
##

class IAgStkGraphicsTimeIntervalDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Defines an inclusive time interval that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the current animation time ."
    _iid_ = GUID('{99CA1422-3AE0-4620-9046-D0BC4CA2BEE5}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsTimeIntervalDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Defines an inclusive time interval that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the current animation time ."
    _iid_ = GUID('{2F0F3C32-C1D9-42A1-9422-8ECD2B9C1AD0}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsTimeIntervalDisplayConditionFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a default time display condition. minimum time is set to JulianDate.MinValue and maximum time is set to JulianDate.MaxValue...')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTimeIntervalDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a time display condition with the inclusive time interval [minimumTime, maximumTime]...')], HRESULT, 'InitializeWithTimes',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'MinimumTime' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'MaximumTime' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTimeIntervalDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a time display condition with a time interval.')], HRESULT, 'InitializeWithTimeInterval',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'TimeInterval' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTimeIntervalDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTimeIntervalDisplayConditionFactory implementation
##class IAgStkGraphicsTimeIntervalDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default time display condition. minimum time is set to JulianDate.MinValue and maximum time is set to JulianDate.MaxValue...'
##        #return ppRetVal
##
##    def InitializeWithTimes(self, MinimumTime, MaximumTime):
##        'Initializes a time display condition with the inclusive time interval [minimumTime, maximumTime]...'
##        #return ppRetVal
##
##    def InitializeWithTimeInterval(self, TimeInterval):
##        'Initializes a time display condition with a time interval.'
##        #return ppRetVal
##

class _IAgStkGraphicsTexture2DFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTexture2DFactory'
    _iid_ = GUID('{2E7C8F73-1B1C-4387-8968-A016C2D61223}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsTexture2DFactory._methods_ = [
    COMMETHOD([dispid(15302), helpstring('Creates a new texture from a Uri, which can be a file, HTTP, HTTPS, or FTP source. See raster for a list of supported raster formats.')], HRESULT, 'LoadFromStringUri',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRendererTexture2D)), 'ppRetVal' )),
    COMMETHOD([dispid(15303), helpstring('Creates a new texture from a raster.')], HRESULT, 'FromRaster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRendererTexture2D)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTexture2DFactory implementation
##class _IAgStkGraphicsTexture2DFactory_Impl(object):
##    def LoadFromStringUri(self, Uri):
##        'Creates a new texture from a Uri, which can be a file, HTTP, HTTPS, or FTP source. See raster for a list of supported raster formats.'
##        #return ppRetVal
##
##    def FromRaster(self, Raster):
##        'Creates a new texture from a raster.'
##        #return ppRetVal
##

class _IAgStkGraphicsBandOrderFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsBandOrderFilter'
    _iid_ = GUID('{2E68CE72-CB22-4D0E-ABC3-B1CD7D9AFB46}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsBandOrderFilter._methods_ = [
    COMMETHOD([dispid(20401), helpstring('Gets or sets the raster format indicating the desired order of the bands in the source raster.'), 'propget'], HRESULT, 'BandOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsRasterFormat), 'pRetVal' )),
    COMMETHOD([dispid(20401), helpstring('Gets or sets the raster format indicating the desired order of the bands in the source raster.'), 'propput'], HRESULT, 'BandOrder',
              ( ['in'], AgEStkGraphicsRasterFormat, 'pRetVal' )),
    COMMETHOD([dispid(20402), helpstring("Gets or sets a value indicating whether to maintain the source raster's format after the filter is applied. When true, the source raster's format is maintained after swizzling."), 'propget'], HRESULT, 'MaintainRasterFormat',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(20402), helpstring("Gets or sets a value indicating whether to maintain the source raster's format after the filter is applied. When true, the source raster's format is maintained after swizzling."), 'propput'], HRESULT, 'MaintainRasterFormat',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsBandOrderFilter implementation
##class _IAgStkGraphicsBandOrderFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the raster format indicating the desired order of the bands in the source raster.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the raster format indicating the desired order of the bands in the source raster.'
##    BandOrder = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets a value indicating whether to maintain the source raster's format after the filter is applied. When true, the source raster's format is maintained after swizzling."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets a value indicating whether to maintain the source raster's format after the filter is applied. When true, the source raster's format is maintained after swizzling."
##    MaintainRasterFormat = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsGeospatialImageGlobeOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGeospatialImageGlobeOverlayFactory'
    _iid_ = GUID('{3EE30319-7010-40C2-AB8A-9ABF917B01F8}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsGeospatialImageGlobeOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "A globe image overlay for handling <a href='http://www.jpeg.org/jpeg2000/'>JPEG 2000</a> (.jp2), ECW (.ecw), ECWP, and MrSid (.sid) image formats in the WGS84 geographic projection."
    _iid_ = GUID('{FD42A5BA-5049-4C58-BF40-61CA5943DCCF}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsGeospatialImageGlobeOverlayFactory._methods_ = [
    COMMETHOD([dispid(11001), helpstring('Initializes a geospatial image globe overlay with the provided values.')], HRESULT, 'InitializeWithString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGeospatialImageGlobeOverlay)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGeospatialImageGlobeOverlayFactory implementation
##class _IAgStkGraphicsGeospatialImageGlobeOverlayFactory_Impl(object):
##    def InitializeWithString(self, Uri):
##        'Initializes a geospatial image globe overlay with the provided values.'
##        #return ppRetVal
##

class IAgStkGraphicsBrightnessFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Adjusts the brightness of the source raster's color bands. The adjustment to brightness is a value between -1 and 1, corresponding to least bright to most bright."
    _iid_ = GUID('{85E2696A-638C-4151-8BA4-E1FDEF462598}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsBrightnessFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBrightnessFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with the adjustment to brightness.')], HRESULT, 'InitializeWithAdjustment',
              ( ['in'], c_double, 'Adjustment' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBrightnessFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsBrightnessFilterFactory implementation
##class IAgStkGraphicsBrightnessFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithAdjustment(self, Adjustment):
##        'Initializes a new instance with the adjustment to brightness.'
##        #return ppRetVal
##

class IAgStkGraphicsSceneDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "A display condition used to control what scene or scenes an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> in. This is used to show an object in some scenes and hide it in others."
    _iid_ = GUID('{930929F7-1D93-4575-A18F-B376E9A16CF7}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsSceneDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "A display condition used to control what scene or scenes an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> in. This is used to show an object in some scenes and hide it in others."
    _iid_ = GUID('{84CBF48F-1672-460E-86FD-9AFDA647BCCA}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsSceneDisplayConditionFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a default scene display condition...')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSceneDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSceneDisplayConditionFactory implementation
##class IAgStkGraphicsSceneDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default scene display condition...'
##        #return ppRetVal
##

IAgStkGraphicsTimeIntervalDisplayCondition._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the minimum time of the inclusive time interval.')], HRESULT, 'MinimumTime',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the minimum time of the inclusive time interval.')], HRESULT, 'MinimumTime',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the maximum time of the inclusive time interval.')], HRESULT, 'MaximumTime',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the maximum time of the inclusive time interval.')], HRESULT, 'MaximumTime',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTimeIntervalDisplayCondition implementation
##class IAgStkGraphicsTimeIntervalDisplayCondition_Impl(object):
##    def _get(self):
##        'Gets or sets the minimum time of the inclusive time interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the minimum time of the inclusive time interval.'
##    MinimumTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the maximum time of the inclusive time interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the maximum time of the inclusive time interval.'
##    MaximumTime = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsSequenceFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSequenceFilterFactory'
    _iid_ = GUID('{4AC9B3DC-C2AB-4AF8-83ED-44AEEC3CCC18}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsSequenceFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Applies a sequence of filters to the source raster in the order in which they were added. When continue on failure is set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied.'
    _iid_ = GUID('{72E2B4CB-2BE3-418E-B0C8-69F33164E475}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsSequenceFilterFactory._methods_ = [
    COMMETHOD([dispid(23501), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSequenceFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSequenceFilterFactory implementation
##class _IAgStkGraphicsSequenceFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##

IAgStkGraphicsAGIProcessedTerrainOverlay._methods_ = [
]
################################################################
## code template for IAgStkGraphicsAGIProcessedTerrainOverlay implementation
##class IAgStkGraphicsAGIProcessedTerrainOverlay_Impl(object):

class _IAgStkGraphicsCompositeDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsCompositeDisplayCondition'
    _iid_ = GUID('{A82EA570-430C-4B77-96DE-EE6622F29368}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgEStkGraphicsBinaryLogicOperation'
eStkGraphicsBinaryLogicOperationAnd = 0
eStkGraphicsBinaryLogicOperationOr = 1
AgEStkGraphicsBinaryLogicOperation = c_int # enum
_IAgStkGraphicsCompositeDisplayCondition._methods_ = [
    COMMETHOD([dispid(1), helpstring('Gets the number of display conditions in the composite.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3202), helpstring('Gets the number of display conditions for which memory has been allocated. This will always be greater or equal to count.'), 'propget'], HRESULT, 'Capacity',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3203), helpstring('Gets or sets the binary logic operation applied to all display conditions in the composite when the composite is evaluated. To combine logical and and or operations in the same expression, create composites containing composites.'), 'propget'], HRESULT, 'LogicOperation',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsBinaryLogicOperation), 'pRetVal' )),
    COMMETHOD([dispid(3203), helpstring('Gets or sets the binary logic operation applied to all display conditions in the composite when the composite is evaluated. To combine logical and and or operations in the same expression, create composites containing composites.'), 'propput'], HRESULT, 'LogicOperation',
              ( ['in'], AgEStkGraphicsBinaryLogicOperation, 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns the condition at the given zero-based index.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns an enumerator that iterates through the collection.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([dispid(3206), helpstring('Requests enough memory for the composite to contain at least count display conditions. count will not be affected but capacity may be.')], HRESULT, 'Reserve',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD([dispid(3207), helpstring('Adds a display condition to the end of the composite.')], HRESULT, 'AddWithNegate',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'DisplayCondition' ),
              ( ['in'], VARIANT_BOOL, 'Negate' )),
    COMMETHOD([dispid(3208), helpstring('Adds a display condition to the end of the composite.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'DisplayCondition' )),
    COMMETHOD([dispid(3209), helpstring('Inserts a display condition at the given zero-based index, shifting existing display conditions.')], HRESULT, 'InsertWithNegate',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'DisplayCondition' ),
              ( ['in'], VARIANT_BOOL, 'Negate' )),
    COMMETHOD([dispid(3210), helpstring('Inserts a display condition at the given zero-based index, shifting existing display conditions.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'DisplayCondition' )),
    COMMETHOD([dispid(3211), helpstring('Removes a display condition from the composite.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'DisplayCondition' )),
    COMMETHOD([dispid(3212), helpstring('Removes the display condition at the given zero-based index, shifting existing display conditions.')], HRESULT, 'RemoveAt',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([dispid(3213), helpstring('Removes all display conditions from the composite.')], HRESULT, 'Clear'),
    COMMETHOD([dispid(3214), helpstring('Determines if a logical not operation is applied to a display condition in the composite.')], HRESULT, 'GetNegate',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'DisplayCondition' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(3215), helpstring('Sets if a logical not operation is applied to a display condition in the composite when the composite is evaluated.')], HRESULT, 'SetNegate',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'DisplayCondition' ),
              ( ['in'], VARIANT_BOOL, 'Negate' )),
    COMMETHOD([dispid(3216), helpstring('Determines if a logical not operation is applied to a display condition in the composite.')], HRESULT, 'GetNegateAt',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(3217), helpstring('Sets if a logical not operation is applied to a display condition in the composite when the composite is evaluated.')], HRESULT, 'SetNegateAt',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT_BOOL, 'Negate' )),
]
################################################################
## code template for _IAgStkGraphicsCompositeDisplayCondition implementation
##class _IAgStkGraphicsCompositeDisplayCondition_Impl(object):
##    @property
##    def Count(self):
##        'Gets the number of display conditions in the composite.'
##        #return pRetVal
##
##    @property
##    def Capacity(self):
##        'Gets the number of display conditions for which memory has been allocated. This will always be greater or equal to count.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the binary logic operation applied to all display conditions in the composite when the composite is evaluated. To combine logical and and or operations in the same expression, create composites containing composites.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the binary logic operation applied to all display conditions in the composite when the composite is evaluated. To combine logical and and or operations in the same expression, create composites containing composites.'
##    LogicOperation = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Item(self, Index):
##        'Returns the condition at the given zero-based index.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns an enumerator that iterates through the collection.'
##        #return ppRetVal
##
##    def Reserve(self, Count):
##        'Requests enough memory for the composite to contain at least count display conditions. count will not be affected but capacity may be.'
##        #return 
##
##    def AddWithNegate(self, DisplayCondition, Negate):
##        'Adds a display condition to the end of the composite.'
##        #return 
##
##    def Add(self, DisplayCondition):
##        'Adds a display condition to the end of the composite.'
##        #return 
##
##    def InsertWithNegate(self, Index, DisplayCondition, Negate):
##        'Inserts a display condition at the given zero-based index, shifting existing display conditions.'
##        #return 
##
##    def Insert(self, Index, DisplayCondition):
##        'Inserts a display condition at the given zero-based index, shifting existing display conditions.'
##        #return 
##
##    def Remove(self, DisplayCondition):
##        'Removes a display condition from the composite.'
##        #return 
##
##    def RemoveAt(self, Index):
##        'Removes the display condition at the given zero-based index, shifting existing display conditions.'
##        #return 
##
##    def Clear(self):
##        'Removes all display conditions from the composite.'
##        #return 
##
##    def GetNegate(self, DisplayCondition):
##        'Determines if a logical not operation is applied to a display condition in the composite.'
##        #return pRetVal
##
##    def SetNegate(self, DisplayCondition, Negate):
##        'Sets if a logical not operation is applied to a display condition in the composite when the composite is evaluated.'
##        #return 
##
##    def GetNegateAt(self, Index):
##        'Determines if a logical not operation is applied to a display condition in the composite.'
##        #return pRetVal
##
##    def SetNegateAt(self, Index, Negate):
##        'Sets if a logical not operation is applied to a display condition in the composite when the composite is evaluated.'
##        #return 
##

class _IAgStkGraphicsBlurFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsBlurFilter'
    _iid_ = GUID('{DB9A80CB-9FBC-400F-A82F-6E5972DA0151}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsBlurFilter._methods_ = [
    COMMETHOD([dispid(20501), helpstring('Gets or sets the divisor for the result of the convolution kernel operation.'), 'propget'], HRESULT, 'Divisor',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(20501), helpstring('Gets or sets the divisor for the result of the convolution kernel operation.'), 'propput'], HRESULT, 'Divisor',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(20502), helpstring('Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'), 'propget'], HRESULT, 'Offset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(20502), helpstring('Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'), 'propput'], HRESULT, 'Offset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(20503), helpstring('Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'), 'propget'], HRESULT, 'Kernel',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(20503), helpstring('Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'), 'propput'], HRESULT, 'Kernel',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(20601), helpstring('Gets or sets the method used to blur the source raster.'), 'propget'], HRESULT, 'Method',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsBlurMethod), 'pRetVal' )),
    COMMETHOD([dispid(20601), helpstring('Gets or sets the method used to blur the source raster.'), 'propput'], HRESULT, 'Method',
              ( ['in'], AgEStkGraphicsBlurMethod, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsBlurFilter implementation
##class _IAgStkGraphicsBlurFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the divisor for the result of the convolution kernel operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the divisor for the result of the convolution kernel operation.'
##    Divisor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'
##    Offset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'
##    Kernel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the method used to blur the source raster.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the method used to blur the source raster.'
##    Method = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsPathPointCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPathPointCollection'
    _iid_ = GUID('{F36BC404-1165-4DA0-8A1F-33EC8E33F94B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsPathPointCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('A total number of elements in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns a path point at the specified position in the collection.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsPathPointCollection implementation
##class _IAgStkGraphicsPathPointCollection_Impl(object):
##    @property
##    def Count(self):
##        'A total number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Returns a path point at the specified position in the collection.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return ppRetVal
##

IAgStkGraphicsModelArticulationCollection._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the number of articulations in the collection.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the articulation at the given index. The index is zero-based.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelArticulation)), 'ppRetVal' )),
    COMMETHOD([helpstring('Gets an articulation by name.')], HRESULT, 'GetItemByString',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelArticulation)), 'ppRetVal' )),
    COMMETHOD([helpstring('Gets an articulation by name.')], HRESULT, 'GetByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelArticulation)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns true if the collection contains the articulation.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the enumerator for this collection.')], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsModelArticulationCollection implementation
##class IAgStkGraphicsModelArticulationCollection_Impl(object):
##    @property
##    def Count(self):
##        'Gets the number of articulations in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Gets the articulation at the given index. The index is zero-based.'
##        #return ppRetVal
##
##    def GetItemByString(self, Name):
##        'Gets an articulation by name.'
##        #return ppRetVal
##
##    def GetByName(self, Name):
##        'Gets an articulation by name.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Returns true if the collection contains the articulation.'
##        #return pRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns the enumerator for this collection.'
##        #return ppRetVal
##

class _IAgStkGraphicsProjectedRasterOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsProjectedRasterOverlayFactory'
    _iid_ = GUID('{E1B209FC-0710-47C2-A8B2-7508E2B2ADC1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsProjectedRasterOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A globe image overlay which projects a raster onto the terrain or surface of the central body. You can also enable projection onto models by setting projected raster model projection to true for a Scene...'
    _iid_ = GUID('{7CB212ED-4EF5-43C7-BBC3-F2EBD4DFD143}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsProjectedRasterOverlayFactory._methods_ = [
    COMMETHOD([dispid(11101), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' ),
              ( ['in'], POINTER(IAgStkGraphicsProjection), 'Projection' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjectedRasterOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(11102), helpstring('Gets whether or not the video card supports the projected raster overlay.'), 'propget'], HRESULT, 'Supported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsProjectedRasterOverlayFactory implementation
##class _IAgStkGraphicsProjectedRasterOverlayFactory_Impl(object):
##    def Initialize(self, Raster, Projection):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    @property
##    def Supported(self):
##        'Gets whether or not the video card supports the projected raster overlay.'
##        #return pRetVal
##

class _IAgStkGraphicsCompositeDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsCompositeDisplayConditionFactory'
    _iid_ = GUID('{201C8822-14DE-4274-BC56-E3B47948439F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsCompositeDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A composite of display conditions combined using a binary logic operation. For example, several time interval display condition objects can be added to a composite...'
    _iid_ = GUID('{AFE0E66F-0FC5-46AD-801F-22670CFE99A9}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsCompositeDisplayConditionFactory._methods_ = [
    COMMETHOD([dispid(6901), helpstring('Initializes an empty composite display condition.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCompositeDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsCompositeDisplayConditionFactory implementation
##class _IAgStkGraphicsCompositeDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        'Initializes an empty composite display condition.'
##        #return ppRetVal
##

class _IAgStkGraphicsGlobeImageOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGlobeImageOverlay'
    _iid_ = GUID('{1FE45578-E11B-40A0-93AA-C40485AA067A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsGlobeImageOverlay._methods_ = [
    COMMETHOD([dispid(16801), helpstring("Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16802), helpstring('Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'), 'propget'], HRESULT, 'Extent',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16803), helpstring('Gets the globe overlay role of the globe overlay.'), 'propget'], HRESULT, 'Role',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsGlobeOverlayRole), 'pRetVal' )),
    COMMETHOD([dispid(16804), helpstring('Gets the absolute URI specifying the location of the globe overlay.'), 'propget'], HRESULT, 'UriAsString',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16805), helpstring('Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(16701), helpstring('Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16701), helpstring('Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16703), helpstring("Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."), 'propget'], HRESULT, 'UseAltitudeBasedTranslucency',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16703), helpstring("Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."), 'propput'], HRESULT, 'UseAltitudeBasedTranslucency',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(16704), helpstring("Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyLowerTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16704), helpstring("Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyLowerTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16705), helpstring("Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyUpperTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16705), helpstring("Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyUpperTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16706), helpstring("Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyLowerAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16706), helpstring("Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyLowerAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16707), helpstring("Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyUpperAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16707), helpstring("Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyUpperAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16702), helpstring('Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'), 'propget'], HRESULT, 'MoreThanOneImageGlobeOverlaySupported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGlobeImageOverlay implementation
##class _IAgStkGraphicsGlobeImageOverlay_Impl(object):
##    @property
##    def CentralBody(self):
##        "Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."
##        #return pRetVal
##
##    @property
##    def Extent(self):
##        'Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'
##        #return ppRetVal
##
##    @property
##    def Role(self):
##        'Gets the globe overlay role of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def UriAsString(self):
##        'Gets the absolute URI specifying the location of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."
##    UseAltitudeBasedTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."
##    AltitudeBasedTranslucencyLowerTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."
##    AltitudeBasedTranslucencyUpperTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##    AltitudeBasedTranslucencyLowerAltitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##    AltitudeBasedTranslucencyUpperAltitude = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MoreThanOneImageGlobeOverlaySupported(self):
##        'Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'
##        #return pRetVal
##

class IAgStkGraphicsAGIRoamImageGlobeOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A globe image overlay for handling ROAM (TXM/TXB) files.'
    _iid_ = GUID('{709D626F-1B45-448D-AD5C-1FF3CB17410E}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsAGIRoamImageGlobeOverlayFactory._methods_ = [
    COMMETHOD([helpstring('Initializes an agi roam image globe overlay with the provided values.')], HRESULT, 'InitializeWithString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAGIRoamImageGlobeOverlay)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsAGIRoamImageGlobeOverlayFactory implementation
##class IAgStkGraphicsAGIRoamImageGlobeOverlayFactory_Impl(object):
##    def InitializeWithString(self, Uri):
##        'Initializes an agi roam image globe overlay with the provided values.'
##        #return ppRetVal
##

IAgStkGraphicsBrightnessFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the brightness adjustment value for the filter. The value must be between -1 and 1, corresponding to least bright to most bright.')], HRESULT, 'Adjustment',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the brightness adjustment value for the filter. The value must be between -1 and 1, corresponding to least bright to most bright.')], HRESULT, 'Adjustment',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsBrightnessFilter implementation
##class IAgStkGraphicsBrightnessFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the brightness adjustment value for the filter. The value must be between -1 and 1, corresponding to least bright to most bright.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the brightness adjustment value for the filter. The value must be between -1 and 1, corresponding to least bright to most bright.'
##    Adjustment = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsSurfaceMeshPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSurfaceMeshPrimitive'
    _iid_ = GUID('{DC5A468A-3F04-4ECD-96C3-173F92CE90B3}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsSurfaceMeshPrimitive._methods_ = [
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propget'], HRESULT, 'ReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propput'], HRESULT, 'ReferenceFrame',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propput'], HRESULT, 'BoundingSphere',
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'ppRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propget'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propput'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(5501), helpstring('Gets or sets the texture applied to this primitive when rendering.'), 'propget'], HRESULT, 'Texture',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRendererTexture2D)), 'ppRetVal' )),
    COMMETHOD([dispid(5501), helpstring('Gets or sets the texture applied to this primitive when rendering.'), 'propput'], HRESULT, 'Texture',
              ( ['in'], POINTER(IAgStkGraphicsRendererTexture2D), 'ppRetVal' )),
    COMMETHOD([dispid(5502), helpstring('Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'), 'propget'], HRESULT, 'Wireframe',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5502), helpstring('Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'), 'propput'], HRESULT, 'Wireframe',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(5503), helpstring('Gets the orientation of front-facing triangles in the mesh.'), 'propget'], HRESULT, 'TriangleWindingOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsWindingOrder), 'pRetVal' )),
    COMMETHOD([dispid(5504), helpstring("Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."), 'propget'], HRESULT, 'SetHint',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSetHint), 'pRetVal' )),
    COMMETHOD([dispid(5505), helpstring('Gets the rendering method used to render the mesh.'), 'propget'], HRESULT, 'RenderingMethod',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSurfaceMeshRenderingMethod), 'pRetVal' )),
    COMMETHOD([dispid(5506), helpstring('Gets or sets the filter used when a texture is applied to this primitive.'), 'propget'], HRESULT, 'TextureFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([dispid(5506), helpstring('Gets or sets the filter used when a texture is applied to this primitive.'), 'propput'], HRESULT, 'TextureFilter',
              ( ['in'], POINTER(IAgStkGraphicsTextureFilter2D), 'ppRetVal' )),
    COMMETHOD([dispid(5507), helpstring('Gets or sets the matrix used to transform texture coordinates when a texture is applied to this primitive.'), 'propget'], HRESULT, 'TextureMatrix',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureMatrix)), 'ppRetVal' )),
    COMMETHOD([dispid(5507), helpstring('Gets or sets the matrix used to transform texture coordinates when a texture is applied to this primitive.'), 'propput'], HRESULT, 'TextureMatrix',
              ( ['in'], POINTER(IAgStkGraphicsTextureMatrix), 'ppRetVal' )),
    COMMETHOD([dispid(5508), helpstring('Gets or set the boolean that defines if the color obtained from texture coordinates beyond the texture border should be considered transparent or not. This is typically used in conjunction with the a texture matrix.'), 'propget'], HRESULT, 'TransparentTextureBorder',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5508), helpstring('Gets or set the boolean that defines if the color obtained from texture coordinates beyond the texture border should be considered transparent or not. This is typically used in conjunction with the a texture matrix.'), 'propput'], HRESULT, 'TransparentTextureBorder',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(5509), helpstring("Defines the surface mesh using the specified surfaceTriangulator. The mesh is rendered in the primitive's reference frame.")], HRESULT, 'Set',
              ( ['in'], POINTER(IAgStkGraphicsSurfaceTriangulatorResult), 'SurfaceTriangulator' )),
    COMMETHOD([dispid(5510), helpstring("Defines the surface mesh using the specified surfaceTriangulator. The mesh is rendered in the primitive's reference frame.")], HRESULT, 'SetWithoutTexturing',
              ( ['in'], POINTER(IAgStkGraphicsSurfaceTriangulatorResult), 'SurfaceTriangulator' )),
    COMMETHOD([dispid(5511), helpstring('Determines whether or not the video card supports the surface mesh primitive with the given renderingMethod.')], HRESULT, 'Supported',
              ( ['in'], AgEStkGraphicsSurfaceMeshRenderingMethod, 'RenderingMethod' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5512), helpstring('Determines whether or not the video card supports the surface mesh primitive. This is equivalent to calling Supported with automatic.')], HRESULT, 'SupportedWithDefaultRenderingMethod',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSurfaceMeshPrimitive implementation
##class _IAgStkGraphicsSurfaceMeshPrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##    ReferenceFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##    BoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##    AutomaticallyComputeBoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's color."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the texture applied to this primitive when rendering.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the texture applied to this primitive when rendering.'
##    Texture = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'
##    Wireframe = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def TriangleWindingOrder(self):
##        'Gets the orientation of front-facing triangles in the mesh.'
##        #return pRetVal
##
##    @property
##    def SetHint(self):
##        "Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."
##        #return pRetVal
##
##    @property
##    def RenderingMethod(self):
##        'Gets the rendering method used to render the mesh.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the filter used when a texture is applied to this primitive.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the filter used when a texture is applied to this primitive.'
##    TextureFilter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the matrix used to transform texture coordinates when a texture is applied to this primitive.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the matrix used to transform texture coordinates when a texture is applied to this primitive.'
##    TextureMatrix = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or set the boolean that defines if the color obtained from texture coordinates beyond the texture border should be considered transparent or not. This is typically used in conjunction with the a texture matrix.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or set the boolean that defines if the color obtained from texture coordinates beyond the texture border should be considered transparent or not. This is typically used in conjunction with the a texture matrix.'
##    TransparentTextureBorder = property(_get, _set, doc = _set.__doc__)
##
##    def Set(self, SurfaceTriangulator):
##        "Defines the surface mesh using the specified surfaceTriangulator. The mesh is rendered in the primitive's reference frame."
##        #return 
##
##    def SetWithoutTexturing(self, SurfaceTriangulator):
##        "Defines the surface mesh using the specified surfaceTriangulator. The mesh is rendered in the primitive's reference frame."
##        #return 
##
##    def Supported(self, RenderingMethod):
##        'Determines whether or not the video card supports the surface mesh primitive with the given renderingMethod.'
##        #return pRetVal
##
##    def SupportedWithDefaultRenderingMethod(self):
##        'Determines whether or not the video card supports the surface mesh primitive. This is equivalent to calling Supported with automatic.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsCompositePrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsCompositePrimitiveFactory'
    _iid_ = GUID('{31AC78A0-EB1B-4738-BE5F-BF392F2C418E}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsCompositePrimitiveFactory._methods_ = [
    COMMETHOD([dispid(7001), helpstring('Initializes a default composite primitive.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCompositePrimitive)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsCompositePrimitiveFactory implementation
##class _IAgStkGraphicsCompositePrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default composite primitive.'
##        #return ppRetVal
##

IAgStkGraphicsSceneDisplayCondition._methods_ = [
    COMMETHOD([helpstring("Allows or disallows <topic name='Glossary' anchor='Render'>rendering</topic> for in a particular scene for.")], HRESULT, 'SetDisplayInScene',
              ( ['in'], POINTER(IAgStkGraphicsScene), 'Scene' ),
              ( ['in'], VARIANT_BOOL, 'On' )),
    COMMETHOD([helpstring("Determines whether the display condition allows rendering <topic name='Glossary' anchor='Render'>rendering</topic> in the given scene.")], HRESULT, 'GetDisplayInScene',
              ( ['in'], POINTER(IAgStkGraphicsScene), 'Scene' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring("Allows <topic name='Glossary' anchor='Render'>rendering</topic> only in the given scene. The display condition will not allow rendering in other scenes, including newly created ones.")], HRESULT, 'DisplayOnlyInScene',
              ( ['in'], POINTER(IAgStkGraphicsScene), 'Scene' )),
]
################################################################
## code template for IAgStkGraphicsSceneDisplayCondition implementation
##class IAgStkGraphicsSceneDisplayCondition_Impl(object):
##    def SetDisplayInScene(self, Scene, On):
##        "Allows or disallows <topic name='Glossary' anchor='Render'>rendering</topic> for in a particular scene for."
##        #return 
##
##    def GetDisplayInScene(self, Scene):
##        "Determines whether the display condition allows rendering <topic name='Glossary' anchor='Render'>rendering</topic> in the given scene."
##        #return pRetVal
##
##    def DisplayOnlyInScene(self, Scene):
##        "Allows <topic name='Glossary' anchor='Render'>rendering</topic> only in the given scene. The display condition will not allow rendering in other scenes, including newly created ones."
##        #return 
##

_IAgStkGraphicsProjectionFactory._methods_ = [
    COMMETHOD([dispid(11201), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjection)), 'ppRetVal' )),
    COMMETHOD([dispid(11202), helpstring('Initializes a new instance.')], HRESULT, 'InitializeWithData',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation), 'Orientation' ),
              ( ['in'], c_double, 'FieldOfViewHorizontal' ),
              ( ['in'], c_double, 'FieldOfViewVertical' ),
              ( ['in'], c_double, 'NearPlane' ),
              ( ['in'], c_double, 'FarPlane' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjection)), 'ppRetVal' )),
    COMMETHOD([dispid(11203), helpstring('Initializes a new instance from another projection.')], HRESULT, 'InitializeFromProjection',
              ( ['in'], POINTER(IAgStkGraphicsProjection), 'Projection' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjection)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsProjectionFactory implementation
##class _IAgStkGraphicsProjectionFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithData(self, Position, Orientation, FieldOfViewHorizontal, FieldOfViewVertical, NearPlane, FarPlane):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeFromProjection(self, Projection):
##        'Initializes a new instance from another projection.'
##        #return ppRetVal
##

class _IAgStkGraphicsScreenOverlayCollectionBase(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsScreenOverlayCollectionBase'
    _iid_ = GUID('{6CE24480-D3BF-43B6-BCCF-BB66CB99E9D5}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsScreenOverlayCollectionBase._methods_ = [
    COMMETHOD([dispid(1), helpstring('Gets the number of screen overlays in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9502), helpstring('Gets a value indicating whether the collection is read-only.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Gets the overlay at the specified index.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns an enumerator that iterates through the collection.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([dispid(9505), helpstring('Determines whether the collection contains a specific overlay.')], HRESULT, 'Contains',
              ( ['in'], POINTER(IAgStkGraphicsScreenOverlay), 'Item' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9506), helpstring('Removes the first occurrence of a specific overlay from the collection.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAgStkGraphicsScreenOverlay), 'Item' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9508), helpstring('Removes all overlays from the collection.')], HRESULT, 'Clear'),
    COMMETHOD([dispid(9509), helpstring('Adds an overlay to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAgStkGraphicsScreenOverlay), 'Item' )),
]
################################################################
## code template for _IAgStkGraphicsScreenOverlayCollectionBase implementation
##class _IAgStkGraphicsScreenOverlayCollectionBase_Impl(object):
##    @property
##    def Count(self):
##        'Gets the number of screen overlays in the collection.'
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Gets a value indicating whether the collection is read-only.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Gets the overlay at the specified index.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns an enumerator that iterates through the collection.'
##        #return ppRetVal
##
##    def Contains(self, Item):
##        'Determines whether the collection contains a specific overlay.'
##        #return pRetVal
##
##    def Remove(self, Item):
##        'Removes the first occurrence of a specific overlay from the collection.'
##        #return pRetVal
##
##    def Clear(self):
##        'Removes all overlays from the collection.'
##        #return 
##
##    def Add(self, Item):
##        'Adds an overlay to the collection.'
##        #return 
##

class _IAgStkGraphicsTextureMatrix(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTextureMatrix'
    _iid_ = GUID('{070A7541-641C-4321-900B-9E65FEDFF00D}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsTextureMatrix._methods_ = [
    COMMETHOD([dispid(5801), helpstring('Gets the element in the first row, first column.'), 'propget'], HRESULT, 'M11',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5802), helpstring('Gets the element in the first row, second column.'), 'propget'], HRESULT, 'M12',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5803), helpstring('Gets the element in the first row, third column.'), 'propget'], HRESULT, 'M13',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5804), helpstring('Gets the element in the first row, fourth column.'), 'propget'], HRESULT, 'M14',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5805), helpstring('Gets the element in the second row, first column.'), 'propget'], HRESULT, 'M21',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5806), helpstring('Gets the element in the second row, second column.'), 'propget'], HRESULT, 'M22',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5807), helpstring('Gets the element in the second row, third column.'), 'propget'], HRESULT, 'M23',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5808), helpstring('Gets the element in the second row, fourth column.'), 'propget'], HRESULT, 'M24',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5809), helpstring('Gets the element in the third row, first column.'), 'propget'], HRESULT, 'M31',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5810), helpstring('Gets the element in the third row, second column.'), 'propget'], HRESULT, 'M32',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5811), helpstring('Gets the element in the third row, third column.'), 'propget'], HRESULT, 'M33',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5812), helpstring('Gets the element in the third row, fourth column.'), 'propget'], HRESULT, 'M34',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5813), helpstring('Gets the element in the fourth row, first column.'), 'propget'], HRESULT, 'M41',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5814), helpstring('Gets the element in the fourth row, second column.'), 'propget'], HRESULT, 'M42',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5815), helpstring('Gets the element in the fourth row, third column.'), 'propget'], HRESULT, 'M43',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5816), helpstring('Gets the element in the fourth row, fourth column.'), 'propget'], HRESULT, 'M44',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTextureMatrix implementation
##class _IAgStkGraphicsTextureMatrix_Impl(object):
##    @property
##    def M11(self):
##        'Gets the element in the first row, first column.'
##        #return pRetVal
##
##    @property
##    def M12(self):
##        'Gets the element in the first row, second column.'
##        #return pRetVal
##
##    @property
##    def M13(self):
##        'Gets the element in the first row, third column.'
##        #return pRetVal
##
##    @property
##    def M14(self):
##        'Gets the element in the first row, fourth column.'
##        #return pRetVal
##
##    @property
##    def M21(self):
##        'Gets the element in the second row, first column.'
##        #return pRetVal
##
##    @property
##    def M22(self):
##        'Gets the element in the second row, second column.'
##        #return pRetVal
##
##    @property
##    def M23(self):
##        'Gets the element in the second row, third column.'
##        #return pRetVal
##
##    @property
##    def M24(self):
##        'Gets the element in the second row, fourth column.'
##        #return pRetVal
##
##    @property
##    def M31(self):
##        'Gets the element in the third row, first column.'
##        #return pRetVal
##
##    @property
##    def M32(self):
##        'Gets the element in the third row, second column.'
##        #return pRetVal
##
##    @property
##    def M33(self):
##        'Gets the element in the third row, third column.'
##        #return pRetVal
##
##    @property
##    def M34(self):
##        'Gets the element in the third row, fourth column.'
##        #return pRetVal
##
##    @property
##    def M41(self):
##        'Gets the element in the fourth row, first column.'
##        #return pRetVal
##
##    @property
##    def M42(self):
##        'Gets the element in the fourth row, second column.'
##        #return pRetVal
##
##    @property
##    def M43(self):
##        'Gets the element in the fourth row, third column.'
##        #return pRetVal
##
##    @property
##    def M44(self):
##        'Gets the element in the fourth row, fourth column.'
##        #return pRetVal
##

class _IAgStkGraphicsSharpenFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSharpenFilterFactory'
    _iid_ = GUID('{C5315311-2241-4533-A81F-290B04488C4D}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsSharpenFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Applies a convolution filter to increase the sharpness of the source raster.'
    _iid_ = GUID('{927E244D-ACE0-4387-8E3E-6F14BFE230EB}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsSharpenFilterFactory._methods_ = [
    COMMETHOD([dispid(23601), helpstring('Initialize a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSharpenFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(23602), helpstring('Initialize a new instance with the specified sharpen method.')], HRESULT, 'InitializeWithMethod',
              ( ['in'], AgEStkGraphicsSharpenMethod, 'Method' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSharpenFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSharpenFilterFactory implementation
##class _IAgStkGraphicsSharpenFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initialize a new instance.'
##        #return ppRetVal
##
##    def InitializeWithMethod(self, Method):
##        'Initialize a new instance with the specified sharpen method.'
##        #return ppRetVal
##

IAgStkGraphicsModelArticulation._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the name of the articulation.')], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the number of transformations in the collection.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the transformation at the given index. The index is zero-based.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelTransformation)), 'ppRetVal' )),
    COMMETHOD([helpstring('Gets a transformation by name.')], HRESULT, 'GetItemByString',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelTransformation)), 'ppRetVal' )),
    COMMETHOD([helpstring('Gets a transformation by name.')], HRESULT, 'GetByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelTransformation)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns true if the collection contains the transformation.')], HRESULT, 'Contains',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the enumerator for this collection.')], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsModelArticulation implementation
##class IAgStkGraphicsModelArticulation_Impl(object):
##    @property
##    def Name(self):
##        'Gets the name of the articulation.'
##        #return pRetVal
##
##    @property
##    def Count(self):
##        'Gets the number of transformations in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Gets the transformation at the given index. The index is zero-based.'
##        #return ppRetVal
##
##    def GetItemByString(self, Name):
##        'Gets a transformation by name.'
##        #return ppRetVal
##
##    def GetByName(self, Name):
##        'Gets a transformation by name.'
##        #return ppRetVal
##
##    def Contains(self, Name):
##        'Returns true if the collection contains the transformation.'
##        #return pRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns the enumerator for this collection.'
##        #return ppRetVal
##

class _IAgStkGraphicsBrightnessFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsBrightnessFilter'
    _iid_ = GUID('{93AAA744-5244-4C5E-934B-80A55E03820E}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsBrightnessFilter._methods_ = [
    COMMETHOD([dispid(20701), helpstring('Gets or sets the brightness adjustment value for the filter. The value must be between -1 and 1, corresponding to least bright to most bright.'), 'propget'], HRESULT, 'Adjustment',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(20701), helpstring('Gets or sets the brightness adjustment value for the filter. The value must be between -1 and 1, corresponding to least bright to most bright.'), 'propput'], HRESULT, 'Adjustment',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsBrightnessFilter implementation
##class _IAgStkGraphicsBrightnessFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the brightness adjustment value for the filter. The value must be between -1 and 1, corresponding to least bright to most bright.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the brightness adjustment value for the filter. The value must be between -1 and 1, corresponding to least bright to most bright.'
##    Adjustment = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsAGIRoamImageGlobeOverlay._methods_ = [
]
################################################################
## code template for IAgStkGraphicsAGIRoamImageGlobeOverlay implementation
##class IAgStkGraphicsAGIRoamImageGlobeOverlay_Impl(object):

class _IAgStkGraphicsSurfaceShapesResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSurfaceShapesResult'
    _iid_ = GUID('{7CCB711D-7EFA-4AE7-978A-3B6F97F49E0E}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsSurfaceShapesResult._methods_ = [
    COMMETHOD([dispid(2901), helpstring('Gets the positions of the computed shape. Three array elements (in the order x, y, z) constitute one position.'), 'propget'], HRESULT, 'Positions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(2902), helpstring('Gets the winding order of positions.'), 'propget'], HRESULT, 'PositionsWindingOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsWindingOrder), 'pRetVal' )),
    COMMETHOD([dispid(2903), helpstring('Gets the polyline type of positions.'), 'propget'], HRESULT, 'PolylineType',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPolylineType), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSurfaceShapesResult implementation
##class _IAgStkGraphicsSurfaceShapesResult_Impl(object):
##    @property
##    def Positions(self):
##        'Gets the positions of the computed shape. Three array elements (in the order x, y, z) constitute one position.'
##        #return ppRetVal
##
##    @property
##    def PositionsWindingOrder(self):
##        'Gets the winding order of positions.'
##        #return pRetVal
##
##    @property
##    def PolylineType(self):
##        'Gets the polyline type of positions.'
##        #return pRetVal
##

class _IAgStkGraphicsGraphicsFont(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGraphicsFont'
    _iid_ = GUID('{A1DA7576-4448-43B4-BEEF-86EECFDDEF15}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgEStkGraphicsFontStyle'
eStkGraphicsFontStyleRegular = 0
eStkGraphicsFontStyleBold = 1
eStkGraphicsFontStyleItalic = 2
eStkGraphicsFontStyleUnderline = 4
eStkGraphicsFontStyleStrikeout = 8
AgEStkGraphicsFontStyle = c_int # enum
_IAgStkGraphicsGraphicsFont._methods_ = [
    COMMETHOD([dispid(3901), helpstring('Gets the typeface name of the font.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(3902), helpstring('Gets the size of the font.'), 'propget'], HRESULT, 'Size',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3903), helpstring('Gets a value that indicates whether this font is bold.'), 'propget'], HRESULT, 'Bold',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(3904), helpstring('Gets a value that indicates whether this font is italic.'), 'propget'], HRESULT, 'Italic',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(3905), helpstring('Gets a value that indicates whether this font is underlined.'), 'propget'], HRESULT, 'Underline',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(3906), helpstring('Gets a value that indicates whether this font has a horizontal line through its characters.'), 'propget'], HRESULT, 'Strikeout',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(3907), helpstring('Gets a value that indicates whether this font has an outline around its characters.'), 'propget'], HRESULT, 'Outline',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(3908), helpstring('Gets the font style enumeration that contains the style for this font. This does not include the outline property.'), 'propget'], HRESULT, 'Style',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsFontStyle), 'pRetVal' )),
    COMMETHOD([dispid(3909), helpstring('Gets a value that indicates whether this font is antialiased.'), 'propget'], HRESULT, 'Antialias',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGraphicsFont implementation
##class _IAgStkGraphicsGraphicsFont_Impl(object):
##    @property
##    def Name(self):
##        'Gets the typeface name of the font.'
##        #return pRetVal
##
##    @property
##    def Size(self):
##        'Gets the size of the font.'
##        #return pRetVal
##
##    @property
##    def Bold(self):
##        'Gets a value that indicates whether this font is bold.'
##        #return pRetVal
##
##    @property
##    def Italic(self):
##        'Gets a value that indicates whether this font is italic.'
##        #return pRetVal
##
##    @property
##    def Underline(self):
##        'Gets a value that indicates whether this font is underlined.'
##        #return pRetVal
##
##    @property
##    def Strikeout(self):
##        'Gets a value that indicates whether this font has a horizontal line through its characters.'
##        #return pRetVal
##
##    @property
##    def Outline(self):
##        'Gets a value that indicates whether this font has an outline around its characters.'
##        #return pRetVal
##
##    @property
##    def Style(self):
##        'Gets the font style enumeration that contains the style for this font. This does not include the outline property.'
##        #return pRetVal
##
##    @property
##    def Antialias(self):
##        'Gets a value that indicates whether this font is antialiased.'
##        #return pRetVal
##

class AgStkGraphicsTextureFilter2DFactory(CoClass):
    'Create texture filters.'
    _reg_clsid_ = GUID('{EF66E104-263B-4B9A-BD8D-B443CE97AF95}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsTextureFilter2DFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTextureFilter2DFactory'
    _iid_ = GUID('{99BF5E5B-8D32-4ADE-80D4-F275D49BB79F}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsTextureFilter2DFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Creates texture filters.'
    _iid_ = GUID('{8E616D0F-4CF9-4DFD-B7FD-1295DD9131E5}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsTextureFilter2DFactory._com_interfaces_ = [_IAgStkGraphicsTextureFilter2DFactory, IAgStkGraphicsTextureFilter2DFactory]

class AgStkGraphicsAGICustomTerrainOverlay(CoClass):
    'A terrain overlay for handling AGI Cesium Terrain.'
    _reg_clsid_ = GUID('{424C29AE-4567-4130-9A8F-542229724218}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsAGICustomTerrainOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAGICustomTerrainOverlay'
    _iid_ = GUID('{E59DFD9D-FD0F-40E8-BD38-BC4EBDA8A548}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsAGICustomTerrainOverlay._com_interfaces_ = [_IAgStkGraphicsAGICustomTerrainOverlay, IAgStkGraphicsAGICustomTerrainOverlay, IAgStkGraphicsTerrainOverlay, IAgStkGraphicsGlobeOverlay]

class AgStkGraphicsRendererTexture2D(CoClass):
    'A 2D Texture. A texture represents an image that is ready for use by objects such as primitives and overlays. Textures typically reside in video memory.'
    _reg_clsid_ = GUID('{9AAA86B8-0E5E-4227-A556-36C99FAC404A}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsRendererTexture2D._com_interfaces_ = [_IAgStkGraphicsRendererTexture2D, IAgStkGraphicsRendererTexture2D]

class AgStkGraphicsAGIProcessedImageGlobeOverlay(CoClass):
    'A globe image overlay for handling AGI Processed Image (PDTTX) files.'
    _reg_clsid_ = GUID('{9982CF4C-2831-4816-8CB8-6FBB8AFB1B5A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsAGIProcessedImageGlobeOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAGIProcessedImageGlobeOverlay'
    _iid_ = GUID('{CEB79E66-6C40-4E67-9E93-288FC1B32D9C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsAGIProcessedImageGlobeOverlay._com_interfaces_ = [_IAgStkGraphicsAGIProcessedImageGlobeOverlay, IAgStkGraphicsAGIProcessedImageGlobeOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay]

class IAgStkGraphicsSceneManagerInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The static scene manager class provides global properties and functionality that apply to all scenes and thus affect the rendering of every globe control...'
    _iid_ = GUID('{DD3ADF22-21F0-4220-8F3F-BDA974157D48}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsPrimitiveManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The primitive manager contains spatial data structures used to efficiently render primitives. Once a primitive is constructed, it must be added to the primitive manager before it will be rendered.'
    _iid_ = GUID('{39006599-C2AC-4F46-A190-958D173714FC}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsScreenOverlayManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The top-level container for screen overlays. All child screen overlays that are added to this container are specified relative to the overall globe control.'
    _iid_ = GUID('{25BF4E85-98CE-48E3-9C15-F517115BC794}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsTexture2DFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A factory for creating texture 2d objects from various sources.'
    _iid_ = GUID('{455FD9A8-E787-4459-A613-E3367DCE25B8}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsGlobeOverlaySettings(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Settings used by globe overlay objects. These setting affect all scenes.'
    _iid_ = GUID('{2864D6DF-BBE2-42B7-9838-27D1F5FF5BE6}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsSceneCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A collection of scenes.'
    _iid_ = GUID('{AAC03F9E-8C23-4A8D-AD88-455DEB232F0B}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsSceneManagerInitializer._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the primitive manager, which is used to add primitives to your scenes.')], HRESULT, 'Primitives',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPrimitiveManager)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the screen overlay manager, which is used to add screen overlays to your scenes.')], HRESULT, 'ScreenOverlays',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayManager)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the texture 2d factory, which can be used to create textures from various sources.')], HRESULT, 'Textures',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTexture2DFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the globe overlay settings, which are used to set global settings for all globe overlays.')], HRESULT, 'GlobeOverlaySettings',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeOverlaySettings)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a read-only collection of scenes that are associated with the scene manager.')], HRESULT, 'Scenes',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSceneCollection)), 'ppRetVal' )),
    COMMETHOD([helpstring('Renders all scenes within an application. To render a specific scene, use the Render method.')], HRESULT, 'Render'),
]
################################################################
## code template for IAgStkGraphicsSceneManagerInitializer implementation
##class IAgStkGraphicsSceneManagerInitializer_Impl(object):
##    @property
##    def Primitives(self):
##        'Gets the primitive manager, which is used to add primitives to your scenes.'
##        #return ppRetVal
##
##    @property
##    def ScreenOverlays(self):
##        'Gets the screen overlay manager, which is used to add screen overlays to your scenes.'
##        #return ppRetVal
##
##    @property
##    def Textures(self):
##        'Gets the texture 2d factory, which can be used to create textures from various sources.'
##        #return ppRetVal
##
##    @property
##    def GlobeOverlaySettings(self):
##        'Gets the globe overlay settings, which are used to set global settings for all globe overlays.'
##        #return ppRetVal
##
##    @property
##    def Scenes(self):
##        'Gets a read-only collection of scenes that are associated with the scene manager.'
##        #return ppRetVal
##
##    def Render(self):
##        'Renders all scenes within an application. To render a specific scene, use the Render method.'
##        #return 
##

class AgStkGraphicsRendererTextureTemplate2D(CoClass):
    'Template object containing attributes required to create a 2D texture.'
    _reg_clsid_ = GUID('{286E02A9-3815-417C-902A-E04E7A0D787D}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsRendererTextureTemplate2D._com_interfaces_ = [_IAgStkGraphicsRendererTextureTemplate2D, IAgStkGraphicsRendererTextureTemplate2D]

class AgStkGraphicsAGIProcessedTerrainOverlay(CoClass):
    'A terrain overlay for handling AGI Processed Terrain (PDTT) files.'
    _reg_clsid_ = GUID('{7429DEA7-1DFD-409B-B60C-FAE252F90C80}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsAGIProcessedTerrainOverlay._com_interfaces_ = [_IAgStkGraphicsAGIProcessedTerrainOverlay, IAgStkGraphicsAGIProcessedTerrainOverlay, IAgStkGraphicsTerrainOverlay, IAgStkGraphicsGlobeOverlay]

class _IAgStkGraphicsSceneDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSceneDisplayConditionFactory'
    _iid_ = GUID('{BF23EB15-96B5-4AC3-B342-6C5A17FD5B71}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsSceneDisplayConditionFactory._methods_ = [
    COMMETHOD([dispid(12001), helpstring('Initializes a default scene display condition...')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSceneDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSceneDisplayConditionFactory implementation
##class _IAgStkGraphicsSceneDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default scene display condition...'
##        #return ppRetVal
##

IAgStkGraphicsModelTransformation._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the current value of the transformation. The current value of the transformation will be reflected in the geometry of the model primitive that it is associated with.')], HRESULT, 'CurrentValue',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the current value of the transformation. The current value of the transformation will be reflected in the geometry of the model primitive that it is associated with.')], HRESULT, 'CurrentValue',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the minimum value of the transformation.')], HRESULT, 'MinimumValue',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the maximum value of the transformation.')], HRESULT, 'MaximumValue',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the default value of the transformation. The current value property of the transformation will have this value when the model primitive is initialized.')], HRESULT, 'DefaultValue',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the value range of the transformation. Equivalent to the difference of the maximum value and minimum value properties.')], HRESULT, 'Range',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the name of the transformation.')], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the model transformation type associated with the transformation.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsModelTransformationType), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsModelTransformation implementation
##class IAgStkGraphicsModelTransformation_Impl(object):
##    def _get(self):
##        'Gets or sets the current value of the transformation. The current value of the transformation will be reflected in the geometry of the model primitive that it is associated with.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the current value of the transformation. The current value of the transformation will be reflected in the geometry of the model primitive that it is associated with.'
##    CurrentValue = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumValue(self):
##        'Gets the minimum value of the transformation.'
##        #return pRetVal
##
##    @property
##    def MaximumValue(self):
##        'Gets the maximum value of the transformation.'
##        #return pRetVal
##
##    @property
##    def DefaultValue(self):
##        'Gets the default value of the transformation. The current value property of the transformation will have this value when the model primitive is initialized.'
##        #return pRetVal
##
##    @property
##    def Range(self):
##        'Gets the value range of the transformation. Equivalent to the difference of the maximum value and minimum value properties.'
##        #return pRetVal
##
##    @property
##    def Name(self):
##        'Gets the name of the transformation.'
##        #return pRetVal
##
##    @property
##    def Type(self):
##        'Gets the model transformation type associated with the transformation.'
##        #return pRetVal
##

class _IAgStkGraphicsAlphaFromPixelFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAlphaFromPixelFilterFactory'
    _iid_ = GUID('{CC72502F-8BB7-4DC6-80A0-7790631539F4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsAlphaFromPixelFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Adds an alpha band to the source raster based on the value of its first pixel. All pixels in the source raster that are the same color as the first pixel will be made transparent.'
    _iid_ = GUID('{071460A3-F86A-4C28-B2BF-22946DB06AC8}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsAlphaFromPixelFilterFactory._methods_ = [
    COMMETHOD([dispid(21901), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAlphaFromPixelFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsAlphaFromPixelFilterFactory implementation
##class _IAgStkGraphicsAlphaFromPixelFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##

class AgStkGraphicsPathPointCollection(CoClass):
    'A collection of path points.'
    _reg_clsid_ = GUID('{F99FC5F2-AD00-4359-9919-36177646F468}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class IAgStkGraphicsPathPointCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A collection of path points.'
    _iid_ = GUID('{9214E199-6476-4EF1-A741-13362718BDD5}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsPathPointCollection._com_interfaces_ = [_IAgStkGraphicsPathPointCollection, IAgStkGraphicsPathPointCollection]

class AgStkGraphicsAGIRoamImageGlobeOverlay(CoClass):
    'A globe image overlay for handling ROAM (TXM/TXB) files.'
    _reg_clsid_ = GUID('{251CD599-4A5C-4A3B-9986-6EA88C17097D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsAGIRoamImageGlobeOverlay._com_interfaces_ = [_IAgStkGraphicsAGIRoamImageGlobeOverlay, IAgStkGraphicsAGIRoamImageGlobeOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay]

class IAgStkGraphicsSequenceFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Applies a sequence of filters to the source raster in the order in which they were added. When continue on failure is set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied.'
    _iid_ = GUID('{B3F075E4-7DE5-4D8C-ADBE-89862537E530}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsSequenceFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSequenceFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSequenceFilterFactory implementation
##class IAgStkGraphicsSequenceFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##

class AgStkGraphicsObjectCollection(CoClass):
    'A collection of objects.'
    _reg_clsid_ = GUID('{3DBDA5BF-2F8D-4275-A6C5-3D6F7982544A}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsObjectCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsObjectCollection'
    _iid_ = GUID('{998D0185-2228-4599-AEED-41F66C30FDE5}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsObjectCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A collection of objects.'
    _iid_ = GUID('{FEB3A8C8-DC5B-4246-A8EC-1D6154B4CF68}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsObjectCollection._com_interfaces_ = [_IAgStkGraphicsObjectCollection, IAgStkGraphicsObjectCollection]

class AgStkGraphicsCameraSnapshot(CoClass):
    'Takes snapshots of the 3D window.'
    _reg_clsid_ = GUID('{6EB983E7-08D0-48FA-B542-46703F1B5B13}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsCameraSnapshot(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsCameraSnapshot'
    _iid_ = GUID('{69A47A1A-A6F6-47F5-901B-13ACA5817E50}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsCameraSnapshot._com_interfaces_ = [_IAgStkGraphicsCameraSnapshot, IAgStkGraphicsCameraSnapshot]

IAgStkGraphicsPrimitiveManager._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the number of primitives in the manager.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the exponent used to compute the maximum precision for primitive rendering. For example, a value of -3 indicates the maximum precision of 2^-3, 0.125 m along the x, y, or z axis...')], HRESULT, 'PrecisionExponent',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the exponent used to compute the maximum precision for primitive rendering. For example, a value of -3 indicates the maximum precision of 2^-3, 0.125 m along the x, y, or z axis...')], HRESULT, 'PrecisionExponent',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the sort order for translucent primitives in the primitive manager. This determines a trade-off between rendering speed and quality...')], HRESULT, 'TranslucentPrimitivesSortOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPrimitivesSortOrder), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the sort order for translucent primitives in the primitive manager. This determines a trade-off between rendering speed and quality...')], HRESULT, 'TranslucentPrimitivesSortOrder',
              ( ['in'], AgEStkGraphicsPrimitivesSortOrder, 'pRetVal' )),
    COMMETHOD([helpstring('Adds a primitive to the manager. Primitives must be added to the manager to be rendered.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAgStkGraphicsPrimitive), 'Primitive' )),
    COMMETHOD([helpstring('Removes a primitive from the manager. The primitive is no longer rendered unless it is added back into the manager.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAgStkGraphicsPrimitive), 'Primitive' )),
    COMMETHOD([helpstring('Determines whether the manager contains a primitive.')], HRESULT, 'Contains',
              ( ['in'], POINTER(IAgStkGraphicsPrimitive), 'Primitive' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Removes all primitives from the manager.')], HRESULT, 'Clear'),
    COMMETHOD(['propget', helpstring('Returns an enumerator that iterates through the collection. The order of the primitives is not guaranteed to be the order that the primitives were added.')], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsPrimitiveManager implementation
##class IAgStkGraphicsPrimitiveManager_Impl(object):
##    @property
##    def Count(self):
##        'Gets the number of primitives in the manager.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the exponent used to compute the maximum precision for primitive rendering. For example, a value of -3 indicates the maximum precision of 2^-3, 0.125 m along the x, y, or z axis...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the exponent used to compute the maximum precision for primitive rendering. For example, a value of -3 indicates the maximum precision of 2^-3, 0.125 m along the x, y, or z axis...'
##    PrecisionExponent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the sort order for translucent primitives in the primitive manager. This determines a trade-off between rendering speed and quality...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the sort order for translucent primitives in the primitive manager. This determines a trade-off between rendering speed and quality...'
##    TranslucentPrimitivesSortOrder = property(_get, _set, doc = _set.__doc__)
##
##    def Add(self, Primitive):
##        'Adds a primitive to the manager. Primitives must be added to the manager to be rendered.'
##        #return 
##
##    def Remove(self, Primitive):
##        'Removes a primitive from the manager. The primitive is no longer rendered unless it is added back into the manager.'
##        #return 
##
##    def Contains(self, Primitive):
##        'Determines whether the manager contains a primitive.'
##        #return pRetVal
##
##    def Clear(self):
##        'Removes all primitives from the manager.'
##        #return 
##
##    @property
##    def _NewEnum(self):
##        'Returns an enumerator that iterates through the collection. The order of the primitives is not guaranteed to be the order that the primitives were added.'
##        #return ppRetVal
##

class IAgStkGraphicsJpeg2000WriterInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay.'
    _iid_ = GUID('{E2227905-C4E6-46AB-A89F-6D53E201E1A3}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsJpeg2000WriterInitializer._methods_ = [
    COMMETHOD([helpstring('Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image must be in the image, as in a GeoTIFF.')], HRESULT, 'WriteString',
              ( ['in'], BSTR, 'ImageUri' ),
              ( ['in'], AgEStkGraphicsJpeg2000CompressionProfile, 'CompressionProfile' ),
              ( ['in'], c_int, 'CompressionRate' ),
              ( ['in'], BSTR, 'Jpeg2000Uri' ),
              ( ['in'], VARIANT_BOOL, 'OverwriteExistingFile' )),
    COMMETHOD([helpstring('Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary.')], HRESULT, 'WriteExtentString',
              ( ['in'], BSTR, 'ImageUri' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['in'], AgEStkGraphicsJpeg2000CompressionProfile, 'CompressionProfile' ),
              ( ['in'], c_int, 'CompressionRate' ),
              ( ['in'], BSTR, 'Jpeg2000Uri' ),
              ( ['in'], VARIANT_BOOL, 'OverwriteExistingFile' )),
    COMMETHOD([helpstring('Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary.')], HRESULT, 'WriteExtentAndSubExtentString',
              ( ['in'], BSTR, 'ImageUri' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'SubExtent' ),
              ( ['in'], AgEStkGraphicsJpeg2000CompressionProfile, 'CompressionProfile' ),
              ( ['in'], c_int, 'CompressionRate' ),
              ( ['in'], BSTR, 'Jpeg2000Uri' ),
              ( ['in'], VARIANT_BOOL, 'OverwriteExistingFile' )),
    COMMETHOD([helpstring('Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary.')], HRESULT, 'WriteExtentAndSubExtentTransparentColorString',
              ( ['in'], BSTR, 'ImageUri' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'SubExtent' ),
              ( ['in'], AgEStkGraphicsJpeg2000CompressionProfile, 'CompressionProfile' ),
              ( ['in'], c_int, 'CompressionRate' ),
              ( ['in'], BSTR, 'Jpeg2000Uri' ),
              ( ['in'], VARIANT_BOOL, 'OverwriteExistingFile' ),
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'TransparentColor' )),
]
################################################################
## code template for IAgStkGraphicsJpeg2000WriterInitializer implementation
##class IAgStkGraphicsJpeg2000WriterInitializer_Impl(object):
##    def WriteString(self, ImageUri, CompressionProfile, CompressionRate, Jpeg2000Uri, OverwriteExistingFile):
##        'Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image must be in the image, as in a GeoTIFF.'
##        #return 
##
##    def WriteExtentString(self, ImageUri, Extent, CompressionProfile, CompressionRate, Jpeg2000Uri, OverwriteExistingFile):
##        'Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary.'
##        #return 
##
##    def WriteExtentAndSubExtentString(self, ImageUri, Extent, SubExtent, CompressionProfile, CompressionRate, Jpeg2000Uri, OverwriteExistingFile):
##        'Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary.'
##        #return 
##
##    def WriteExtentAndSubExtentTransparentColorString(self, ImageUri, Extent, SubExtent, CompressionProfile, CompressionRate, Jpeg2000Uri, OverwriteExistingFile, TransparentColor):
##        'Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay. The extent of the image can be defined as an input parameter if necessary.'
##        #return 
##

class _IAgStkGraphicsAlphaFromRasterFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAlphaFromRasterFilterFactory'
    _iid_ = GUID('{C2343DC8-8154-436D-B4F0-4119DEEB9BEB}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsAlphaFromRasterFilterFactory._methods_ = [
    COMMETHOD([dispid(22001), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAlphaFromRasterFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(22002), helpstring('Initializes a new instance with the raster that the source raster will use to derive an alpha band.')], HRESULT, 'InitializeWithRaster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAlphaFromRasterFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsAlphaFromRasterFilterFactory implementation
##class _IAgStkGraphicsAlphaFromRasterFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithRaster(self, Raster):
##        'Initializes a new instance with the raster that the source raster will use to derive an alpha band.'
##        #return ppRetVal
##

class AgStkGraphicsSceneCollection(CoClass):
    'A collection of scenes.'
    _reg_clsid_ = GUID('{CAC2D443-B384-43DD-A77C-3013C7C789D1}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsSceneCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSceneCollection'
    _iid_ = GUID('{51EDC3F1-D432-4A8A-A84E-CF049A5AA871}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsSceneCollection._com_interfaces_ = [_IAgStkGraphicsSceneCollection, IAgStkGraphicsSceneCollection]

class _IAgStkGraphicsRasterAttributes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsRasterAttributes'
    _iid_ = GUID('{D6E430CE-BF67-4A19-A5BD-5FF18632905D}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsRasterAttributes._methods_ = [
    COMMETHOD([dispid(9901), helpstring('Gets the raster format associated with the attributes.'), 'propget'], HRESULT, 'Format',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsRasterFormat), 'pRetVal' )),
    COMMETHOD([dispid(9902), helpstring('Gets the raster type associated with the attributes.'), 'propget'], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsRasterType), 'pRetVal' )),
    COMMETHOD([dispid(9903), helpstring('Gets the raster orientation associated with the attributes.'), 'propget'], HRESULT, 'Orientation',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsRasterOrientation), 'pRetVal' )),
    COMMETHOD([dispid(9904), helpstring('Gets the size of the raster data in bytes.'), 'propget'], HRESULT, 'ByteLength',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9905), helpstring('Gets the width of the raster in pixels.'), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9906), helpstring('Gets the height of the raster in pixels.'), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9907), helpstring('Gets the pixel aspect ratio of the raster.'), 'propget'], HRESULT, 'PixelAspectRatio',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(9908), helpstring('Gets the row alignment of the raster data in bytes.'), 'propget'], HRESULT, 'RowAlignment',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9909), helpstring('Gets the number of bands comprising the raster.'), 'propget'], HRESULT, 'NumberOfBands',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9910), helpstring('Gets the stride or scan/row width in bytes of the raster data.'), 'propget'], HRESULT, 'RowStride',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9911), helpstring('Gets whether the raster contains the given band.')], HRESULT, 'HasBand',
              ( ['in'], AgEStkGraphicsRasterBand, 'Band' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsRasterAttributes implementation
##class _IAgStkGraphicsRasterAttributes_Impl(object):
##    @property
##    def Format(self):
##        'Gets the raster format associated with the attributes.'
##        #return pRetVal
##
##    @property
##    def Type(self):
##        'Gets the raster type associated with the attributes.'
##        #return pRetVal
##
##    @property
##    def Orientation(self):
##        'Gets the raster orientation associated with the attributes.'
##        #return pRetVal
##
##    @property
##    def ByteLength(self):
##        'Gets the size of the raster data in bytes.'
##        #return pRetVal
##
##    @property
##    def Width(self):
##        'Gets the width of the raster in pixels.'
##        #return pRetVal
##
##    @property
##    def Height(self):
##        'Gets the height of the raster in pixels.'
##        #return pRetVal
##
##    @property
##    def PixelAspectRatio(self):
##        'Gets the pixel aspect ratio of the raster.'
##        #return pRetVal
##
##    @property
##    def RowAlignment(self):
##        'Gets the row alignment of the raster data in bytes.'
##        #return pRetVal
##
##    @property
##    def NumberOfBands(self):
##        'Gets the number of bands comprising the raster.'
##        #return pRetVal
##
##    @property
##    def RowStride(self):
##        'Gets the stride or scan/row width in bytes of the raster data.'
##        #return pRetVal
##
##    def HasBand(self, Band):
##        'Gets whether the raster contains the given band.'
##        #return pRetVal
##

class _IAgStkGraphicsTimeIntervalDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTimeIntervalDisplayConditionFactory'
    _iid_ = GUID('{0EE98D96-3D78-464C-9E21-6B1F7A0E2B7C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsTimeIntervalDisplayConditionFactory._methods_ = [
    COMMETHOD([dispid(8901), helpstring('Initializes a default time display condition. minimum time is set to JulianDate.MinValue and maximum time is set to JulianDate.MaxValue...')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTimeIntervalDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(8902), helpstring('Initializes a time display condition with the inclusive time interval [minimumTime, maximumTime]...')], HRESULT, 'InitializeWithTimes',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'MinimumTime' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'MaximumTime' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTimeIntervalDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(8903), helpstring('Initializes a time display condition with a time interval.')], HRESULT, 'InitializeWithTimeInterval',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'TimeInterval' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTimeIntervalDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTimeIntervalDisplayConditionFactory implementation
##class _IAgStkGraphicsTimeIntervalDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default time display condition. minimum time is set to JulianDate.MinValue and maximum time is set to JulianDate.MaxValue...'
##        #return ppRetVal
##
##    def InitializeWithTimes(self, MinimumTime, MaximumTime):
##        'Initializes a time display condition with the inclusive time interval [minimumTime, maximumTime]...'
##        #return ppRetVal
##
##    def InitializeWithTimeInterval(self, TimeInterval):
##        'Initializes a time display condition with a time interval.'
##        #return ppRetVal
##

class AgStkGraphicsCameraVideoRecording(CoClass):
    'Records the 3D window to either a movie file or to consecutively ordered image files each time the scene is rendered.'
    _reg_clsid_ = GUID('{82BFC0C5-614B-44E7-A41B-0E7C62BC35C3}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsCameraVideoRecording._com_interfaces_ = [_IAgStkGraphicsCameraVideoRecording, IAgStkGraphicsCameraVideoRecording]

class _IAgStkGraphicsDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsDisplayCondition'
    _iid_ = GUID('{01412474-4917-48E5-8DAB-1D5C3CCBBBAE}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsDisplayCondition._methods_ = [
]
################################################################
## code template for _IAgStkGraphicsDisplayCondition implementation
##class _IAgStkGraphicsDisplayCondition_Impl(object):

class AgStkGraphicsScreenOverlayPickResultCollection(CoClass):
    'A collection of pick results.'
    _reg_clsid_ = GUID('{2768D437-1606-401D-8520-392AEAA09415}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class IAgStkGraphicsScreenOverlayPickResultCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A collection of pick results.'
    _iid_ = GUID('{6C1F8D2C-1B38-482C-B935-B174003284BB}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsScreenOverlayPickResultCollection._com_interfaces_ = [_IAgStkGraphicsScreenOverlayPickResultCollection, IAgStkGraphicsScreenOverlayPickResultCollection]

class AgStkGraphicsCentralBodyGraphicsIndexer(CoClass):
    'An indexer into the central body graphics for a particular central body, which provides graphical properties such as showing or hiding the central body in the scene, and working with terrain and imagery for the specified central body.'
    _reg_clsid_ = GUID('{03B06E51-153E-43F6-B007-D5FEAE517951}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class IAgStkGraphicsCentralBodyGraphicsIndexer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'An indexer into the central body graphics for a particular central body, which provides graphical properties such as showing or hiding the central body in the scene, and working with terrain and imagery for the specified central body.'
    _iid_ = GUID('{FC4EAFC1-217C-4A1B-9640-4A678D84813A}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsCentralBodyGraphicsIndexer._com_interfaces_ = [_IAgStkGraphicsCentralBodyGraphicsIndexer, IAgStkGraphicsCentralBodyGraphicsIndexer]

class _IAgStkGraphicsKmlFolder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsKmlFolder'
    _iid_ = GUID('{A779CDB0-ACBE-4957-8104-613423A17936}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsKmlFolder._methods_ = [
    COMMETHOD([dispid(26701), helpstring('The collection of kml features that are children of this container.'), 'propget'], HRESULT, 'Children',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlFeatureCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(26601), helpstring('Gets whether the document associated with this feature is loaded.'), 'propget'], HRESULT, 'IsLoaded',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(26602), helpstring('Gets or sets whether this feature will be displayed in the Scene.'), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(26602), helpstring('Gets or sets whether this feature will be displayed in the Scene.'), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(26603), helpstring('Gets the content associated with this feature.'), 'propget'], HRESULT, 'Content',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26604), helpstring('Gets the name of this feature.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26605), helpstring('Gets the description associated with this feature.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26606), helpstring('Gets the snippet associated with this feature.'), 'propget'], HRESULT, 'Snippet',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26607), helpstring('The bounding sphere encompassing the area associated with this feature.'), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(26608), helpstring('Moves the camera to the area encompassing this feature.')], HRESULT, 'FlyTo'),
]
################################################################
## code template for _IAgStkGraphicsKmlFolder implementation
##class _IAgStkGraphicsKmlFolder_Impl(object):
##    @property
##    def Children(self):
##        'The collection of kml features that are children of this container.'
##        #return ppRetVal
##
##    @property
##    def IsLoaded(self):
##        'Gets whether the document associated with this feature is loaded.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets whether this feature will be displayed in the Scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether this feature will be displayed in the Scene.'
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Content(self):
##        'Gets the content associated with this feature.'
##        #return pRetVal
##
##    @property
##    def Name(self):
##        'Gets the name of this feature.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Gets the description associated with this feature.'
##        #return pRetVal
##
##    @property
##    def Snippet(self):
##        'Gets the snippet associated with this feature.'
##        #return pRetVal
##
##    @property
##    def BoundingSphere(self):
##        'The bounding sphere encompassing the area associated with this feature.'
##        #return ppRetVal
##
##    def FlyTo(self):
##        'Moves the camera to the area encompassing this feature.'
##        #return 
##

IAgStkGraphicsSequenceFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets whether to continue applying filters in the sequence regardless of individual filter failures. When set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied.')], HRESULT, 'ContinueOnFailure',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether to continue applying filters in the sequence regardless of individual filter failures. When set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied.')], HRESULT, 'ContinueOnFailure',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the number of filters in the collection.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([helpstring('Adds a filter to the sequence.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' )),
    COMMETHOD([helpstring('Removes a filter from the sequence.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' )),
    COMMETHOD([helpstring('Clears all filters from the sequence.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring('Returns true if the sequence contains the filter.')], HRESULT, 'Contains',
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSequenceFilter implementation
##class IAgStkGraphicsSequenceFilter_Impl(object):
##    def _get(self):
##        'Gets or sets whether to continue applying filters in the sequence regardless of individual filter failures. When set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether to continue applying filters in the sequence regardless of individual filter failures. When set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied.'
##    ContinueOnFailure = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Count(self):
##        'Gets the number of filters in the collection.'
##        #return pRetVal
##
##    def Add(self, Filter):
##        'Adds a filter to the sequence.'
##        #return 
##
##    def Remove(self, Filter):
##        'Removes a filter from the sequence.'
##        #return 
##
##    def Clear(self):
##        'Clears all filters from the sequence.'
##        #return 
##
##    def Contains(self, Filter):
##        'Returns true if the sequence contains the filter.'
##        #return pRetVal
##

class AgStkGraphicsGlobeImageOverlayAddCompleteEventArgs(CoClass):
    'The event is raised when the globe image overlay is displayed for the first time after being added using AddAsync.'
    _reg_clsid_ = GUID('{21663915-B2D1-4890-89EA-EC8DCBF3287F}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsGlobeImageOverlayAddCompleteEventArgs._com_interfaces_ = [_IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs, IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs]

class AgStkGraphicsCustomImageGlobeOverlay(CoClass):
    'A globe image overlay that allows for a user defined image to be specified.'
    _reg_clsid_ = GUID('{CE406076-60BA-4BE5-8E83-08D9682AC88E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class IAgStkGraphicsCustomImageGlobeOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A globe image overlay that allows for a user defined image to be specified.'
    _iid_ = GUID('{F8086ED2-4B18-4D6D-A39F-1AB5801CF886}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsCustomImageGlobeOverlay._com_interfaces_ = [_IAgStkGraphicsCustomImageGlobeOverlay, IAgStkGraphicsCustomImageGlobeOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay]

class _IAgStkGraphicsBandExtractFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsBandExtractFilterFactory'
    _iid_ = GUID('{89EB0D62-0B45-406C-8F8B-BCB01053A0E9}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsBandExtractFilterFactory._methods_ = [
    COMMETHOD([dispid(22101), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBandExtractFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(22102), helpstring('Initializes a new instance with the raster band to be extracted from the source raster.')], HRESULT, 'InitializeWithBand',
              ( ['in'], AgEStkGraphicsRasterBand, 'RasterBand' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBandExtractFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(22103), helpstring('Initializes a new instance with the raster format containing the bands to be extracted from the source raster.')], HRESULT, 'InitializeWithFormat',
              ( ['in'], AgEStkGraphicsRasterFormat, 'RasterFormat' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBandExtractFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsBandExtractFilterFactory implementation
##class _IAgStkGraphicsBandExtractFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithBand(self, RasterBand):
##        'Initializes a new instance with the raster band to be extracted from the source raster.'
##        #return ppRetVal
##
##    def InitializeWithFormat(self, RasterFormat):
##        'Initializes a new instance with the raster format containing the bands to be extracted from the source raster.'
##        #return ppRetVal
##

class _IAgStkGraphicsDistanceDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsDistanceDisplayCondition'
    _iid_ = GUID('{2066622B-F492-4E40-A7D1-DB7E73622E26}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsDistanceDisplayCondition._methods_ = [
    COMMETHOD([dispid(3501), helpstring('Gets or sets the minimum distance, in meters, of the inclusive distance interval.'), 'propget'], HRESULT, 'MinimumDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(3501), helpstring('Gets or sets the minimum distance, in meters, of the inclusive distance interval.'), 'propput'], HRESULT, 'MinimumDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(3502), helpstring('Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'), 'propget'], HRESULT, 'MaximumDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(3502), helpstring('Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'), 'propput'], HRESULT, 'MaximumDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(3503), helpstring('Gets the squared minimum distance, in meters, of the inclusive distance interval.'), 'propget'], HRESULT, 'MinimumDistanceSquared',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(3504), helpstring('Gets the squared maximum distance, in meters, of the inclusive distance interval.'), 'propget'], HRESULT, 'MaximumDistanceSquared',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsDistanceDisplayCondition implementation
##class _IAgStkGraphicsDistanceDisplayCondition_Impl(object):
##    def _get(self):
##        'Gets or sets the minimum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the minimum distance, in meters, of the inclusive distance interval.'
##    MinimumDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'
##    MaximumDistance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumDistanceSquared(self):
##        'Gets the squared minimum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##
##    @property
##    def MaximumDistanceSquared(self):
##        'Gets the squared maximum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##

class AgStkGraphicsTerrainOverlayAddCompleteEventArgs(CoClass):
    'The event is raised when the terrain overlay is displayed for the first time after having been added using AddAsync.'
    _reg_clsid_ = GUID('{4FF9EF5B-4057-456D-B7E3-CB1FF446899B}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTerrainOverlayAddCompleteEventArgs._com_interfaces_ = [_IAgStkGraphicsTerrainOverlayAddCompleteEventArgs, IAgStkGraphicsTerrainOverlayAddCompleteEventArgs]

class AgStkGraphicsCustomImageGlobeOverlayPluginActivator(CoClass):
    'The Activator class provides methods to load COM plugins that implement custom image globe overlays. For more information about custom image globe overlays, see the STK Programming Interface.'
    _reg_clsid_ = GUID('{45ACD5CE-08B4-4554-88C0-DA8B917EB6AE}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsCustomImageGlobeOverlayPluginActivator._com_interfaces_ = [_IAgStkGraphicsCustomImageGlobeOverlayPluginActivator, IAgStkGraphicsCustomImageGlobeOverlayPluginActivator]

class _IAgStkGraphicsSurfaceTriangulatorResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSurfaceTriangulatorResult'
    _iid_ = GUID('{56C43C99-21C4-4FE9-91AA-C3B53FB0C42E}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsSurfaceTriangulatorResult._methods_ = [
    COMMETHOD([dispid(16601), helpstring('Gets the positions of the mesh. Three array elements (in the order x, y, z) constitute one position.'), 'propget'], HRESULT, 'Positions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16602), helpstring('Gets the normals of the mesh. Every position in positions has corresponding normal. Normals are commonly used for lighting. Three array elements (in the order x, y, z) constitute one normal.'), 'propget'], HRESULT, 'Normals',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16603), helpstring('Gets indices into positions and normals. Every 3 indices represent 1 triangle. The indices returned consider the three components of a position or normal (x, y, and z) as a single array element...'), 'propget'], HRESULT, 'Indices',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16604), helpstring('Gets the orientation of front-facing triangles in the mesh.'), 'propget'], HRESULT, 'TriangleWindingOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsWindingOrder), 'pRetVal' )),
    COMMETHOD([dispid(16605), helpstring('Gets the bounding sphere that encompasses the mesh.'), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(3001), helpstring('Gets the granularity, in radians, used when the triangulation was computed. Lower granularities are more precise but create more triangles.'), 'propget'], HRESULT, 'Granularity',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(3002), helpstring('Gets indices into positions that define the boundary positions that surround the mesh. The indices returned consider the three components of a position (x, y, and z) as a single array element...'), 'propget'], HRESULT, 'BoundaryIndices',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(3003), helpstring('Gets the boundary positions that surround the mesh. Three array elements (in the order x, y, z) constitute one position.'), 'propget'], HRESULT, 'BoundaryPositions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(3004), helpstring('Gets the winding order of boundary positions.'), 'propget'], HRESULT, 'BoundaryPositionsWindingOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsWindingOrder), 'pRetVal' )),
    COMMETHOD([dispid(3005), helpstring('Gets the polyline type of boundary positions.'), 'propget'], HRESULT, 'BoundaryPolylineType',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPolylineType), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSurfaceTriangulatorResult implementation
##class _IAgStkGraphicsSurfaceTriangulatorResult_Impl(object):
##    @property
##    def Positions(self):
##        'Gets the positions of the mesh. Three array elements (in the order x, y, z) constitute one position.'
##        #return ppRetVal
##
##    @property
##    def Normals(self):
##        'Gets the normals of the mesh. Every position in positions has corresponding normal. Normals are commonly used for lighting. Three array elements (in the order x, y, z) constitute one normal.'
##        #return ppRetVal
##
##    @property
##    def Indices(self):
##        'Gets indices into positions and normals. Every 3 indices represent 1 triangle. The indices returned consider the three components of a position or normal (x, y, and z) as a single array element...'
##        #return ppRetVal
##
##    @property
##    def TriangleWindingOrder(self):
##        'Gets the orientation of front-facing triangles in the mesh.'
##        #return pRetVal
##
##    @property
##    def BoundingSphere(self):
##        'Gets the bounding sphere that encompasses the mesh.'
##        #return ppRetVal
##
##    @property
##    def Granularity(self):
##        'Gets the granularity, in radians, used when the triangulation was computed. Lower granularities are more precise but create more triangles.'
##        #return pRetVal
##
##    @property
##    def BoundaryIndices(self):
##        'Gets indices into positions that define the boundary positions that surround the mesh. The indices returned consider the three components of a position (x, y, and z) as a single array element...'
##        #return ppRetVal
##
##    @property
##    def BoundaryPositions(self):
##        'Gets the boundary positions that surround the mesh. Three array elements (in the order x, y, z) constitute one position.'
##        #return ppRetVal
##
##    @property
##    def BoundaryPositionsWindingOrder(self):
##        'Gets the winding order of boundary positions.'
##        #return pRetVal
##
##    @property
##    def BoundaryPolylineType(self):
##        'Gets the polyline type of boundary positions.'
##        #return pRetVal
##

IAgStkGraphicsCameraSnapshot._methods_ = [
    COMMETHOD([helpstring('Saves a snapshot of the 3D window to the filename with the specified format.')], HRESULT, 'SaveToFile',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], AgEStkGraphicsCameraSnapshotFileFormat, 'CameraSnapshotFormat' )),
    COMMETHOD([helpstring('Saves a snapshot of the 3D window to the filename with the specified format at high resolution...')], HRESULT, 'SaveToFileWithWidthAndDPI',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], AgEStkGraphicsCameraSnapshotFileFormat, 'CameraSnapshotFormat' ),
              ( ['in'], c_double, 'WidthInInches' ),
              ( ['in'], c_double, 'DotsPerInch' )),
    COMMETHOD([helpstring('Saves a single frame of the 3D window to the clipboard.')], HRESULT, 'SaveToClipboard'),
    COMMETHOD([helpstring('Saves a snapshot of the 3D window to a raster.')], HRESULT, 'SaveToRaster',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([helpstring('Saves a snapshot of the 3D window to a texture 2d.')], HRESULT, 'SaveToTexture',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRendererTexture2D)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsCameraSnapshot implementation
##class IAgStkGraphicsCameraSnapshot_Impl(object):
##    def SaveToFile(self, Filename, CameraSnapshotFormat):
##        'Saves a snapshot of the 3D window to the filename with the specified format.'
##        #return 
##
##    def SaveToFileWithWidthAndDPI(self, Filename, CameraSnapshotFormat, WidthInInches, DotsPerInch):
##        'Saves a snapshot of the 3D window to the filename with the specified format at high resolution...'
##        #return 
##
##    def SaveToClipboard(self):
##        'Saves a single frame of the 3D window to the clipboard.'
##        #return 
##
##    def SaveToRaster(self):
##        'Saves a snapshot of the 3D window to a raster.'
##        #return ppRetVal
##
##    def SaveToTexture(self):
##        'Saves a snapshot of the 3D window to a texture 2d.'
##        #return ppRetVal
##

class IAgStkGraphicsEdgeDetectFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Applies a convolution filter to detect edges in the source raster.'
    _iid_ = GUID('{D471AE80-2BF6-40D7-9C5B-48C08D0E3819}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsEdgeDetectFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsEdgeDetectFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with the specified edge detect method.')], HRESULT, 'InitializeWithMethod',
              ( ['in'], AgEStkGraphicsEdgeDetectMethod, 'Method' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsEdgeDetectFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsEdgeDetectFilterFactory implementation
##class IAgStkGraphicsEdgeDetectFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithMethod(self, Method):
##        'Initializes a new instance with the specified edge detect method.'
##        #return ppRetVal
##

class AgStkGraphicsPickResultCollection(CoClass):
    'A collection of picked objects.'
    _reg_clsid_ = GUID('{70DA7DF1-B75A-4948-B628-3D06630FD572}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class IAgStkGraphicsPickResultCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A collection of picked objects.'
    _iid_ = GUID('{2D29D5B1-B160-49AD-8F58-CEF696BC952A}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsPickResultCollection._com_interfaces_ = [_IAgStkGraphicsPickResultCollection, IAgStkGraphicsPickResultCollection]

class AgStkGraphicsCustomImageGlobeOverlayPluginProxy(CoClass):
    'A proxy class provides access to a custom image globe overlay implemented by a plugin. Proxies are instantiated using custom image globe overlay plugin activator.'
    _reg_clsid_ = GUID('{47DA4312-9C76-46C1-BCD1-2AA420F92976}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsCustomImageGlobeOverlayPluginProxy(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsCustomImageGlobeOverlayPluginProxy'
    _iid_ = GUID('{981CB1AD-9D4D-4803-BB54-3AC7A5EC31CC}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsCustomImageGlobeOverlayPluginProxy._com_interfaces_ = [_IAgStkGraphicsCustomImageGlobeOverlayPluginProxy, IAgStkGraphicsCustomImageGlobeOverlayPluginProxy]

class _IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition'
    _iid_ = GUID('{D596B411-5580-4825-B264-23D4997014FF}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._methods_ = [
    COMMETHOD([dispid(9601), helpstring('Gets or sets the globe overlay associated with this instance.'), 'propget'], HRESULT, 'GlobeOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(9601), helpstring('Gets or sets the globe overlay associated with this instance.'), 'propput'], HRESULT, 'GlobeOverlay',
              ( ['in'], POINTER(IAgStkGraphicsGlobeOverlay), 'ppRetVal' )),
    COMMETHOD([dispid(9602), helpstring('Gets or sets the minimum distance, in meters, of the inclusive distance interval.'), 'propget'], HRESULT, 'MinimumDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(9602), helpstring('Gets or sets the minimum distance, in meters, of the inclusive distance interval.'), 'propput'], HRESULT, 'MinimumDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(9603), helpstring('Gets the squared minimum distance, in meters, of the inclusive distance interval.'), 'propget'], HRESULT, 'MinimumDistanceSquared',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(9604), helpstring('Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'), 'propget'], HRESULT, 'MaximumDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(9604), helpstring('Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'), 'propput'], HRESULT, 'MaximumDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(9605), helpstring('Gets the squared maximum distance, in meters, of the inclusive distance interval.'), 'propget'], HRESULT, 'MaximumDistanceSquared',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition implementation
##class _IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition_Impl(object):
##    def _get(self):
##        'Gets or sets the globe overlay associated with this instance.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the globe overlay associated with this instance.'
##    GlobeOverlay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the minimum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the minimum distance, in meters, of the inclusive distance interval.'
##    MinimumDistance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumDistanceSquared(self):
##        'Gets the squared minimum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'
##    MaximumDistance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MaximumDistanceSquared(self):
##        'Gets the squared maximum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##

class _IAgStkGraphicsSceneManagerInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSceneManagerInitializer'
    _iid_ = GUID('{57980A47-E8C1-4C2F-955B-0E231CB60006}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsSceneManagerInitializer._methods_ = [
    COMMETHOD([dispid(15405), helpstring('Gets the primitive manager, which is used to add primitives to your scenes.'), 'propget'], HRESULT, 'Primitives',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPrimitiveManager)), 'ppRetVal' )),
    COMMETHOD([dispid(15406), helpstring('Gets the screen overlay manager, which is used to add screen overlays to your scenes.'), 'propget'], HRESULT, 'ScreenOverlays',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayManager)), 'ppRetVal' )),
    COMMETHOD([dispid(15402), helpstring('Gets the texture 2d factory, which can be used to create textures from various sources.'), 'propget'], HRESULT, 'Textures',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTexture2DFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(15403), helpstring('Gets the globe overlay settings, which are used to set global settings for all globe overlays.'), 'propget'], HRESULT, 'GlobeOverlaySettings',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeOverlaySettings)), 'ppRetVal' )),
    COMMETHOD([dispid(15407), helpstring('Gets a read-only collection of scenes that are associated with the scene manager.'), 'propget'], HRESULT, 'Scenes',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSceneCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(15401), helpstring('Renders all scenes within an application. To render a specific scene, use the Render method.')], HRESULT, 'Render'),
]
################################################################
## code template for _IAgStkGraphicsSceneManagerInitializer implementation
##class _IAgStkGraphicsSceneManagerInitializer_Impl(object):
##    @property
##    def Primitives(self):
##        'Gets the primitive manager, which is used to add primitives to your scenes.'
##        #return ppRetVal
##
##    @property
##    def ScreenOverlays(self):
##        'Gets the screen overlay manager, which is used to add screen overlays to your scenes.'
##        #return ppRetVal
##
##    @property
##    def Textures(self):
##        'Gets the texture 2d factory, which can be used to create textures from various sources.'
##        #return ppRetVal
##
##    @property
##    def GlobeOverlaySettings(self):
##        'Gets the globe overlay settings, which are used to set global settings for all globe overlays.'
##        #return ppRetVal
##
##    @property
##    def Scenes(self):
##        'Gets a read-only collection of scenes that are associated with the scene manager.'
##        #return ppRetVal
##
##    def Render(self):
##        'Renders all scenes within an application. To render a specific scene, use the Render method.'
##        #return 
##

IAgStkGraphicsProjectionFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjection)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'InitializeWithData',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation), 'Orientation' ),
              ( ['in'], c_double, 'FieldOfViewHorizontal' ),
              ( ['in'], c_double, 'FieldOfViewVertical' ),
              ( ['in'], c_double, 'NearPlane' ),
              ( ['in'], c_double, 'FarPlane' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjection)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance from another projection.')], HRESULT, 'InitializeFromProjection',
              ( ['in'], POINTER(IAgStkGraphicsProjection), 'Projection' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjection)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsProjectionFactory implementation
##class IAgStkGraphicsProjectionFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithData(self, Position, Orientation, FieldOfViewHorizontal, FieldOfViewVertical, NearPlane, FarPlane):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeFromProjection(self, Projection):
##        'Initializes a new instance from another projection.'
##        #return ppRetVal
##

class AgStkGraphicsRenderingEventArgs(CoClass):
    'The event is raised when the scene is rendered.'
    _reg_clsid_ = GUID('{ED254ADD-AA1E-4B95-A98F-BCCA2D157B2F}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class IAgStkGraphicsRenderingEventArgs(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The event is raised when the scene is rendered.'
    _iid_ = GUID('{7C1EEA22-FAD1-437E-9282-F9202CD103BD}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsRenderingEventArgs._com_interfaces_ = [_IAgStkGraphicsRenderingEventArgs, IAgStkGraphicsRenderingEventArgs]

class AgStkGraphicsGeospatialImageGlobeOverlay(CoClass):
    "A globe image overlay for handling <a href='http://www.jpeg.org/jpeg2000/'>JPEG 2000</a> (.jp2), ECW (.ecw), ECWP, and MrSid (.sid) image formats in the WGS84 geographic projection."
    _reg_clsid_ = GUID('{08AE7920-15B1-4A1A-B348-A3CE215F3C88}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsGeospatialImageGlobeOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGeospatialImageGlobeOverlay'
    _iid_ = GUID('{4D5B1B96-4B4A-4EDC-96E2-043A0E152488}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsGeospatialImageGlobeOverlay._com_interfaces_ = [_IAgStkGraphicsGeospatialImageGlobeOverlay, IAgStkGraphicsGeospatialImageGlobeOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay]

class IAgStkGraphicsRasterImageGlobeOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A globe image overlay for handling rasters.'
    _iid_ = GUID('{00A01C47-A9D0-4020-A469-FD874B219713}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsRasterImageGlobeOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A globe image overlay for handling rasters.'
    _iid_ = GUID('{DE016591-933E-4085-B6A4-401E117109E9}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsRasterImageGlobeOverlayFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a raster image globe overlay with the provided values.')], HRESULT, 'InitializeWithString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterImageGlobeOverlay)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a raster image globe overlay with the provided values.')], HRESULT, 'InitializeWithColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'Color' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterImageGlobeOverlay)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a raster image globe overlay with the provided values.')], HRESULT, 'InitializeWithRaster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterImageGlobeOverlay)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsRasterImageGlobeOverlayFactory implementation
##class IAgStkGraphicsRasterImageGlobeOverlayFactory_Impl(object):
##    def InitializeWithString(self, Uri, Extent):
##        'Initializes a raster image globe overlay with the provided values.'
##        #return ppRetVal
##
##    def InitializeWithColor(self, Color, Extent):
##        'Initializes a raster image globe overlay with the provided values.'
##        #return ppRetVal
##
##    def InitializeWithRaster(self, Raster, Extent):
##        'Initializes a raster image globe overlay with the provided values.'
##        #return ppRetVal
##

class AgStkGraphicsBatchPrimitiveIndex(CoClass):
    'Represents an individual item index that is associated with a batch primitive. Provides the Index of the individual item and the Primitive that contains that index...'
    _reg_clsid_ = GUID('{F554B935-7096-46FB-A6D8-D2E4C479180D}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsBatchPrimitiveIndex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsBatchPrimitiveIndex'
    _iid_ = GUID('{17E49C0B-8A9A-4A9A-9A0F-304E1A43FC57}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsBatchPrimitiveIndex(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Represents an individual item index that is associated with a batch primitive. Provides the Index of the individual item and the Primitive that contains that index...'
    _iid_ = GUID('{15DAE589-33B5-4629-A50F-485A49546DDF}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsBatchPrimitiveIndex._com_interfaces_ = [_IAgStkGraphicsBatchPrimitiveIndex, IAgStkGraphicsBatchPrimitiveIndex]

class AgStkGraphicsGlobeOverlay(CoClass):
    'The base class of all terrain overlay and globe image overlay objects.'
    _reg_clsid_ = GUID('{1C50EECE-149A-46D7-8BDE-55D468DE5CE7}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsGlobeOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGlobeOverlay'
    _iid_ = GUID('{D74695A1-B80B-446A-B7FC-CC6E30D9A2AA}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsGlobeOverlay._com_interfaces_ = [_IAgStkGraphicsGlobeOverlay, IAgStkGraphicsGlobeOverlay]

class _IAgStkGraphicsScreenOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsScreenOverlayFactory'
    _iid_ = GUID('{011BA34F-088E-4052-B404-C0A80C591FF6}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsScreenOverlayFactory._methods_ = [
    COMMETHOD([dispid(12101), helpstring('Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels.')], HRESULT, 'Initialize',
              ( ['in'], c_double, 'XPixels' ),
              ( ['in'], c_double, 'YPixels' ),
              ( ['in'], c_double, 'WidthPixels' ),
              ( ['in'], c_double, 'HeightPixels' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(12102), helpstring('Initializes the overlay with the specified position and size.')], HRESULT, 'InitializeWithPosAndSize',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Size' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlay)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsScreenOverlayFactory implementation
##class _IAgStkGraphicsScreenOverlayFactory_Impl(object):
##    def Initialize(self, XPixels, YPixels, WidthPixels, HeightPixels):
##        'Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels.'
##        #return ppRetVal
##
##    def InitializeWithPosAndSize(self, Position, Size):
##        'Initializes the overlay with the specified position and size.'
##        #return ppRetVal
##

IAgStkGraphicsRaster._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the raster attributes that define the raster data.')], HRESULT, 'Attributes',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the width of the raster in pixels.')], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the height of the raster in pixels.')], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([helpstring('Flips the raster along the given axis.')], HRESULT, 'Flip',
              ( ['in'], AgEStkGraphicsFlipAxis, 'Axis' )),
    COMMETHOD([helpstring('Rotates the raster by the given angle.')], HRESULT, 'Rotate',
              ( ['in'], c_double, 'Angle' )),
    COMMETHOD([helpstring('Applies a raster filter to the raster and returns a new raster with the results of the filtering. The current raster is not modified.')], HRESULT, 'Apply',
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([helpstring('Applies a raster filter to the raster. The current raster will contain the results of the filtering.')], HRESULT, 'ApplyInPlace',
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' )),
    COMMETHOD([helpstring('Extracts the band of raster data associated with the given raster band.')], HRESULT, 'ExtractBand',
              ( ['in'], AgEStkGraphicsRasterBand, 'Band' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([helpstring('Extracts the bands of raster data associated with the given raster format.')], HRESULT, 'ExtractBandFromRasterFormat',
              ( ['in'], AgEStkGraphicsRasterFormat, 'Format' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([helpstring('Copies the data associated with the given raster into this raster.')], HRESULT, 'CopyFromRaster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' )),
]
################################################################
## code template for IAgStkGraphicsRaster implementation
##class IAgStkGraphicsRaster_Impl(object):
##    @property
##    def Attributes(self):
##        'Gets the raster attributes that define the raster data.'
##        #return ppRetVal
##
##    @property
##    def Width(self):
##        'Gets the width of the raster in pixels.'
##        #return pRetVal
##
##    @property
##    def Height(self):
##        'Gets the height of the raster in pixels.'
##        #return pRetVal
##
##    def Flip(self, Axis):
##        'Flips the raster along the given axis.'
##        #return 
##
##    def Rotate(self, Angle):
##        'Rotates the raster by the given angle.'
##        #return 
##
##    def Apply(self, Filter):
##        'Applies a raster filter to the raster and returns a new raster with the results of the filtering. The current raster is not modified.'
##        #return ppRetVal
##
##    def ApplyInPlace(self, Filter):
##        'Applies a raster filter to the raster. The current raster will contain the results of the filtering.'
##        #return 
##
##    def ExtractBand(self, Band):
##        'Extracts the band of raster data associated with the given raster band.'
##        #return ppRetVal
##
##    def ExtractBandFromRasterFormat(self, Format):
##        'Extracts the bands of raster data associated with the given raster format.'
##        #return ppRetVal
##
##    def CopyFromRaster(self, Raster):
##        'Copies the data associated with the given raster into this raster.'
##        #return 
##

IAgStkGraphicsEdgeDetectFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the method used to detect edges in the source raster.')], HRESULT, 'Method',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsEdgeDetectMethod), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the method used to detect edges in the source raster.')], HRESULT, 'Method',
              ( ['in'], AgEStkGraphicsEdgeDetectMethod, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsEdgeDetectFilter implementation
##class IAgStkGraphicsEdgeDetectFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the method used to detect edges in the source raster.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the method used to detect edges in the source raster.'
##    Method = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsKmlDocumentCollection(CoClass):
    'A collection of KML documents.'
    _reg_clsid_ = GUID('{7F29A0FB-3083-4FA9-855A-B1CD29E38A82}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsKmlDocumentCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsKmlDocumentCollection'
    _iid_ = GUID('{35C41C5E-C707-45BD-AD43-5416A0195213}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsKmlDocumentCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A collection of KML documents.'
    _iid_ = GUID('{8F385D51-5B9C-4F8D-8340-1E8F49B51A6A}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsKmlDocumentCollection._com_interfaces_ = [_IAgStkGraphicsKmlDocumentCollection, IAgStkGraphicsKmlDocumentCollection]

class AgStkGraphicsGlobeOverlaySettings(CoClass):
    'Settings used by globe overlay objects. These setting affect all scenes.'
    _reg_clsid_ = GUID('{05DFCAC3-8BE7-4B8C-93FF-F774B43536AD}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsGlobeOverlaySettings(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGlobeOverlaySettings'
    _iid_ = GUID('{CAF967D8-67DD-45F2-81C3-82F7810D3422}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsGlobeOverlaySettings._com_interfaces_ = [_IAgStkGraphicsGlobeOverlaySettings, IAgStkGraphicsGlobeOverlaySettings]

class _IAgStkGraphicsTriangulatorResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTriangulatorResult'
    _iid_ = GUID('{FECD020A-354F-4325-BDF4-6024F322D98D}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsTriangulatorResult._methods_ = [
    COMMETHOD([dispid(16601), helpstring('Gets the positions of the mesh. Three array elements (in the order x, y, z) constitute one position.'), 'propget'], HRESULT, 'Positions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16602), helpstring('Gets the normals of the mesh. Every position in positions has corresponding normal. Normals are commonly used for lighting. Three array elements (in the order x, y, z) constitute one normal.'), 'propget'], HRESULT, 'Normals',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16603), helpstring('Gets indices into positions and normals. Every 3 indices represent 1 triangle. The indices returned consider the three components of a position or normal (x, y, and z) as a single array element...'), 'propget'], HRESULT, 'Indices',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16604), helpstring('Gets the orientation of front-facing triangles in the mesh.'), 'propget'], HRESULT, 'TriangleWindingOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsWindingOrder), 'pRetVal' )),
    COMMETHOD([dispid(16605), helpstring('Gets the bounding sphere that encompasses the mesh.'), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTriangulatorResult implementation
##class _IAgStkGraphicsTriangulatorResult_Impl(object):
##    @property
##    def Positions(self):
##        'Gets the positions of the mesh. Three array elements (in the order x, y, z) constitute one position.'
##        #return ppRetVal
##
##    @property
##    def Normals(self):
##        'Gets the normals of the mesh. Every position in positions has corresponding normal. Normals are commonly used for lighting. Three array elements (in the order x, y, z) constitute one normal.'
##        #return ppRetVal
##
##    @property
##    def Indices(self):
##        'Gets indices into positions and normals. Every 3 indices represent 1 triangle. The indices returned consider the three components of a position or normal (x, y, and z) as a single array element...'
##        #return ppRetVal
##
##    @property
##    def TriangleWindingOrder(self):
##        'Gets the orientation of front-facing triangles in the mesh.'
##        #return pRetVal
##
##    @property
##    def BoundingSphere(self):
##        'Gets the bounding sphere that encompasses the mesh.'
##        #return ppRetVal
##

class _IAgStkGraphicsBandOrderFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsBandOrderFilterFactory'
    _iid_ = GUID('{91EE6CD7-D909-42A8-8912-CB39D8CFC116}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsBandOrderFilterFactory._methods_ = [
    COMMETHOD([dispid(22201), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBandOrderFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(22202), helpstring('Initializes a new instance with a raster format indicating the desired order of the bands in the source raster.')], HRESULT, 'InitializeWithOrder',
              ( ['in'], AgEStkGraphicsRasterFormat, 'BandOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBandOrderFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(22203), helpstring("Initializes a new instance with a raster format indicating the desired order of the bands in the source raster, and whether to maintain the source raster's format after swizzling.")], HRESULT, 'InitializeWithOrderAndBool',
              ( ['in'], AgEStkGraphicsRasterFormat, 'BandOrder' ),
              ( ['in'], VARIANT_BOOL, 'MaintainImageFormat' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBandOrderFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsBandOrderFilterFactory implementation
##class _IAgStkGraphicsBandOrderFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithOrder(self, BandOrder):
##        'Initializes a new instance with a raster format indicating the desired order of the bands in the source raster.'
##        #return ppRetVal
##
##    def InitializeWithOrderAndBool(self, BandOrder, MaintainImageFormat):
##        "Initializes a new instance with a raster format indicating the desired order of the bands in the source raster, and whether to maintain the source raster's format after swizzling."
##        #return ppRetVal
##

class AgStkGraphicsKmlFeatureCollection(CoClass):
    'A collection of KML features.'
    _reg_clsid_ = GUID('{DC206DAD-CC6D-43DE-8650-AA7FF714E136}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsKmlFeatureCollection._com_interfaces_ = [_IAgStkGraphicsKmlFeatureCollection, IAgStkGraphicsKmlFeatureCollection]

class AgStkGraphicsLighting(CoClass):
    'Lighting in the 3D scene.'
    _reg_clsid_ = GUID('{90335C3A-BB57-486D-9D0D-21C2B27E3876}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class IAgStkGraphicsLighting(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Lighting in the 3D scene.'
    _iid_ = GUID('{683CD020-54FC-48AF-B7E4-0DBE06C9BF12}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsLighting._com_interfaces_ = [_IAgStkGraphicsLighting, IAgStkGraphicsLighting]

class IAgStkGraphicsSharpenFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Applies a convolution filter to increase the sharpness of the source raster.'
    _iid_ = GUID('{953F907C-8223-40FA-9827-CB08278D5AF4}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsSharpenFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initialize a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSharpenFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initialize a new instance with the specified sharpen method.')], HRESULT, 'InitializeWithMethod',
              ( ['in'], AgEStkGraphicsSharpenMethod, 'Method' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSharpenFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSharpenFilterFactory implementation
##class IAgStkGraphicsSharpenFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initialize a new instance.'
##        #return ppRetVal
##
##    def InitializeWithMethod(self, Method):
##        'Initialize a new instance with the specified sharpen method.'
##        #return ppRetVal
##

IAgStkGraphicsScreenOverlayManager._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the overall bounds of the globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height.')], HRESULT, 'Bounds',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the collection of overlays that are contained within this manager.')], HRESULT, 'Overlays',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayCollection)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the padding surrounding the overlays that are contained within this manager. The array contains the components of the padding arranged in the order left, top, right, bottom.')], HRESULT, 'Padding',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the padding surrounding the overlays that are contained within this manager. The array contains the components of the padding arranged in the order left, top, right, bottom.')], HRESULT, 'Padding',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets if the collection of overlays that are contained within this manager should be <topic name='Glossary' anchor='Render'>rendered</topic>.")], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets if the collection of overlays that are contained within this manager should be <topic name='Glossary' anchor='Render'>rendered</topic>.")], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsScreenOverlayManager implementation
##class IAgStkGraphicsScreenOverlayManager_Impl(object):
##    @property
##    def Bounds(self):
##        'Gets the overall bounds of the globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'
##        #return ppRetVal
##
##    @property
##    def Overlays(self):
##        'Gets the collection of overlays that are contained within this manager.'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets the padding surrounding the overlays that are contained within this manager. The array contains the components of the padding arranged in the order left, top, right, bottom.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the padding surrounding the overlays that are contained within this manager. The array contains the components of the padding arranged in the order left, top, right, bottom.'
##    Padding = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the collection of overlays that are contained within this manager should be <topic name='Glossary' anchor='Render'>rendered</topic>."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the collection of overlays that are contained within this manager should be <topic name='Glossary' anchor='Render'>rendered</topic>."
##    Display = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsDistanceToPositionDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsDistanceToPositionDisplayCondition'
    _iid_ = GUID('{E6008D9A-119F-4AD2-AC26-75ED778D8B89}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsDistanceToPositionDisplayCondition._methods_ = [
    COMMETHOD([dispid(3601), helpstring('Gets or sets the minimum distance, in meters, of the inclusive distance interval.'), 'propget'], HRESULT, 'MinimumDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(3601), helpstring('Gets or sets the minimum distance, in meters, of the inclusive distance interval.'), 'propput'], HRESULT, 'MinimumDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(3602), helpstring('Gets the squared minimum distance, in meters, of the inclusive distance interval.'), 'propget'], HRESULT, 'MinimumDistanceSquared',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(3603), helpstring('Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'), 'propget'], HRESULT, 'MaximumDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(3603), helpstring('Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'), 'propput'], HRESULT, 'MaximumDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(3604), helpstring('Gets the squared maximum distance, in meters, of the inclusive distance interval.'), 'propget'], HRESULT, 'MaximumDistanceSquared',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(3605), helpstring('Gets or sets the position used to compute the distance from the camera. The array contains the components of the position arranged in the order x, y, z.'), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(3605), helpstring('Gets or sets the position used to compute the distance from the camera. The array contains the components of the position arranged in the order x, y, z.'), 'propput'], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(3606), helpstring('Gets or sets the reference frame that position is defined in.'), 'propget'], HRESULT, 'ReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(3606), helpstring('Gets or sets the reference frame that position is defined in.'), 'propput'], HRESULT, 'ReferenceFrame',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsDistanceToPositionDisplayCondition implementation
##class _IAgStkGraphicsDistanceToPositionDisplayCondition_Impl(object):
##    def _get(self):
##        'Gets or sets the minimum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the minimum distance, in meters, of the inclusive distance interval.'
##    MinimumDistance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumDistanceSquared(self):
##        'Gets the squared minimum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'
##    MaximumDistance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MaximumDistanceSquared(self):
##        'Gets the squared maximum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the position used to compute the distance from the camera. The array contains the components of the position arranged in the order x, y, z.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the position used to compute the distance from the camera. The array contains the components of the position arranged in the order x, y, z.'
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the reference frame that position is defined in.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference frame that position is defined in.'
##    ReferenceFrame = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsKmlDocumentLoadedEventArgs(CoClass):
    'The event is raised when a KML document has been loaded.'
    _reg_clsid_ = GUID('{AFCE5AF0-B1CE-47CC-9805-9DC75E06C6D4}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsKmlDocumentLoadedEventArgs(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsKmlDocumentLoadedEventArgs'
    _iid_ = GUID('{6157D6D6-D5B1-43F0-932C-00809D3AD772}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsKmlDocumentLoadedEventArgs(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The event is raised when a KML document has been loaded.'
    _iid_ = GUID('{60D78883-928F-45F2-AB60-0BECB167AF3D}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsKmlDocumentLoadedEventArgs._com_interfaces_ = [_IAgStkGraphicsKmlDocumentLoadedEventArgs, IAgStkGraphicsKmlDocumentLoadedEventArgs]

class IAgStkGraphicsKmlFolder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A KML folder.'
    _iid_ = GUID('{28B2DFB1-4F4C-4697-A0F9-076EBD92EB1F}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsKmlFolder._methods_ = [
]
################################################################
## code template for IAgStkGraphicsKmlFolder implementation
##class IAgStkGraphicsKmlFolder_Impl(object):

class AgStkGraphicsPathPrimitiveUpdatePolicy(CoClass):
    'A class that encapsulates the update logic for a path primitive. Derived classes must implement the Update method.'
    _reg_clsid_ = GUID('{72DB179A-E7B0-4FC5-8EE5-9E8BAC7301E9}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class IAgStkGraphicsPathPrimitiveUpdatePolicy(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A class that encapsulates the update logic for a path primitive. Derived classes must implement the Update method.'
    _iid_ = GUID('{71FE898E-DABB-4501-9C80-DCB1CDE9C16B}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsPathPrimitiveUpdatePolicy._com_interfaces_ = [_IAgStkGraphicsPathPrimitiveUpdatePolicy, IAgStkGraphicsPathPrimitiveUpdatePolicy]

class _IAgStkGraphicsGreatArcInterpolator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGreatArcInterpolator'
    _iid_ = GUID('{2FCF000F-0892-415B-B7D3-72797F0FABC0}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsGreatArcInterpolator._methods_ = [
    COMMETHOD([dispid(17201), helpstring('Gets the polyline type of positions returned from interpolate'), 'propget'], HRESULT, 'PolylineType',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPolylineType), 'pRetVal' )),
    COMMETHOD([dispid(17202), helpstring('Computes interpolated positions based on the input positions. Returns an array of positions in the order x, y, z.')], HRESULT, 'Interpolate',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(4001), helpstring('Gets or sets the central body used when interpolating with interpolate.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(4001), helpstring('Gets or sets the central body used when interpolating with interpolate.'), 'propput'], HRESULT, 'CentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(4002), helpstring('Gets or sets the granularity, in radians, used when interpolating with interpolate. Lower granularities are more precise but create more positions.'), 'propget'], HRESULT, 'Granularity',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(4002), helpstring('Gets or sets the granularity, in radians, used when interpolating with interpolate. Lower granularities are more precise but create more positions.'), 'propput'], HRESULT, 'Granularity',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGreatArcInterpolator implementation
##class _IAgStkGraphicsGreatArcInterpolator_Impl(object):
##    @property
##    def PolylineType(self):
##        'Gets the polyline type of positions returned from interpolate'
##        #return pRetVal
##
##    def Interpolate(self, Positions):
##        'Computes interpolated positions based on the input positions. Returns an array of positions in the order x, y, z.'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets the central body used when interpolating with interpolate.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the central body used when interpolating with interpolate.'
##    CentralBody = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the granularity, in radians, used when interpolating with interpolate. Lower granularities are more precise but create more positions.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the granularity, in radians, used when interpolating with interpolate. Lower granularities are more precise but create more positions.'
##    Granularity = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsFactoryAndInitializers(CoClass):
    "Methods and properties are used to initialize new primitives, display conditions, screen overlays, textures and many other types; compute and retrieve triangulator results and access global properties (what's known as static properties, static methods a..."
    _reg_clsid_ = GUID('{19FA48F4-A520-4EC2-94C7-3045BDC6E658}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsFactoryAndInitializers(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsFactoryAndInitializers'
    _iid_ = GUID('{CEC2CC9E-D647-4B14-A9CF-3411203E3E2C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsFactoryAndInitializers(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Methods and properties are used to initialize new primitives, display conditions, screen overlays, textures and many other types; compute and retrieve triangulator results and access global properties (what's known as static properties, static methods a..."
    _iid_ = GUID('{5CCF1EF3-48A0-4B22-9FCF-C32EAE3F8D69}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsFactoryAndInitializers._com_interfaces_ = [_IAgStkGraphicsFactoryAndInitializers, IAgStkGraphicsFactoryAndInitializers]

class AgStkGraphicsProjectedRasterOverlay(CoClass):
    'A globe image overlay which projects a raster onto the terrain or surface of the central body. You can also enable projection onto models by setting projected raster model projection to true for a Scene...'
    _reg_clsid_ = GUID('{F9B29D90-1552-4DBA-95A2-5B90A6BCAEA8}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsProjectedRasterOverlay._com_interfaces_ = [_IAgStkGraphicsProjectedRasterOverlay, IAgStkGraphicsProjectedRasterOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay]

IAgStkGraphicsRasterImageGlobeOverlay._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets whether transparent color should be used.')], HRESULT, 'UseTransparentColor',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether transparent color should be used.')], HRESULT, 'UseTransparentColor',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the color that will become transparent.')], HRESULT, 'TransparentColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the color that will become transparent.')], HRESULT, 'TransparentColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsRasterImageGlobeOverlay implementation
##class IAgStkGraphicsRasterImageGlobeOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets whether transparent color should be used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether transparent color should be used.'
##    UseTransparentColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the color that will become transparent.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the color that will become transparent.'
##    TransparentColor = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsKmlGraphics(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsKmlGraphics'
    _iid_ = GUID('{29CADCD7-383E-4C19-91DD-7A3AC3B21178}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsKmlDocument(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A KML document.'
    _iid_ = GUID('{2E284EFE-3DDA-4FAC-91AB-7B8C84EB3AD2}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsKmlGraphics._methods_ = [
    COMMETHOD([dispid(26901), helpstring('The collection of kml documents that are currently loaded.'), 'propget'], HRESULT, 'Documents',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlDocumentCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(26902), helpstring('Loads a kml document from a uri.')], HRESULT, 'LoadDocument',
              ( ['in'], BSTR, 'KmlUri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlDocument)), 'ppRetVal' )),
    COMMETHOD([dispid(26903), helpstring('Loads a kml document from a Uri.')], HRESULT, 'LoadDocumentString',
              ( ['in'], BSTR, 'KmlUri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlDocument)), 'ppRetVal' )),
    COMMETHOD([dispid(26904), helpstring('Loads a kml document from a string containing the document.')], HRESULT, 'Load',
              ( ['in'], BSTR, 'KmlDocument' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlDocument)), 'ppRetVal' )),
    COMMETHOD([dispid(26905), helpstring('Loads a kml document asynchronously from a uri. The document loaded event is raised when the document is loaded.')], HRESULT, 'LoadDocumentAsync',
              ( ['in'], BSTR, 'KmlUri' )),
    COMMETHOD([dispid(26906), helpstring('Loads a kml document asynchronously from a Uri. The document loaded event is raised when the document is loaded.')], HRESULT, 'LoadDocumentAsyncString',
              ( ['in'], BSTR, 'KmlUri' )),
    COMMETHOD([dispid(26907), helpstring('Loads a kml document asynchronously from a string containing the document. The document loaded event is raised when the document is loaded.')], HRESULT, 'LoadAsync',
              ( ['in'], BSTR, 'KmlDocument' )),
    COMMETHOD([dispid(26908), helpstring('Unloads a kml document. All associated visual features will be removed from the Scene. Once a KmlDocument is unloaded, it is no longer valid and will throw when accessing properties or methods.')], HRESULT, 'Unload',
              ( ['in'], POINTER(IAgStkGraphicsKmlDocument), 'KmlDocument' )),
    COMMETHOD([dispid(26909), helpstring('Unloads all kml documents associated with this central body. All associated visual features will be removed from the Scene. Once a KmlDocument is unloaded, it is no longer valid and will throw when accessing properties or methods.')], HRESULT, 'UnloadAll'),
]
################################################################
## code template for _IAgStkGraphicsKmlGraphics implementation
##class _IAgStkGraphicsKmlGraphics_Impl(object):
##    @property
##    def Documents(self):
##        'The collection of kml documents that are currently loaded.'
##        #return ppRetVal
##
##    def LoadDocument(self, KmlUri):
##        'Loads a kml document from a uri.'
##        #return ppRetVal
##
##    def LoadDocumentString(self, KmlUri):
##        'Loads a kml document from a Uri.'
##        #return ppRetVal
##
##    def Load(self, KmlDocument):
##        'Loads a kml document from a string containing the document.'
##        #return ppRetVal
##
##    def LoadDocumentAsync(self, KmlUri):
##        'Loads a kml document asynchronously from a uri. The document loaded event is raised when the document is loaded.'
##        #return 
##
##    def LoadDocumentAsyncString(self, KmlUri):
##        'Loads a kml document asynchronously from a Uri. The document loaded event is raised when the document is loaded.'
##        #return 
##
##    def LoadAsync(self, KmlDocument):
##        'Loads a kml document asynchronously from a string containing the document. The document loaded event is raised when the document is loaded.'
##        #return 
##
##    def Unload(self, KmlDocument):
##        'Unloads a kml document. All associated visual features will be removed from the Scene. Once a KmlDocument is unloaded, it is no longer valid and will throw when accessing properties or methods.'
##        #return 
##
##    def UnloadAll(self):
##        'Unloads all kml documents associated with this central body. All associated visual features will be removed from the Scene. Once a KmlDocument is unloaded, it is no longer valid and will throw when accessing properties or methods.'
##        #return 
##

class IAgStkGraphicsLevelsFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Adjusts the band levels of the source raster linearly.'
    _iid_ = GUID('{30236AFE-B593-4E6C-9E61-099216F14DB1}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsLevelsFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsLevelsFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsLevelsFilterFactory implementation
##class IAgStkGraphicsLevelsFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##

class _IAgStkGraphicsRasterFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsRasterFilter'
    _iid_ = GUID('{4FF4EB55-B6C8-4A66-B7D3-E8D313DE251A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsRasterFilter._methods_ = [
]
################################################################
## code template for _IAgStkGraphicsRasterFilter implementation
##class _IAgStkGraphicsRasterFilter_Impl(object):

class AgStkGraphicsExtrudedPolylineTriangulatorResult(CoClass):
    'The result from extruded polyline triangulation: a triangle mesh defined using an indexed triangle list with top and bottom boundary positions. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive...'
    _reg_clsid_ = GUID('{3EFEB652-A2CE-432F-8596-0860FE9F5C98}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class IAgStkGraphicsExtrudedPolylineTriangulatorResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The result from extruded polyline triangulation: a triangle mesh defined using an indexed triangle list with top and bottom boundary positions. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive...'
    _iid_ = GUID('{5D94D077-0A56-4D83-AC90-369344533684}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsExtrudedPolylineTriangulatorResult._com_interfaces_ = [_IAgStkGraphicsExtrudedPolylineTriangulatorResult, IAgStkGraphicsExtrudedPolylineTriangulatorResult, IAgStkGraphicsTriangulatorResult]

class AgStkGraphicsProjection(CoClass):
    'A projection represents a simplified camera with a position, orientation, and field of view horizontal and field of view vertical...'
    _reg_clsid_ = GUID('{BF754ACA-C4D0-4C55-8D2B-862E53DABE35}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsProjection._com_interfaces_ = [_IAgStkGraphicsProjection, IAgStkGraphicsProjection]

class IAgStkGraphicsTerrainOverlayInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A globe overlay which shows terrain.'
    _iid_ = GUID('{74C0ACDE-8D75-49DF-87C1-2C39E3240283}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsTerrainOverlayInitializer._methods_ = [
    COMMETHOD(['propget', helpstring('Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects.')], HRESULT, 'Supported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTerrainOverlayInitializer implementation
##class IAgStkGraphicsTerrainOverlayInitializer_Impl(object):
##    @property
##    def Supported(self):
##        'Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects.'
##        #return pRetVal
##

IAgStkGraphicsSharpenFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the method used to sharpen the source raster.')], HRESULT, 'Method',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSharpenMethod), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the method used to sharpen the source raster.')], HRESULT, 'Method',
              ( ['in'], AgEStkGraphicsSharpenMethod, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSharpenFilter implementation
##class IAgStkGraphicsSharpenFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the method used to sharpen the source raster.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the method used to sharpen the source raster.'
##    Method = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsSolidTriangulatorResult(CoClass):
    'The result from a triangulation of a solid: a triangle mesh defined using an indexed triangle list and positions outlining the solid. It is recommended to visualize the solid using a solid primitive...'
    _reg_clsid_ = GUID('{3BA72C70-DD5F-4186-90A8-E1FE3B1BED85}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsSolidTriangulatorResult._com_interfaces_ = [_IAgStkGraphicsSolidTriangulatorResult, IAgStkGraphicsSolidTriangulatorResult, IAgStkGraphicsTriangulatorResult]

class AgStkGraphicsProjectionStream(CoClass):
    'A projection that is updated dynamically at the specified update delta. The class can be used to stream projection data to projection clients, like projected raster overlay...'
    _reg_clsid_ = GUID('{395E2AE9-08AF-4FBA-BE32-5F3141D89D3C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsProjectionStream(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsProjectionStream'
    _iid_ = GUID('{AE0209D3-2AF4-4881-A4A5-2D53EB3AC4D1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsProjectionStream._com_interfaces_ = [_IAgStkGraphicsProjectionStream, IAgStkGraphicsProjectionStream, IAgStkGraphicsProjection]

class AgStkGraphicsSurfaceShapesResult(CoClass):
    'Represents the boundary positions of a shape on the surface computed from by a surface shapes method.'
    _reg_clsid_ = GUID('{C9C1CBE5-A2CB-4226-B2DF-7E343628C41A}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsSurfaceShapesResult._com_interfaces_ = [_IAgStkGraphicsSurfaceShapesResult, IAgStkGraphicsSurfaceShapesResult]

class AgStkGraphicsSceneGlobeOverlaySettings(CoClass):
    'Settings used by globe overlay objects. These settings only affect the scene.'
    _reg_clsid_ = GUID('{FED84D60-DC17-431E-8B24-FE7585E62D2D}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class IAgStkGraphicsSceneGlobeOverlaySettings(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Settings used by globe overlay objects. These settings only affect the scene.'
    _iid_ = GUID('{6F2961C3-3FBE-4D5C-849B-D17BE044DD71}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsSceneGlobeOverlaySettings._com_interfaces_ = [_IAgStkGraphicsSceneGlobeOverlaySettings, IAgStkGraphicsSceneGlobeOverlaySettings]

class IAgStkGraphicsAltitudeDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Defines an inclusive altitude interval, in meters, that determines when an object is <topic name='Glossary' anchor='Render'>rendered</topic> based on the camera's altitude relative to a central body."
    _iid_ = GUID('{EE1EFBF0-DDBF-41FF-9257-FF73E164D27A}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsAltitudeDisplayConditionFactory._methods_ = [
    COMMETHOD([helpstring("Initializes a default altitude display condition. With this constructor, an object is always <topic name='Glossary' anchor='Render'>rendered</topic> regardless of the camera's altitude.")], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAltitudeDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes an altitude display condition with the inclusive altitude interval [minimumAltitude, maximumAltitude]...')], HRESULT, 'InitializeWithAltitudes',
              ( ['in'], c_double, 'MinimumAltitude' ),
              ( ['in'], c_double, 'MaximumAltitude' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAltitudeDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes an altitude display condition with the inclusive altitude interval [minimumAltitude, maximumAltitude]...')], HRESULT, 'InitializeWithCentralBodyAndAltitudes',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], c_double, 'MinimumAltitude' ),
              ( ['in'], c_double, 'MaximumAltitude' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAltitudeDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsAltitudeDisplayConditionFactory implementation
##class IAgStkGraphicsAltitudeDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        "Initializes a default altitude display condition. With this constructor, an object is always <topic name='Glossary' anchor='Render'>rendered</topic> regardless of the camera's altitude."
##        #return ppRetVal
##
##    def InitializeWithAltitudes(self, MinimumAltitude, MaximumAltitude):
##        'Initializes an altitude display condition with the inclusive altitude interval [minimumAltitude, maximumAltitude]...'
##        #return ppRetVal
##
##    def InitializeWithCentralBodyAndAltitudes(self, CentralBody, MinimumAltitude, MaximumAltitude):
##        'Initializes an altitude display condition with the inclusive altitude interval [minimumAltitude, maximumAltitude]...'
##        #return ppRetVal
##

class _IAgStkGraphicsBlurFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsBlurFilterFactory'
    _iid_ = GUID('{2A8657F1-2EB1-48FF-B058-A80D995CB051}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsBlurFilterFactory._methods_ = [
    COMMETHOD([dispid(22301), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBlurFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(22302), helpstring('Initialize a new instance with the specified blur method.')], HRESULT, 'InitializeWithMethod',
              ( ['in'], AgEStkGraphicsBlurMethod, 'Method' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBlurFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsBlurFilterFactory implementation
##class _IAgStkGraphicsBlurFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithMethod(self, Method):
##        'Initialize a new instance with the specified blur method.'
##        #return ppRetVal
##

IAgStkGraphicsRasterAttributes._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the raster format associated with the attributes.')], HRESULT, 'Format',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsRasterFormat), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the raster type associated with the attributes.')], HRESULT, 'Type',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsRasterType), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the raster orientation associated with the attributes.')], HRESULT, 'Orientation',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsRasterOrientation), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the size of the raster data in bytes.')], HRESULT, 'ByteLength',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the width of the raster in pixels.')], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the height of the raster in pixels.')], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the pixel aspect ratio of the raster.')], HRESULT, 'PixelAspectRatio',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the row alignment of the raster data in bytes.')], HRESULT, 'RowAlignment',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the number of bands comprising the raster.')], HRESULT, 'NumberOfBands',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the stride or scan/row width in bytes of the raster data.')], HRESULT, 'RowStride',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([helpstring('Gets whether the raster contains the given band.')], HRESULT, 'HasBand',
              ( ['in'], AgEStkGraphicsRasterBand, 'Band' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsRasterAttributes implementation
##class IAgStkGraphicsRasterAttributes_Impl(object):
##    @property
##    def Format(self):
##        'Gets the raster format associated with the attributes.'
##        #return pRetVal
##
##    @property
##    def Type(self):
##        'Gets the raster type associated with the attributes.'
##        #return pRetVal
##
##    @property
##    def Orientation(self):
##        'Gets the raster orientation associated with the attributes.'
##        #return pRetVal
##
##    @property
##    def ByteLength(self):
##        'Gets the size of the raster data in bytes.'
##        #return pRetVal
##
##    @property
##    def Width(self):
##        'Gets the width of the raster in pixels.'
##        #return pRetVal
##
##    @property
##    def Height(self):
##        'Gets the height of the raster in pixels.'
##        #return pRetVal
##
##    @property
##    def PixelAspectRatio(self):
##        'Gets the pixel aspect ratio of the raster.'
##        #return pRetVal
##
##    @property
##    def RowAlignment(self):
##        'Gets the row alignment of the raster data in bytes.'
##        #return pRetVal
##
##    @property
##    def NumberOfBands(self):
##        'Gets the number of bands comprising the raster.'
##        #return pRetVal
##
##    @property
##    def RowStride(self):
##        'Gets the stride or scan/row width in bytes of the raster data.'
##        #return pRetVal
##
##    def HasBand(self, Band):
##        'Gets whether the raster contains the given band.'
##        #return pRetVal
##

class AgStkGraphicsSurfaceTriangulatorResult(CoClass):
    'The result from a triangulation on the surface of a central body: a triangle mesh defined using an indexed triangle list and boundary positions surrounding the mesh...'
    _reg_clsid_ = GUID('{F2C6C4DD-C085-4AAB-AC47-DC201F02F235}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsSurfaceTriangulatorResult._com_interfaces_ = [_IAgStkGraphicsSurfaceTriangulatorResult, IAgStkGraphicsSurfaceTriangulatorResult, IAgStkGraphicsTriangulatorResult]

class AgStkGraphicsScreenOverlayCollectionBase(CoClass):
    'The common base class for collections of overlays held by screen overlay and by screen overlay manager.'
    _reg_clsid_ = GUID('{4ADC0A17-06FB-47ED-B7D5-22915224BA51}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsScreenOverlayCollectionBase._com_interfaces_ = [_IAgStkGraphicsScreenOverlayCollectionBase, IAgStkGraphicsScreenOverlayCollectionBase]

IAgStkGraphicsLevelsFilter._methods_ = [
    COMMETHOD([helpstring('Sets the linear level adjustment value for the given raster band. Both negative and positive values are accepted.')], HRESULT, 'SetLevelAdjustment',
              ( ['in'], AgEStkGraphicsRasterBand, 'Band' ),
              ( ['in'], c_int, 'Adjustment' )),
    COMMETHOD([helpstring('Clears the level adjustment values for all bands.')], HRESULT, 'ClearAdjustments'),
]
################################################################
## code template for IAgStkGraphicsLevelsFilter implementation
##class IAgStkGraphicsLevelsFilter_Impl(object):
##    def SetLevelAdjustment(self, Band, Adjustment):
##        'Sets the linear level adjustment value for the given raster band. Both negative and positive values are accepted.'
##        #return 
##
##    def ClearAdjustments(self):
##        'Clears the level adjustment values for all bands.'
##        #return 
##

class IAgStkGraphicsTextBatchPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    " Renders one or more strings in the 3D scene.  For best performance, avoid creating lots of batches with only a few strings each. See the <topic name='Batching'>Batching Performance Overview</topic>. "
    _iid_ = GUID('{DFCC32BB-E95A-46C5-A1E4-ED3ACF184D3A}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsTextBatchPrimitiveFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a marker batch primitive with the specified font. This is equivalent to constructing a text batch with the specified font and a set hint of Frequent.')], HRESULT, 'InitializeWithGraphicsFont',
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a marker batch primitive with the specified font and setHint.')], HRESULT, 'InitializeWithGraphicsFontAndSetHint',
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a text batch primitive with the specified font and setHint, optimized for 2d screen space rendering.')], HRESULT, 'InitializeWithGraphicsFontAndSetHint2d',
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['in'], VARIANT_BOOL, 'RenderInScreenSpace' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextBatchPrimitive)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTextBatchPrimitiveFactory implementation
##class IAgStkGraphicsTextBatchPrimitiveFactory_Impl(object):
##    def InitializeWithGraphicsFont(self, Font):
##        'Initializes a marker batch primitive with the specified font. This is equivalent to constructing a text batch with the specified font and a set hint of Frequent.'
##        #return ppRetVal
##
##    def InitializeWithGraphicsFontAndSetHint(self, Font, SetHint):
##        'Initializes a marker batch primitive with the specified font and setHint.'
##        #return ppRetVal
##
##    def InitializeWithGraphicsFontAndSetHint2d(self, Font, SetHint, RenderInScreenSpace):
##        'Initializes a text batch primitive with the specified font and setHint, optimized for 2d screen space rendering.'
##        #return ppRetVal
##

class IAgStkGraphicsSurfaceMeshPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A triangle mesh primitive for meshes on the surface that need to conform to terrain.'
    _iid_ = GUID('{08C3D10B-0CF0-41E9-93D0-E73B9D25E329}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsSurfaceMeshPrimitiveFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a default surface mesh primitive. This is equivalent to constructing a surface mesh with a set hint of Frequent and a surface mesh rendering method of Automatic.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceMeshPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a surface mesh primitive with the specified setHint. This is equivalent to constructing a surface mesh with the specified setHint and a surface mesh rendering method of Automatic.')], HRESULT, 'InitializeWithSetHint',
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceMeshPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a surface mesh primitive with the specified setHint and renderingMethod.')], HRESULT, 'InitializeWithSetHintAndRenderingMethod',
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['in'], AgEStkGraphicsSurfaceMeshRenderingMethod, 'RenderingMethod' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceMeshPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Determines whether or not the video card supports the surface mesh primitive with the given renderingMethod.')], HRESULT, 'Supported',
              ( ['in'], AgEStkGraphicsSurfaceMeshRenderingMethod, 'RenderingMethod' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Determines whether or not the video card supports the surface mesh primitive. This is equivalent to calling Supported with automatic.')], HRESULT, 'SupportedWithDefaultRenderingMethod',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSurfaceMeshPrimitiveFactory implementation
##class IAgStkGraphicsSurfaceMeshPrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default surface mesh primitive. This is equivalent to constructing a surface mesh with a set hint of Frequent and a surface mesh rendering method of Automatic.'
##        #return ppRetVal
##
##    def InitializeWithSetHint(self, SetHint):
##        'Initializes a surface mesh primitive with the specified setHint. This is equivalent to constructing a surface mesh with the specified setHint and a surface mesh rendering method of Automatic.'
##        #return ppRetVal
##
##    def InitializeWithSetHintAndRenderingMethod(self, SetHint, RenderingMethod):
##        'Initializes a surface mesh primitive with the specified setHint and renderingMethod.'
##        #return ppRetVal
##
##    def Supported(self, RenderingMethod):
##        'Determines whether or not the video card supports the surface mesh primitive with the given renderingMethod.'
##        #return pRetVal
##
##    def SupportedWithDefaultRenderingMethod(self):
##        'Determines whether or not the video card supports the surface mesh primitive. This is equivalent to calling Supported with automatic.'
##        #return pRetVal
##

class _IAgStkGraphicsTriangleMeshPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTriangleMeshPrimitiveFactory'
    _iid_ = GUID('{12940185-0225-45D7-AC39-8AE8F181CC0C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsTriangleMeshPrimitiveFactory._methods_ = [
    COMMETHOD([dispid(9001), helpstring('Initializes a default triangle mesh primitive. This is equivalent to constructing a triangle mesh with a set hint of Frequent.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTriangleMeshPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(9002), helpstring('Initializes a triangle mesh primitive with the specified setHint .')], HRESULT, 'InitializeWithSetHint',
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTriangleMeshPrimitive)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTriangleMeshPrimitiveFactory implementation
##class _IAgStkGraphicsTriangleMeshPrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default triangle mesh primitive. This is equivalent to constructing a triangle mesh with a set hint of Frequent.'
##        #return ppRetVal
##
##    def InitializeWithSetHint(self, SetHint):
##        'Initializes a triangle mesh primitive with the specified setHint .'
##        #return ppRetVal
##

class AgStkGraphicsTriangulatorResult(CoClass):
    'The result from triangulation: a triangle mesh defined using an indexed triangle list. This is commonly visualized with the triangle mesh primitive or surface mesh primitive.'
    _reg_clsid_ = GUID('{1F8D5080-4D48-436A-9451-3B853343B74B}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTriangulatorResult._com_interfaces_ = [_IAgStkGraphicsTriangulatorResult, IAgStkGraphicsTriangulatorResult]

class AgStkGraphicsTexture2DFactory(CoClass):
    'A factory for creating texture 2d objects from various sources.'
    _reg_clsid_ = GUID('{C037724B-44BD-42DF-8C9C-F8AFD8B09900}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTexture2DFactory._com_interfaces_ = [_IAgStkGraphicsTexture2DFactory, IAgStkGraphicsTexture2DFactory]

class _IAgStkGraphicsTextureFilter2D(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTextureFilter2D'
    _iid_ = GUID('{7F8D6ADC-44AF-4C1F-A083-A4CD887F8E6E}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgEStkGraphicsMinificationFilter'
eStkGraphicsMinificationFilterNearest = 0
eStkGraphicsMinificationFilterLinear = 1
eStkGraphicsMinificationFilterNearestMipMapNearest = 2
eStkGraphicsMinificationFilterLinearMipMapNearest = 3
eStkGraphicsMinificationFilterNearestMipMapLinear = 4
eStkGraphicsMinificationFilterLinearMipMapLinear = 5
AgEStkGraphicsMinificationFilter = c_int # enum

# values for enumeration 'AgEStkGraphicsMagnificationFilter'
eStkGraphicsMagnificationFilterNearest = 0
eStkGraphicsMagnificationFilterLinear = 1
AgEStkGraphicsMagnificationFilter = c_int # enum

# values for enumeration 'AgEStkGraphicsTextureWrap'
eStkGraphicsTextureWrapClamp = 0
eStkGraphicsTextureWrapClampToBorder = 1
eStkGraphicsTextureWrapClampToEdge = 2
eStkGraphicsTextureWrapMirroredRepeat = 3
eStkGraphicsTextureWrapRepeat = 4
AgEStkGraphicsTextureWrap = c_int # enum
_IAgStkGraphicsTextureFilter2D._methods_ = [
    COMMETHOD([dispid(19401), helpstring('Gets the minification filter used when the pixel being textured maps to an area less than or equal to one texel.'), 'propget'], HRESULT, 'MinificationFilter',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMinificationFilter), 'pRetVal' )),
    COMMETHOD([dispid(19402), helpstring('Gets the magnification filter used when the pixel being textured maps to an area greater than one texel.'), 'propget'], HRESULT, 'MagnificationFilter',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMagnificationFilter), 'pRetVal' )),
    COMMETHOD([dispid(19403), helpstring('Gets the texture wrap for the s direction.'), 'propget'], HRESULT, 'WrapS',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsTextureWrap), 'pRetVal' )),
    COMMETHOD([dispid(19404), helpstring('Gets the texture wrap for the t direction.'), 'propget'], HRESULT, 'WrapT',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsTextureWrap), 'pRetVal' )),
    COMMETHOD([dispid(19405), helpstring('Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: ClampToEdge, WrapT: ClampToEdge'), 'propget'], HRESULT, 'NearestClampToEdge',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([dispid(19406), helpstring('Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: Repeat, WrapT: Repeat'), 'propget'], HRESULT, 'NearestRepeat',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([dispid(19407), helpstring('Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: ClampToEdge, WrapT: ClampToEdge'), 'propget'], HRESULT, 'LinearClampToEdge',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([dispid(19408), helpstring('Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: Repeat, WrapT: Repeat'), 'propget'], HRESULT, 'LinearRepeat',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTextureFilter2D implementation
##class _IAgStkGraphicsTextureFilter2D_Impl(object):
##    @property
##    def MinificationFilter(self):
##        'Gets the minification filter used when the pixel being textured maps to an area less than or equal to one texel.'
##        #return pRetVal
##
##    @property
##    def MagnificationFilter(self):
##        'Gets the magnification filter used when the pixel being textured maps to an area greater than one texel.'
##        #return pRetVal
##
##    @property
##    def WrapS(self):
##        'Gets the texture wrap for the s direction.'
##        #return pRetVal
##
##    @property
##    def WrapT(self):
##        'Gets the texture wrap for the t direction.'
##        #return pRetVal
##
##    @property
##    def NearestClampToEdge(self):
##        'Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: ClampToEdge, WrapT: ClampToEdge'
##        #return ppRetVal
##
##    @property
##    def NearestRepeat(self):
##        'Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: Repeat, WrapT: Repeat'
##        #return ppRetVal
##
##    @property
##    def LinearClampToEdge(self):
##        'Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: ClampToEdge, WrapT: ClampToEdge'
##        #return ppRetVal
##
##    @property
##    def LinearRepeat(self):
##        'Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: Repeat, WrapT: Repeat'
##        #return ppRetVal
##

class AgStkGraphicsSharpenFilter(CoClass):
    'Applies a convolution filter to increase the sharpness of the source raster.'
    _reg_clsid_ = GUID('{63F68D1D-D7FE-485B-88A7-BF67C3C3C1D7}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsSharpenFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSharpenFilter'
    _iid_ = GUID('{999EF99F-82E5-4F15-82DB-8DBD6A7169E0}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsSharpenFilter._com_interfaces_ = [_IAgStkGraphicsSharpenFilter, IAgStkGraphicsSharpenFilter, IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter]

class AgStkGraphicsPositionInterpolator(CoClass):
    'Position interpolators compute positions based on a collection of input positions. Position interpolators are used in conjunction with the polyline primitive to render things such as great arcs and rhumb lines.'
    _reg_clsid_ = GUID('{7D6E4996-1D67-4756-AD71-82A698366ED6}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsPositionInterpolator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPositionInterpolator'
    _iid_ = GUID('{6FD1D9D8-FDA6-49EE-8E24-0CE0F6E18622}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsPositionInterpolator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Position interpolators compute positions based on a collection of input positions. Position interpolators are used in conjunction with the polyline primitive to render things such as great arcs and rhumb lines.'
    _iid_ = GUID('{512C0D62-559E-42CE-98E2-218C02662290}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsPositionInterpolator._com_interfaces_ = [_IAgStkGraphicsPositionInterpolator, IAgStkGraphicsPositionInterpolator]

class _IAgStkGraphicsVectorPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsVectorPrimitive'
    _iid_ = GUID('{26AAEC7D-206D-412F-82A2-059E892B5EE1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsVectorPrimitive._methods_ = [
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propget'], HRESULT, 'ReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propput'], HRESULT, 'ReferenceFrame',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propput'], HRESULT, 'BoundingSphere',
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'ppRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propget'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propput'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(28001), helpstring('Gets or Sets whether the primitive is lit.'), 'propget'], HRESULT, 'Lighting',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28001), helpstring('Gets or Sets whether the primitive is lit.'), 'propput'], HRESULT, 'Lighting',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28019), helpstring('Gets or Sets the a user-defined label.'), 'propget'], HRESULT, 'Label',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(28019), helpstring('Gets or Sets the a user-defined label.'), 'propput'], HRESULT, 'Label',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(28002), helpstring("Gets or Sets whether the vector's label is displayed."), 'propget'], HRESULT, 'DisplayLabel',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28002), helpstring("Gets or Sets whether the vector's label is displayed."), 'propput'], HRESULT, 'DisplayLabel',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28008), helpstring("Gets or Sets whether the vector's magnitude is displayed. Formatter controls unit conversions."), 'propget'], HRESULT, 'DisplayMagnitude',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28008), helpstring("Gets or Sets whether the vector's magnitude is displayed. Formatter controls unit conversions."), 'propput'], HRESULT, 'DisplayMagnitude',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28009), helpstring("Gets or Sets whether the vector's RA-Dec is displayed. Formatter controls unit conversions."), 'propget'], HRESULT, 'DisplayRADec',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28009), helpstring("Gets or Sets whether the vector's RA-Dec is displayed. Formatter controls unit conversions."), 'propput'], HRESULT, 'DisplayRADec',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28010), helpstring('Gets or Sets whether the persistence trace (points) is displayed.'), 'propget'], HRESULT, 'DisplayTrace',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28010), helpstring('Gets or Sets whether the persistence trace (points) is displayed.'), 'propput'], HRESULT, 'DisplayTrace',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28011), helpstring('Gets or Sets whether the persistence sweep (triangles) is displayed.'), 'propget'], HRESULT, 'DisplaySweep',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28011), helpstring('Gets or Sets whether the persistence sweep (triangles) is displayed.'), 'propput'], HRESULT, 'DisplaySweep',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28012), helpstring('Gets or Sets whether persistence lines are displayed.'), 'propget'], HRESULT, 'DisplayLines',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28012), helpstring('Gets or Sets whether persistence lines are displayed.'), 'propput'], HRESULT, 'DisplayLines',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28013), helpstring('Gets or Sets persistence point/line width.'), 'propget'], HRESULT, 'PersistenceWidth',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(28013), helpstring('Gets or Sets persistence point/line width.'), 'propput'], HRESULT, 'PersistenceWidth',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(28014), helpstring('Gets or Sets whether the persistence path should fade over time.'), 'propget'], HRESULT, 'FadePersistence',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28014), helpstring('Gets or Sets whether the persistence path should fade over time.'), 'propput'], HRESULT, 'FadePersistence',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(28015), helpstring('Gets or Sets the maximum length (in seconds) of the persistence path.'), 'propget'], HRESULT, 'PersistenceDuration',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(28015), helpstring('Gets or Sets the maximum length (in seconds) of the persistence path.'), 'propput'], HRESULT, 'PersistenceDuration',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(28016), helpstring("Gets or Sets the vector's source-to-arrow-tip length."), 'propget'], HRESULT, 'Length',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(28016), helpstring("Gets or Sets the vector's source-to-arrow-tip length."), 'propput'], HRESULT, 'Length',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(28017), helpstring("Gets or Sets the vector's width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness."), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(28017), helpstring("Gets or Sets the vector's width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness."), 'propput'], HRESULT, 'Width',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(28018), helpstring("Gets or Sets whether vector's 'true scale' length (based on how the primitive was created) should be used."), 'propget'], HRESULT, 'TrueScale',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(28018), helpstring("Gets or Sets whether vector's 'true scale' length (based on how the primitive was created) should be used."), 'propput'], HRESULT, 'TrueScale',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsVectorPrimitive implementation
##class _IAgStkGraphicsVectorPrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##    ReferenceFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##    BoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##    AutomaticallyComputeBoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's color."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether the primitive is lit.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether the primitive is lit.'
##    Lighting = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets the a user-defined label.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets the a user-defined label.'
##    Label = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or Sets whether the vector's label is displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or Sets whether the vector's label is displayed."
##    DisplayLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or Sets whether the vector's magnitude is displayed. Formatter controls unit conversions."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or Sets whether the vector's magnitude is displayed. Formatter controls unit conversions."
##    DisplayMagnitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or Sets whether the vector's RA-Dec is displayed. Formatter controls unit conversions."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or Sets whether the vector's RA-Dec is displayed. Formatter controls unit conversions."
##    DisplayRADec = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether the persistence trace (points) is displayed.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether the persistence trace (points) is displayed.'
##    DisplayTrace = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether the persistence sweep (triangles) is displayed.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether the persistence sweep (triangles) is displayed.'
##    DisplaySweep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether persistence lines are displayed.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether persistence lines are displayed.'
##    DisplayLines = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets persistence point/line width.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets persistence point/line width.'
##    PersistenceWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether the persistence path should fade over time.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether the persistence path should fade over time.'
##    FadePersistence = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets the maximum length (in seconds) of the persistence path.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets the maximum length (in seconds) of the persistence path.'
##    PersistenceDuration = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or Sets the vector's source-to-arrow-tip length."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or Sets the vector's source-to-arrow-tip length."
##    Length = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or Sets the vector's width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or Sets the vector's width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness."
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or Sets whether vector's 'true scale' length (based on how the primitive was created) should be used."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or Sets whether vector's 'true scale' length (based on how the primitive was created) should be used."
##    TrueScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##

_IAgStkGraphicsTextureFilter2DFactory._methods_ = [
    COMMETHOD([dispid(17801), helpstring('Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: ClampToEdge, WrapT: ClampToEdge'), 'propget'], HRESULT, 'NearestClampToEdge',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([dispid(17802), helpstring('Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: Repeat, WrapT: Repeat'), 'propget'], HRESULT, 'NearestRepeat',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([dispid(17803), helpstring('Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: ClampToEdge, WrapT: ClampToEdge'), 'propget'], HRESULT, 'LinearClampToEdge',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([dispid(17804), helpstring('Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: Repeat, WrapT: Repeat'), 'propget'], HRESULT, 'LinearRepeat',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([dispid(17805), helpstring('Creates a texture filter using the specified minification/magnification options and texture wrap.')], HRESULT, 'Initialize',
              ( ['in'], AgEStkGraphicsMinificationFilter, 'MinificationFilter' ),
              ( ['in'], AgEStkGraphicsMagnificationFilter, 'MagnificationFilter' ),
              ( ['in'], AgEStkGraphicsTextureWrap, 'WrapS' ),
              ( ['in'], AgEStkGraphicsTextureWrap, 'WrapT' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([dispid(17806), helpstring('Creates a texture filter using the specified texture wrap.')], HRESULT, 'InitializeWithTextureWrap',
              ( ['in'], AgEStkGraphicsTextureWrap, 'WrapS' ),
              ( ['in'], AgEStkGraphicsTextureWrap, 'WrapT' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([dispid(17807), helpstring('Creates a texture filter using the specified minification/magnification options.')], HRESULT, 'InitializeWithMinificationAndMagnification',
              ( ['in'], AgEStkGraphicsMinificationFilter, 'MinificationFilter' ),
              ( ['in'], AgEStkGraphicsMagnificationFilter, 'MagnificationFilter' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTextureFilter2DFactory implementation
##class _IAgStkGraphicsTextureFilter2DFactory_Impl(object):
##    @property
##    def NearestClampToEdge(self):
##        'Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: ClampToEdge, WrapT: ClampToEdge'
##        #return ppRetVal
##
##    @property
##    def NearestRepeat(self):
##        'Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: Repeat, WrapT: Repeat'
##        #return ppRetVal
##
##    @property
##    def LinearClampToEdge(self):
##        'Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: ClampToEdge, WrapT: ClampToEdge'
##        #return ppRetVal
##
##    @property
##    def LinearRepeat(self):
##        'Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: Repeat, WrapT: Repeat'
##        #return ppRetVal
##
##    def Initialize(self, MinificationFilter, MagnificationFilter, WrapS, WrapT):
##        'Creates a texture filter using the specified minification/magnification options and texture wrap.'
##        #return ppRetVal
##
##    def InitializeWithTextureWrap(self, WrapS, WrapT):
##        'Creates a texture filter using the specified texture wrap.'
##        #return ppRetVal
##
##    def InitializeWithMinificationAndMagnification(self, MinificationFilter, MagnificationFilter):
##        'Creates a texture filter using the specified minification/magnification options.'
##        #return ppRetVal
##

class _IAgStkGraphicsFlipFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsFlipFilter'
    _iid_ = GUID('{831CAAC6-83AA-4295-8860-46B428FFE9DA}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsFlipFilter._methods_ = [
    COMMETHOD([dispid(21001), helpstring('Gets or sets the flip axis along which the source raster will be flipped.'), 'propget'], HRESULT, 'FlipAxis',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsFlipAxis), 'pRetVal' )),
    COMMETHOD([dispid(21001), helpstring('Gets or sets the flip axis along which the source raster will be flipped.'), 'propput'], HRESULT, 'FlipAxis',
              ( ['in'], AgEStkGraphicsFlipAxis, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsFlipFilter implementation
##class _IAgStkGraphicsFlipFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the flip axis along which the source raster will be flipped.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the flip axis along which the source raster will be flipped.'
##    FlipAxis = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsAxesPrimitive._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or Sets whether the primitive is lit.')], HRESULT, 'Lighting',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets whether the primitive is lit.')], HRESULT, 'Lighting',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or Sets the axes label.')], HRESULT, 'Label',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets the axes label.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or Sets whether the axes' label is displayed.")], HRESULT, 'DisplayLabel',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or Sets whether the axes' label is displayed.")], HRESULT, 'DisplayLabel',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or Sets whether the persistence trace (points) is displayed.')], HRESULT, 'DisplayTrace',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets whether the persistence trace (points) is displayed.')], HRESULT, 'DisplayTrace',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or Sets whether the persistence sweep (triangles) is displayed.')], HRESULT, 'DisplaySweep',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets whether the persistence sweep (triangles) is displayed.')], HRESULT, 'DisplaySweep',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or Sets whether persistence lines are displayed.')], HRESULT, 'DisplayLines',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets whether persistence lines are displayed.')], HRESULT, 'DisplayLines',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or Sets persistence point/line width.')], HRESULT, 'PersistenceWidth',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets persistence point/line width.')], HRESULT, 'PersistenceWidth',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or Sets whether the persistence path should fade over time.')], HRESULT, 'FadePersistence',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets whether the persistence path should fade over time.')], HRESULT, 'FadePersistence',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or Sets the maximum length (in seconds) of the persistence path.')], HRESULT, 'PersistenceDuration',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets the maximum length (in seconds) of the persistence path.')], HRESULT, 'PersistenceDuration',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or Sets the axes' source-to-arrow-tip length.")], HRESULT, 'Length',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or Sets the axes' source-to-arrow-tip length.")], HRESULT, 'Length',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or Sets the width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness.')], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets the width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness.')], HRESULT, 'Width',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsAxesPrimitive implementation
##class IAgStkGraphicsAxesPrimitive_Impl(object):
##    def _get(self):
##        'Gets or Sets whether the primitive is lit.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether the primitive is lit.'
##    Lighting = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets the axes label.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets the axes label.'
##    Label = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or Sets whether the axes' label is displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or Sets whether the axes' label is displayed."
##    DisplayLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether the persistence trace (points) is displayed.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether the persistence trace (points) is displayed.'
##    DisplayTrace = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether the persistence sweep (triangles) is displayed.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether the persistence sweep (triangles) is displayed.'
##    DisplaySweep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether persistence lines are displayed.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether persistence lines are displayed.'
##    DisplayLines = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets persistence point/line width.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets persistence point/line width.'
##    PersistenceWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether the persistence path should fade over time.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether the persistence path should fade over time.'
##    FadePersistence = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets the maximum length (in seconds) of the persistence path.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets the maximum length (in seconds) of the persistence path.'
##    PersistenceDuration = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or Sets the axes' source-to-arrow-tip length."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or Sets the axes' source-to-arrow-tip length."
##    Length = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets the width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets the width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness.'
##    Width = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsVideoStream(CoClass):
    "A raster stream that streams from a video. The video can be read from a file, or streamed from an HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage."
    _reg_clsid_ = GUID('{133AB3D0-5C67-444E-BC4E-3150E1345049}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsVideoStream(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsVideoStream'
    _iid_ = GUID('{E6B0F377-D5E1-485A-A078-706AE7E7F1FC}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsVideoStream._com_interfaces_ = [_IAgStkGraphicsVideoStream, IAgStkGraphicsVideoStream, IAgStkGraphicsRasterStream, IAgStkGraphicsRaster]

class AgStkGraphicsPrimitive(CoClass):
    'Primitives represent objects rendered in the 3D scene.'
    _reg_clsid_ = GUID('{6539F179-1750-42E1-8F4C-4B7531C63EEB}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsPrimitive._com_interfaces_ = [_IAgStkGraphicsPrimitive, IAgStkGraphicsPrimitive]

IAgStkGraphicsTexture2DFactory._methods_ = [
    COMMETHOD([helpstring('Creates a new texture from a Uri, which can be a file, HTTP, HTTPS, or FTP source. See raster for a list of supported raster formats.')], HRESULT, 'LoadFromStringUri',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRendererTexture2D)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a new texture from a raster.')], HRESULT, 'FromRaster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRendererTexture2D)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTexture2DFactory implementation
##class IAgStkGraphicsTexture2DFactory_Impl(object):
##    def LoadFromStringUri(self, Uri):
##        'Creates a new texture from a Uri, which can be a file, HTTP, HTTPS, or FTP source. See raster for a list of supported raster formats.'
##        #return ppRetVal
##
##    def FromRaster(self, Raster):
##        'Creates a new texture from a raster.'
##        #return ppRetVal
##

class IAgStkGraphicsGraphicsFontFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A font that is suitable for use with the text batch primitive. For best performance, avoid creating duplicate font objects. Instead assign the same font object to several text batch primitives.'
    _iid_ = GUID('{1A87AEEE-C00B-462B-BF99-90CB94AE1EB7}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsGraphicsFontFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a graphics font with the given arguments.')], HRESULT, 'InitializeWithNameSizeFontStyleOutline',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Size' ),
              ( ['in'], AgEStkGraphicsFontStyle, 'FontStyle' ),
              ( ['in'], VARIANT_BOOL, 'Outline' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGraphicsFont)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a graphics font with the typeface name and size.')], HRESULT, 'InitializeWithNameSize',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Size' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGraphicsFont)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsGraphicsFontFactory implementation
##class IAgStkGraphicsGraphicsFontFactory_Impl(object):
##    def InitializeWithNameSizeFontStyleOutline(self, Name, Size, FontStyle, Outline):
##        'Initializes a graphics font with the given arguments.'
##        #return ppRetVal
##
##    def InitializeWithNameSize(self, Name, Size):
##        'Initializes a graphics font with the typeface name and size.'
##        #return ppRetVal
##

class _IAgStkGraphicsSolidPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSolidPrimitive'
    _iid_ = GUID('{AA50A136-754C-4064-A61B-7226A84B2190}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsSolidPrimitive._methods_ = [
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propget'], HRESULT, 'ReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propput'], HRESULT, 'ReferenceFrame',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propput'], HRESULT, 'BoundingSphere',
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'ppRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propget'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propput'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(5401), helpstring('Gets or sets whether the primitive is affected by lighting.'), 'propget'], HRESULT, 'AffectedByLighting',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5401), helpstring('Gets or sets whether the primitive is affected by lighting.'), 'propput'], HRESULT, 'AffectedByLighting',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(5402), helpstring("Gets or sets whether the solid's fill is displayed."), 'propget'], HRESULT, 'DisplayFill',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5402), helpstring("Gets or sets whether the solid's fill is displayed."), 'propput'], HRESULT, 'DisplayFill',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(5403), helpstring("Gets or sets whether the solid's silhouette is displayed."), 'propget'], HRESULT, 'DisplaySilhouette',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5403), helpstring("Gets or sets whether the solid's silhouette is displayed."), 'propput'], HRESULT, 'DisplaySilhouette',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(5404), helpstring("Gets or sets the silhouette's color."), 'propget'], HRESULT, 'SilhouetteColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(5404), helpstring("Gets or sets the silhouette's color."), 'propput'], HRESULT, 'SilhouetteColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(5405), helpstring("Gets or sets the silhouette's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'SilhouetteTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5405), helpstring("Gets or sets the silhouette's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'SilhouetteTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(5406), helpstring("Gets or sets the silhouette' width, in pixels."), 'propget'], HRESULT, 'SilhouetteWidth',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5406), helpstring("Gets or sets the silhouette' width, in pixels."), 'propput'], HRESULT, 'SilhouetteWidth',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(5407), helpstring('Gets the minimum silhouette width, in pixels, supported by the video card.'), 'propget'], HRESULT, 'MinimumSilhouetteWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5408), helpstring('Gets the maximum silhouette width, in pixels, supported by the video card.'), 'propget'], HRESULT, 'MaximumSilhouetteWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5409), helpstring("Gets or sets whether the solid's outline is displayed."), 'propget'], HRESULT, 'DisplayOutline',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5409), helpstring("Gets or sets whether the solid's outline is displayed."), 'propput'], HRESULT, 'DisplayOutline',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(5410), helpstring("Gets or sets the outline's color."), 'propget'], HRESULT, 'OutlineColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(5410), helpstring("Gets or sets the outline's color."), 'propput'], HRESULT, 'OutlineColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(5411), helpstring("Gets or sets the outline's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'OutlineTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5411), helpstring("Gets or sets the outline's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'OutlineTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(5412), helpstring("Gets or sets the outline's width, in pixels."), 'propget'], HRESULT, 'OutlineWidth',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5412), helpstring("Gets or sets the outline's width, in pixels."), 'propput'], HRESULT, 'OutlineWidth',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(5413), helpstring("Gets or sets the outline's appearance."), 'propget'], HRESULT, 'OutlineAppearance',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsOutlineAppearance), 'pRetVal' )),
    COMMETHOD([dispid(5413), helpstring("Gets or sets the outline's appearance."), 'propput'], HRESULT, 'OutlineAppearance',
              ( ['in'], AgEStkGraphicsOutlineAppearance, 'pRetVal' )),
    COMMETHOD([dispid(5414), helpstring("Gets or sets the back line's color."), 'propget'], HRESULT, 'BackLineColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(5414), helpstring("Gets or sets the back line's color."), 'propput'], HRESULT, 'BackLineColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(5415), helpstring("Gets or sets the back line's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'BackLineTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5415), helpstring("Gets or sets the back line's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'BackLineTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(5416), helpstring("Gets or sets the solid's position. The position is defined in the solid's reference frame. The array contains the components of the position in the order x, y, z."), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(5416), helpstring("Gets or sets the solid's position. The position is defined in the solid's reference frame. The array contains the components of the position in the order x, y, z."), 'propput'], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(5417), helpstring('Gets or sets the rotation applied to the solid before rendering.'), 'propget'], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation)), 'ppRetVal' )),
    COMMETHOD([dispid(5417), helpstring('Gets or sets the rotation applied to the solid before rendering.'), 'propput'], HRESULT, 'Rotation',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation), 'ppRetVal' )),
    COMMETHOD([dispid(5418), helpstring('Gets or sets a non-uniform scale that is applied to the solid to increase or decrease its rendered size. The array contains the scale for each component of the size in the order x scale, y scale, z scale.'), 'propget'], HRESULT, 'Scale',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(5418), helpstring('Gets or sets a non-uniform scale that is applied to the solid to increase or decrease its rendered size. The array contains the scale for each component of the size in the order x scale, y scale, z scale.'), 'propput'], HRESULT, 'Scale',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(5419), helpstring("Gets or sets the back line's width, in pixels."), 'propget'], HRESULT, 'BackLineWidth',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5419), helpstring("Gets or sets the back line's width, in pixels."), 'propput'], HRESULT, 'BackLineWidth',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(5420), helpstring("Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."), 'propget'], HRESULT, 'SetHint',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSetHint), 'pRetVal' )),
    COMMETHOD([dispid(5421), helpstring("Defines the solid using the specified solidTriangulatorResult. The solid is rendered in the primitive's reference frame.")], HRESULT, 'SetWithResult',
              ( ['in'], POINTER(IAgStkGraphicsSolidTriangulatorResult), 'SolidTriangulatorResult' )),
    COMMETHOD([dispid(5422), helpstring("Defines the solid using the specified parameters. The solid is rendered in the primitive's reference frame.")], HRESULT, 'Set',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Normals' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'OutlineIndices' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'WindingOrder' ),
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'BoundingSphere' ),
              ( ['in'], VARIANT_BOOL, 'Closed' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSolidPrimitive implementation
##class _IAgStkGraphicsSolidPrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##    ReferenceFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##    BoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##    AutomaticallyComputeBoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's color."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the primitive is affected by lighting.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the primitive is affected by lighting.'
##    AffectedByLighting = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether the solid's fill is displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether the solid's fill is displayed."
##    DisplayFill = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether the solid's silhouette is displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether the solid's silhouette is displayed."
##    DisplaySilhouette = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the silhouette's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the silhouette's color."
##    SilhouetteColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the silhouette's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the silhouette's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    SilhouetteTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the silhouette' width, in pixels."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the silhouette' width, in pixels."
##    SilhouetteWidth = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumSilhouetteWidthSupported(self):
##        'Gets the minimum silhouette width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    @property
##    def MaximumSilhouetteWidthSupported(self):
##        'Gets the maximum silhouette width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    def _get(self):
##        "Gets or sets whether the solid's outline is displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether the solid's outline is displayed."
##    DisplayOutline = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the outline's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the outline's color."
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the outline's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the outline's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    OutlineTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the outline's width, in pixels."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the outline's width, in pixels."
##    OutlineWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the outline's appearance."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the outline's appearance."
##    OutlineAppearance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the back line's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the back line's color."
##    BackLineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the back line's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the back line's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    BackLineTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the solid's position. The position is defined in the solid's reference frame. The array contains the components of the position in the order x, y, z."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the solid's position. The position is defined in the solid's reference frame. The array contains the components of the position in the order x, y, z."
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the rotation applied to the solid before rendering.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the rotation applied to the solid before rendering.'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a non-uniform scale that is applied to the solid to increase or decrease its rendered size. The array contains the scale for each component of the size in the order x scale, y scale, z scale.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets a non-uniform scale that is applied to the solid to increase or decrease its rendered size. The array contains the scale for each component of the size in the order x scale, y scale, z scale.'
##    Scale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the back line's width, in pixels."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the back line's width, in pixels."
##    BackLineWidth = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SetHint(self):
##        "Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."
##        #return pRetVal
##
##    def SetWithResult(self, SolidTriangulatorResult):
##        "Defines the solid using the specified solidTriangulatorResult. The solid is rendered in the primitive's reference frame."
##        #return 
##
##    def Set(self, Positions, Normals, Indices, OutlineIndices, WindingOrder, BoundingSphere, Closed):
##        "Defines the solid using the specified parameters. The solid is rendered in the primitive's reference frame."
##        #return 
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsSurfaceExtentTriangulatorInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSurfaceExtentTriangulatorInitializer'
    _iid_ = GUID('{F802688E-3AC8-4C31-A1DB-05F671A6807A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsSurfaceExtentTriangulatorInitializer._methods_ = [
    COMMETHOD([dispid(6501), helpstring('Computes a triangulation on the specified centralBody for the specified extent. This is equivalent to calling Compute with an altitude of 0 and a granularity of 1 degree.')], HRESULT, 'ComputeSimple',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6502), helpstring('Computes a triangulation on the specified centralBody for the specified extent.')], HRESULT, 'Compute',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceTriangulatorResult)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSurfaceExtentTriangulatorInitializer implementation
##class _IAgStkGraphicsSurfaceExtentTriangulatorInitializer_Impl(object):
##    def ComputeSimple(self, CentralBody, Extent):
##        'Computes a triangulation on the specified centralBody for the specified extent. This is equivalent to calling Compute with an altitude of 0 and a granularity of 1 degree.'
##        #return ppRetVal
##
##    def Compute(self, CentralBody, Extent, Altitude, Granularity):
##        'Computes a triangulation on the specified centralBody for the specified extent.'
##        #return ppRetVal
##

class AgStkGraphicsKmlContainer(CoClass):
    'A KmlContainer contains a collection of children kml features.'
    _reg_clsid_ = GUID('{D5114B3E-A57E-4EED-83F5-AA9B9B47FCEC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsKmlContainer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsKmlContainer'
    _iid_ = GUID('{B228BA4F-7048-4967-856F-DEFF6240F7F6}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsKmlContainer._com_interfaces_ = [_IAgStkGraphicsKmlContainer, IAgStkGraphicsKmlContainer, IAgStkGraphicsKmlFeature]

class IAgStkGraphicsGeospatialImageGlobeOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "A globe image overlay for handling <a href='http://www.jpeg.org/jpeg2000/'>JPEG 2000</a> (.jp2), ECW (.ecw), ECWP, and MrSid (.sid) image formats in the WGS84 geographic projection."
    _iid_ = GUID('{77060B41-7B24-4118-AB48-22EFB3007C76}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsGeospatialImageGlobeOverlayFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a geospatial image globe overlay with the provided values.')], HRESULT, 'InitializeWithString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGeospatialImageGlobeOverlay)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsGeospatialImageGlobeOverlayFactory implementation
##class IAgStkGraphicsGeospatialImageGlobeOverlayFactory_Impl(object):
##    def InitializeWithString(self, Uri):
##        'Initializes a geospatial image globe overlay with the provided values.'
##        #return ppRetVal
##

IAgStkGraphicsGlobeOverlay._methods_ = [
    COMMETHOD(['propget', helpstring("Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body.")], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.')], HRESULT, 'Extent',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the globe overlay role of the globe overlay.')], HRESULT, 'Role',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsGlobeOverlayRole), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the absolute URI specifying the location of the globe overlay.')], HRESULT, 'UriAsString',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.')], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.')], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.')], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsGlobeOverlay implementation
##class IAgStkGraphicsGlobeOverlay_Impl(object):
##    @property
##    def CentralBody(self):
##        "Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."
##        #return pRetVal
##
##    @property
##    def Extent(self):
##        'Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'
##        #return ppRetVal
##
##    @property
##    def Role(self):
##        'Gets the globe overlay role of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def UriAsString(self):
##        'Gets the absolute URI specifying the location of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsPrimitiveManager(CoClass):
    'The primitive manager contains spatial data structures used to efficiently render primitives. Once a primitive is constructed, it must be added to the primitive manager before it will be rendered.'
    _reg_clsid_ = GUID('{7D445D2A-9E0F-4B5B-BA58-DA9713C7EB5A}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsPrimitiveManager._com_interfaces_ = [_IAgStkGraphicsPrimitiveManager, IAgStkGraphicsPrimitiveManager]

IAgStkGraphicsRasterFilter._methods_ = [
]
################################################################
## code template for IAgStkGraphicsRasterFilter implementation
##class IAgStkGraphicsRasterFilter_Impl(object):

class AgStkGraphicsKmlDocument(CoClass):
    'A KML document.'
    _reg_clsid_ = GUID('{344DA767-5626-4474-87C0-BD68FF83A2FF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsKmlDocument._com_interfaces_ = [_IAgStkGraphicsKmlDocument, IAgStkGraphicsKmlDocument, IAgStkGraphicsKmlContainer, IAgStkGraphicsKmlFeature]

class AgStkGraphicsRasterImageGlobeOverlay(CoClass):
    'A globe image overlay for handling rasters.'
    _reg_clsid_ = GUID('{4DCA6B24-66AF-4BEA-BE5A-DEF0CB2373CC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsRasterImageGlobeOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsRasterImageGlobeOverlay'
    _iid_ = GUID('{EE077130-347D-4B01-A45E-AC70D2E550D5}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsRasterImageGlobeOverlay._com_interfaces_ = [_IAgStkGraphicsRasterImageGlobeOverlay, IAgStkGraphicsRasterImageGlobeOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay]

class _IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters'
    _iid_ = GUID('{2383AEE1-C6E8-4C96-9EA0-F82E60DA095A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters._methods_ = [
    COMMETHOD([dispid(4201), helpstring('Defines a collection of textures, one for each marker in the batch.')], HRESULT, 'SetTextures',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Textures' )),
    COMMETHOD([dispid(4202), helpstring('Defines a collection of sizes, one for each marker in the batch.')], HRESULT, 'SetSizes',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Sizes' )),
    COMMETHOD([dispid(4203), helpstring('Defines a collection of colors, one for each marker in the batch.')], HRESULT, 'SetColors',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' )),
    COMMETHOD([dispid(4204), helpstring('Defines a collection of origins, one for each marker in the batch.')], HRESULT, 'SetOrigins',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Origins' )),
    COMMETHOD([dispid(4205), helpstring('Defines a collection of pixel offsets, one for each marker in the batch.')], HRESULT, 'SetPixelOffsets',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'PixelOffsets' )),
    COMMETHOD([dispid(4206), helpstring('Defines a collection of eye offsets, one for each marker in the batch.')], HRESULT, 'SetEyeOffsets',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'EyeOffsets' )),
    COMMETHOD([dispid(4207), helpstring('Defines a collection of rotation angles in radians, one for each marker in the batch.')], HRESULT, 'SetRotations',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'RotationAngles' )),
    COMMETHOD([dispid(4208), helpstring('Defines a collection of texture coordinates, one for each marker in the batch.')], HRESULT, 'SetTextureCoordinates',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'TextureCoordinates' )),
    COMMETHOD([dispid(4210), helpstring('Defines a collection of time interval display conditions, one for each marker in the batch.')], HRESULT, 'SetTimeIntervalDisplayConditions',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'TimeIntervals' )),
    COMMETHOD([dispid(4211), helpstring('Defines a collection of boolean display flags, one for each marker in the batch.')], HRESULT, 'SetDisplays',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Displays' )),
]
################################################################
## code template for _IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters implementation
##class _IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters_Impl(object):
##    def SetTextures(self, Textures):
##        'Defines a collection of textures, one for each marker in the batch.'
##        #return 
##
##    def SetSizes(self, Sizes):
##        'Defines a collection of sizes, one for each marker in the batch.'
##        #return 
##
##    def SetColors(self, Colors):
##        'Defines a collection of colors, one for each marker in the batch.'
##        #return 
##
##    def SetOrigins(self, Origins):
##        'Defines a collection of origins, one for each marker in the batch.'
##        #return 
##
##    def SetPixelOffsets(self, PixelOffsets):
##        'Defines a collection of pixel offsets, one for each marker in the batch.'
##        #return 
##
##    def SetEyeOffsets(self, EyeOffsets):
##        'Defines a collection of eye offsets, one for each marker in the batch.'
##        #return 
##
##    def SetRotations(self, RotationAngles):
##        'Defines a collection of rotation angles in radians, one for each marker in the batch.'
##        #return 
##
##    def SetTextureCoordinates(self, TextureCoordinates):
##        'Defines a collection of texture coordinates, one for each marker in the batch.'
##        #return 
##
##    def SetTimeIntervalDisplayConditions(self, TimeIntervals):
##        'Defines a collection of time interval display conditions, one for each marker in the batch.'
##        #return 
##
##    def SetDisplays(self, Displays):
##        'Defines a collection of boolean display flags, one for each marker in the batch.'
##        #return 
##

class _IAgStkGraphicsBoxTriangulatorInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsBoxTriangulatorInitializer'
    _iid_ = GUID('{9317BC85-097D-4524-86BD-FAC9093F1BC9}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsBoxTriangulatorInitializer._methods_ = [
    COMMETHOD([dispid(6101), helpstring('Computes the triangulation for a box of the specified size, centered at the origin.')], HRESULT, 'Compute',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Size' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSolidTriangulatorResult)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsBoxTriangulatorInitializer implementation
##class _IAgStkGraphicsBoxTriangulatorInitializer_Impl(object):
##    def Compute(self, Size):
##        'Computes the triangulation for a box of the specified size, centered at the origin.'
##        #return ppRetVal
##

IAgStkGraphicsTextureFilter2D._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the minification filter used when the pixel being textured maps to an area less than or equal to one texel.')], HRESULT, 'MinificationFilter',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMinificationFilter), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the magnification filter used when the pixel being textured maps to an area greater than one texel.')], HRESULT, 'MagnificationFilter',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMagnificationFilter), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the texture wrap for the s direction.')], HRESULT, 'WrapS',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsTextureWrap), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the texture wrap for the t direction.')], HRESULT, 'WrapT',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsTextureWrap), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: ClampToEdge, WrapT: ClampToEdge')], HRESULT, 'NearestClampToEdge',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: Repeat, WrapT: Repeat')], HRESULT, 'NearestRepeat',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: ClampToEdge, WrapT: ClampToEdge')], HRESULT, 'LinearClampToEdge',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: Repeat, WrapT: Repeat')], HRESULT, 'LinearRepeat',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTextureFilter2D implementation
##class IAgStkGraphicsTextureFilter2D_Impl(object):
##    @property
##    def MinificationFilter(self):
##        'Gets the minification filter used when the pixel being textured maps to an area less than or equal to one texel.'
##        #return pRetVal
##
##    @property
##    def MagnificationFilter(self):
##        'Gets the magnification filter used when the pixel being textured maps to an area greater than one texel.'
##        #return pRetVal
##
##    @property
##    def WrapS(self):
##        'Gets the texture wrap for the s direction.'
##        #return pRetVal
##
##    @property
##    def WrapT(self):
##        'Gets the texture wrap for the t direction.'
##        #return pRetVal
##
##    @property
##    def NearestClampToEdge(self):
##        'Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: ClampToEdge, WrapT: ClampToEdge'
##        #return ppRetVal
##
##    @property
##    def NearestRepeat(self):
##        'Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: Repeat, WrapT: Repeat'
##        #return ppRetVal
##
##    @property
##    def LinearClampToEdge(self):
##        'Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: ClampToEdge, WrapT: ClampToEdge'
##        #return ppRetVal
##
##    @property
##    def LinearRepeat(self):
##        'Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: Repeat, WrapT: Repeat'
##        #return ppRetVal
##

class _IAgStkGraphicsKmlNetworkLink(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsKmlNetworkLink'
    _iid_ = GUID('{25277457-580D-45A4-BF1C-D378D2DD90C6}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

# values for enumeration 'AgEStkGraphicsKmlNetworkLinkRefreshMode'
eStkGraphicsKmlNetworkLinkRefreshModeOnChange = 0
eStkGraphicsKmlNetworkLinkRefreshModeOnInterval = 1
eStkGraphicsKmlNetworkLinkRefreshModeOnExpire = 2
AgEStkGraphicsKmlNetworkLinkRefreshMode = c_int # enum
_IAgStkGraphicsKmlNetworkLink._methods_ = [
    COMMETHOD([dispid(26601), helpstring('Gets whether the document associated with this feature is loaded.'), 'propget'], HRESULT, 'IsLoaded',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(26602), helpstring('Gets or sets whether this feature will be displayed in the Scene.'), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(26602), helpstring('Gets or sets whether this feature will be displayed in the Scene.'), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(26603), helpstring('Gets the content associated with this feature.'), 'propget'], HRESULT, 'Content',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26604), helpstring('Gets the name of this feature.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26605), helpstring('Gets the description associated with this feature.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26606), helpstring('Gets the snippet associated with this feature.'), 'propget'], HRESULT, 'Snippet',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26607), helpstring('The bounding sphere encompassing the area associated with this feature.'), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(26608), helpstring('Moves the camera to the area encompassing this feature.')], HRESULT, 'FlyTo'),
    COMMETHOD([dispid(27001), helpstring('Gets the uri of the network link.'), 'propget'], HRESULT, 'Uri',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(27002), helpstring('Gets or sets the refresh mode of the network link. The refresh mode specifies a time-based refresh policy for this link.'), 'propget'], HRESULT, 'RefreshMode',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsKmlNetworkLinkRefreshMode), 'pRetVal' )),
    COMMETHOD([dispid(27002), helpstring('Gets or sets the refresh mode of the network link. The refresh mode specifies a time-based refresh policy for this link.'), 'propput'], HRESULT, 'RefreshMode',
              ( ['in'], AgEStkGraphicsKmlNetworkLinkRefreshMode, 'pRetVal' )),
    COMMETHOD([dispid(27003), helpstring('Gets or sets the interval duration at which this network link will refresh, when refresh mode is set to on interval.'), 'propget'], HRESULT, 'RefreshInterval',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(27003), helpstring('Gets or sets the interval duration at which this network link will refresh, when refresh mode is set to on interval.'), 'propput'], HRESULT, 'RefreshInterval',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(27004), helpstring("Gets or sets the view refresh mode of the network link. The view refresh mode specifies the refresh policy for the when the camera's view changes."), 'propget'], HRESULT, 'ViewRefreshMode',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsKmlNetworkLinkViewRefreshMode), 'pRetVal' )),
    COMMETHOD([dispid(27004), helpstring("Gets or sets the view refresh mode of the network link. The view refresh mode specifies the refresh policy for the when the camera's view changes."), 'propput'], HRESULT, 'ViewRefreshMode',
              ( ['in'], AgEStkGraphicsKmlNetworkLinkViewRefreshMode, 'pRetVal' )),
    COMMETHOD([dispid(27005), helpstring('Gets or sets the duration after camera view movement stops that this network link will refresh, when view refresh mode is set to on stop.'), 'propget'], HRESULT, 'ViewRefreshTime',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(27005), helpstring('Gets or sets the duration after camera view movement stops that this network link will refresh, when view refresh mode is set to on stop.'), 'propput'], HRESULT, 'ViewRefreshTime',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(27006), helpstring('Gets or sets the value that scales the bounding box defining the view associated with this network link. A value less than 1.0 specifies to use less than the full view (screen). A value greater than 1...'), 'propget'], HRESULT, 'ViewBoundScale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(27006), helpstring('Gets or sets the value that scales the bounding box defining the view associated with this network link. A value less than 1.0 specifies to use less than the full view (screen). A value greater than 1...'), 'propput'], HRESULT, 'ViewBoundScale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(27007), helpstring('Gets the duration that is the minimum allowed time between refreshes of this network link.'), 'propget'], HRESULT, 'MinimumRefreshPeriod',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(27008), helpstring('Gets the cookie string associated with this network link.'), 'propget'], HRESULT, 'Cookie',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(27009), helpstring('Gets the message string associated with this network link.'), 'propget'], HRESULT, 'Message',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(27010), helpstring('Gets the link snippet associated with this network link.'), 'propget'], HRESULT, 'LinkSnippet',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(27011), helpstring('Gets the string specifying the date/time this network should expire and be refreshed.'), 'propget'], HRESULT, 'Expires',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(27012), helpstring('Refreshes the network link.')], HRESULT, 'Refresh'),
]
################################################################
## code template for _IAgStkGraphicsKmlNetworkLink implementation
##class _IAgStkGraphicsKmlNetworkLink_Impl(object):
##    @property
##    def IsLoaded(self):
##        'Gets whether the document associated with this feature is loaded.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets whether this feature will be displayed in the Scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether this feature will be displayed in the Scene.'
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Content(self):
##        'Gets the content associated with this feature.'
##        #return pRetVal
##
##    @property
##    def Name(self):
##        'Gets the name of this feature.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Gets the description associated with this feature.'
##        #return pRetVal
##
##    @property
##    def Snippet(self):
##        'Gets the snippet associated with this feature.'
##        #return pRetVal
##
##    @property
##    def BoundingSphere(self):
##        'The bounding sphere encompassing the area associated with this feature.'
##        #return ppRetVal
##
##    def FlyTo(self):
##        'Moves the camera to the area encompassing this feature.'
##        #return 
##
##    @property
##    def Uri(self):
##        'Gets the uri of the network link.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the refresh mode of the network link. The refresh mode specifies a time-based refresh policy for this link.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the refresh mode of the network link. The refresh mode specifies a time-based refresh policy for this link.'
##    RefreshMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the interval duration at which this network link will refresh, when refresh mode is set to on interval.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the interval duration at which this network link will refresh, when refresh mode is set to on interval.'
##    RefreshInterval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the view refresh mode of the network link. The view refresh mode specifies the refresh policy for the when the camera's view changes."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the view refresh mode of the network link. The view refresh mode specifies the refresh policy for the when the camera's view changes."
##    ViewRefreshMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the duration after camera view movement stops that this network link will refresh, when view refresh mode is set to on stop.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the duration after camera view movement stops that this network link will refresh, when view refresh mode is set to on stop.'
##    ViewRefreshTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value that scales the bounding box defining the view associated with this network link. A value less than 1.0 specifies to use less than the full view (screen). A value greater than 1...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value that scales the bounding box defining the view associated with this network link. A value less than 1.0 specifies to use less than the full view (screen). A value greater than 1...'
##    ViewBoundScale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumRefreshPeriod(self):
##        'Gets the duration that is the minimum allowed time between refreshes of this network link.'
##        #return pRetVal
##
##    @property
##    def Cookie(self):
##        'Gets the cookie string associated with this network link.'
##        #return pRetVal
##
##    @property
##    def Message(self):
##        'Gets the message string associated with this network link.'
##        #return pRetVal
##
##    @property
##    def LinkSnippet(self):
##        'Gets the link snippet associated with this network link.'
##        #return pRetVal
##
##    @property
##    def Expires(self):
##        'Gets the string specifying the date/time this network should expire and be refreshed.'
##        #return pRetVal
##
##    def Refresh(self):
##        'Refreshes the network link.'
##        #return 
##

class AgStkGraphicsKmlFeature(CoClass):
    'A KML feature.'
    _reg_clsid_ = GUID('{582C8DB7-55EF-447C-BBC6-6E9282F46C9B}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsKmlFeature._com_interfaces_ = [_IAgStkGraphicsKmlFeature, IAgStkGraphicsKmlFeature]

class AgStkGraphicsRhumbLineInterpolator(CoClass):
    'The rhumb line interpolator computes interpolated positions along a rhumb line. Rhumb lines are lines of constant bearing. They appear as straight lines on a Mercator 2D map projection and are well suited to navigation.'
    _reg_clsid_ = GUID('{4C56FEF8-0EE9-43AD-98D4-7AB1EBCE84C6}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsRhumbLineInterpolator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsRhumbLineInterpolator'
    _iid_ = GUID('{7B8CCEA0-CA75-4AC5-ABD2-6E8CF4AA3331}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsRhumbLineInterpolator._com_interfaces_ = [_IAgStkGraphicsRhumbLineInterpolator, IAgStkGraphicsRhumbLineInterpolator, IAgStkGraphicsPositionInterpolator]

class _IAgStkGraphicsFilteringRasterStreamFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsFilteringRasterStreamFactory'
    _iid_ = GUID('{EAC3BBE2-9633-4622-9427-47ECDD5CDE5C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsFilteringRasterStream(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A class decorator for applying a raster filter to each update of a raster stream. Can be used to apply filters to videos and other raster streams as they are updated.'
    _iid_ = GUID('{75917A6B-C2F9-4350-879A-248BCC239E6B}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsFilteringRasterStreamFactory._methods_ = [
    COMMETHOD([dispid(19901), helpstring('Initializes a new instance with a raster stream and the raster filter that will be applied to each update of that stream.')], HRESULT, 'Initialize',
              ( ['in'], POINTER(IAgStkGraphicsRasterStream), 'RasterStream' ),
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsFilteringRasterStream)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsFilteringRasterStreamFactory implementation
##class _IAgStkGraphicsFilteringRasterStreamFactory_Impl(object):
##    def Initialize(self, RasterStream, Filter):
##        'Initializes a new instance with a raster stream and the raster filter that will be applied to each update of that stream.'
##        #return ppRetVal
##

class _IAgStkGraphicsTextOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTextOverlayFactory'
    _iid_ = GUID('{ABB2DFAB-3C6E-4D7A-BC38-5B8B3DDE016A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsTextOverlayFactory._methods_ = [
    COMMETHOD([dispid(27601), helpstring("Initializes the overlay with a position of (0, 0), a width of 100 pixels, and a height of 50 pixels. <param name='font'>The graphics font that defines how text is drawn.</param>")], HRESULT, 'Initialize',
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(27602), helpstring('Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels.')], HRESULT, 'InitializeWithXYWidthHeight',
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['in'], c_double, 'XPixels' ),
              ( ['in'], c_double, 'YPixels' ),
              ( ['in'], c_double, 'WidthPixels' ),
              ( ['in'], c_double, 'HeightPixels' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(27603), helpstring('Initializes the overlay with the specified position and size.')], HRESULT, 'InitializeWithPositionSize',
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Size' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(27604), helpstring('Initializes the overlay with the specified position and size.')], HRESULT, 'InitializeWithWidthHeightUnits',
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['in'], c_double, 'Width' ),
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'WidthUnit' ),
              ( ['in'], c_double, 'Height' ),
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'HeightUnit' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextOverlay)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTextOverlayFactory implementation
##class _IAgStkGraphicsTextOverlayFactory_Impl(object):
##    def Initialize(self, Font):
##        "Initializes the overlay with a position of (0, 0), a width of 100 pixels, and a height of 50 pixels. <param name='font'>The graphics font that defines how text is drawn.</param>"
##        #return ppRetVal
##
##    def InitializeWithXYWidthHeight(self, Font, XPixels, YPixels, WidthPixels, HeightPixels):
##        'Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels.'
##        #return ppRetVal
##
##    def InitializeWithPositionSize(self, Font, Position, Size):
##        'Initializes the overlay with the specified position and size.'
##        #return ppRetVal
##
##    def InitializeWithWidthHeightUnits(self, Font, Width, WidthUnit, Height, HeightUnit):
##        'Initializes the overlay with the specified position and size.'
##        #return ppRetVal
##

class AgStkGraphicsKmlFolder(CoClass):
    'A KML folder.'
    _reg_clsid_ = GUID('{C18A2964-DBA9-4381-94BD-EFE8542932F3}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsKmlFolder._com_interfaces_ = [_IAgStkGraphicsKmlFolder, IAgStkGraphicsKmlFolder, IAgStkGraphicsKmlContainer, IAgStkGraphicsKmlFeature]

class AgStkGraphicsScene(CoClass):
    "A scene provides properties and functionality that are reflected in the rendering of the globe control that it is associated with. An globe control's scene is available from the scene property..."
    _reg_clsid_ = GUID('{9FFC049C-28DF-47BA-813C-EFB90DEF8B0B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsScene(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsScene'
    _iid_ = GUID('{8AC55871-2131-41FB-96CD-CCDD303F88C3}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsSceneEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Events raised by the instances of Scene.'
    _iid_ = GUID('{39D3A8DD-0D1A-4AB7-BA29-81FFD591274C}')
    _idlflags_ = []
    _methods_ = []
AgStkGraphicsScene._com_interfaces_ = [_IAgStkGraphicsScene, IAgStkGraphicsScene]
AgStkGraphicsScene._outgoing_interfaces_ = [IAgStkGraphicsSceneEvents]

class AgStkGraphicsModelPrimitiveFactory(CoClass):
    "The model primitive loads and renders <a href='http://www.collada.org/'>COLLADA</a> (DAE) and AGI <a href='http://www.agi.com/resources/models/models0.cfm'>MDL</a> (MDL) models."
    _reg_clsid_ = GUID('{51168FA3-939C-440E-92D6-EAE44FFD9DFC}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsModelPrimitiveFactory._com_interfaces_ = [_IAgStkGraphicsModelPrimitiveFactory, IAgStkGraphicsModelPrimitiveFactory]

IAgStkGraphicsGeospatialImageGlobeOverlay._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets whether transparent color should be used.')], HRESULT, 'UseTransparentColor',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether transparent color should be used.')], HRESULT, 'UseTransparentColor',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the color that will become transparent.')], HRESULT, 'TransparentColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the color that will become transparent.')], HRESULT, 'TransparentColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsGeospatialImageGlobeOverlay implementation
##class IAgStkGraphicsGeospatialImageGlobeOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets whether transparent color should be used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether transparent color should be used.'
##    UseTransparentColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the color that will become transparent.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the color that will become transparent.'
##    TransparentColor = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsKmlGraphics(CoClass):
    'Provides loading and unloading of kml documents for a particular central body.'
    _reg_clsid_ = GUID('{D5AD24FB-F4F3-4088-9071-5DE2DBA10556}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class IAgStkGraphicsKmlGraphicsEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Events raised by the instances of KmlGraphics.'
    _iid_ = GUID('{37F5831C-24D2-4E56-B3E4-6B3927A459F6}')
    _idlflags_ = []
    _methods_ = []
AgStkGraphicsKmlGraphics._com_interfaces_ = [_IAgStkGraphicsKmlGraphics, IAgStkGraphicsKmlGraphics]
AgStkGraphicsKmlGraphics._outgoing_interfaces_ = [IAgStkGraphicsKmlGraphicsEvents]

class AgStkGraphicsSceneDisplayCondition(CoClass):
    "A display condition used to control what scene or scenes an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> in. This is used to show an object in some scenes and hide it in others."
    _reg_clsid_ = GUID('{0555AFAC-AC04-42CB-AB2B-5A7C03130F14}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsSceneDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSceneDisplayCondition'
    _iid_ = GUID('{331C376C-8A84-4A4B-A047-2A41D07AD938}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsSceneDisplayCondition._com_interfaces_ = [_IAgStkGraphicsSceneDisplayCondition, IAgStkGraphicsSceneDisplayCondition, IAgStkGraphicsDisplayCondition]

class _IAgStkGraphicsStereoscopic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsStereoscopic'
    _iid_ = GUID('{CF28BAEE-4B52-409D-A28A-BB67D0A90490}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsStereoscopic._methods_ = [
    COMMETHOD([dispid(24701), helpstring('Gets or sets the stereoscopic display mode for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled.'), 'propget'], HRESULT, 'DisplayMode',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsStereoscopicDisplayMode), 'pRetVal' )),
    COMMETHOD([dispid(24701), helpstring('Gets or sets the stereoscopic display mode for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled.'), 'propput'], HRESULT, 'DisplayMode',
              ( ['in'], AgEStkGraphicsStereoscopicDisplayMode, 'pRetVal' )),
    COMMETHOD([dispid(24702), helpstring("This property is deprecated. This property has been deprecated in favor of ProjectionMode. Gets or sets whether the projection distance will be automatically computed based on the camera's reference point..."), 'propget'], HRESULT, 'AutomaticallyComputeProjectionDistance',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(24702), helpstring("This property is deprecated. This property has been deprecated in favor of ProjectionMode. Gets or sets whether the projection distance will be automatically computed based on the camera's reference point..."), 'propput'], HRESULT, 'AutomaticallyComputeProjectionDistance',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(24705), helpstring('Gets or sets whether the type of stereo projection that will be used.'), 'propget'], HRESULT, 'ProjectionMode',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsStereoProjectionMode), 'pRetVal' )),
    COMMETHOD([dispid(24705), helpstring('Gets or sets whether the type of stereo projection that will be used.'), 'propput'], HRESULT, 'ProjectionMode',
              ( ['in'], AgEStkGraphicsStereoProjectionMode, 'pRetVal' )),
    COMMETHOD([dispid(24703), helpstring('Gets or sets the projection distance. If automatically compute projection distance is set to true, the value of this property will be ignored.'), 'propget'], HRESULT, 'ProjectionDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(24703), helpstring('Gets or sets the projection distance. If automatically compute projection distance is set to true, the value of this property will be ignored.'), 'propput'], HRESULT, 'ProjectionDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(24704), helpstring('Gets or sets the eye separation factor.'), 'propget'], HRESULT, 'EyeSeparationFactor',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(24704), helpstring('Gets or sets the eye separation factor.'), 'propput'], HRESULT, 'EyeSeparationFactor',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsStereoscopic implementation
##class _IAgStkGraphicsStereoscopic_Impl(object):
##    def _get(self):
##        'Gets or sets the stereoscopic display mode for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the stereoscopic display mode for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled.'
##    DisplayMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "This property is deprecated. This property has been deprecated in favor of ProjectionMode. Gets or sets whether the projection distance will be automatically computed based on the camera's reference point..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "This property is deprecated. This property has been deprecated in favor of ProjectionMode. Gets or sets whether the projection distance will be automatically computed based on the camera's reference point..."
##    AutomaticallyComputeProjectionDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the type of stereo projection that will be used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the type of stereo projection that will be used.'
##    ProjectionMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the projection distance. If automatically compute projection distance is set to true, the value of this property will be ignored.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the projection distance. If automatically compute projection distance is set to true, the value of this property will be ignored.'
##    ProjectionDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the eye separation factor.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the eye separation factor.'
##    EyeSeparationFactor = property(_get, _set, doc = _set.__doc__)
##

_IAgStkGraphicsCameraSnapshot._methods_ = [
    COMMETHOD([dispid(25101), helpstring('Saves a snapshot of the 3D window to the filename with the specified format.')], HRESULT, 'SaveToFile',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], AgEStkGraphicsCameraSnapshotFileFormat, 'CameraSnapshotFormat' )),
    COMMETHOD([dispid(25102), helpstring('Saves a snapshot of the 3D window to the filename with the specified format at high resolution...')], HRESULT, 'SaveToFileWithWidthAndDPI',
              ( ['in'], BSTR, 'Filename' ),
              ( ['in'], AgEStkGraphicsCameraSnapshotFileFormat, 'CameraSnapshotFormat' ),
              ( ['in'], c_double, 'WidthInInches' ),
              ( ['in'], c_double, 'DotsPerInch' )),
    COMMETHOD([dispid(25103), helpstring('Saves a single frame of the 3D window to the clipboard.')], HRESULT, 'SaveToClipboard'),
    COMMETHOD([dispid(25104), helpstring('Saves a snapshot of the 3D window to a raster.')], HRESULT, 'SaveToRaster',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(25105), helpstring('Saves a snapshot of the 3D window to a texture 2d.')], HRESULT, 'SaveToTexture',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRendererTexture2D)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsCameraSnapshot implementation
##class _IAgStkGraphicsCameraSnapshot_Impl(object):
##    def SaveToFile(self, Filename, CameraSnapshotFormat):
##        'Saves a snapshot of the 3D window to the filename with the specified format.'
##        #return 
##
##    def SaveToFileWithWidthAndDPI(self, Filename, CameraSnapshotFormat, WidthInInches, DotsPerInch):
##        'Saves a snapshot of the 3D window to the filename with the specified format at high resolution...'
##        #return 
##
##    def SaveToClipboard(self):
##        'Saves a single frame of the 3D window to the clipboard.'
##        #return 
##
##    def SaveToRaster(self):
##        'Saves a snapshot of the 3D window to a raster.'
##        #return ppRetVal
##
##    def SaveToTexture(self):
##        'Saves a snapshot of the 3D window to a texture 2d.'
##        #return ppRetVal
##

IAgStkGraphicsGlobeOverlaySettings._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the size of the terrain cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered.')], HRESULT, 'TerrainCacheSize',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the size of the terrain cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered.')], HRESULT, 'TerrainCacheSize',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the size of the imagery cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered.')], HRESULT, 'ImageryCacheSize',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the size of the imagery cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered.')], HRESULT, 'ImageryCacheSize',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether per-pixel lighting is used for terrain and imagery...')], HRESULT, 'UsePerPixelLighting',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether per-pixel lighting is used for terrain and imagery...')], HRESULT, 'UsePerPixelLighting',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether terrain and imagery are preloaded. When set to true, terrain and imagery are preloaded to get the best visual quality; when set to false, they are not preloaded...')], HRESULT, 'PreloadTerrainAndImagery',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether terrain and imagery are preloaded. When set to true, terrain and imagery are preloaded to get the best visual quality; when set to false, they are not preloaded...')], HRESULT, 'PreloadTerrainAndImagery',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsGlobeOverlaySettings implementation
##class IAgStkGraphicsGlobeOverlaySettings_Impl(object):
##    def _get(self):
##        'Gets or sets the size of the terrain cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the size of the terrain cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered.'
##    TerrainCacheSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the size of the imagery cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the size of the imagery cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered.'
##    ImageryCacheSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether per-pixel lighting is used for terrain and imagery...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether per-pixel lighting is used for terrain and imagery...'
##    UsePerPixelLighting = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether terrain and imagery are preloaded. When set to true, terrain and imagery are preloaded to get the best visual quality; when set to false, they are not preloaded...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether terrain and imagery are preloaded. When set to true, terrain and imagery are preloaded to get the best visual quality; when set to false, they are not preloaded...'
##    PreloadTerrainAndImagery = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsScreenOverlayCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsScreenOverlayCollection'
    _iid_ = GUID('{EE1173B3-B4CF-47AF-9725-383E961D6564}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsScreenOverlayCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('Gets the number of screen overlays in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9502), helpstring('Gets a value indicating whether the collection is read-only.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Gets the overlay at the specified index.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns an enumerator that iterates through the collection.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([dispid(9505), helpstring('Determines whether the collection contains a specific overlay.')], HRESULT, 'Contains',
              ( ['in'], POINTER(IAgStkGraphicsScreenOverlay), 'Item' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9506), helpstring('Removes the first occurrence of a specific overlay from the collection.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAgStkGraphicsScreenOverlay), 'Item' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9508), helpstring('Removes all overlays from the collection.')], HRESULT, 'Clear'),
    COMMETHOD([dispid(9509), helpstring('Adds an overlay to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAgStkGraphicsScreenOverlay), 'Item' )),
]
################################################################
## code template for _IAgStkGraphicsScreenOverlayCollection implementation
##class _IAgStkGraphicsScreenOverlayCollection_Impl(object):
##    @property
##    def Count(self):
##        'Gets the number of screen overlays in the collection.'
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Gets a value indicating whether the collection is read-only.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Gets the overlay at the specified index.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns an enumerator that iterates through the collection.'
##        #return ppRetVal
##
##    def Contains(self, Item):
##        'Determines whether the collection contains a specific overlay.'
##        #return pRetVal
##
##    def Remove(self, Item):
##        'Removes the first occurrence of a specific overlay from the collection.'
##        #return pRetVal
##
##    def Clear(self):
##        'Removes all overlays from the collection.'
##        #return 
##
##    def Add(self, Item):
##        'Adds an overlay to the collection.'
##        #return 
##

class AgStkGraphicsKmlNetworkLink(CoClass):
    'A KML network link.'
    _reg_clsid_ = GUID('{F976E27F-8155-496D-ADE7-EFB7D1946F0A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class IAgStkGraphicsKmlNetworkLink(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A KML network link.'
    _iid_ = GUID('{0B66EA82-DD0D-444F-B097-DDA9427E1B87}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsKmlNetworkLink._com_interfaces_ = [_IAgStkGraphicsKmlNetworkLink, IAgStkGraphicsKmlNetworkLink, IAgStkGraphicsKmlFeature]

class _IAgStkGraphicsTextureMatrixFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTextureMatrixFactory'
    _iid_ = GUID('{C2419DE2-1CA9-47D8-9CBA-13BC141596A2}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsTextureMatrixFactory._methods_ = [
    COMMETHOD([dispid(8801), helpstring('Initializes a texture matrix to the identity matrix.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureMatrix)), 'ppRetVal' )),
    COMMETHOD([dispid(8802), helpstring('Initializes a texture matrix. The subscripts define [row][column].')], HRESULT, 'InitializeByValues',
              ( ['in'], c_float, 'M11' ),
              ( ['in'], c_float, 'M12' ),
              ( ['in'], c_float, 'M13' ),
              ( ['in'], c_float, 'M14' ),
              ( ['in'], c_float, 'M21' ),
              ( ['in'], c_float, 'M22' ),
              ( ['in'], c_float, 'M23' ),
              ( ['in'], c_float, 'M24' ),
              ( ['in'], c_float, 'M31' ),
              ( ['in'], c_float, 'M32' ),
              ( ['in'], c_float, 'M33' ),
              ( ['in'], c_float, 'M34' ),
              ( ['in'], c_float, 'M41' ),
              ( ['in'], c_float, 'M42' ),
              ( ['in'], c_float, 'M43' ),
              ( ['in'], c_float, 'M44' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureMatrix)), 'ppRetVal' )),
    COMMETHOD([dispid(8803), helpstring('Initializes a texture matrix from a matrix. The upper left 2x2 matrix defines rotation and scaling. The top two elements of the last column define translation.')], HRESULT, 'InitializeWithAffineTransform',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Matrix' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureMatrix)), 'ppRetVal' )),
    COMMETHOD([dispid(8804), helpstring('Initializes a texture matrix from texture corner points. Normally, a texture is mapped such that the lower left corner is texture coordinate (0, 0), the lower right is (1, 0), the upper right is (1, 1), and the upper left is (0, 1)...')], HRESULT, 'InitializeWithRectangles',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Corner0' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Corner1' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Corner2' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Corner3' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureMatrix)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTextureMatrixFactory implementation
##class _IAgStkGraphicsTextureMatrixFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a texture matrix to the identity matrix.'
##        #return ppRetVal
##
##    def InitializeByValues(self, M11, M12, M13, M14, M21, M22, M23, M24, M31, M32, M33, M34, M41, M42, M43, M44):
##        'Initializes a texture matrix. The subscripts define [row][column].'
##        #return ppRetVal
##
##    def InitializeWithAffineTransform(self, Matrix):
##        'Initializes a texture matrix from a matrix. The upper left 2x2 matrix defines rotation and scaling. The top two elements of the last column define translation.'
##        #return ppRetVal
##
##    def InitializeWithRectangles(self, Corner0, Corner1, Corner2, Corner3):
##        'Initializes a texture matrix from texture corner points. Normally, a texture is mapped such that the lower left corner is texture coordinate (0, 0), the lower right is (1, 0), the upper right is (1, 1), and the upper left is (0, 1)...'
##        #return ppRetVal
##

class AgStkGraphicsSceneManager(CoClass):
    'The static scene manager class provides global properties and functionality that apply to all scenes and thus affect the rendering of every globe control...'
    _reg_clsid_ = GUID('{2FCCD8C9-935F-48A7-8CD2-435064E40652}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsSceneManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSceneManager'
    _iid_ = GUID('{F2089EDF-81F7-4C6B-8FB4-756BFBE722DC}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsSceneManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The static scene manager class provides global properties and functionality that apply to all scenes and thus affect the rendering of every globe control...'
    _iid_ = GUID('{257B97EF-839B-4A17-A924-C40320174D13}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsSceneManagerEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Events raised by the instances of SceneManager.'
    _iid_ = GUID('{0301317F-E5BE-44CF-9B52-E15D3EE8CBE5}')
    _idlflags_ = []
    _methods_ = []
AgStkGraphicsSceneManager._com_interfaces_ = [_IAgStkGraphicsSceneManager, IAgStkGraphicsSceneManager]
AgStkGraphicsSceneManager._outgoing_interfaces_ = [IAgStkGraphicsSceneManagerEvents]

class AgStkGraphicsPathPrimitiveFactory(CoClass):
    'Renders a line to the 3D scene. Similar to the polyline primitive; however, the PathPrimitive was designed for the efficient addition/removal of points to/from the front or back of the line.'
    _reg_clsid_ = GUID('{62A1B021-71E6-462F-85A4-AF76F307B645}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class IAgStkGraphicsPathPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Renders a line to the 3D scene. Similar to the polyline primitive; however, the PathPrimitive was designed for the efficient addition/removal of points to/from the front or back of the line.'
    _iid_ = GUID('{2B9B98C4-17D2-4B72-A6CF-C9BC87EB11E8}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsPathPrimitiveFactory._com_interfaces_ = [_IAgStkGraphicsPathPrimitiveFactory, IAgStkGraphicsPathPrimitiveFactory]

class AgStkGraphicsMarkerBatchPrimitive(CoClass):
    ' Renders one or more markers in the 3D scene. Markers are 2D images that always face the viewer which can be sized in pixels or meters. Markers are also referred to as sprites or billboards...'
    _reg_clsid_ = GUID('{2131FE5A-DA73-4991-B12F-5799D98ADAEF}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsMarkerBatchPrimitive._com_interfaces_ = [_IAgStkGraphicsMarkerBatchPrimitive, IAgStkGraphicsMarkerBatchPrimitive, IAgStkGraphicsPrimitive]

class AgStkGraphicsScreenOverlay(CoClass):
    'A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window.'
    _reg_clsid_ = GUID('{BFC8B19A-F844-4A16-98A0-066A55F2807A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsScreenOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsScreenOverlay'
    _iid_ = GUID('{60839368-5830-4FFC-A295-5574D669FD45}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsScreenOverlay._com_interfaces_ = [_IAgStkGraphicsScreenOverlay, IAgStkGraphicsScreenOverlay, IAgStkGraphicsOverlay, IAgStkGraphicsScreenOverlayContainer]

class IAgStkGraphicsProjectedRasterOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A globe image overlay which projects a raster onto the terrain or surface of the central body. You can also enable projection onto models by setting projected raster model projection to true for a Scene...'
    _iid_ = GUID('{616ABF78-55F7-41A7-A6B7-2DA4AE822856}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsProjectedRasterOverlayFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' ),
              ( ['in'], POINTER(IAgStkGraphicsProjection), 'Projection' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjectedRasterOverlay)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets whether or not the video card supports the projected raster overlay.')], HRESULT, 'Supported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsProjectedRasterOverlayFactory implementation
##class IAgStkGraphicsProjectedRasterOverlayFactory_Impl(object):
##    def Initialize(self, Raster, Projection):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    @property
##    def Supported(self):
##        'Gets whether or not the video card supports the projected raster overlay.'
##        #return pRetVal
##

IAgStkGraphicsGraphicsFont._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the typeface name of the font.')], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the size of the font.')], HRESULT, 'Size',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a value that indicates whether this font is bold.')], HRESULT, 'Bold',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a value that indicates whether this font is italic.')], HRESULT, 'Italic',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a value that indicates whether this font is underlined.')], HRESULT, 'Underline',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a value that indicates whether this font has a horizontal line through its characters.')], HRESULT, 'Strikeout',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a value that indicates whether this font has an outline around its characters.')], HRESULT, 'Outline',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the font style enumeration that contains the style for this font. This does not include the outline property.')], HRESULT, 'Style',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsFontStyle), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a value that indicates whether this font is antialiased.')], HRESULT, 'Antialias',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsGraphicsFont implementation
##class IAgStkGraphicsGraphicsFont_Impl(object):
##    @property
##    def Name(self):
##        'Gets the typeface name of the font.'
##        #return pRetVal
##
##    @property
##    def Size(self):
##        'Gets the size of the font.'
##        #return pRetVal
##
##    @property
##    def Bold(self):
##        'Gets a value that indicates whether this font is bold.'
##        #return pRetVal
##
##    @property
##    def Italic(self):
##        'Gets a value that indicates whether this font is italic.'
##        #return pRetVal
##
##    @property
##    def Underline(self):
##        'Gets a value that indicates whether this font is underlined.'
##        #return pRetVal
##
##    @property
##    def Strikeout(self):
##        'Gets a value that indicates whether this font has a horizontal line through its characters.'
##        #return pRetVal
##
##    @property
##    def Outline(self):
##        'Gets a value that indicates whether this font has an outline around its characters.'
##        #return pRetVal
##
##    @property
##    def Style(self):
##        'Gets the font style enumeration that contains the style for this font. This does not include the outline property.'
##        #return pRetVal
##
##    @property
##    def Antialias(self):
##        'Gets a value that indicates whether this font is antialiased.'
##        #return pRetVal
##

class AgStkGraphicsMarkerBatchPrimitiveOptionalParameters(CoClass):
    "Optional per-marker parameters for marker batch primitive that overrides the marker batch's per-batch parameters..."
    _reg_clsid_ = GUID('{CA6977E4-4B11-4D9E-8EBE-E0F1D374FDB8}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsMarkerBatchPrimitiveOptionalParameters._com_interfaces_ = [_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters, IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters]

class AgStkGraphicsScreenOverlayCollection(CoClass):
    'A collection of screen overlays.'
    _reg_clsid_ = GUID('{C38D05E6-47ED-47E5-933B-706F7E31D071}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsScreenOverlayCollection._com_interfaces_ = [_IAgStkGraphicsScreenOverlayCollection, IAgStkGraphicsScreenOverlayCollection, IAgStkGraphicsScreenOverlayCollectionBase]

IAgStkGraphicsTextureFilter2DFactory._methods_ = [
    COMMETHOD(['propget', helpstring('Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: ClampToEdge, WrapT: ClampToEdge')], HRESULT, 'NearestClampToEdge',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: Repeat, WrapT: Repeat')], HRESULT, 'NearestRepeat',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: ClampToEdge, WrapT: ClampToEdge')], HRESULT, 'LinearClampToEdge',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: Repeat, WrapT: Repeat')], HRESULT, 'LinearRepeat',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a texture filter using the specified minification/magnification options and texture wrap.')], HRESULT, 'Initialize',
              ( ['in'], AgEStkGraphicsMinificationFilter, 'MinificationFilter' ),
              ( ['in'], AgEStkGraphicsMagnificationFilter, 'MagnificationFilter' ),
              ( ['in'], AgEStkGraphicsTextureWrap, 'WrapS' ),
              ( ['in'], AgEStkGraphicsTextureWrap, 'WrapT' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a texture filter using the specified texture wrap.')], HRESULT, 'InitializeWithTextureWrap',
              ( ['in'], AgEStkGraphicsTextureWrap, 'WrapS' ),
              ( ['in'], AgEStkGraphicsTextureWrap, 'WrapT' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a texture filter using the specified minification/magnification options.')], HRESULT, 'InitializeWithMinificationAndMagnification',
              ( ['in'], AgEStkGraphicsMinificationFilter, 'MinificationFilter' ),
              ( ['in'], AgEStkGraphicsMagnificationFilter, 'MagnificationFilter' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTextureFilter2DFactory implementation
##class IAgStkGraphicsTextureFilter2DFactory_Impl(object):
##    @property
##    def NearestClampToEdge(self):
##        'Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: ClampToEdge, WrapT: ClampToEdge'
##        #return ppRetVal
##
##    @property
##    def NearestRepeat(self):
##        'Gets a texture filter with the following properties: MinificationFilter: Nearest, MagnificationFilter: Nearest, WrapS: Repeat, WrapT: Repeat'
##        #return ppRetVal
##
##    @property
##    def LinearClampToEdge(self):
##        'Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: ClampToEdge, WrapT: ClampToEdge'
##        #return ppRetVal
##
##    @property
##    def LinearRepeat(self):
##        'Gets a texture filter with the following properties: MinificationFilter: Linear, MagnificationFilter: Linear, WrapS: Repeat, WrapT: Repeat'
##        #return ppRetVal
##
##    def Initialize(self, MinificationFilter, MagnificationFilter, WrapS, WrapT):
##        'Creates a texture filter using the specified minification/magnification options and texture wrap.'
##        #return ppRetVal
##
##    def InitializeWithTextureWrap(self, WrapS, WrapT):
##        'Creates a texture filter using the specified texture wrap.'
##        #return ppRetVal
##
##    def InitializeWithMinificationAndMagnification(self, MinificationFilter, MagnificationFilter):
##        'Creates a texture filter using the specified minification/magnification options.'
##        #return ppRetVal
##

class _IAgStkGraphicsFlipFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsFlipFilterFactory'
    _iid_ = GUID('{F163C52A-DDF6-4E7F-B6B7-CCE692E98774}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsFlipFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Flips the source raster along the given flip axis.'
    _iid_ = GUID('{478EDB08-272A-42B6-B486-A81A5BCAF92B}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsFlipFilterFactory._methods_ = [
    COMMETHOD([dispid(22901), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsFlipFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(22902), helpstring('Initializes a new instance with the specified flip axis.')], HRESULT, 'InitializeWithFlipAxis',
              ( ['in'], AgEStkGraphicsFlipAxis, 'FlipAxis' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsFlipFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsFlipFilterFactory implementation
##class _IAgStkGraphicsFlipFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithFlipAxis(self, FlipAxis):
##        'Initializes a new instance with the specified flip axis.'
##        #return ppRetVal
##

class AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy(CoClass):
    'path primitive update policy that removes points from remove location when the number of points in the path exceeds maximum count.'
    _reg_clsid_ = GUID('{CD5DF50C-9807-4AEF-8254-2634A6BD351D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy'
    _iid_ = GUID('{AB4FCF98-8150-4DDB-8FF8-3AB5C7D3A850}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._com_interfaces_ = [_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy, IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy, IAgStkGraphicsPathPrimitiveUpdatePolicy]

class AgStkGraphicsScreenOverlayManager(CoClass):
    'The top-level container for screen overlays. All child screen overlays that are added to this container are specified relative to the overall globe control.'
    _reg_clsid_ = GUID('{006A2EDB-3B8D-41E9-BCD5-4A6E4485E40D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsScreenOverlayManager(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsScreenOverlayManager'
    _iid_ = GUID('{5DA07CB8-DB02-40C2-95FA-39F59A11A607}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsScreenOverlayManager._com_interfaces_ = [_IAgStkGraphicsScreenOverlayManager, IAgStkGraphicsScreenOverlayManager, IAgStkGraphicsScreenOverlayCollectionBase, IAgStkGraphicsScreenOverlayContainer]

class _IAgStkGraphicsCylinderTriangulatorInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsCylinderTriangulatorInitializer'
    _iid_ = GUID('{CE930B2E-35A6-4950-B0C0-C217E02F949D}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsCylinderTriangulatorInitializer._methods_ = [
    COMMETHOD([dispid(6201), helpstring('Computes the triangulation for a cylinder centered at the origin.')], HRESULT, 'CreateSimple',
              ( ['in'], c_double, 'Length' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSolidTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6202), helpstring('Computes the triangulation for a cylinder centered at the origin.')], HRESULT, 'Compute',
              ( ['in'], c_double, 'Length' ),
              ( ['in'], c_double, 'BottomRadius' ),
              ( ['in'], c_double, 'TopRadius' ),
              ( ['in'], c_int, 'Slices' ),
              ( ['in'], AgEStkGraphicsCylinderFill, 'CylinderFill' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSolidTriangulatorResult)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsCylinderTriangulatorInitializer implementation
##class _IAgStkGraphicsCylinderTriangulatorInitializer_Impl(object):
##    def CreateSimple(self, Length, Radius):
##        'Computes the triangulation for a cylinder centered at the origin.'
##        #return ppRetVal
##
##    def Compute(self, Length, BottomRadius, TopRadius, Slices, CylinderFill):
##        'Computes the triangulation for a cylinder centered at the origin.'
##        #return ppRetVal
##

IAgStkGraphicsKmlNetworkLink._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the uri of the network link.')], HRESULT, 'Uri',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the refresh mode of the network link. The refresh mode specifies a time-based refresh policy for this link.')], HRESULT, 'RefreshMode',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsKmlNetworkLinkRefreshMode), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the refresh mode of the network link. The refresh mode specifies a time-based refresh policy for this link.')], HRESULT, 'RefreshMode',
              ( ['in'], AgEStkGraphicsKmlNetworkLinkRefreshMode, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the interval duration at which this network link will refresh, when refresh mode is set to on interval.')], HRESULT, 'RefreshInterval',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the interval duration at which this network link will refresh, when refresh mode is set to on interval.')], HRESULT, 'RefreshInterval',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the view refresh mode of the network link. The view refresh mode specifies the refresh policy for the when the camera's view changes.")], HRESULT, 'ViewRefreshMode',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsKmlNetworkLinkViewRefreshMode), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the view refresh mode of the network link. The view refresh mode specifies the refresh policy for the when the camera's view changes.")], HRESULT, 'ViewRefreshMode',
              ( ['in'], AgEStkGraphicsKmlNetworkLinkViewRefreshMode, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the duration after camera view movement stops that this network link will refresh, when view refresh mode is set to on stop.')], HRESULT, 'ViewRefreshTime',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the duration after camera view movement stops that this network link will refresh, when view refresh mode is set to on stop.')], HRESULT, 'ViewRefreshTime',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the value that scales the bounding box defining the view associated with this network link. A value less than 1.0 specifies to use less than the full view (screen). A value greater than 1...')], HRESULT, 'ViewBoundScale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the value that scales the bounding box defining the view associated with this network link. A value less than 1.0 specifies to use less than the full view (screen). A value greater than 1...')], HRESULT, 'ViewBoundScale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the duration that is the minimum allowed time between refreshes of this network link.')], HRESULT, 'MinimumRefreshPeriod',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the cookie string associated with this network link.')], HRESULT, 'Cookie',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the message string associated with this network link.')], HRESULT, 'Message',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the link snippet associated with this network link.')], HRESULT, 'LinkSnippet',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the string specifying the date/time this network should expire and be refreshed.')], HRESULT, 'Expires',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([helpstring('Refreshes the network link.')], HRESULT, 'Refresh'),
]
################################################################
## code template for IAgStkGraphicsKmlNetworkLink implementation
##class IAgStkGraphicsKmlNetworkLink_Impl(object):
##    @property
##    def Uri(self):
##        'Gets the uri of the network link.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the refresh mode of the network link. The refresh mode specifies a time-based refresh policy for this link.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the refresh mode of the network link. The refresh mode specifies a time-based refresh policy for this link.'
##    RefreshMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the interval duration at which this network link will refresh, when refresh mode is set to on interval.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the interval duration at which this network link will refresh, when refresh mode is set to on interval.'
##    RefreshInterval = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the view refresh mode of the network link. The view refresh mode specifies the refresh policy for the when the camera's view changes."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the view refresh mode of the network link. The view refresh mode specifies the refresh policy for the when the camera's view changes."
##    ViewRefreshMode = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the duration after camera view movement stops that this network link will refresh, when view refresh mode is set to on stop.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the duration after camera view movement stops that this network link will refresh, when view refresh mode is set to on stop.'
##    ViewRefreshTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value that scales the bounding box defining the view associated with this network link. A value less than 1.0 specifies to use less than the full view (screen). A value greater than 1...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value that scales the bounding box defining the view associated with this network link. A value less than 1.0 specifies to use less than the full view (screen). A value greater than 1...'
##    ViewBoundScale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumRefreshPeriod(self):
##        'Gets the duration that is the minimum allowed time between refreshes of this network link.'
##        #return pRetVal
##
##    @property
##    def Cookie(self):
##        'Gets the cookie string associated with this network link.'
##        #return pRetVal
##
##    @property
##    def Message(self):
##        'Gets the message string associated with this network link.'
##        #return pRetVal
##
##    @property
##    def LinkSnippet(self):
##        'Gets the link snippet associated with this network link.'
##        #return pRetVal
##
##    @property
##    def Expires(self):
##        'Gets the string specifying the date/time this network should expire and be refreshed.'
##        #return pRetVal
##
##    def Refresh(self):
##        'Refreshes the network link.'
##        #return 
##

class AgStkGraphicsModelArticulation(CoClass):
    'A model articulation identifies geometry on the model and is a collection of transformations that can be applied to that geometry.'
    _reg_clsid_ = GUID('{851ADDF7-80FD-48ED-BA65-8BBA4A05C100}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsModelArticulation._com_interfaces_ = [_IAgStkGraphicsModelArticulation, IAgStkGraphicsModelArticulation]

class AgStkGraphicsScreenOverlayPickResult(CoClass):
    'Describes a picked screen overlay as a result of a call to pick screen overlays.'
    _reg_clsid_ = GUID('{5A533B2C-A920-46FD-83B5-05A5999A26FA}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsScreenOverlayPickResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsScreenOverlayPickResult'
    _iid_ = GUID('{BBB59898-ABA6-46E0-B61D-352B37D72FF9}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsScreenOverlayPickResult._com_interfaces_ = [_IAgStkGraphicsScreenOverlayPickResult, IAgStkGraphicsScreenOverlayPickResult]

class _IAgStkGraphicsPickResult(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPickResult'
    _iid_ = GUID('{B8EA9DE6-95DE-479E-955A-227452645225}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsPickResult._methods_ = [
    COMMETHOD([dispid(13801), helpstring('Gets a collection of objects that were on the pick stack for the picked object.'), 'propget'], HRESULT, 'Objects',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsObjectCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(13802), helpstring('Gets the depth of the picked location in the 3D scene.'), 'propget'], HRESULT, 'Depth',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(13803), helpstring("Gets the position of the picked location in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsPickResult implementation
##class _IAgStkGraphicsPickResult_Impl(object):
##    @property
##    def Objects(self):
##        'Gets a collection of objects that were on the pick stack for the picked object.'
##        #return ppRetVal
##
##    @property
##    def Depth(self):
##        'Gets the depth of the picked location in the 3D scene.'
##        #return pRetVal
##
##    @property
##    def Position(self):
##        "Gets the position of the picked location in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."
##        #return ppRetVal
##

class _IAgStkGraphicsEllipsoidTriangulatorInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsEllipsoidTriangulatorInitializer'
    _iid_ = GUID('{80D84899-B026-41DF-AB91-357CE9E156A4}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsEllipsoidTriangulatorInitializer._methods_ = [
    COMMETHOD([dispid(6301), helpstring('Computes the triangulation for an ellipsoid with the specified radii, centered at the origin, using 32 slices and 16 stacks.')], HRESULT, 'ComputeSimple',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Radii' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSolidTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6302), helpstring('Computes the triangulation for an ellipsoid with the specified radii, centered at the origin.')], HRESULT, 'Compute',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Radii' ),
              ( ['in'], c_int, 'Slices' ),
              ( ['in'], c_int, 'Stacks' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSolidTriangulatorResult)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsEllipsoidTriangulatorInitializer implementation
##class _IAgStkGraphicsEllipsoidTriangulatorInitializer_Impl(object):
##    def ComputeSimple(self, Radii):
##        'Computes the triangulation for an ellipsoid with the specified radii, centered at the origin, using 32 slices and 16 stacks.'
##        #return ppRetVal
##
##    def Compute(self, Radii, Slices, Stacks):
##        'Computes the triangulation for an ellipsoid with the specified radii, centered at the origin.'
##        #return ppRetVal
##

class _IAgStkGraphicsGammaCorrectionFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGammaCorrectionFilterFactory'
    _iid_ = GUID('{717AE738-297E-47BF-B127-E57689E4D3AB}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsGammaCorrectionFilterFactory._methods_ = [
    COMMETHOD([dispid(23001), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGammaCorrectionFilter)), 'ppRetVal' )),
    COMMETHOD([dispid(23002), helpstring('Initializes a new instance with the specified gamma.')], HRESULT, 'InitializeWithGamma',
              ( ['in'], c_double, 'Gamma' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGammaCorrectionFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGammaCorrectionFilterFactory implementation
##class _IAgStkGraphicsGammaCorrectionFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithGamma(self, Gamma):
##        'Initializes a new instance with the specified gamma.'
##        #return ppRetVal
##

class AgStkGraphicsModelArticulationCollection(CoClass):
    "A collection containing a model primitive's available articulations. A model articulation identifies geometry on the model and is a collection of transformations that can be applied to that geometry."
    _reg_clsid_ = GUID('{70F7DC99-1E57-406D-A8F8-ABCBAD84DB28}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsModelArticulationCollection._com_interfaces_ = [_IAgStkGraphicsModelArticulationCollection, IAgStkGraphicsModelArticulationCollection]

class AgStkGraphicsSolidPrimitive(CoClass):
    "Renders filled solid objects and their outlines. Example solids include boxes and ellipsoids. Various effects are supported, such as displaying the solid's silhouette, and hidding the outline of the backside of the solid..."
    _reg_clsid_ = GUID('{DF0A8A07-A109-474D-A2D0-849CD9C86E9F}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsSolidPrimitive._com_interfaces_ = [_IAgStkGraphicsSolidPrimitive, IAgStkGraphicsSolidPrimitive, IAgStkGraphicsPrimitive]

IAgStkGraphicsCameraVideoRecording._methods_ = [
    COMMETHOD(['propget', helpstring('Gets if recording is occurring or not.')], HRESULT, 'IsRecording',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Starts recording a file in the WMV format at the specified bit and frame rate.')], HRESULT, 'StartRecording',
              ( ['in'], BSTR, 'WmvFilename' ),
              ( ['in'], c_int, 'VideoBitRate' ),
              ( ['in'], c_int, 'VideoFrameRate' )),
    COMMETHOD([helpstring('Starts recording a frame stack. Each frame is saved as a separate image file. The filename of each frame is defined by a prefix followed by a frame number.')], HRESULT, 'StartRecordingFrameStack',
              ( ['in'], BSTR, 'FileDirectory' ),
              ( ['in'], BSTR, 'FilePrefix' ),
              ( ['in'], AgEStkGraphicsCameraSnapshotFileFormat, 'CameraSnapshotFileFormat' ),
              ( ['in'], c_int, 'StartingFrameNumber' ),
              ( ['in'], c_int, 'NumberOfFrameDigits' )),
    COMMETHOD([helpstring('Stops recording.')], HRESULT, 'StopRecording'),
]
################################################################
## code template for IAgStkGraphicsCameraVideoRecording implementation
##class IAgStkGraphicsCameraVideoRecording_Impl(object):
##    @property
##    def IsRecording(self):
##        'Gets if recording is occurring or not.'
##        #return pRetVal
##
##    def StartRecording(self, WmvFilename, VideoBitRate, VideoFrameRate):
##        'Starts recording a file in the WMV format at the specified bit and frame rate.'
##        #return 
##
##    def StartRecordingFrameStack(self, FileDirectory, FilePrefix, CameraSnapshotFileFormat, StartingFrameNumber, NumberOfFrameDigits):
##        'Starts recording a frame stack. Each frame is saved as a separate image file. The filename of each frame is defined by a prefix followed by a frame number.'
##        #return 
##
##    def StopRecording(self):
##        'Stops recording.'
##        #return 
##

class AgStkGraphicsModelPrimitive(CoClass):
    "The model primitive loads and renders <a href='http://www.collada.org/'>COLLADA</a> (DAE) and AGI <a href='http://www.agi.com/resources/models/models0.cfm'>MDL</a> (MDL) models."
    _reg_clsid_ = GUID('{70B122E0-52F2-428A-9835-C50BF703D15A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsModelPrimitive._com_interfaces_ = [_IAgStkGraphicsModelPrimitive, IAgStkGraphicsModelPrimitive, IAgStkGraphicsPrimitive]

class AgStkGraphicsStereoscopic(CoClass):
    'Gets the stereoscopic options for all Scenes. To use a particular stereoscopic display mode, ensure that your system supports the feature and that it is enabled.'
    _reg_clsid_ = GUID('{BA612E4E-DD08-48AD-B467-4361A9E120B9}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsStereoscopic._com_interfaces_ = [_IAgStkGraphicsStereoscopic, IAgStkGraphicsStereoscopic]

class IAgStkGraphicsVectorPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Renders a vector in the 3D scene. A vector is defined by a source (given by an ISystem) and a direction (given by an IVector or IPoint). Length is auto-calculated or can be set separately.'
    _iid_ = GUID('{A7013A6A-64EA-43B6-807F-4F789DF05438}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsVectorPrimitiveFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a vector primitive with the specified ISystem sys as its source and pointing in direction dir.')], HRESULT, 'InitializeWithDirection',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'Sys' ),
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnVector), 'Dir' ),
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsVectorPrimitive)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsVectorPrimitiveFactory implementation
##class IAgStkGraphicsVectorPrimitiveFactory_Impl(object):
##    def InitializeWithDirection(self, Sys, Dir, Font):
##        'Initializes a vector primitive with the specified ISystem sys as its source and pointing in direction dir.'
##        #return ppRetVal
##

class IAgStkGraphicsSurfaceShapesInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Computes boundary positions for shapes on the surface such as circles, ellipses, and sectors.'
    _iid_ = GUID('{8B711790-8BC2-4E20-8795-89A4863A0566}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsSurfaceShapesInitializer._methods_ = [
    COMMETHOD([helpstring('Computes boundary positions for a circle on the specified centralBody with the specified center, radius and granularity.')], HRESULT, 'ComputeCircleWithGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes boundary positions for a circle on the specified centralBody with the specified center and radius. This is equivalent to calling ComputeCircle with a granularity of 1 degree.')], HRESULT, 'ComputeCircle',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('For convenience. Computes boundary positions for a circle on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeCircleCartographicWithGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('For convenience. Computes boundary positions for a circle on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeCircleCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'Radius' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes boundary positions for an ellipse on the specified centralBody.')], HRESULT, 'ComputeEllipseWithGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'MajorAxisRadius' ),
              ( ['in'], c_double, 'MinorAxisRadius' ),
              ( ['in'], c_double, 'Bearing' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes boundary positions for an ellipse on the specified centralBody This is equivalent to calling ComputeEllipse with a granularity of 1 degree.')], HRESULT, 'ComputeEllipse',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'MajorAxisRadius' ),
              ( ['in'], c_double, 'MinorAxisRadius' ),
              ( ['in'], c_double, 'Bearing' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('For convenience. Computes boundary positions for an ellipse on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeEllipseCartographicWithGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'MajorAxisRadius' ),
              ( ['in'], c_double, 'MinorAxisRadius' ),
              ( ['in'], c_double, 'Bearing' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('For convenience. Computes boundary positions for an ellipse on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeEllipseCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'MajorAxisRadius' ),
              ( ['in'], c_double, 'MinorAxisRadius' ),
              ( ['in'], c_double, 'Bearing' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes boundary positions for a sector on the specified centralBody.')], HRESULT, 'ComputeSectorWithGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'InnerRadius' ),
              ( ['in'], c_double, 'OuterRadius' ),
              ( ['in'], c_double, 'StartBearing' ),
              ( ['in'], c_double, 'EndBearing' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes boundary positions for a sector on the specified centralBody This is equivalent to calling ComputeSector with a granularity of 1 degree.')], HRESULT, 'ComputeSector',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'InnerRadius' ),
              ( ['in'], c_double, 'OuterRadius' ),
              ( ['in'], c_double, 'StartBearing' ),
              ( ['in'], c_double, 'EndBearing' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('For convenience. Computes boundary positions for a sector on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeSectorCartographicWithGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'InnerRadius' ),
              ( ['in'], c_double, 'OuterRadius' ),
              ( ['in'], c_double, 'StartBearing' ),
              ( ['in'], c_double, 'EndBearing' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('For convenience. Computes boundary positions for a sector on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeSectorCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Center' ),
              ( ['in'], c_double, 'InnerRadius' ),
              ( ['in'], c_double, 'OuterRadius' ),
              ( ['in'], c_double, 'StartBearing' ),
              ( ['in'], c_double, 'EndBearing' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSurfaceShapesInitializer implementation
##class IAgStkGraphicsSurfaceShapesInitializer_Impl(object):
##    def ComputeCircleWithGranularity(self, CentralBody, Center, Radius, Granularity):
##        'Computes boundary positions for a circle on the specified centralBody with the specified center, radius and granularity.'
##        #return ppRetVal
##
##    def ComputeCircle(self, CentralBody, Center, Radius):
##        'Computes boundary positions for a circle on the specified centralBody with the specified center and radius. This is equivalent to calling ComputeCircle with a granularity of 1 degree.'
##        #return ppRetVal
##
##    def ComputeCircleCartographicWithGranularity(self, CentralBody, Center, Radius, Granularity):
##        'For convenience. Computes boundary positions for a circle on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeCircleCartographic(self, CentralBody, Center, Radius):
##        'For convenience. Computes boundary positions for a circle on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeEllipseWithGranularity(self, CentralBody, Center, MajorAxisRadius, MinorAxisRadius, Bearing, Granularity):
##        'Computes boundary positions for an ellipse on the specified centralBody.'
##        #return ppRetVal
##
##    def ComputeEllipse(self, CentralBody, Center, MajorAxisRadius, MinorAxisRadius, Bearing):
##        'Computes boundary positions for an ellipse on the specified centralBody This is equivalent to calling ComputeEllipse with a granularity of 1 degree.'
##        #return ppRetVal
##
##    def ComputeEllipseCartographicWithGranularity(self, CentralBody, Center, MajorAxisRadius, MinorAxisRadius, Bearing, Granularity):
##        'For convenience. Computes boundary positions for an ellipse on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeEllipseCartographic(self, CentralBody, Center, MajorAxisRadius, MinorAxisRadius, Bearing):
##        'For convenience. Computes boundary positions for an ellipse on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeSectorWithGranularity(self, CentralBody, Center, InnerRadius, OuterRadius, StartBearing, EndBearing, Granularity):
##        'Computes boundary positions for a sector on the specified centralBody.'
##        #return ppRetVal
##
##    def ComputeSector(self, CentralBody, Center, InnerRadius, OuterRadius, StartBearing, EndBearing):
##        'Computes boundary positions for a sector on the specified centralBody This is equivalent to calling ComputeSector with a granularity of 1 degree.'
##        #return ppRetVal
##
##    def ComputeSectorCartographicWithGranularity(self, CentralBody, Center, InnerRadius, OuterRadius, StartBearing, EndBearing, Granularity):
##        'For convenience. Computes boundary positions for a sector on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeSectorCartographic(self, CentralBody, Center, InnerRadius, OuterRadius, StartBearing, EndBearing):
##        'For convenience. Computes boundary positions for a sector on the specified centralBody using a cartographic center. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##

IAgStkGraphicsProjection._methods_ = [
    COMMETHOD(['propget', helpstring("Gets or sets the cartesian defining the position of the projection in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z.")], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the cartesian defining the position of the projection in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z.")], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the unit quaternion defining the orientation of the projection in the central body's fixed reference frame.")], HRESULT, 'Orientation',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the unit quaternion defining the orientation of the projection in the central body's fixed reference frame.")], HRESULT, 'Orientation',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the horizontal field of view associated with the projection.')], HRESULT, 'FieldOfViewHorizontal',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the horizontal field of view associated with the projection.')], HRESULT, 'FieldOfViewHorizontal',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the vertical field of view associated with the projection.')], HRESULT, 'FieldOfViewVertical',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the vertical field of view associated with the projection.')], HRESULT, 'FieldOfViewVertical',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the near plane associated with the projection.')], HRESULT, 'NearPlane',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the near plane associated with the projection.')], HRESULT, 'NearPlane',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the far plane associated with the projection.')], HRESULT, 'FarPlane',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the far plane associated with the projection.')], HRESULT, 'FarPlane',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsProjection implementation
##class IAgStkGraphicsProjection_Impl(object):
##    def _get(self):
##        "Gets or sets the cartesian defining the position of the projection in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the cartesian defining the position of the projection in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the unit quaternion defining the orientation of the projection in the central body's fixed reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the unit quaternion defining the orientation of the projection in the central body's fixed reference frame."
##    Orientation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the horizontal field of view associated with the projection.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the horizontal field of view associated with the projection.'
##    FieldOfViewHorizontal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the vertical field of view associated with the projection.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the vertical field of view associated with the projection.'
##    FieldOfViewVertical = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the near plane associated with the projection.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the near plane associated with the projection.'
##    NearPlane = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the far plane associated with the projection.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the far plane associated with the projection.'
##    FarPlane = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsModelTransformation(CoClass):
    'A model transformation defines a transformation that is applied to geometry on a model primitive. That geometry is identified by the model articulation which contains the transformation...'
    _reg_clsid_ = GUID('{3E21F56D-556B-407E-BA54-CCE0C3491780}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsModelTransformation._com_interfaces_ = [_IAgStkGraphicsModelTransformation, IAgStkGraphicsModelTransformation]

class AgStkGraphicsSurfaceMeshPrimitive(CoClass):
    'A triangle mesh primitive for meshes on the surface that need to conform to terrain.'
    _reg_clsid_ = GUID('{E146F3FC-0DB4-45FA-BF31-C34E6C2F102A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsSurfaceMeshPrimitive._com_interfaces_ = [_IAgStkGraphicsSurfaceMeshPrimitive, IAgStkGraphicsSurfaceMeshPrimitive, IAgStkGraphicsPrimitive]

_IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._methods_ = [
    COMMETHOD([dispid(25501), helpstring('Returns a custom image globe overlay.'), 'propget'], HRESULT, 'CustomImageGlobeOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCustomImageGlobeOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(25502), helpstring('Returns true if custom image globe overlays are supported.'), 'propget'], HRESULT, 'IsCustomImageGlobeOverlaySupported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(25503), helpstring("Returns a pointer to plugin object's IUnknown interface."), 'propget'], HRESULT, 'RealPluginObject',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsCustomImageGlobeOverlayPluginProxy implementation
##class _IAgStkGraphicsCustomImageGlobeOverlayPluginProxy_Impl(object):
##    @property
##    def CustomImageGlobeOverlay(self):
##        'Returns a custom image globe overlay.'
##        #return ppRetVal
##
##    @property
##    def IsCustomImageGlobeOverlaySupported(self):
##        'Returns true if custom image globe overlays are supported.'
##        #return pRetVal
##
##    @property
##    def RealPluginObject(self):
##        "Returns a pointer to plugin object's IUnknown interface."
##        #return ppRetVal
##

IAgStkGraphicsKmlGraphics._methods_ = [
    COMMETHOD(['propget', helpstring('The collection of kml documents that are currently loaded.')], HRESULT, 'Documents',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlDocumentCollection)), 'ppRetVal' )),
    COMMETHOD([helpstring('Loads a kml document from a uri.')], HRESULT, 'LoadDocument',
              ( ['in'], BSTR, 'KmlUri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlDocument)), 'ppRetVal' )),
    COMMETHOD([helpstring('Loads a kml document from a Uri.')], HRESULT, 'LoadDocumentString',
              ( ['in'], BSTR, 'KmlUri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlDocument)), 'ppRetVal' )),
    COMMETHOD([helpstring('Loads a kml document from a string containing the document.')], HRESULT, 'Load',
              ( ['in'], BSTR, 'KmlDocument' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlDocument)), 'ppRetVal' )),
    COMMETHOD([helpstring('Loads a kml document asynchronously from a uri. The document loaded event is raised when the document is loaded.')], HRESULT, 'LoadDocumentAsync',
              ( ['in'], BSTR, 'KmlUri' )),
    COMMETHOD([helpstring('Loads a kml document asynchronously from a Uri. The document loaded event is raised when the document is loaded.')], HRESULT, 'LoadDocumentAsyncString',
              ( ['in'], BSTR, 'KmlUri' )),
    COMMETHOD([helpstring('Loads a kml document asynchronously from a string containing the document. The document loaded event is raised when the document is loaded.')], HRESULT, 'LoadAsync',
              ( ['in'], BSTR, 'KmlDocument' )),
    COMMETHOD([helpstring('Unloads a kml document. All associated visual features will be removed from the Scene. Once a KmlDocument is unloaded, it is no longer valid and will throw when accessing properties or methods.')], HRESULT, 'Unload',
              ( ['in'], POINTER(IAgStkGraphicsKmlDocument), 'KmlDocument' )),
    COMMETHOD([helpstring('Unloads all kml documents associated with this central body. All associated visual features will be removed from the Scene. Once a KmlDocument is unloaded, it is no longer valid and will throw when accessing properties or methods.')], HRESULT, 'UnloadAll'),
]
################################################################
## code template for IAgStkGraphicsKmlGraphics implementation
##class IAgStkGraphicsKmlGraphics_Impl(object):
##    @property
##    def Documents(self):
##        'The collection of kml documents that are currently loaded.'
##        #return ppRetVal
##
##    def LoadDocument(self, KmlUri):
##        'Loads a kml document from a uri.'
##        #return ppRetVal
##
##    def LoadDocumentString(self, KmlUri):
##        'Loads a kml document from a Uri.'
##        #return ppRetVal
##
##    def Load(self, KmlDocument):
##        'Loads a kml document from a string containing the document.'
##        #return ppRetVal
##
##    def LoadDocumentAsync(self, KmlUri):
##        'Loads a kml document asynchronously from a uri. The document loaded event is raised when the document is loaded.'
##        #return 
##
##    def LoadDocumentAsyncString(self, KmlUri):
##        'Loads a kml document asynchronously from a Uri. The document loaded event is raised when the document is loaded.'
##        #return 
##
##    def LoadAsync(self, KmlDocument):
##        'Loads a kml document asynchronously from a string containing the document. The document loaded event is raised when the document is loaded.'
##        #return 
##
##    def Unload(self, KmlDocument):
##        'Unloads a kml document. All associated visual features will be removed from the Scene. Once a KmlDocument is unloaded, it is no longer valid and will throw when accessing properties or methods.'
##        #return 
##
##    def UnloadAll(self):
##        'Unloads all kml documents associated with this central body. All associated visual features will be removed from the Scene. Once a KmlDocument is unloaded, it is no longer valid and will throw when accessing properties or methods.'
##        #return 
##

class IAgStkGraphicsScreenOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window.'
    _iid_ = GUID('{45754D2A-E83F-4C32-9792-C90D9620A83A}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsScreenOverlayFactory._methods_ = [
    COMMETHOD([helpstring('Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels.')], HRESULT, 'Initialize',
              ( ['in'], c_double, 'XPixels' ),
              ( ['in'], c_double, 'YPixels' ),
              ( ['in'], c_double, 'WidthPixels' ),
              ( ['in'], c_double, 'HeightPixels' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlay)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes the overlay with the specified position and size.')], HRESULT, 'InitializeWithPosAndSize',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Size' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlay)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsScreenOverlayFactory implementation
##class IAgStkGraphicsScreenOverlayFactory_Impl(object):
##    def Initialize(self, XPixels, YPixels, WidthPixels, HeightPixels):
##        'Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels.'
##        #return ppRetVal
##
##    def InitializeWithPosAndSize(self, Position, Size):
##        'Initializes the overlay with the specified position and size.'
##        #return ppRetVal
##

class AgStkGraphicsOverlay(CoClass):
    'A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window.'
    _reg_clsid_ = GUID('{EBE301D4-B0AF-4299-B49C-00191BA7B906}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsOverlay._com_interfaces_ = [_IAgStkGraphicsOverlay, IAgStkGraphicsOverlay, IAgStkGraphicsScreenOverlayContainer]

class AgStkGraphicsTerrainCollection(CoClass):
    'A collection of terrain overlay objects.'
    _reg_clsid_ = GUID('{493CB270-7AFF-402B-81CB-EC5404B070AD}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class IAgStkGraphicsTerrainCollectionEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Events raised by the instances of TerrainCollection.'
    _iid_ = GUID('{FE5C3CB3-727A-4887-BCFE-0D311B17B092}')
    _idlflags_ = []
    _methods_ = []
AgStkGraphicsTerrainCollection._com_interfaces_ = [_IAgStkGraphicsTerrainCollection, IAgStkGraphicsTerrainCollection]
AgStkGraphicsTerrainCollection._outgoing_interfaces_ = [IAgStkGraphicsTerrainCollectionEvents]

IAgStkGraphicsPathPrimitiveFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a default path primitive. This is equivalent to constructing a path primitive with an initial capacity of 16.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a path primitive with the specified capacity.')], HRESULT, 'InitializeWithCapacity',
              ( ['in'], c_int, 'Capacity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPrimitive)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the minimum width, in pixels, supported by the video card.')], HRESULT, 'MinimumWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the maximum width, in pixels, supported by the video card.')], HRESULT, 'MaximumWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsPathPrimitiveFactory implementation
##class IAgStkGraphicsPathPrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default path primitive. This is equivalent to constructing a path primitive with an initial capacity of 16.'
##        #return ppRetVal
##
##    def InitializeWithCapacity(self, Capacity):
##        'Initializes a path primitive with the specified capacity.'
##        #return ppRetVal
##
##    @property
##    def MinimumWidthSupported(self):
##        'Gets the minimum width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    @property
##    def MaximumWidthSupported(self):
##        'Gets the maximum width, in pixels, supported by the video card.'
##        #return pRetVal
##

class AgStkGraphicsPathPrimitive(CoClass):
    'Renders a line to the 3D scene. Similar to the polyline primitive; however, the PathPrimitive was designed for the efficient addition/removal of points to/from the front or back of the line.'
    _reg_clsid_ = GUID('{ED2BE34E-3E15-4F63-8667-ADF0D9C71C7D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsPathPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPathPrimitive'
    _iid_ = GUID('{974C0AF0-5F1E-45DE-B45C-4AE5FC465913}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsPathPrimitive._com_interfaces_ = [_IAgStkGraphicsPathPrimitive, IAgStkGraphicsPathPrimitive, IAgStkGraphicsPrimitive]

class AgStkGraphicsTerrainOverlay(CoClass):
    'A globe overlay which shows terrain.'
    _reg_clsid_ = GUID('{BF3C0EF0-D5A6-4426-AC8F-4250E0F9CC3C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTerrainOverlay._com_interfaces_ = [_IAgStkGraphicsTerrainOverlay, IAgStkGraphicsTerrainOverlay, IAgStkGraphicsGlobeOverlay]

class AgStkGraphicsPickResult(CoClass):
    'A single result from Pick.'
    _reg_clsid_ = GUID('{D5E8FA47-F424-4713-85E4-E5FC9DE6BAA6}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsPickResult._com_interfaces_ = [_IAgStkGraphicsPickResult, IAgStkGraphicsPickResult]

class AgStkGraphicsTextBatchPrimitive(CoClass):
    " Renders one or more strings in the 3D scene.  For best performance, avoid creating lots of batches with only a few strings each. See the <topic name='Batching'>Batching Performance Overview</topic>. "
    _reg_clsid_ = GUID('{9F85E0E9-ED39-4762-A4B1-24C98D9F49DC}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsTextBatchPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTextBatchPrimitive'
    _iid_ = GUID('{8070FB92-1ABB-44F6-B78D-38A8567BFD33}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsTextBatchPrimitive._com_interfaces_ = [_IAgStkGraphicsTextBatchPrimitive, IAgStkGraphicsTextBatchPrimitive, IAgStkGraphicsPrimitive]

class _IAgStkGraphicsGammaCorrectionFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGammaCorrectionFilter'
    _iid_ = GUID('{07EEF50C-4414-4183-935A-F5E2669EB4FB}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsGammaCorrectionFilter._methods_ = [
    COMMETHOD([dispid(21101), helpstring('Gets or sets the gamma value for the filter. The value must be between .2 and 5. The default gamma value is 2.2.'), 'propget'], HRESULT, 'Gamma',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(21101), helpstring('Gets or sets the gamma value for the filter. The value must be between .2 and 5. The default gamma value is 2.2.'), 'propput'], HRESULT, 'Gamma',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGammaCorrectionFilter implementation
##class _IAgStkGraphicsGammaCorrectionFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the gamma value for the filter. The value must be between .2 and 5. The default gamma value is 2.2.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the gamma value for the filter. The value must be between .2 and 5. The default gamma value is 2.2.'
##    Gamma = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsExtrudedPolylineTriangulatorInitializer'
    _iid_ = GUID('{33FA7BE9-4B80-43E8-9FF4-5CB8C6DC2E0E}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._methods_ = [
    COMMETHOD([dispid(6401), helpstring('Computes an extrusion between bottomPositions and topPositions on the specified centralBody. This is equivalent to calling Compute with a positionsWindingOrder of compute.')], HRESULT, 'Compute',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'BottomPositions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'TopPositions' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6402), helpstring('Computes an extrusion between bottomPositions and topPositions on the specified centralBody.')], HRESULT, 'ComputeWithWindingOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'BottomPositions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'TopPositions' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'PositionsWindingOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6403), helpstring('For convenience. Computes an extrusion between bottomPositions and topPositions on the specified centralBody using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'BottomPositions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'TopPositions' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6404), helpstring('For convenience. Computes an extrusion between bottomPositions and topPositions on the specified centralBody using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeCartographicWithWindingOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'BottomPositions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'TopPositions' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'PositionsWindingOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6405), helpstring('Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude. This is equivalent to calling Compute with a positionsWindingOrder of compute.')], HRESULT, 'ComputeWithAltitudes',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'BottomAltitude' ),
              ( ['in'], c_double, 'TopAltitude' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6406), helpstring('Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude.')], HRESULT, 'ComputeWithAltitudesAndWindingOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'BottomAltitude' ),
              ( ['in'], c_double, 'TopAltitude' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'PositionsWindingOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6407), helpstring('For convenience. Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeCartographicWithAltitudes',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'BottomAltitude' ),
              ( ['in'], c_double, 'TopAltitude' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6408), helpstring('For convenience. Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeCartographicWithAltitudesAndWindingOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'BottomAltitude' ),
              ( ['in'], c_double, 'TopAltitude' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'PositionsWindingOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6409), helpstring('Computes an extrusion of positions on the specified centralBody. One side of the extrusion has a constant altitude and the other has the original altitudes from positions...')], HRESULT, 'ComputeSingleConstantAltitude',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6410), helpstring('Computes an extrusion of positions on the specified centralBody. One side of the extrusion has a constant altitude and the other has the original altitudes from positions.')], HRESULT, 'ComputeSingleConstantAltitudeWithWindingOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'PositionsWindingOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6411), helpstring('For convenience. Computes an extrusion of positions on the specified centralBody using cartographic positions. One side of the extrusion has a constant altitude and the other has the original altitudes from positions...')], HRESULT, 'ComputeSingleConstantAltitudeCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([dispid(6412), helpstring('For convenience. Computes an extrusion of positions on the specified centralBody using cartographic positions. One side of the extrusion has a constant altitude and the other has the original altitudes from positions...')], HRESULT, 'ComputeSingleConstantAltitudeCartographicWithWindingOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'PositionsWindingOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer implementation
##class _IAgStkGraphicsExtrudedPolylineTriangulatorInitializer_Impl(object):
##    def Compute(self, CentralBody, BottomPositions, TopPositions):
##        'Computes an extrusion between bottomPositions and topPositions on the specified centralBody. This is equivalent to calling Compute with a positionsWindingOrder of compute.'
##        #return ppRetVal
##
##    def ComputeWithWindingOrder(self, CentralBody, BottomPositions, TopPositions, PositionsWindingOrder):
##        'Computes an extrusion between bottomPositions and topPositions on the specified centralBody.'
##        #return ppRetVal
##
##    def ComputeCartographic(self, CentralBody, BottomPositions, TopPositions):
##        'For convenience. Computes an extrusion between bottomPositions and topPositions on the specified centralBody using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeCartographicWithWindingOrder(self, CentralBody, BottomPositions, TopPositions, PositionsWindingOrder):
##        'For convenience. Computes an extrusion between bottomPositions and topPositions on the specified centralBody using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeWithAltitudes(self, CentralBody, Positions, BottomAltitude, TopAltitude):
##        'Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude. This is equivalent to calling Compute with a positionsWindingOrder of compute.'
##        #return ppRetVal
##
##    def ComputeWithAltitudesAndWindingOrder(self, CentralBody, Positions, BottomAltitude, TopAltitude, PositionsWindingOrder):
##        'Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude.'
##        #return ppRetVal
##
##    def ComputeCartographicWithAltitudes(self, CentralBody, Positions, BottomAltitude, TopAltitude):
##        'For convenience. Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeCartographicWithAltitudesAndWindingOrder(self, CentralBody, Positions, BottomAltitude, TopAltitude, PositionsWindingOrder):
##        'For convenience. Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeSingleConstantAltitude(self, CentralBody, Positions, Altitude):
##        'Computes an extrusion of positions on the specified centralBody. One side of the extrusion has a constant altitude and the other has the original altitudes from positions...'
##        #return ppRetVal
##
##    def ComputeSingleConstantAltitudeWithWindingOrder(self, CentralBody, Positions, Altitude, PositionsWindingOrder):
##        'Computes an extrusion of positions on the specified centralBody. One side of the extrusion has a constant altitude and the other has the original altitudes from positions.'
##        #return ppRetVal
##
##    def ComputeSingleConstantAltitudeCartographic(self, CentralBody, Positions, Altitude):
##        'For convenience. Computes an extrusion of positions on the specified centralBody using cartographic positions. One side of the extrusion has a constant altitude and the other has the original altitudes from positions...'
##        #return ppRetVal
##
##    def ComputeSingleConstantAltitudeCartographicWithWindingOrder(self, CentralBody, Positions, Altitude, PositionsWindingOrder):
##        'For convenience. Computes an extrusion of positions on the specified centralBody using cartographic positions. One side of the extrusion has a constant altitude and the other has the original altitudes from positions...'
##        #return ppRetVal
##

class _IAgStkGraphicsGaussianBlurFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGaussianBlurFilterFactory'
    _iid_ = GUID('{84585C55-4425-4787-88D8-0AE73B282DEC}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsGaussianBlurFilterFactory._methods_ = [
    COMMETHOD([dispid(23101), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGaussianBlurFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGaussianBlurFilterFactory implementation
##class _IAgStkGraphicsGaussianBlurFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##

IAgStkGraphicsKmlDocumentCollection._methods_ = [
    COMMETHOD(['propget', helpstring('A total number of elements in the collection.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get an element at the specified position in the collection.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlDocument)), 'ppRetVal' )),
    COMMETHOD(['propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsKmlDocumentCollection implementation
##class IAgStkGraphicsKmlDocumentCollection_Impl(object):
##    @property
##    def Count(self):
##        'A total number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Get an element at the specified position in the collection.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return ppRetVal
##

class IAgStkGraphicsGreatArcInterpolatorFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The great arc interpolator computes interpolated positions along a great arc. A great arc is the shortest path between two positions on an ellipsoid.'
    _iid_ = GUID('{35AFB348-117F-4DB0-87EC-643B4B0364DD}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsGreatArcInterpolator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The great arc interpolator computes interpolated positions along a great arc. A great arc is the shortest path between two positions on an ellipsoid.'
    _iid_ = GUID('{8DE070C1-DE8F-48EE-96EA-5DC046706D28}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsGreatArcInterpolatorFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a default great arc interpolator. This is equivalent to constructing a great arc interpolator with a central body equal to an instance of earth central body and a granularity of 1 degree.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGreatArcInterpolator)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a great arc interpolator with the specified centralBody and a granularity of 1 degree.')], HRESULT, 'InitializeWithCentralBody',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGreatArcInterpolator)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a great arc interpolator with the specified centralBody and granularity.')], HRESULT, 'InitializeWithCentralBodyAndGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGreatArcInterpolator)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsGreatArcInterpolatorFactory implementation
##class IAgStkGraphicsGreatArcInterpolatorFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default great arc interpolator. This is equivalent to constructing a great arc interpolator with a central body equal to an instance of earth central body and a granularity of 1 degree.'
##        #return ppRetVal
##
##    def InitializeWithCentralBody(self, CentralBody):
##        'Initializes a great arc interpolator with the specified centralBody and a granularity of 1 degree.'
##        #return ppRetVal
##
##    def InitializeWithCentralBodyAndGranularity(self, CentralBody, Granularity):
##        'Initializes a great arc interpolator with the specified centralBody and granularity.'
##        #return ppRetVal
##

class AgStkGraphicsPixelSizeDisplayCondition(CoClass):
    "Defines an inclusive interval, in pixels, that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the number of pixels the object's bounding sphere (or in ..."
    _reg_clsid_ = GUID('{9EA371DA-D6FC-406B-AD1C-971B7EA4959A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsPixelSizeDisplayCondition(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPixelSizeDisplayCondition'
    _iid_ = GUID('{3A8D7AC6-A828-41C7-8D1A-6E4719EA156D}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsPixelSizeDisplayCondition._com_interfaces_ = [_IAgStkGraphicsPixelSizeDisplayCondition, IAgStkGraphicsPixelSizeDisplayCondition, IAgStkGraphicsDisplayCondition]

IAgStkGraphicsSurfaceShapesResult._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the positions of the computed shape. Three array elements (in the order x, y, z) constitute one position.')], HRESULT, 'Positions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the winding order of positions.')], HRESULT, 'PositionsWindingOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsWindingOrder), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the polyline type of positions.')], HRESULT, 'PolylineType',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPolylineType), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSurfaceShapesResult implementation
##class IAgStkGraphicsSurfaceShapesResult_Impl(object):
##    @property
##    def Positions(self):
##        'Gets the positions of the computed shape. Three array elements (in the order x, y, z) constitute one position.'
##        #return ppRetVal
##
##    @property
##    def PositionsWindingOrder(self):
##        'Gets the winding order of positions.'
##        #return pRetVal
##
##    @property
##    def PolylineType(self):
##        'Gets the polyline type of positions.'
##        #return pRetVal
##

class _IAgStkGraphicsTextureScreenOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTextureScreenOverlayFactory'
    _iid_ = GUID('{0608CF24-AD8B-4D10-A6E3-41D42FC55462}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsTextureScreenOverlay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A rectangular overlay that can be assigned a texture.'
    _iid_ = GUID('{4D09EB77-14CF-40A7-B7BB-130F4DDD60C6}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsTextureScreenOverlayFactory._methods_ = [
    COMMETHOD([dispid(12201), helpstring('Initializes the overlay with a position of (0, 0), a width of 100 pixels, and a height of 50 pixels.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureScreenOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(12202), helpstring('Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels.')], HRESULT, 'InitializeWithXYWidthHeight',
              ( ['in'], c_double, 'XPixels' ),
              ( ['in'], c_double, 'YPixels' ),
              ( ['in'], c_double, 'WidthPixels' ),
              ( ['in'], c_double, 'HeightPixels' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureScreenOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(12203), helpstring('Initializes the overlay with the specified position and size.')], HRESULT, 'InitializeWithPositionSize',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Size' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureScreenOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(12204), helpstring('Initializes the overlay with a specified background texture. The size of the overlay will be the same as the size of the texture.')], HRESULT, 'InitializeWithXYTexture',
              ( ['in'], c_double, 'XPixels' ),
              ( ['in'], c_double, 'YPixels' ),
              ( ['in'], POINTER(IAgStkGraphicsRendererTexture2D), 'Texture' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureScreenOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(12205), helpstring('Initializes the overlay with a specified background texture. The size of the overlay will be the same as the size of the texture.')], HRESULT, 'InitializeWithPositionTexture',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], POINTER(IAgStkGraphicsRendererTexture2D), 'Texture' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureScreenOverlay)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTextureScreenOverlayFactory implementation
##class _IAgStkGraphicsTextureScreenOverlayFactory_Impl(object):
##    def Initialize(self):
##        'Initializes the overlay with a position of (0, 0), a width of 100 pixels, and a height of 50 pixels.'
##        #return ppRetVal
##
##    def InitializeWithXYWidthHeight(self, XPixels, YPixels, WidthPixels, HeightPixels):
##        'Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels.'
##        #return ppRetVal
##
##    def InitializeWithPositionSize(self, Position, Size):
##        'Initializes the overlay with the specified position and size.'
##        #return ppRetVal
##
##    def InitializeWithXYTexture(self, XPixels, YPixels, Texture):
##        'Initializes the overlay with a specified background texture. The size of the overlay will be the same as the size of the texture.'
##        #return ppRetVal
##
##    def InitializeWithPositionTexture(self, Position, Texture):
##        'Initializes the overlay with a specified background texture. The size of the overlay will be the same as the size of the texture.'
##        #return ppRetVal
##

class AgStkGraphicsTextBatchPrimitiveOptionalParameters(CoClass):
    'Optional per-string and per-batch parameters for text batch primitive...'
    _reg_clsid_ = GUID('{A51F7623-1B69-4C19-88DB-F7E0A8B7E620}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsTextBatchPrimitiveOptionalParameters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTextBatchPrimitiveOptionalParameters'
    _iid_ = GUID('{6842F963-0A04-4776-9D5E-88422F78244A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsTextBatchPrimitiveOptionalParameters._com_interfaces_ = [_IAgStkGraphicsTextBatchPrimitiveOptionalParameters, IAgStkGraphicsTextBatchPrimitiveOptionalParameters]

class AgStkGraphicsPointBatchPrimitive(CoClass):
    ' Renders one or more points in the 3D scene. Each point in the batch has a unique position and an optional color. All points in the batch share the same pixel size. For best performance, avoid creating lots of batches with only a few points each...'
    _reg_clsid_ = GUID('{7BD1A513-C70C-49D8-8E63-A33828592A29}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsPointBatchPrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPointBatchPrimitive'
    _iid_ = GUID('{085DCB71-3E40-49D4-BA42-629B1FB1835B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsPointBatchPrimitive._com_interfaces_ = [_IAgStkGraphicsPointBatchPrimitive, IAgStkGraphicsPointBatchPrimitive, IAgStkGraphicsPrimitive]

class AgStkGraphicsTextOverlay(CoClass):
    'A rectangular overlay that contains text.'
    _reg_clsid_ = GUID('{A9CBC192-54C0-4865-BEE7-B6F88EE00C8E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTextOverlay._com_interfaces_ = [_IAgStkGraphicsTextOverlay, IAgStkGraphicsTextOverlay, IAgStkGraphicsScreenOverlay, IAgStkGraphicsOverlay, IAgStkGraphicsScreenOverlayContainer]

class IAgStkGraphicsDistanceToPositionDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Defines an inclusive distance interval, in meters, that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the distance, in meters, from the camera to a po..."
    _iid_ = GUID('{913DD9F7-A91B-4346-B233-180126A8D1BD}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsDistanceToPositionDisplayConditionFactory._methods_ = [
    COMMETHOD([helpstring("Initializes a default distance to position display condition. With this constructor, an object is always <topic name='Glossary' anchor='Render'>rendered</topic> regardless of the camera's distance to the position.")], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToPositionDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]...')], HRESULT, 'InitializeWithDistances',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], c_double, 'MinimumDistance' ),
              ( ['in'], c_double, 'MaximumDistance' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToPositionDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]...')], HRESULT, 'InitializeWithReferenceFrameAndDistances',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ReferenceFrame' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], c_double, 'MinimumDistance' ),
              ( ['in'], c_double, 'MaximumDistance' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToPositionDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsDistanceToPositionDisplayConditionFactory implementation
##class IAgStkGraphicsDistanceToPositionDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        "Initializes a default distance to position display condition. With this constructor, an object is always <topic name='Glossary' anchor='Render'>rendered</topic> regardless of the camera's distance to the position."
##        #return ppRetVal
##
##    def InitializeWithDistances(self, Position, MinimumDistance, MaximumDistance):
##        'Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]...'
##        #return ppRetVal
##
##    def InitializeWithReferenceFrameAndDistances(self, ReferenceFrame, Position, MinimumDistance, MaximumDistance):
##        'Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]...'
##        #return ppRetVal
##

IAgStkGraphicsPathPrimitive._methods_ = [
    COMMETHOD(['propget', helpstring('Returns the number of points.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the capacity that was set during object construction. The capacity is the amount of memory reserved for storing the points on the path. This will be automatically updated when adding/removing points.')], HRESULT, 'Capacity',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets how the primitive will be updated based on the current animation time.')], HRESULT, 'UpdatePolicy',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPrimitiveUpdatePolicy)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets how the primitive will be updated based on the current animation time.')], HRESULT, 'UpdatePolicy',
              ( ['in'], POINTER(IAgStkGraphicsPathPrimitiveUpdatePolicy), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets how the primitive interprets the positions.')], HRESULT, 'PolylineType',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPolylineType), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets how the primitive interprets the positions.')], HRESULT, 'PolylineType',
              ( ['in'], AgEStkGraphicsPolylineType, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the line width, in pixels.')], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the line width, in pixels.')], HRESULT, 'Width',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the minimum width, in pixels, supported by the video card.')], HRESULT, 'MinimumWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the maximum width, in pixels, supported by the video card.')], HRESULT, 'MaximumWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether an outline is rendered around the line.')], HRESULT, 'DisplayOutline',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether an outline is rendered around the line.')], HRESULT, 'DisplayOutline',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the width, in pixels, of the outline around the line.')], HRESULT, 'OutlineWidth',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the width, in pixels, of the outline around the line.')], HRESULT, 'OutlineWidth',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index.")], HRESULT, 'PerItemPickingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index.")], HRESULT, 'PerItemPickingEnabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the point at the given zero-based index.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns an enumerator that iterates through the collection.')], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([helpstring('Add a path point to the front of the line.')], HRESULT, 'AddFront',
              ( ['in'], POINTER(IAgStkGraphicsPathPoint), 'PathPoint' )),
    COMMETHOD([helpstring('Add the range of path points to the front of the line.')], HRESULT, 'AddRangeToFront',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' )),
    COMMETHOD([helpstring('Add a path point to the back of the line.')], HRESULT, 'AddBack',
              ( ['in'], POINTER(IAgStkGraphicsPathPoint), 'PathPoint' )),
    COMMETHOD([helpstring('Add the range of path points to the back of the line.')], HRESULT, 'AddRangeToBack',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' )),
    COMMETHOD([helpstring('Remove a path point to the front of the line.')], HRESULT, 'RemoveFront'),
    COMMETHOD([helpstring('Remove all points before index.')], HRESULT, 'RemoveAllBefore',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring('Remove a path point to the back of the line.')], HRESULT, 'RemoveBack'),
    COMMETHOD([helpstring('Remove all points after index.')], HRESULT, 'RemoveAllAfter',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring('Access the path point at the front of the line.')], HRESULT, 'Front',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
    COMMETHOD([helpstring('Access the path point at the back of the line.')], HRESULT, 'Back',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
    COMMETHOD([helpstring('Removes all of the points.')], HRESULT, 'Clear'),
    COMMETHOD(['propget', helpstring('Gets or sets whether the polyline will be clipped by the central body.')], HRESULT, 'CentralBodyClipped',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the polyline will be clipped by the central body.')], HRESULT, 'CentralBodyClipped',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsPathPrimitive implementation
##class IAgStkGraphicsPathPrimitive_Impl(object):
##    @property
##    def Count(self):
##        'Returns the number of points.'
##        #return pRetVal
##
##    @property
##    def Capacity(self):
##        'Returns the capacity that was set during object construction. The capacity is the amount of memory reserved for storing the points on the path. This will be automatically updated when adding/removing points.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets how the primitive will be updated based on the current animation time.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets how the primitive will be updated based on the current animation time.'
##    UpdatePolicy = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets how the primitive interprets the positions.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets how the primitive interprets the positions.'
##    PolylineType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the line width, in pixels.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the line width, in pixels.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumWidthSupported(self):
##        'Gets the minimum width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    @property
##    def MaximumWidthSupported(self):
##        'Gets the maximum width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets whether an outline is rendered around the line.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether an outline is rendered around the line.'
##    DisplayOutline = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the width, in pixels, of the outline around the line.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the width, in pixels, of the outline around the line.'
##    OutlineWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."
##    PerItemPickingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Item(self, Index):
##        'Returns the point at the given zero-based index.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns an enumerator that iterates through the collection.'
##        #return ppRetVal
##
##    def AddFront(self, PathPoint):
##        'Add a path point to the front of the line.'
##        #return 
##
##    def AddRangeToFront(self, Positions):
##        'Add the range of path points to the front of the line.'
##        #return 
##
##    def AddBack(self, PathPoint):
##        'Add a path point to the back of the line.'
##        #return 
##
##    def AddRangeToBack(self, Positions):
##        'Add the range of path points to the back of the line.'
##        #return 
##
##    def RemoveFront(self):
##        'Remove a path point to the front of the line.'
##        #return 
##
##    def RemoveAllBefore(self, Index):
##        'Remove all points before index.'
##        #return 
##
##    def RemoveBack(self):
##        'Remove a path point to the back of the line.'
##        #return 
##
##    def RemoveAllAfter(self, Index):
##        'Remove all points after index.'
##        #return 
##
##    def Front(self):
##        'Access the path point at the front of the line.'
##        #return ppRetVal
##
##    def Back(self):
##        'Access the path point at the back of the line.'
##        #return ppRetVal
##
##    def Clear(self):
##        'Removes all of the points.'
##        #return 
##
##    def _get(self):
##        'Gets or sets whether the polyline will be clipped by the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the polyline will be clipped by the central body.'
##    CentralBodyClipped = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsGaussianBlurFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGaussianBlurFilter'
    _iid_ = GUID('{DB2D7FB6-1EAE-41DC-A07D-D52BB04C0BE3}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsGaussianBlurFilter._methods_ = [
    COMMETHOD([dispid(20501), helpstring('Gets or sets the divisor for the result of the convolution kernel operation.'), 'propget'], HRESULT, 'Divisor',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(20501), helpstring('Gets or sets the divisor for the result of the convolution kernel operation.'), 'propput'], HRESULT, 'Divisor',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(20502), helpstring('Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'), 'propget'], HRESULT, 'Offset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(20502), helpstring('Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'), 'propput'], HRESULT, 'Offset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(20503), helpstring('Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'), 'propget'], HRESULT, 'Kernel',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(20503), helpstring('Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'), 'propput'], HRESULT, 'Kernel',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGaussianBlurFilter implementation
##class _IAgStkGraphicsGaussianBlurFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the divisor for the result of the convolution kernel operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the divisor for the result of the convolution kernel operation.'
##    Divisor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'
##    Offset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'
##    Kernel = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsVectorPrimitive._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or Sets whether the primitive is lit.')], HRESULT, 'Lighting',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets whether the primitive is lit.')], HRESULT, 'Lighting',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or Sets the a user-defined label.')], HRESULT, 'Label',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets the a user-defined label.')], HRESULT, 'Label',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or Sets whether the vector's label is displayed.")], HRESULT, 'DisplayLabel',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or Sets whether the vector's label is displayed.")], HRESULT, 'DisplayLabel',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or Sets whether the vector's magnitude is displayed. Formatter controls unit conversions.")], HRESULT, 'DisplayMagnitude',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or Sets whether the vector's magnitude is displayed. Formatter controls unit conversions.")], HRESULT, 'DisplayMagnitude',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or Sets whether the vector's RA-Dec is displayed. Formatter controls unit conversions.")], HRESULT, 'DisplayRADec',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or Sets whether the vector's RA-Dec is displayed. Formatter controls unit conversions.")], HRESULT, 'DisplayRADec',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or Sets whether the persistence trace (points) is displayed.')], HRESULT, 'DisplayTrace',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets whether the persistence trace (points) is displayed.')], HRESULT, 'DisplayTrace',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or Sets whether the persistence sweep (triangles) is displayed.')], HRESULT, 'DisplaySweep',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets whether the persistence sweep (triangles) is displayed.')], HRESULT, 'DisplaySweep',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or Sets whether persistence lines are displayed.')], HRESULT, 'DisplayLines',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets whether persistence lines are displayed.')], HRESULT, 'DisplayLines',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or Sets persistence point/line width.')], HRESULT, 'PersistenceWidth',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets persistence point/line width.')], HRESULT, 'PersistenceWidth',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or Sets whether the persistence path should fade over time.')], HRESULT, 'FadePersistence',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets whether the persistence path should fade over time.')], HRESULT, 'FadePersistence',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or Sets the maximum length (in seconds) of the persistence path.')], HRESULT, 'PersistenceDuration',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or Sets the maximum length (in seconds) of the persistence path.')], HRESULT, 'PersistenceDuration',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or Sets the vector's source-to-arrow-tip length.")], HRESULT, 'Length',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or Sets the vector's source-to-arrow-tip length.")], HRESULT, 'Length',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or Sets the vector's width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness.")], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or Sets the vector's width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness.")], HRESULT, 'Width',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or Sets whether vector's 'true scale' length (based on how the primitive was created) should be used.")], HRESULT, 'TrueScale',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or Sets whether vector's 'true scale' length (based on how the primitive was created) should be used.")], HRESULT, 'TrueScale',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsVectorPrimitive implementation
##class IAgStkGraphicsVectorPrimitive_Impl(object):
##    def _get(self):
##        'Gets or Sets whether the primitive is lit.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether the primitive is lit.'
##    Lighting = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets the a user-defined label.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets the a user-defined label.'
##    Label = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or Sets whether the vector's label is displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or Sets whether the vector's label is displayed."
##    DisplayLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or Sets whether the vector's magnitude is displayed. Formatter controls unit conversions."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or Sets whether the vector's magnitude is displayed. Formatter controls unit conversions."
##    DisplayMagnitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or Sets whether the vector's RA-Dec is displayed. Formatter controls unit conversions."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or Sets whether the vector's RA-Dec is displayed. Formatter controls unit conversions."
##    DisplayRADec = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether the persistence trace (points) is displayed.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether the persistence trace (points) is displayed.'
##    DisplayTrace = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether the persistence sweep (triangles) is displayed.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether the persistence sweep (triangles) is displayed.'
##    DisplaySweep = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether persistence lines are displayed.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether persistence lines are displayed.'
##    DisplayLines = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets persistence point/line width.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets persistence point/line width.'
##    PersistenceWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets whether the persistence path should fade over time.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets whether the persistence path should fade over time.'
##    FadePersistence = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or Sets the maximum length (in seconds) of the persistence path.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or Sets the maximum length (in seconds) of the persistence path.'
##    PersistenceDuration = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or Sets the vector's source-to-arrow-tip length."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or Sets the vector's source-to-arrow-tip length."
##    Length = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or Sets the vector's width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or Sets the vector's width in pixels. As the camera distances changes from this primitive, the geometry will autoscale to maintain this thickness."
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or Sets whether vector's 'true scale' length (based on how the primitive was created) should be used."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or Sets whether vector's 'true scale' length (based on how the primitive was created) should be used."
##    TrueScale = property(_get, _set, doc = _set.__doc__)
##

_IAgStkGraphicsGeospatialImageGlobeOverlay._methods_ = [
    COMMETHOD([dispid(16701), helpstring('Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16701), helpstring('Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16703), helpstring("Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."), 'propget'], HRESULT, 'UseAltitudeBasedTranslucency',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16703), helpstring("Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."), 'propput'], HRESULT, 'UseAltitudeBasedTranslucency',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(16704), helpstring("Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyLowerTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16704), helpstring("Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyLowerTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16705), helpstring("Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyUpperTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16705), helpstring("Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyUpperTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16706), helpstring("Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyLowerAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16706), helpstring("Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyLowerAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16707), helpstring("Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyUpperAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16707), helpstring("Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyUpperAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16702), helpstring('Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'), 'propget'], HRESULT, 'MoreThanOneImageGlobeOverlaySupported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16801), helpstring("Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16802), helpstring('Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'), 'propget'], HRESULT, 'Extent',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16803), helpstring('Gets the globe overlay role of the globe overlay.'), 'propget'], HRESULT, 'Role',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsGlobeOverlayRole), 'pRetVal' )),
    COMMETHOD([dispid(16804), helpstring('Gets the absolute URI specifying the location of the globe overlay.'), 'propget'], HRESULT, 'UriAsString',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16805), helpstring('Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(9101), helpstring('Gets or sets whether transparent color should be used.'), 'propget'], HRESULT, 'UseTransparentColor',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9101), helpstring('Gets or sets whether transparent color should be used.'), 'propput'], HRESULT, 'UseTransparentColor',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(9102), helpstring('Gets or sets the color that will become transparent.'), 'propget'], HRESULT, 'TransparentColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(9102), helpstring('Gets or sets the color that will become transparent.'), 'propput'], HRESULT, 'TransparentColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGeospatialImageGlobeOverlay implementation
##class _IAgStkGraphicsGeospatialImageGlobeOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."
##    UseAltitudeBasedTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."
##    AltitudeBasedTranslucencyLowerTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."
##    AltitudeBasedTranslucencyUpperTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##    AltitudeBasedTranslucencyLowerAltitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##    AltitudeBasedTranslucencyUpperAltitude = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MoreThanOneImageGlobeOverlaySupported(self):
##        'Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'
##        #return pRetVal
##
##    @property
##    def CentralBody(self):
##        "Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."
##        #return pRetVal
##
##    @property
##    def Extent(self):
##        'Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'
##        #return ppRetVal
##
##    @property
##    def Role(self):
##        'Gets the globe overlay role of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def UriAsString(self):
##        'Gets the absolute URI specifying the location of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether transparent color should be used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether transparent color should be used.'
##    UseTransparentColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the color that will become transparent.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the color that will become transparent.'
##    TransparentColor = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsPolylinePrimitive(CoClass):
    'Renders a polyline in the 3D scene. Each line segment may have a different color. A polyline can be constructed with a position interpolator to render great arcs or rhumb lines.'
    _reg_clsid_ = GUID('{B8345B38-5822-4331-92CE-DB8D0C56D1EA}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsPolylinePrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPolylinePrimitive'
    _iid_ = GUID('{FFC71D68-97F4-49E2-B0F8-87206CBA3913}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
class IAgStkGraphicsPolylinePrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Renders a polyline in the 3D scene. Each line segment may have a different color. A polyline can be constructed with a position interpolator to render great arcs or rhumb lines.'
    _iid_ = GUID('{0122DC2B-4232-443D-B8DA-09B42967B841}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsPolylinePrimitive._com_interfaces_ = [_IAgStkGraphicsPolylinePrimitive, IAgStkGraphicsPolylinePrimitive, IAgStkGraphicsPrimitive]

class AgStkGraphicsTextureMatrix(CoClass):
    'A 4 by 4 matrix applied to a texture coordinate.'
    _reg_clsid_ = GUID('{5B6DF831-226E-4ADD-8BD1-5AF05EDECCA2}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTextureMatrix._com_interfaces_ = [_IAgStkGraphicsTextureMatrix, IAgStkGraphicsTextureMatrix]

class _IAgStkGraphicsPolylinePrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsPolylinePrimitiveFactory'
    _iid_ = GUID('{8B93B6DC-026D-43B3-8604-65E89EB49D51}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsPolylinePrimitiveFactory._methods_ = [
    COMMETHOD([dispid(8201), helpstring('Initializes a default polyline primitive. This is equivalent to constructing a polyline with a set hint of Frequent and a polyline type of LineStrip.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPolylinePrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(8202), helpstring('Initializes a polyline primitive with the specified interpolator and setHint.')], HRESULT, 'InitializeWithInterpolatorAndSetHint',
              ( ['in'], POINTER(IAgStkGraphicsPositionInterpolator), 'Interpolator' ),
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPolylinePrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(8203), helpstring('Initializes a new instance of a polyline primitive with the specified polylineType and setHint.')], HRESULT, 'InitializeWithTypeAndHint',
              ( ['in'], AgEStkGraphicsPolylineType, 'PolylineType' ),
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPolylinePrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(8204), helpstring('Initializes a polyline primitive with the specified interpolator. This is equivalent to constructing a polyline with the specified interpolator and a set hint of Frequent.')], HRESULT, 'InitializeWithInterpolator',
              ( ['in'], POINTER(IAgStkGraphicsPositionInterpolator), 'Interpolator' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPolylinePrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(8205), helpstring('Initializes a new instance of a polyline primitive with the specified set hint. This is equivalent to constructing a polyline with a polyline type of LineStrip and the specified set hint.')], HRESULT, 'InitializeWithHint',
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPolylinePrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(8206), helpstring('Initializes a polyline primitive with the specified polylineType. This is equivalent to constructing a polyline with the specified polylineType and a set hint of Frequent.')], HRESULT, 'InitializeWithType',
              ( ['in'], AgEStkGraphicsPolylineType, 'PolylineType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPolylinePrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(8207), helpstring('Gets the minimum width, in pixels, supported by the video card.'), 'propget'], HRESULT, 'MinimumWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(8208), helpstring('Gets the maximum width, in pixels, supported by the video card.'), 'propget'], HRESULT, 'MaximumWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsPolylinePrimitiveFactory implementation
##class _IAgStkGraphicsPolylinePrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default polyline primitive. This is equivalent to constructing a polyline with a set hint of Frequent and a polyline type of LineStrip.'
##        #return ppRetVal
##
##    def InitializeWithInterpolatorAndSetHint(self, Interpolator, SetHint):
##        'Initializes a polyline primitive with the specified interpolator and setHint.'
##        #return ppRetVal
##
##    def InitializeWithTypeAndHint(self, PolylineType, SetHint):
##        'Initializes a new instance of a polyline primitive with the specified polylineType and setHint.'
##        #return ppRetVal
##
##    def InitializeWithInterpolator(self, Interpolator):
##        'Initializes a polyline primitive with the specified interpolator. This is equivalent to constructing a polyline with the specified interpolator and a set hint of Frequent.'
##        #return ppRetVal
##
##    def InitializeWithHint(self, SetHint):
##        'Initializes a new instance of a polyline primitive with the specified set hint. This is equivalent to constructing a polyline with a polyline type of LineStrip and the specified set hint.'
##        #return ppRetVal
##
##    def InitializeWithType(self, PolylineType):
##        'Initializes a polyline primitive with the specified polylineType. This is equivalent to constructing a polyline with the specified polylineType and a set hint of Frequent.'
##        #return ppRetVal
##
##    @property
##    def MinimumWidthSupported(self):
##        'Gets the minimum width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    @property
##    def MaximumWidthSupported(self):
##        'Gets the maximum width, in pixels, supported by the video card.'
##        #return pRetVal
##

class _IAgStkGraphicsSolidPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSolidPrimitiveFactory'
    _iid_ = GUID('{0E76F5DF-EA69-4755-8FF7-8F260C3AAE96}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsSolidPrimitiveFactory._methods_ = [
    COMMETHOD([dispid(8401), helpstring('Initializes a default solid primitive. This is equivalent to constructing a solid primitive with a set hint of Frequent.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSolidPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(8402), helpstring('Initializes a solid primitive with the specified setHint.')], HRESULT, 'InitializeWithHint',
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSolidPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(8403), helpstring('Gets the minimum silhouette width, in pixels, supported by the video card.'), 'propget'], HRESULT, 'MinimumSilhouetteWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(8404), helpstring('Gets the maximum silhouette width, in pixels, supported by the video card.'), 'propget'], HRESULT, 'MaximumSilhouetteWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSolidPrimitiveFactory implementation
##class _IAgStkGraphicsSolidPrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default solid primitive. This is equivalent to constructing a solid primitive with a set hint of Frequent.'
##        #return ppRetVal
##
##    def InitializeWithHint(self, SetHint):
##        'Initializes a solid primitive with the specified setHint.'
##        #return ppRetVal
##
##    @property
##    def MinimumSilhouetteWidthSupported(self):
##        'Gets the minimum silhouette width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    @property
##    def MaximumSilhouetteWidthSupported(self):
##        'Gets the maximum silhouette width, in pixels, supported by the video card.'
##        #return pRetVal
##

class AgStkGraphicsAltitudeDisplayCondition(CoClass):
    "Defines an inclusive altitude interval, in meters, that determines when an object is <topic name='Glossary' anchor='Render'>rendered</topic> based on the camera's altitude relative to a central body."
    _reg_clsid_ = GUID('{8711C6FB-5FF6-4D07-8FE8-F7BF63EEFBA9}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsAltitudeDisplayCondition._com_interfaces_ = [_IAgStkGraphicsAltitudeDisplayCondition, IAgStkGraphicsAltitudeDisplayCondition, IAgStkGraphicsDisplayCondition]

class AgStkGraphicsBandOrderFilter(CoClass):
    "Reorders or swizzles the bands of the source raster to match the band order of the raster format specified by the band order property. When maintain raster format is true, the source raster's format is maintained after swizzling."
    _reg_clsid_ = GUID('{A5564CF0-77D6-4153-83DE-417A83C4665B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsBandOrderFilter._com_interfaces_ = [_IAgStkGraphicsBandOrderFilter, IAgStkGraphicsBandOrderFilter, IAgStkGraphicsRasterFilter]

IAgStkGraphicsRenderingEventArgs._methods_ = [
    COMMETHOD(['propget', helpstring('The time of the rendering event.')], HRESULT, 'Time',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("The time of the rendering event (in STK's scenario epoch units).")], HRESULT, 'TimeInEpSecs',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsRenderingEventArgs implementation
##class IAgStkGraphicsRenderingEventArgs_Impl(object):
##    @property
##    def Time(self):
##        'The time of the rendering event.'
##        #return ppRetVal
##
##    @property
##    def TimeInEpSecs(self):
##        "The time of the rendering event (in STK's scenario epoch units)."
##        #return pRetVal
##

IAgStkGraphicsGreatArcInterpolator._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the central body used when interpolating with interpolate.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the central body used when interpolating with interpolate.')], HRESULT, 'CentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the granularity, in radians, used when interpolating with interpolate. Lower granularities are more precise but create more positions.')], HRESULT, 'Granularity',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the granularity, in radians, used when interpolating with interpolate. Lower granularities are more precise but create more positions.')], HRESULT, 'Granularity',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsGreatArcInterpolator implementation
##class IAgStkGraphicsGreatArcInterpolator_Impl(object):
##    def _get(self):
##        'Gets or sets the central body used when interpolating with interpolate.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the central body used when interpolating with interpolate.'
##    CentralBody = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the granularity, in radians, used when interpolating with interpolate. Lower granularities are more precise but create more positions.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the granularity, in radians, used when interpolating with interpolate. Lower granularities are more precise but create more positions.'
##    Granularity = property(_get, _set, doc = _set.__doc__)
##

class IAgStkGraphicsColorToLuminanceFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Extracts a luminance band derived from the color bands of the source raster.'
    _iid_ = GUID('{361263B5-D7EF-468A-9804-C1C9342FFEB8}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsColorToLuminanceFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsColorToLuminanceFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsColorToLuminanceFilterFactory implementation
##class IAgStkGraphicsColorToLuminanceFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##

IAgStkGraphicsAltitudeDisplayCondition._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the minimum altitude, in meters, of the inclusive altitude interval. Use Double.MinValue to ignore checking the minimum altitude.')], HRESULT, 'MinimumAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the minimum altitude, in meters, of the inclusive altitude interval. Use Double.MinValue to ignore checking the minimum altitude.')], HRESULT, 'MinimumAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the maximum altitude, in meters, of the inclusive altitude interval. Use Double.MaxValue to ignore checking the maximum altitude.')], HRESULT, 'MaximumAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the maximum altitude, in meters, of the inclusive altitude interval. Use Double.MaxValue to ignore checking the maximum altitude.')], HRESULT, 'MaximumAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the central body to which the altitude is relative.')], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the central body to which the altitude is relative.')], HRESULT, 'CentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsAltitudeDisplayCondition implementation
##class IAgStkGraphicsAltitudeDisplayCondition_Impl(object):
##    def _get(self):
##        'Gets or sets the minimum altitude, in meters, of the inclusive altitude interval. Use Double.MinValue to ignore checking the minimum altitude.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the minimum altitude, in meters, of the inclusive altitude interval. Use Double.MinValue to ignore checking the minimum altitude.'
##    MinimumAltitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the maximum altitude, in meters, of the inclusive altitude interval. Use Double.MaxValue to ignore checking the maximum altitude.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum altitude, in meters, of the inclusive altitude interval. Use Double.MaxValue to ignore checking the maximum altitude.'
##    MaximumAltitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the central body to which the altitude is relative.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the central body to which the altitude is relative.'
##    CentralBody = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsTextBatchPrimitiveOptionalParameters._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the per-batch origin, which is applied to each string in the text batch.')], HRESULT, 'Origin',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsOrigin), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the per-batch origin, which is applied to each string in the text batch.')], HRESULT, 'Origin',
              ( ['in'], AgEStkGraphicsOrigin, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the per-batch eye offset, which is applied to each string in the text batch. The array contains the components of the offset arranged in the order x, y, z.')], HRESULT, 'EyeOffset',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the per-batch eye offset, which is applied to each string in the text batch. The array contains the components of the offset arranged in the order x, y, z.')], HRESULT, 'EyeOffset',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the per-batch pixel offset, which is applied to each string in the text batch. The array contains one x pixel offset followed by one y pixel offset.')], HRESULT, 'PixelOffset',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the per-batch pixel offset, which is applied to each string in the text batch. The array contains one x pixel offset followed by one y pixel offset.')], HRESULT, 'PixelOffset',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the maximum length of each string in the text batch.')], HRESULT, 'MaximumStringLength',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the maximum length of each string in the text batch.')], HRESULT, 'MaximumStringLength',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([helpstring('Defines a collection of origins, one for each string in the batch.')], HRESULT, 'SetOrigins',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Origins' )),
    COMMETHOD([helpstring('Defines a collection of eye offsets, one for each string in the batch.')], HRESULT, 'SetEyeOffsets',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'EyeOffsets' )),
    COMMETHOD([helpstring('Defines a collection of pixel offsets, one for each string in the batch.')], HRESULT, 'SetPixelOffsets',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'PixelOffsets' )),
    COMMETHOD([helpstring('Defines a collection of colors, one for each string in the batch.')], HRESULT, 'SetColors',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' )),
    COMMETHOD(['propget', helpstring('Gets or sets a flag that informs the CTextBatchPrimitive to use rendering optimized for screen space text.')], HRESULT, 'ScreenSpaceRendering',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets a flag that informs the CTextBatchPrimitive to use rendering optimized for screen space text.')], HRESULT, 'ScreenSpaceRendering',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTextBatchPrimitiveOptionalParameters implementation
##class IAgStkGraphicsTextBatchPrimitiveOptionalParameters_Impl(object):
##    def _get(self):
##        'Gets or sets the per-batch origin, which is applied to each string in the text batch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the per-batch origin, which is applied to each string in the text batch.'
##    Origin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch eye offset, which is applied to each string in the text batch. The array contains the components of the offset arranged in the order x, y, z.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the per-batch eye offset, which is applied to each string in the text batch. The array contains the components of the offset arranged in the order x, y, z.'
##    EyeOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch pixel offset, which is applied to each string in the text batch. The array contains one x pixel offset followed by one y pixel offset.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the per-batch pixel offset, which is applied to each string in the text batch. The array contains one x pixel offset followed by one y pixel offset.'
##    PixelOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the maximum length of each string in the text batch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum length of each string in the text batch.'
##    MaximumStringLength = property(_get, _set, doc = _set.__doc__)
##
##    def SetOrigins(self, Origins):
##        'Defines a collection of origins, one for each string in the batch.'
##        #return 
##
##    def SetEyeOffsets(self, EyeOffsets):
##        'Defines a collection of eye offsets, one for each string in the batch.'
##        #return 
##
##    def SetPixelOffsets(self, PixelOffsets):
##        'Defines a collection of pixel offsets, one for each string in the batch.'
##        #return 
##
##    def SetColors(self, Colors):
##        'Defines a collection of colors, one for each string in the batch.'
##        #return 
##
##    def _get(self):
##        'Gets or sets a flag that informs the CTextBatchPrimitive to use rendering optimized for screen space text.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a flag that informs the CTextBatchPrimitive to use rendering optimized for screen space text.'
##    ScreenSpaceRendering = property(_get, _set, doc = _set.__doc__)
##

_IAgStkGraphicsScreenOverlayManager._methods_ = [
    COMMETHOD([dispid(1), helpstring('Gets the number of screen overlays in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9502), helpstring('Gets a value indicating whether the collection is read-only.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Gets the overlay at the specified index.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns an enumerator that iterates through the collection.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([dispid(9505), helpstring('Determines whether the collection contains a specific overlay.')], HRESULT, 'Contains',
              ( ['in'], POINTER(IAgStkGraphicsScreenOverlay), 'Item' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9506), helpstring('Removes the first occurrence of a specific overlay from the collection.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAgStkGraphicsScreenOverlay), 'Item' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9508), helpstring('Removes all overlays from the collection.')], HRESULT, 'Clear'),
    COMMETHOD([dispid(9509), helpstring('Adds an overlay to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAgStkGraphicsScreenOverlay), 'Item' )),
    COMMETHOD([dispid(10401), helpstring('Gets the overall bounds of the globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'), 'propget'], HRESULT, 'Bounds',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(10402), helpstring('Gets the collection of overlays that are contained within this manager.'), 'propget'], HRESULT, 'Overlays',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(10403), helpstring('Gets or sets the padding surrounding the overlays that are contained within this manager. The array contains the components of the padding arranged in the order left, top, right, bottom.'), 'propget'], HRESULT, 'Padding',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(10403), helpstring('Gets or sets the padding surrounding the overlays that are contained within this manager. The array contains the components of the padding arranged in the order left, top, right, bottom.'), 'propput'], HRESULT, 'Padding',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(10404), helpstring("Gets or sets if the collection of overlays that are contained within this manager should be <topic name='Glossary' anchor='Render'>rendered</topic>."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(10404), helpstring("Gets or sets if the collection of overlays that are contained within this manager should be <topic name='Glossary' anchor='Render'>rendered</topic>."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsScreenOverlayManager implementation
##class _IAgStkGraphicsScreenOverlayManager_Impl(object):
##    @property
##    def Count(self):
##        'Gets the number of screen overlays in the collection.'
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Gets a value indicating whether the collection is read-only.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Gets the overlay at the specified index.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns an enumerator that iterates through the collection.'
##        #return ppRetVal
##
##    def Contains(self, Item):
##        'Determines whether the collection contains a specific overlay.'
##        #return pRetVal
##
##    def Remove(self, Item):
##        'Removes the first occurrence of a specific overlay from the collection.'
##        #return pRetVal
##
##    def Clear(self):
##        'Removes all overlays from the collection.'
##        #return 
##
##    def Add(self, Item):
##        'Adds an overlay to the collection.'
##        #return 
##
##    @property
##    def Bounds(self):
##        'Gets the overall bounds of the globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'
##        #return ppRetVal
##
##    @property
##    def Overlays(self):
##        'Gets the collection of overlays that are contained within this manager.'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets the padding surrounding the overlays that are contained within this manager. The array contains the components of the padding arranged in the order left, top, right, bottom.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the padding surrounding the overlays that are contained within this manager. The array contains the components of the padding arranged in the order left, top, right, bottom.'
##    Padding = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the collection of overlays that are contained within this manager should be <topic name='Glossary' anchor='Render'>rendered</topic>."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the collection of overlays that are contained within this manager should be <topic name='Glossary' anchor='Render'>rendered</topic>."
##    Display = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsTextureScreenOverlay(CoClass):
    'A rectangular overlay that can be assigned a texture.'
    _reg_clsid_ = GUID('{777415AB-F518-42E2-A423-785EB7E0ABED}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTextureScreenOverlay._com_interfaces_ = [_IAgStkGraphicsTextureScreenOverlay, IAgStkGraphicsTextureScreenOverlay, IAgStkGraphicsScreenOverlay, IAgStkGraphicsOverlay, IAgStkGraphicsScreenOverlayContainer]

class AgStkGraphicsAxesPrimitive(CoClass):
    'Renders an axes in the 3D scene.'
    _reg_clsid_ = GUID('{98E5B19D-1126-43BC-A9DF-E793FD23D9B4}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsAxesPrimitive._com_interfaces_ = [_IAgStkGraphicsAxesPrimitive, IAgStkGraphicsAxesPrimitive, IAgStkGraphicsPrimitive]

class AgStkGraphicsBlurFilter(CoClass):
    'Applies a convolution filter to blur or smooth the source raster. Can be used to reduce noise in the raster.'
    _reg_clsid_ = GUID('{19E2363C-0728-46B3-B0F8-2C39AADF0CFD}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsBlurFilter._com_interfaces_ = [_IAgStkGraphicsBlurFilter, IAgStkGraphicsBlurFilter, IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter]

class AgStkGraphicsTimeIntervalDisplayCondition(CoClass):
    "Defines an inclusive time interval that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the current animation time ."
    _reg_clsid_ = GUID('{0921BE69-B0E2-4C92-921E-207556502607}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTimeIntervalDisplayCondition._com_interfaces_ = [_IAgStkGraphicsTimeIntervalDisplayCondition, IAgStkGraphicsTimeIntervalDisplayCondition, IAgStkGraphicsDisplayCondition]


# values for enumeration 'AgEStkGraphicsRenderPass'
eStkGraphicsRenderPassOpaque = 1
eStkGraphicsRenderPassTranslucent = 2
eStkGraphicsRenderPassCentralBodyClipped = 4
eStkGraphicsRenderPassOrderedCompositeCentralBodyClipped = 8
eStkGraphicsRenderPassOrderedComposite = 16
eStkGraphicsRenderPassTerrain = 32
AgEStkGraphicsRenderPass = c_int # enum
IAgStkGraphicsConstantDisplayCondition._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the value the display condition evaluates to.')], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the value the display condition evaluates to.')], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsConstantDisplayCondition implementation
##class IAgStkGraphicsConstantDisplayCondition_Impl(object):
##    def _get(self):
##        'Gets or sets the value the display condition evaluates to.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value the display condition evaluates to.'
##    Display = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsCamera(CoClass):
    'Implemented by the scene camera. Contains operations to manipulate the camera position, view direction and orientation in the scene.'
    _reg_clsid_ = GUID('{FED870EC-B124-4047-95E6-E90C2495036A}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsCamera._com_interfaces_ = [_IAgStkGraphicsCamera, IAgStkGraphicsCamera]

class AgStkGraphicsBrightnessFilter(CoClass):
    "Adjusts the brightness of the source raster's color bands. The adjustment to brightness is a value between -1 and 1, corresponding to least bright to most bright."
    _reg_clsid_ = GUID('{CDF1F54F-28DF-466E-B2D9-60AB231F7AD7}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsBrightnessFilter._com_interfaces_ = [_IAgStkGraphicsBrightnessFilter, IAgStkGraphicsBrightnessFilter, IAgStkGraphicsRasterFilter]

class AgStkGraphicsTriangleMeshPrimitive(CoClass):
    'Renders a triangle mesh in the 3D scene. Examples of triangle meshes includes polygons on the globe (e.g. states or countries), terrain and imagery extents, ellipses, and extrusions.'
    _reg_clsid_ = GUID('{BAB96B8F-FC13-42C4-AFDB-112238304396}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTriangleMeshPrimitive._com_interfaces_ = [_IAgStkGraphicsTriangleMeshPrimitive, IAgStkGraphicsTriangleMeshPrimitive, IAgStkGraphicsPrimitive]

IAgStkGraphicsProjectedRasterOverlay._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the raster that is projected.')], HRESULT, 'Raster',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the raster that is projected.')], HRESULT, 'Raster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the projection that projects the raster.')], HRESULT, 'Projection',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjection)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the projection that projects the raster.')], HRESULT, 'Projection',
              ( ['in'], POINTER(IAgStkGraphicsProjection), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets whether to show shadows or not. When set to true, the raster will only be projected onto parts of the terrain visible from the projection's position. When false, the raster will project onto any terrain inside the projection's view frustum...")], HRESULT, 'ShowShadows',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets whether to show shadows or not. When set to true, the raster will only be projected onto parts of the terrain visible from the projection's position. When false, the raster will project onto any terrain inside the projection's view frustum...")], HRESULT, 'ShowShadows',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether to show the frustum of the projection.')], HRESULT, 'ShowFrustum',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether to show the frustum of the projection.')], HRESULT, 'ShowFrustum',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether to show the far plane of the projection. If this is set to true, you will see the projected raster even when it does not intersect terrain.')], HRESULT, 'ShowFarPlane',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether to show the far plane of the projection. If this is set to true, you will see the projected raster even when it does not intersect terrain.')], HRESULT, 'ShowFarPlane',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the color of the projected raster.')], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the color of the projected raster.')], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the color of the projection's frustum.")], HRESULT, 'FrustumColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the color of the projection's frustum.")], HRESULT, 'FrustumColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the color of the projection's far plane.")], HRESULT, 'FarPlaneColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the color of the projection's far plane.")], HRESULT, 'FarPlaneColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the color of the projection's shadow.")], HRESULT, 'ShadowColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the color of the projection's shadow.")], HRESULT, 'ShadowColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the color of the projection's border.")], HRESULT, 'BorderColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the color of the projection's border.")], HRESULT, 'BorderColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the width of the projection's border.")], HRESULT, 'BorderWidth',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the width of the projection's border.")], HRESULT, 'BorderWidth',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the translucency of the projection's frustum.")], HRESULT, 'FrustumTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the translucency of the projection's frustum.")], HRESULT, 'FrustumTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the translucency of the projection's far plane.")], HRESULT, 'FarPlaneTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the translucency of the projection's far plane.")], HRESULT, 'FarPlaneTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the translucency of the projection's shadow.")], HRESULT, 'ShadowTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the translucency of the projection's shadow.")], HRESULT, 'ShadowTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the translucency of the projection's border.")], HRESULT, 'BorderTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the translucency of the projection's border.")], HRESULT, 'BorderTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether transparent color should be used.')], HRESULT, 'UseTransparentColor',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether transparent color should be used.')], HRESULT, 'UseTransparentColor',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the color that will become transparent.')], HRESULT, 'TransparentColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the color that will become transparent.')], HRESULT, 'TransparentColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets the direction vectors in the central body's fixed reference frame that define the projection's frustum...")], HRESULT, 'Directions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets whether or not the video card supports the projected raster overlay.')], HRESULT, 'Supported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsProjectedRasterOverlay implementation
##class IAgStkGraphicsProjectedRasterOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the raster that is projected.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the raster that is projected.'
##    Raster = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the projection that projects the raster.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the projection that projects the raster.'
##    Projection = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether to show shadows or not. When set to true, the raster will only be projected onto parts of the terrain visible from the projection's position. When false, the raster will project onto any terrain inside the projection's view frustum..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether to show shadows or not. When set to true, the raster will only be projected onto parts of the terrain visible from the projection's position. When false, the raster will project onto any terrain inside the projection's view frustum..."
##    ShowShadows = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether to show the frustum of the projection.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether to show the frustum of the projection.'
##    ShowFrustum = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether to show the far plane of the projection. If this is set to true, you will see the projected raster even when it does not intersect terrain.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether to show the far plane of the projection. If this is set to true, you will see the projected raster even when it does not intersect terrain.'
##    ShowFarPlane = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the color of the projected raster.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the color of the projected raster.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the color of the projection's frustum."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the color of the projection's frustum."
##    FrustumColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the color of the projection's far plane."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the color of the projection's far plane."
##    FarPlaneColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the color of the projection's shadow."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the color of the projection's shadow."
##    ShadowColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the color of the projection's border."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the color of the projection's border."
##    BorderColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the width of the projection's border."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the width of the projection's border."
##    BorderWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the translucency of the projection's frustum."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the translucency of the projection's frustum."
##    FrustumTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the translucency of the projection's far plane."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the translucency of the projection's far plane."
##    FarPlaneTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the translucency of the projection's shadow."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the translucency of the projection's shadow."
##    ShadowTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the translucency of the projection's border."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the translucency of the projection's border."
##    BorderTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether transparent color should be used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether transparent color should be used.'
##    UseTransparentColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the color that will become transparent.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the color that will become transparent.'
##    TransparentColor = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Directions(self):
##        "Gets the direction vectors in the central body's fixed reference frame that define the projection's frustum..."
##        #return ppRetVal
##
##    @property
##    def Supported(self):
##        'Gets whether or not the video card supports the projected raster overlay.'
##        #return pRetVal
##

class AgStkGraphicsCentralBodyGraphics(CoClass):
    'The graphical properties associated with a particular central body. Changing the central body graphics will affect how the associated central body is rendered in a scene. For instance, to show or hide the central body, use the show property...'
    _reg_clsid_ = GUID('{60B017E2-D40B-464E-B26F-B236DF91EC8B}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsCentralBodyGraphics._com_interfaces_ = [_IAgStkGraphicsCentralBodyGraphics, IAgStkGraphicsCentralBodyGraphics]

class AgStkGraphicsColorToLuminanceFilter(CoClass):
    'Extracts a luminance band derived from the color bands of the source raster.'
    _reg_clsid_ = GUID('{59837FDD-BDA7-47DD-8E1A-069EAC463075}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsColorToLuminanceFilter._com_interfaces_ = [_IAgStkGraphicsColorToLuminanceFilter, IAgStkGraphicsColorToLuminanceFilter, IAgStkGraphicsRasterFilter]

class AgStkGraphicsTriangleMeshPrimitiveOptionalParameters(CoClass):
    'Optional parameters for triangle mesh primitive...'
    _reg_clsid_ = GUID('{AA2F0C02-286F-463A-9FFC-F63432BF59A9}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTriangleMeshPrimitiveOptionalParameters._com_interfaces_ = [_IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters, IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters]

class _IAgStkGraphicsSurfaceMeshPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSurfaceMeshPrimitiveFactory'
    _iid_ = GUID('{0C754029-69A0-4233-BAB9-26E98E5A4CF7}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsSurfaceMeshPrimitiveFactory._methods_ = [
    COMMETHOD([dispid(8501), helpstring('Initializes a default surface mesh primitive. This is equivalent to constructing a surface mesh with a set hint of Frequent and a surface mesh rendering method of Automatic.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceMeshPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(8502), helpstring('Initializes a surface mesh primitive with the specified setHint. This is equivalent to constructing a surface mesh with the specified setHint and a surface mesh rendering method of Automatic.')], HRESULT, 'InitializeWithSetHint',
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceMeshPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(8503), helpstring('Initializes a surface mesh primitive with the specified setHint and renderingMethod.')], HRESULT, 'InitializeWithSetHintAndRenderingMethod',
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['in'], AgEStkGraphicsSurfaceMeshRenderingMethod, 'RenderingMethod' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceMeshPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(8504), helpstring('Determines whether or not the video card supports the surface mesh primitive with the given renderingMethod.')], HRESULT, 'Supported',
              ( ['in'], AgEStkGraphicsSurfaceMeshRenderingMethod, 'RenderingMethod' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(8505), helpstring('Determines whether or not the video card supports the surface mesh primitive. This is equivalent to calling Supported with automatic.')], HRESULT, 'SupportedWithDefaultRenderingMethod',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSurfaceMeshPrimitiveFactory implementation
##class _IAgStkGraphicsSurfaceMeshPrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default surface mesh primitive. This is equivalent to constructing a surface mesh with a set hint of Frequent and a surface mesh rendering method of Automatic.'
##        #return ppRetVal
##
##    def InitializeWithSetHint(self, SetHint):
##        'Initializes a surface mesh primitive with the specified setHint. This is equivalent to constructing a surface mesh with the specified setHint and a surface mesh rendering method of Automatic.'
##        #return ppRetVal
##
##    def InitializeWithSetHintAndRenderingMethod(self, SetHint, RenderingMethod):
##        'Initializes a surface mesh primitive with the specified setHint and renderingMethod.'
##        #return ppRetVal
##
##    def Supported(self, RenderingMethod):
##        'Determines whether or not the video card supports the surface mesh primitive with the given renderingMethod.'
##        #return pRetVal
##
##    def SupportedWithDefaultRenderingMethod(self):
##        'Determines whether or not the video card supports the surface mesh primitive. This is equivalent to calling Supported with automatic.'
##        #return pRetVal
##

_IAgStkGraphicsKmlDocumentLoadedEventArgs._methods_ = [
    COMMETHOD([dispid(27401), helpstring('Gets the KML document associated with the load event.'), 'propget'], HRESULT, 'Document',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlDocument)), 'ppRetVal' )),
    COMMETHOD([dispid(27402), helpstring('Returns an error message, if an error occurred while loading the KML; otherwise an empty string.'), 'propget'], HRESULT, 'Exception',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsKmlDocumentLoadedEventArgs implementation
##class _IAgStkGraphicsKmlDocumentLoadedEventArgs_Impl(object):
##    @property
##    def Document(self):
##        'Gets the KML document associated with the load event.'
##        #return ppRetVal
##
##    @property
##    def Exception(self):
##        'Returns an error message, if an error occurred while loading the KML; otherwise an empty string.'
##        #return pRetVal
##

IAgStkGraphicsColorToLuminanceFilter._methods_ = [
]
################################################################
## code template for IAgStkGraphicsColorToLuminanceFilter implementation
##class IAgStkGraphicsColorToLuminanceFilter_Impl(object):

_IAgStkGraphicsBatchPrimitiveIndex._methods_ = [
    COMMETHOD([dispid(19501), helpstring('The index of the item contained by the Primitive.'), 'propget'], HRESULT, 'Index',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19502), helpstring('The Primitive that contains the item at the Index specified.'), 'propget'], HRESULT, 'Primitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPrimitive)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsBatchPrimitiveIndex implementation
##class _IAgStkGraphicsBatchPrimitiveIndex_Impl(object):
##    @property
##    def Index(self):
##        'The index of the item contained by the Primitive.'
##        #return pRetVal
##
##    @property
##    def Primitive(self):
##        'The Primitive that contains the item at the Index specified.'
##        #return ppRetVal
##

_IAgStkGraphicsAGICustomTerrainOverlay._methods_ = [
    COMMETHOD([dispid(16901), helpstring('Gets or sets the value from which to offset the terrain height.'), 'propget'], HRESULT, 'AltitudeOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16901), helpstring('Gets or sets the value from which to offset the terrain height.'), 'propput'], HRESULT, 'AltitudeOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16902), helpstring('Gets or sets the value from which to scale the terrain height.'), 'propget'], HRESULT, 'AltitudeScale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16902), helpstring('Gets or sets the value from which to scale the terrain height.'), 'propput'], HRESULT, 'AltitudeScale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16903), helpstring('Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects.'), 'propget'], HRESULT, 'Supported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16801), helpstring("Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16802), helpstring('Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'), 'propget'], HRESULT, 'Extent',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16803), helpstring('Gets the globe overlay role of the globe overlay.'), 'propget'], HRESULT, 'Role',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsGlobeOverlayRole), 'pRetVal' )),
    COMMETHOD([dispid(16804), helpstring('Gets the absolute URI specifying the location of the globe overlay.'), 'propget'], HRESULT, 'UriAsString',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16805), helpstring('Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsAGICustomTerrainOverlay implementation
##class _IAgStkGraphicsAGICustomTerrainOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the value from which to offset the terrain height.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value from which to offset the terrain height.'
##    AltitudeOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value from which to scale the terrain height.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value from which to scale the terrain height.'
##    AltitudeScale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Supported(self):
##        'Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects.'
##        #return pRetVal
##
##    @property
##    def CentralBody(self):
##        "Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."
##        #return pRetVal
##
##    @property
##    def Extent(self):
##        'Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'
##        #return ppRetVal
##
##    @property
##    def Role(self):
##        'Gets the globe overlay role of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def UriAsString(self):
##        'Gets the absolute URI specifying the location of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsCompositeDisplayCondition(CoClass):
    'A composite of display conditions combined using a binary logic operation. For example, several time interval display condition objects can be added to a composite...'
    _reg_clsid_ = GUID('{6B61802C-9A7B-4CC2-B31E-D8EF519307D2}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsCompositeDisplayCondition._com_interfaces_ = [_IAgStkGraphicsCompositeDisplayCondition, IAgStkGraphicsCompositeDisplayCondition, IAgStkGraphicsDisplayCondition]

class AgStkGraphicsContrastFilter(CoClass):
    'Adjusts the contrast of the source raster. The adjustment to contrast is a value between -1 and 1, corresponding to least contrast to most contrast.'
    _reg_clsid_ = GUID('{6215B11B-C04F-4B28-B098-B82DED50C41D}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsContrastFilter._com_interfaces_ = [_IAgStkGraphicsContrastFilter, IAgStkGraphicsContrastFilter, IAgStkGraphicsRasterFilter]

class AgStkGraphicsVectorPrimitive(CoClass):
    'Renders a vector in the 3D scene. A vector is defined by a source (given by an ISystem) and a direction (given by an IVector or IPoint). Length is auto-calculated or can be set separately.'
    _reg_clsid_ = GUID('{484DB8A7-D1A4-4BBF-9F5D-A4F76EA30D4A}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsVectorPrimitive._com_interfaces_ = [_IAgStkGraphicsVectorPrimitive, IAgStkGraphicsVectorPrimitive, IAgStkGraphicsPrimitive]

class _IAgStkGraphicsRasterStream(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsRasterStream'
    _iid_ = GUID('{3825591C-B395-4F7F-87D3-B3C8919959B5}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsRasterStream._methods_ = [
    COMMETHOD([dispid(9801), helpstring('Gets the raster attributes that define the raster data.'), 'propget'], HRESULT, 'Attributes',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
    COMMETHOD([dispid(9802), helpstring('Gets the width of the raster in pixels.'), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9803), helpstring('Gets the height of the raster in pixels.'), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9804), helpstring('Flips the raster along the given axis.')], HRESULT, 'Flip',
              ( ['in'], AgEStkGraphicsFlipAxis, 'Axis' )),
    COMMETHOD([dispid(9805), helpstring('Rotates the raster by the given angle.')], HRESULT, 'Rotate',
              ( ['in'], c_double, 'Angle' )),
    COMMETHOD([dispid(9806), helpstring('Applies a raster filter to the raster and returns a new raster with the results of the filtering. The current raster is not modified.')], HRESULT, 'Apply',
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(9807), helpstring('Applies a raster filter to the raster. The current raster will contain the results of the filtering.')], HRESULT, 'ApplyInPlace',
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' )),
    COMMETHOD([dispid(9808), helpstring('Extracts the band of raster data associated with the given raster band.')], HRESULT, 'ExtractBand',
              ( ['in'], AgEStkGraphicsRasterBand, 'Band' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(9809), helpstring('Extracts the bands of raster data associated with the given raster format.')], HRESULT, 'ExtractBandFromRasterFormat',
              ( ['in'], AgEStkGraphicsRasterFormat, 'Format' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(9810), helpstring('Copies the data associated with the given raster into this raster.')], HRESULT, 'CopyFromRaster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' )),
    COMMETHOD([dispid(19601), helpstring('Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes...'), 'propget'], HRESULT, 'UpdateDelta',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(19601), helpstring('Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes...'), 'propput'], HRESULT, 'UpdateDelta',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(19602), helpstring('When overridden in a derived class, updates the raster data associated with the raster stream at the specified time...')], HRESULT, 'Update',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'Time' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'NextTime' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsRasterStream implementation
##class _IAgStkGraphicsRasterStream_Impl(object):
##    @property
##    def Attributes(self):
##        'Gets the raster attributes that define the raster data.'
##        #return ppRetVal
##
##    @property
##    def Width(self):
##        'Gets the width of the raster in pixels.'
##        #return pRetVal
##
##    @property
##    def Height(self):
##        'Gets the height of the raster in pixels.'
##        #return pRetVal
##
##    def Flip(self, Axis):
##        'Flips the raster along the given axis.'
##        #return 
##
##    def Rotate(self, Angle):
##        'Rotates the raster by the given angle.'
##        #return 
##
##    def Apply(self, Filter):
##        'Applies a raster filter to the raster and returns a new raster with the results of the filtering. The current raster is not modified.'
##        #return ppRetVal
##
##    def ApplyInPlace(self, Filter):
##        'Applies a raster filter to the raster. The current raster will contain the results of the filtering.'
##        #return 
##
##    def ExtractBand(self, Band):
##        'Extracts the band of raster data associated with the given raster band.'
##        #return ppRetVal
##
##    def ExtractBandFromRasterFormat(self, Format):
##        'Extracts the bands of raster data associated with the given raster format.'
##        #return ppRetVal
##
##    def CopyFromRaster(self, Raster):
##        'Copies the data associated with the given raster into this raster.'
##        #return 
##
##    def _get(self):
##        'Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes...'
##    UpdateDelta = property(_get, _set, doc = _set.__doc__)
##
##    def Update(self, Time, NextTime):
##        'When overridden in a derived class, updates the raster data associated with the raster stream at the specified time...'
##        #return pRetVal
##

class _IAgStkGraphicsRasterImageGlobeOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsRasterImageGlobeOverlayFactory'
    _iid_ = GUID('{F8FE66D8-AAB1-499F-BFB2-535D0C430E34}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsRasterImageGlobeOverlayFactory._methods_ = [
    COMMETHOD([dispid(11901), helpstring('Initializes a raster image globe overlay with the provided values.')], HRESULT, 'InitializeWithString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterImageGlobeOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(11903), helpstring('Initializes a raster image globe overlay with the provided values.')], HRESULT, 'InitializeWithColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'Color' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterImageGlobeOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(11904), helpstring('Initializes a raster image globe overlay with the provided values.')], HRESULT, 'InitializeWithRaster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterImageGlobeOverlay)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsRasterImageGlobeOverlayFactory implementation
##class _IAgStkGraphicsRasterImageGlobeOverlayFactory_Impl(object):
##    def InitializeWithString(self, Uri, Extent):
##        'Initializes a raster image globe overlay with the provided values.'
##        #return ppRetVal
##
##    def InitializeWithColor(self, Color, Extent):
##        'Initializes a raster image globe overlay with the provided values.'
##        #return ppRetVal
##
##    def InitializeWithRaster(self, Raster, Extent):
##        'Initializes a raster image globe overlay with the provided values.'
##        #return ppRetVal
##

class AgStkGraphicsCompositePrimitive(CoClass):
    " A primitive that is composed of multiple other primitives. Since composites can contain other composites, they are commonly used to build hierarchies of primitives to efficiently evaluate <topic name='Display Conditions'>display conditions</topic>..."
    _reg_clsid_ = GUID('{D4874178-CAC6-4B1D-9166-0C0CA7B70EC4}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsCompositePrimitive(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsCompositePrimitive'
    _iid_ = GUID('{CEE8EC46-1212-47A6-BD22-E17B75524D2C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsCompositePrimitive._com_interfaces_ = [_IAgStkGraphicsCompositePrimitive, IAgStkGraphicsCompositePrimitive, IAgStkGraphicsPrimitive]

class AgStkGraphicsConvolutionFilter(CoClass):
    "Applies convolution to the source raster. Convolution is the modification of a pixel's value based on the values of its surrounding pixels. The kernel is the numerical matrix that is applied to each pixel in this process..."
    _reg_clsid_ = GUID('{0B22DDCE-D98F-487D-947C-133DF3840C33}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsConvolutionFilter._com_interfaces_ = [_IAgStkGraphicsConvolutionFilter, IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter]

IAgStkGraphicsCentralBodyGraphicsIndexer._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the central body graphics for the planet Earth. This is equivalent to passing a central body equal to an instance of earth central body to the indexer.')], HRESULT, 'Earth',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCentralBodyGraphics)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the central body graphics for the Moon.')], HRESULT, 'Moon',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCentralBodyGraphics)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the central body graphics for the Sun.')], HRESULT, 'Sun',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCentralBodyGraphics)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the central body graphics for the specified central body.')], HRESULT, 'Item',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCentralBodyGraphics)), 'ppRetVal' )),
    COMMETHOD([helpstring('Returns the central body graphics for the central body with the given name.')], HRESULT, 'GetByName',
              ( ['in'], BSTR, 'Name' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCentralBodyGraphics)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsCentralBodyGraphicsIndexer implementation
##class IAgStkGraphicsCentralBodyGraphicsIndexer_Impl(object):
##    @property
##    def Earth(self):
##        'Gets the central body graphics for the planet Earth. This is equivalent to passing a central body equal to an instance of earth central body to the indexer.'
##        #return ppRetVal
##
##    @property
##    def Moon(self):
##        'Gets the central body graphics for the Moon.'
##        #return ppRetVal
##
##    @property
##    def Sun(self):
##        'Gets the central body graphics for the Sun.'
##        #return ppRetVal
##
##    @property
##    def Item(self, CentralBody):
##        'Gets the central body graphics for the specified central body.'
##        #return ppRetVal
##
##    def GetByName(self, Name):
##        'Returns the central body graphics for the central body with the given name.'
##        #return ppRetVal
##

IAgStkGraphicsKmlGraphicsEvents._disp_methods_ = [
    DISPMETHOD([dispid(27101), helpstring('Occurs when an asynchronous document load operation completes.')], None, 'DocumentLoaded',
               ( [], VARIANT, 'Sender' ),
               ( ['in'], POINTER(IAgStkGraphicsKmlDocumentLoadedEventArgs), 'Args' )),
]
class AgStkGraphicsBoxTriangulatorInitializer(CoClass):
    'Triangulates a box. It is recommended to visualize the box using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used...'
    _reg_clsid_ = GUID('{A49B6A9E-F145-4B2D-9CAA-089F79F8E069}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class IAgStkGraphicsBoxTriangulatorInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Triangulates a box. It is recommended to visualize the box using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used...'
    _iid_ = GUID('{3D49DA39-DBE0-4EF9-B589-BC0CF5E78085}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsBoxTriangulatorInitializer._com_interfaces_ = [_IAgStkGraphicsBoxTriangulatorInitializer, IAgStkGraphicsBoxTriangulatorInitializer]

class IAgStkGraphicsContrastFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Adjusts the contrast of the source raster. The adjustment to contrast is a value between -1 and 1, corresponding to least contrast to most contrast.'
    _iid_ = GUID('{D78A7285-C3FF-47B5-B5AF-EA67FAFFAE92}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsContrastFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsContrastFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with the adjustment to contrast.')], HRESULT, 'InitializeWithAdjustment',
              ( ['in'], c_double, 'Adjustment' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsContrastFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsContrastFilterFactory implementation
##class IAgStkGraphicsContrastFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithAdjustment(self, Adjustment):
##        'Initializes a new instance with the adjustment to contrast.'
##        #return ppRetVal
##

class IAgStkGraphicsPixelSizeDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Defines an inclusive interval, in pixels, that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the number of pixels the object's bounding sphere (or in ..."
    _iid_ = GUID('{2C7BB493-89F9-40F9-B562-FEED771D08B7}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsPixelSizeDisplayConditionFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a default pixel size display condition. minimum pixel size is set to 0 and maximum pixel size is set to Int32.MaxValue...')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPixelSizeDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a pixel size display condition with the inclusive interval [minimumPixelSize, maximumPixelSize]...')], HRESULT, 'InitializeWithPixelSizes',
              ( ['in'], c_int, 'MinimumPixelSize' ),
              ( ['in'], c_int, 'MaximumPixelSize' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPixelSizeDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsPixelSizeDisplayConditionFactory implementation
##class IAgStkGraphicsPixelSizeDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default pixel size display condition. minimum pixel size is set to 0 and maximum pixel size is set to Int32.MaxValue...'
##        #return ppRetVal
##
##    def InitializeWithPixelSizes(self, MinimumPixelSize, MaximumPixelSize):
##        'Initializes a pixel size display condition with the inclusive interval [minimumPixelSize, maximumPixelSize]...'
##        #return ppRetVal
##

class AgStkGraphicsConstantDisplayCondition(CoClass):
    "A display condition that evaluates to a user-defined value. This is commonly used to hide <topic name='Primitives'>primitives</topic> by assigning to a primitive a display condition that always returns false."
    _reg_clsid_ = GUID('{D006F72B-1C3F-48B6-9B13-CC8B50C58FFD}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsConstantDisplayCondition._com_interfaces_ = [_IAgStkGraphicsConstantDisplayCondition, IAgStkGraphicsConstantDisplayCondition, IAgStkGraphicsDisplayCondition]

class AgStkGraphicsEdgeDetectFilter(CoClass):
    'Applies a convolution filter to detect edges in the source raster.'
    _reg_clsid_ = GUID('{CCA6B23C-F654-466B-82CC-C6EB430E6D44}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsEdgeDetectFilter._com_interfaces_ = [_IAgStkGraphicsEdgeDetectFilter, IAgStkGraphicsEdgeDetectFilter, IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter]

class _IAgStkGraphicsRotateFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsRotateFilter'
    _iid_ = GUID('{23FD6D02-3861-4AE4-B77D-1ED451955DFD}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsRotateFilter._methods_ = [
    COMMETHOD([dispid(21401), helpstring('Gets or sets the counterclockwise rotation angle measured in radians.'), 'propget'], HRESULT, 'Angle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(21401), helpstring('Gets or sets the counterclockwise rotation angle measured in radians.'), 'propput'], HRESULT, 'Angle',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsRotateFilter implementation
##class _IAgStkGraphicsRotateFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the counterclockwise rotation angle measured in radians.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the counterclockwise rotation angle measured in radians.'
##    Angle = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsCylinderTriangulatorInitializer(CoClass):
    'Triangulates a cylinder. It is recommended to visualize the cylinder using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used...'
    _reg_clsid_ = GUID('{D5251630-D92F-41EC-9440-43C933A794A7}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsCylinderTriangulatorInitializer._com_interfaces_ = [_IAgStkGraphicsCylinderTriangulatorInitializer, IAgStkGraphicsCylinderTriangulatorInitializer]

class IAgStkGraphicsDistanceDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Defines an inclusive distance interval, in meters, that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the distance, in meters, from the camera to the ..."
    _iid_ = GUID('{D7DDA546-31D2-4BBD-A44D-B9DC413A2412}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsDistanceDisplayConditionFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a default distance display condition. minimum distance is set to 0 and maximum distance is set to Double.MaxValue...')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]...')], HRESULT, 'InitializeWithDistances',
              ( ['in'], c_double, 'MinimumDistance' ),
              ( ['in'], c_double, 'MaximumDistance' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsDistanceDisplayConditionFactory implementation
##class IAgStkGraphicsDistanceDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default distance display condition. minimum distance is set to 0 and maximum distance is set to Double.MaxValue...'
##        #return ppRetVal
##
##    def InitializeWithDistances(self, MinimumDistance, MaximumDistance):
##        'Initializes a distance display condition with the inclusive distance interval [minimumDistance, maximumDistance]...'
##        #return ppRetVal
##

class IAgStkGraphicsAlphaFromLuminanceFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Adds an alpha band to the source raster derived from the luminance of the raster's color bands."
    _iid_ = GUID('{2317F609-231F-4266-B38C-F4FA812A0306}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsAlphaFromLuminanceFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Adds an alpha band to the source raster derived from the luminance of the raster's color bands."
    _iid_ = GUID('{9EE1933E-8F0D-4FCA-8386-E03194E483DA}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsAlphaFromLuminanceFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAlphaFromLuminanceFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsAlphaFromLuminanceFilterFactory implementation
##class IAgStkGraphicsAlphaFromLuminanceFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##

_IAgStkGraphicsScreenOverlayPickResult._methods_ = [
    COMMETHOD([dispid(10501), helpstring('Gets the position that was picked within the picked overlay. The array represents the picked position and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(10502), helpstring('Gets the position that was picked within the overall globe control. This is essentially the same position that was passed to pick screen overlays. The array represents the picked position and has a size of 4...'), 'propget'], HRESULT, 'ControlPosition',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(10503), helpstring('Gets the screen overlay that was picked.'), 'propget'], HRESULT, 'Overlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlay)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsScreenOverlayPickResult implementation
##class _IAgStkGraphicsScreenOverlayPickResult_Impl(object):
##    @property
##    def Position(self):
##        'Gets the position that was picked within the picked overlay. The array represents the picked position and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##        #return ppRetVal
##
##    @property
##    def ControlPosition(self):
##        'Gets the position that was picked within the overall globe control. This is essentially the same position that was passed to pick screen overlays. The array represents the picked position and has a size of 4...'
##        #return ppRetVal
##
##    @property
##    def Overlay(self):
##        'Gets the screen overlay that was picked.'
##        #return ppRetVal
##

class AgStkGraphicsDisplayCondition(CoClass):
    "When assigned to objects, such as <topic name='Primitives'>primitives</topic> or <topic name='Globe Overlays'>globe overlays</topic>, display conditions are evaluated to determine if the object should be <topic name='Glossary' anchor='Render'>rendered</..."
    _reg_clsid_ = GUID('{FDDE8F96-5671-4E22-8E97-6DC03D5A6995}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsDisplayCondition._com_interfaces_ = [_IAgStkGraphicsDisplayCondition, IAgStkGraphicsDisplayCondition]

class AgStkGraphicsFilteringRasterStream(CoClass):
    'A class decorator for applying a raster filter to each update of a raster stream. Can be used to apply filters to videos and other raster streams as they are updated.'
    _reg_clsid_ = GUID('{FC627209-4675-4F54-B648-53D3BD1D9280}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsFilteringRasterStream._com_interfaces_ = [_IAgStkGraphicsFilteringRasterStream, IAgStkGraphicsFilteringRasterStream, IAgStkGraphicsRasterStream, IAgStkGraphicsRaster]

class AgStkGraphicsEllipsoidTriangulatorInitializer(CoClass):
    'Triangulates an ellipsoid. It is recommended to visualize the ellipsoid using a solid primitive. Although, if only the fill is desired for visualization, a triangle mesh primitive with render back then front faces set to true can be used...'
    _reg_clsid_ = GUID('{E2B6E371-E82E-4315-938B-E610157732C2}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsEllipsoidTriangulatorInitializer._com_interfaces_ = [_IAgStkGraphicsEllipsoidTriangulatorInitializer, IAgStkGraphicsEllipsoidTriangulatorInitializer]

IAgStkGraphicsBatchPrimitiveIndex._methods_ = [
    COMMETHOD(['propget', helpstring('The index of the item contained by the Primitive.')], HRESULT, 'Index',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('The Primitive that contains the item at the Index specified.')], HRESULT, 'Primitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPrimitive)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsBatchPrimitiveIndex implementation
##class IAgStkGraphicsBatchPrimitiveIndex_Impl(object):
##    @property
##    def Index(self):
##        'The index of the item contained by the Primitive.'
##        #return pRetVal
##
##    @property
##    def Primitive(self):
##        'The Primitive that contains the item at the Index specified.'
##        #return ppRetVal
##

IAgStkGraphicsSceneEvents._disp_methods_ = [
    DISPMETHOD([dispid(13901), helpstring('Raised when either render is called on the scene or Render is called on the scene manager. The event occurs immediately prior to rendering the scene.')], None, 'Rendering',
               ( [], VARIANT, 'Sender' ),
               ( ['in'], POINTER(IAgStkGraphicsRenderingEventArgs), 'Args' )),
]
class AgStkGraphicsDistanceDisplayCondition(CoClass):
    "Defines an inclusive distance interval, in meters, that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the distance, in meters, from the camera to the ..."
    _reg_clsid_ = GUID('{279F68C0-DEC1-43C8-BDF8-2CC59EDD6586}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsDistanceDisplayCondition._com_interfaces_ = [_IAgStkGraphicsDistanceDisplayCondition, IAgStkGraphicsDistanceDisplayCondition, IAgStkGraphicsDisplayCondition]

class AgStkGraphicsFlipFilter(CoClass):
    'Flips the source raster along the given flip axis.'
    _reg_clsid_ = GUID('{EB7EEADE-633C-43C1-ADCC-238694ACD792}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsFlipFilter._com_interfaces_ = [_IAgStkGraphicsFlipFilter, IAgStkGraphicsFlipFilter, IAgStkGraphicsRasterFilter]

class AgStkGraphicsExtrudedPolylineTriangulatorInitializer(CoClass):
    'Triangulates a polyline into an extrusion with bottom and top boundaries.'
    _reg_clsid_ = GUID('{2A60AB2B-967B-4B59-B5B9-B8E99387166D}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class IAgStkGraphicsExtrudedPolylineTriangulatorInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Triangulates a polyline into an extrusion with bottom and top boundaries.'
    _iid_ = GUID('{B6B79988-0B1F-4B6E-8970-FF86B6D94B36}')
    _idlflags_ = ['oleautomation']
AgStkGraphicsExtrudedPolylineTriangulatorInitializer._com_interfaces_ = [_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer, IAgStkGraphicsExtrudedPolylineTriangulatorInitializer]

IAgStkGraphicsKmlDocumentLoadedEventArgs._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the KML document associated with the load event.')], HRESULT, 'Document',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlDocument)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns an error message, if an error occurred while loading the KML; otherwise an empty string.')], HRESULT, 'Exception',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsKmlDocumentLoadedEventArgs implementation
##class IAgStkGraphicsKmlDocumentLoadedEventArgs_Impl(object):
##    @property
##    def Document(self):
##        'Gets the KML document associated with the load event.'
##        #return ppRetVal
##
##    @property
##    def Exception(self):
##        'Returns an error message, if an error occurred while loading the KML; otherwise an empty string.'
##        #return pRetVal
##

class IAgStkGraphicsCompositeDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A composite of display conditions combined using a binary logic operation. For example, several time interval display condition objects can be added to a composite...'
    _iid_ = GUID('{A2CA541E-A860-4E47-B0E9-F0E973733E67}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsCompositeDisplayConditionFactory._methods_ = [
    COMMETHOD([helpstring('Initializes an empty composite display condition.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCompositeDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsCompositeDisplayConditionFactory implementation
##class IAgStkGraphicsCompositeDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        'Initializes an empty composite display condition.'
##        #return ppRetVal
##

class _IAgStkGraphicsGlobeImageOverlayInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGlobeImageOverlayInitializer'
    _iid_ = GUID('{9088209C-9633-4094-A48B-53F8A4D3F10A}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsGlobeImageOverlayInitializer._methods_ = [
    COMMETHOD([dispid(15701), helpstring('Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'), 'propget'], HRESULT, 'MoreThanOneImageGlobeOverlaySupported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGlobeImageOverlayInitializer implementation
##class _IAgStkGraphicsGlobeImageOverlayInitializer_Impl(object):
##    @property
##    def MoreThanOneImageGlobeOverlaySupported(self):
##        'Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'
##        #return pRetVal
##

IAgStkGraphicsCentralBodyGraphics._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the color of the central body in the scene.')], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the color of the central body in the scene.')], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the specular color of the central body in the scene. The specular color is associated with the specular overlay.')], HRESULT, 'SpecularColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the specular color of the central body in the scene. The specular color is associated with the specular overlay.')], HRESULT, 'SpecularColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the shininess of the central body in the scene. The shininess affects the size and brightness of specular reflection associated with the specular overlay.')], HRESULT, 'Shininess',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the shininess of the central body in the scene. The shininess affects the size and brightness of specular reflection associated with the specular overlay.')], HRESULT, 'Shininess',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the imagery for central body in the scene is shown or hidden.')], HRESULT, 'ShowImagery',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the imagery for central body in the scene is shown or hidden.')], HRESULT, 'ShowImagery',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the central body is shown or hidden in the scene. This only affects the central body itself, not the primitives that are associated with it.')], HRESULT, 'Show',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the central body is shown or hidden in the scene. This only affects the central body itself, not the primitives that are associated with it.')], HRESULT, 'Show',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether a label with the name of the central body should be rendered in the scene when the camera is at certain distance away from the central body.')], HRESULT, 'ShowLabel',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether a label with the name of the central body should be rendered in the scene when the camera is at certain distance away from the central body.')], HRESULT, 'ShowLabel',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the altitude, in meters, that all terrain and imagery will be offset from the surface of the central body in the scene.')], HRESULT, 'AltitudeOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the altitude, in meters, that all terrain and imagery will be offset from the surface of the central body in the scene.')], HRESULT, 'AltitudeOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the base globe image overlay associated with the central body in the scene. The base overlay is always rendered before any other imagery...')], HRESULT, 'BaseOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeImageOverlay)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the base globe image overlay associated with the central body in the scene. The base overlay is always rendered before any other imagery...')], HRESULT, 'BaseOverlay',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the night globe image overlay associated with the central body in the scene. The night overlay is displayed only on parts of the central body that are not in sun light...')], HRESULT, 'NightOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeImageOverlay)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the night globe image overlay associated with the central body in the scene. The night overlay is displayed only on parts of the central body that are not in sun light...')], HRESULT, 'NightOverlay',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the specular globe image overlay associated with the central body in the scene. The specular overlay is displayed only in the specular highlight of the central body.')], HRESULT, 'SpecularOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeImageOverlay)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the specular globe image overlay associated with the central body in the scene. The specular overlay is displayed only in the specular highlight of the central body.')], HRESULT, 'SpecularOverlay',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the collection of terrain overlay associated with the central body in the scene.')], HRESULT, 'Terrain',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTerrainCollection)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the collection of imagery associated with the central body in the scene.')], HRESULT, 'Imagery',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsImageCollection)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the kml graphics associated with the central body in the scene.')], HRESULT, 'Kml',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlGraphics)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsCentralBodyGraphics implementation
##class IAgStkGraphicsCentralBodyGraphics_Impl(object):
##    def _get(self):
##        'Gets or sets the color of the central body in the scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the color of the central body in the scene.'
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the specular color of the central body in the scene. The specular color is associated with the specular overlay.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the specular color of the central body in the scene. The specular color is associated with the specular overlay.'
##    SpecularColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the shininess of the central body in the scene. The shininess affects the size and brightness of specular reflection associated with the specular overlay.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the shininess of the central body in the scene. The shininess affects the size and brightness of specular reflection associated with the specular overlay.'
##    Shininess = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the imagery for central body in the scene is shown or hidden.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the imagery for central body in the scene is shown or hidden.'
##    ShowImagery = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the central body is shown or hidden in the scene. This only affects the central body itself, not the primitives that are associated with it.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the central body is shown or hidden in the scene. This only affects the central body itself, not the primitives that are associated with it.'
##    Show = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether a label with the name of the central body should be rendered in the scene when the camera is at certain distance away from the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether a label with the name of the central body should be rendered in the scene when the camera is at certain distance away from the central body.'
##    ShowLabel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the altitude, in meters, that all terrain and imagery will be offset from the surface of the central body in the scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the altitude, in meters, that all terrain and imagery will be offset from the surface of the central body in the scene.'
##    AltitudeOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the base globe image overlay associated with the central body in the scene. The base overlay is always rendered before any other imagery...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the base globe image overlay associated with the central body in the scene. The base overlay is always rendered before any other imagery...'
##    BaseOverlay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the night globe image overlay associated with the central body in the scene. The night overlay is displayed only on parts of the central body that are not in sun light...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the night globe image overlay associated with the central body in the scene. The night overlay is displayed only on parts of the central body that are not in sun light...'
##    NightOverlay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the specular globe image overlay associated with the central body in the scene. The specular overlay is displayed only in the specular highlight of the central body.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the specular globe image overlay associated with the central body in the scene. The specular overlay is displayed only in the specular highlight of the central body.'
##    SpecularOverlay = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Terrain(self):
##        'Gets the collection of terrain overlay associated with the central body in the scene.'
##        #return ppRetVal
##
##    @property
##    def Imagery(self):
##        'Gets the collection of imagery associated with the central body in the scene.'
##        #return ppRetVal
##
##    @property
##    def Kml(self):
##        'Gets the kml graphics associated with the central body in the scene.'
##        #return ppRetVal
##

IAgStkGraphicsContrastFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the contrast adjustment value for the filter. The value must be between -1 and 1, corresponding to least contrast to most contrast.')], HRESULT, 'Adjustment',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the contrast adjustment value for the filter. The value must be between -1 and 1, corresponding to least contrast to most contrast.')], HRESULT, 'Adjustment',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsContrastFilter implementation
##class IAgStkGraphicsContrastFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the contrast adjustment value for the filter. The value must be between -1 and 1, corresponding to least contrast to most contrast.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the contrast adjustment value for the filter. The value must be between -1 and 1, corresponding to least contrast to most contrast.'
##    Adjustment = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsDistanceToGlobeOverlayDisplayCondition(CoClass):
    "Defines an inclusive distance interval, in meters, that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the distance, in meters, from the camera to the ..."
    _reg_clsid_ = GUID('{75AEFFE4-CC1C-4698-B9A8-99BE63E9793B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsDistanceToGlobeOverlayDisplayCondition._com_interfaces_ = [_IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition, IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition, IAgStkGraphicsDisplayCondition]

class AgStkGraphicsGammaCorrectionFilter(CoClass):
    'Applies gamma correction to the source raster. The gamma is a value between .2 and 5. The default gamma value is 2.2.'
    _reg_clsid_ = GUID('{75FCBCF0-BF90-4C95-863E-8A4C4FAE3AB6}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsGammaCorrectionFilter._com_interfaces_ = [_IAgStkGraphicsGammaCorrectionFilter, IAgStkGraphicsGammaCorrectionFilter, IAgStkGraphicsRasterFilter]

IAgStkGraphicsPixelSizeDisplayCondition._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the minimum pixel size of the inclusive distance interval.')], HRESULT, 'MinimumPixelSize',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the minimum pixel size of the inclusive distance interval.')], HRESULT, 'MinimumPixelSize',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the maximum pixel size of the inclusive distance interval. Use Int32.MaxValue to ignore checking the maximum distance.')], HRESULT, 'MaximumPixelSize',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the maximum pixel size of the inclusive distance interval. Use Int32.MaxValue to ignore checking the maximum distance.')], HRESULT, 'MaximumPixelSize',
              ( ['in'], c_int, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsPixelSizeDisplayCondition implementation
##class IAgStkGraphicsPixelSizeDisplayCondition_Impl(object):
##    def _get(self):
##        'Gets or sets the minimum pixel size of the inclusive distance interval.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the minimum pixel size of the inclusive distance interval.'
##    MinimumPixelSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the maximum pixel size of the inclusive distance interval. Use Int32.MaxValue to ignore checking the maximum distance.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum pixel size of the inclusive distance interval. Use Int32.MaxValue to ignore checking the maximum distance.'
##    MaximumPixelSize = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsSurfaceExtentTriangulatorInitializer(CoClass):
    'Triangulates an extent on a central body into a triangle mesh and a surrounding boundary. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive. The boundary is commonly visualized with the polyline primitive.'
    _reg_clsid_ = GUID('{6D7717A1-43D8-48E9-8DAC-0E1A6A238155}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsSurfaceExtentTriangulatorInitializer._com_interfaces_ = [_IAgStkGraphicsSurfaceExtentTriangulatorInitializer, IAgStkGraphicsSurfaceExtentTriangulatorInitializer]

IAgStkGraphicsDistanceDisplayCondition._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the minimum distance, in meters, of the inclusive distance interval.')], HRESULT, 'MinimumDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the minimum distance, in meters, of the inclusive distance interval.')], HRESULT, 'MinimumDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.')], HRESULT, 'MaximumDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.')], HRESULT, 'MaximumDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the squared minimum distance, in meters, of the inclusive distance interval.')], HRESULT, 'MinimumDistanceSquared',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the squared maximum distance, in meters, of the inclusive distance interval.')], HRESULT, 'MaximumDistanceSquared',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsDistanceDisplayCondition implementation
##class IAgStkGraphicsDistanceDisplayCondition_Impl(object):
##    def _get(self):
##        'Gets or sets the minimum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the minimum distance, in meters, of the inclusive distance interval.'
##    MinimumDistance = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'
##    MaximumDistance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumDistanceSquared(self):
##        'Gets the squared minimum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##
##    @property
##    def MaximumDistanceSquared(self):
##        'Gets the squared maximum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##

IAgStkGraphicsSceneManagerEvents._disp_methods_ = [
    DISPMETHOD([dispid(15501), helpstring('Raised when either render is called on a scene or Render is called on the scene manager.')], None, 'Rendering',
               ( [], VARIANT, 'Sender' ),
               ( ['in'], POINTER(IAgStkGraphicsRenderingEventArgs), 'Args' )),
]
class AgStkGraphicsDistanceToPositionDisplayCondition(CoClass):
    "Defines an inclusive distance interval, in meters, that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the distance, in meters, from the camera to a po..."
    _reg_clsid_ = GUID('{787FD055-8E5E-40A8-A620-9B8BD0BE8FB3}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsDistanceToPositionDisplayCondition._com_interfaces_ = [_IAgStkGraphicsDistanceToPositionDisplayCondition, IAgStkGraphicsDistanceToPositionDisplayCondition, IAgStkGraphicsDisplayCondition]

class AgStkGraphicsGaussianBlurFilter(CoClass):
    'Applies a convolution filter to blur the source raster using the Gaussian function.'
    _reg_clsid_ = GUID('{02CCE59F-5CDF-4C22-A2AD-0966363F5C89}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsGaussianBlurFilter._com_interfaces_ = [_IAgStkGraphicsGaussianBlurFilter, IAgStkGraphicsGaussianBlurFilter, IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter]

class AgStkGraphicsSurfacePolygonTriangulatorInitializer(CoClass):
    'Triangulates a polygon, with an optional hole, on a central body, into a triangle mesh and a surrounding boundary. The mesh is commonly visualized with the triangle mesh primitive or surface mesh primitive...'
    _reg_clsid_ = GUID('{9302DB7E-F503-4F04-8577-E5513E9ECE27}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsSurfacePolygonTriangulatorInitializer._com_interfaces_ = [_IAgStkGraphicsSurfacePolygonTriangulatorInitializer, IAgStkGraphicsSurfacePolygonTriangulatorInitializer]

IAgStkGraphicsAlphaFromLuminanceFilter._methods_ = [
]
################################################################
## code template for IAgStkGraphicsAlphaFromLuminanceFilter implementation
##class IAgStkGraphicsAlphaFromLuminanceFilter_Impl(object):

class IAgStkGraphicsTextureScreenOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A rectangular overlay that can be assigned a texture.'
    _iid_ = GUID('{D68B862B-50C5-4803-9A98-D404C0AA967A}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsTextureScreenOverlayFactory._methods_ = [
    COMMETHOD([helpstring('Initializes the overlay with a position of (0, 0), a width of 100 pixels, and a height of 50 pixels.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureScreenOverlay)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels.')], HRESULT, 'InitializeWithXYWidthHeight',
              ( ['in'], c_double, 'XPixels' ),
              ( ['in'], c_double, 'YPixels' ),
              ( ['in'], c_double, 'WidthPixels' ),
              ( ['in'], c_double, 'HeightPixels' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureScreenOverlay)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes the overlay with the specified position and size.')], HRESULT, 'InitializeWithPositionSize',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Size' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureScreenOverlay)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes the overlay with a specified background texture. The size of the overlay will be the same as the size of the texture.')], HRESULT, 'InitializeWithXYTexture',
              ( ['in'], c_double, 'XPixels' ),
              ( ['in'], c_double, 'YPixels' ),
              ( ['in'], POINTER(IAgStkGraphicsRendererTexture2D), 'Texture' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureScreenOverlay)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes the overlay with a specified background texture. The size of the overlay will be the same as the size of the texture.')], HRESULT, 'InitializeWithPositionTexture',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Position' ),
              ( ['in'], POINTER(IAgStkGraphicsRendererTexture2D), 'Texture' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureScreenOverlay)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTextureScreenOverlayFactory implementation
##class IAgStkGraphicsTextureScreenOverlayFactory_Impl(object):
##    def Initialize(self):
##        'Initializes the overlay with a position of (0, 0), a width of 100 pixels, and a height of 50 pixels.'
##        #return ppRetVal
##
##    def InitializeWithXYWidthHeight(self, XPixels, YPixels, WidthPixels, HeightPixels):
##        'Initializes the overlay with the specified x position, y position, width, and height, all specified in pixels.'
##        #return ppRetVal
##
##    def InitializeWithPositionSize(self, Position, Size):
##        'Initializes the overlay with the specified position and size.'
##        #return ppRetVal
##
##    def InitializeWithXYTexture(self, XPixels, YPixels, Texture):
##        'Initializes the overlay with a specified background texture. The size of the overlay will be the same as the size of the texture.'
##        #return ppRetVal
##
##    def InitializeWithPositionTexture(self, Position, Texture):
##        'Initializes the overlay with a specified background texture. The size of the overlay will be the same as the size of the texture.'
##        #return ppRetVal
##

_IAgStkGraphicsKmlDocumentCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('A total number of elements in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Get an element at the specified position in the collection.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlDocument)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsKmlDocumentCollection implementation
##class _IAgStkGraphicsKmlDocumentCollection_Impl(object):
##    @property
##    def Count(self):
##        'A total number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Get an element at the specified position in the collection.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return ppRetVal
##

class IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Optional per-marker parameters for marker batch primitive that overrides the marker batch's per-batch parameters..."
    _iid_ = GUID('{9B29C9AB-8FD6-4F2B-8183-B504E319617E}')
    _idlflags_ = ['oleautomation']
IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._methods_ = [
    COMMETHOD([helpstring('Initializes default marker batch primitive optional parameters. All per-marker parameters are initially empty.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory implementation
##class IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory_Impl(object):
##    def Initialize(self):
##        'Initializes default marker batch primitive optional parameters. All per-marker parameters are initially empty.'
##        #return ppRetVal
##

_IAgStkGraphicsAGIProcessedImageGlobeOverlay._methods_ = [
    COMMETHOD([dispid(16701), helpstring('Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16701), helpstring('Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16703), helpstring("Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."), 'propget'], HRESULT, 'UseAltitudeBasedTranslucency',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16703), helpstring("Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."), 'propput'], HRESULT, 'UseAltitudeBasedTranslucency',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(16704), helpstring("Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyLowerTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16704), helpstring("Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyLowerTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16705), helpstring("Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyUpperTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16705), helpstring("Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyUpperTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16706), helpstring("Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyLowerAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16706), helpstring("Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyLowerAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16707), helpstring("Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyUpperAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16707), helpstring("Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyUpperAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16702), helpstring('Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'), 'propget'], HRESULT, 'MoreThanOneImageGlobeOverlaySupported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16801), helpstring("Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16802), helpstring('Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'), 'propget'], HRESULT, 'Extent',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16803), helpstring('Gets the globe overlay role of the globe overlay.'), 'propget'], HRESULT, 'Role',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsGlobeOverlayRole), 'pRetVal' )),
    COMMETHOD([dispid(16804), helpstring('Gets the absolute URI specifying the location of the globe overlay.'), 'propget'], HRESULT, 'UriAsString',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16805), helpstring('Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsAGIProcessedImageGlobeOverlay implementation
##class _IAgStkGraphicsAGIProcessedImageGlobeOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."
##    UseAltitudeBasedTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."
##    AltitudeBasedTranslucencyLowerTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."
##    AltitudeBasedTranslucencyUpperTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##    AltitudeBasedTranslucencyLowerAltitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##    AltitudeBasedTranslucencyUpperAltitude = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MoreThanOneImageGlobeOverlaySupported(self):
##        'Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'
##        #return pRetVal
##
##    @property
##    def CentralBody(self):
##        "Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."
##        #return pRetVal
##
##    @property
##    def Extent(self):
##        'Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'
##        #return ppRetVal
##
##    @property
##    def Role(self):
##        'Gets the globe overlay role of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def UriAsString(self):
##        'Gets the absolute URI specifying the location of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##

class _IAgStkGraphicsTerrainOverlayInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTerrainOverlayInitializer'
    _iid_ = GUID('{B31C16CA-D2C0-4784-830F-B17D07A1D6F8}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsTerrainOverlayInitializer._methods_ = [
    COMMETHOD([dispid(15801), helpstring('Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects.'), 'propget'], HRESULT, 'Supported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTerrainOverlayInitializer implementation
##class _IAgStkGraphicsTerrainOverlayInitializer_Impl(object):
##    @property
##    def Supported(self):
##        'Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects.'
##        #return pRetVal
##

class AgStkGraphicsDistanceToPrimitiveDisplayCondition(CoClass):
    "Defines an inclusive distance interval, in meters, that determines when an object, such as a <topic name='Screen Overlays'>screen overlay</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the distance, in meters, from the came..."
    _reg_clsid_ = GUID('{62068D88-2C38-4BAA-9C60-8BAD7C9A580E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsDistanceToPrimitiveDisplayCondition._com_interfaces_ = [_IAgStkGraphicsDistanceToPrimitiveDisplayCondition, IAgStkGraphicsDistanceToPrimitiveDisplayCondition, IAgStkGraphicsDisplayCondition]

class AgStkGraphicsGradientDetectFilter(CoClass):
    'Applies a convolution filter to detect gradients in the source raster.'
    _reg_clsid_ = GUID('{697AD63C-4968-49BF-BD8C-10BEBBD376A8}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsGradientDetectFilter._com_interfaces_ = [_IAgStkGraphicsGradientDetectFilter, IAgStkGraphicsGradientDetectFilter, IAgStkGraphicsConvolutionFilter, IAgStkGraphicsRasterFilter]

class AgStkGraphicsSurfaceShapesInitializer(CoClass):
    'Computes boundary positions for shapes on the surface such as circles, ellipses, and sectors.'
    _reg_clsid_ = GUID('{5D84C102-8D87-4B41-A93D-3159CBC4A1CD}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsSurfaceShapesInitializer._com_interfaces_ = [_IAgStkGraphicsSurfaceShapesInitializer, IAgStkGraphicsSurfaceShapesInitializer]

IAgStkGraphicsCompositeDisplayCondition._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the number of display conditions in the composite.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the number of display conditions for which memory has been allocated. This will always be greater or equal to count.')], HRESULT, 'Capacity',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the binary logic operation applied to all display conditions in the composite when the composite is evaluated. To combine logical and and or operations in the same expression, create composites containing composites.')], HRESULT, 'LogicOperation',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsBinaryLogicOperation), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the binary logic operation applied to all display conditions in the composite when the composite is evaluated. To combine logical and and or operations in the same expression, create composites containing composites.')], HRESULT, 'LogicOperation',
              ( ['in'], AgEStkGraphicsBinaryLogicOperation, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the condition at the given zero-based index.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns an enumerator that iterates through the collection.')], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([helpstring('Requests enough memory for the composite to contain at least count display conditions. count will not be affected but capacity may be.')], HRESULT, 'Reserve',
              ( ['in'], c_int, 'Count' )),
    COMMETHOD([helpstring('Adds a display condition to the end of the composite.')], HRESULT, 'AddWithNegate',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'DisplayCondition' ),
              ( ['in'], VARIANT_BOOL, 'Negate' )),
    COMMETHOD([helpstring('Adds a display condition to the end of the composite.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'DisplayCondition' )),
    COMMETHOD([helpstring('Inserts a display condition at the given zero-based index, shifting existing display conditions.')], HRESULT, 'InsertWithNegate',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'DisplayCondition' ),
              ( ['in'], VARIANT_BOOL, 'Negate' )),
    COMMETHOD([helpstring('Inserts a display condition at the given zero-based index, shifting existing display conditions.')], HRESULT, 'Insert',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'DisplayCondition' )),
    COMMETHOD([helpstring('Removes a display condition from the composite.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'DisplayCondition' )),
    COMMETHOD([helpstring('Removes the display condition at the given zero-based index, shifting existing display conditions.')], HRESULT, 'RemoveAt',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([helpstring('Removes all display conditions from the composite.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring('Determines if a logical not operation is applied to a display condition in the composite.')], HRESULT, 'GetNegate',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'DisplayCondition' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Sets if a logical not operation is applied to a display condition in the composite when the composite is evaluated.')], HRESULT, 'SetNegate',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'DisplayCondition' ),
              ( ['in'], VARIANT_BOOL, 'Negate' )),
    COMMETHOD([helpstring('Determines if a logical not operation is applied to a display condition in the composite.')], HRESULT, 'GetNegateAt',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Sets if a logical not operation is applied to a display condition in the composite when the composite is evaluated.')], HRESULT, 'SetNegateAt',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], VARIANT_BOOL, 'Negate' )),
]
################################################################
## code template for IAgStkGraphicsCompositeDisplayCondition implementation
##class IAgStkGraphicsCompositeDisplayCondition_Impl(object):
##    @property
##    def Count(self):
##        'Gets the number of display conditions in the composite.'
##        #return pRetVal
##
##    @property
##    def Capacity(self):
##        'Gets the number of display conditions for which memory has been allocated. This will always be greater or equal to count.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the binary logic operation applied to all display conditions in the composite when the composite is evaluated. To combine logical and and or operations in the same expression, create composites containing composites.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the binary logic operation applied to all display conditions in the composite when the composite is evaluated. To combine logical and and or operations in the same expression, create composites containing composites.'
##    LogicOperation = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Item(self, Index):
##        'Returns the condition at the given zero-based index.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns an enumerator that iterates through the collection.'
##        #return ppRetVal
##
##    def Reserve(self, Count):
##        'Requests enough memory for the composite to contain at least count display conditions. count will not be affected but capacity may be.'
##        #return 
##
##    def AddWithNegate(self, DisplayCondition, Negate):
##        'Adds a display condition to the end of the composite.'
##        #return 
##
##    def Add(self, DisplayCondition):
##        'Adds a display condition to the end of the composite.'
##        #return 
##
##    def InsertWithNegate(self, Index, DisplayCondition, Negate):
##        'Inserts a display condition at the given zero-based index, shifting existing display conditions.'
##        #return 
##
##    def Insert(self, Index, DisplayCondition):
##        'Inserts a display condition at the given zero-based index, shifting existing display conditions.'
##        #return 
##
##    def Remove(self, DisplayCondition):
##        'Removes a display condition from the composite.'
##        #return 
##
##    def RemoveAt(self, Index):
##        'Removes the display condition at the given zero-based index, shifting existing display conditions.'
##        #return 
##
##    def Clear(self):
##        'Removes all display conditions from the composite.'
##        #return 
##
##    def GetNegate(self, DisplayCondition):
##        'Determines if a logical not operation is applied to a display condition in the composite.'
##        #return pRetVal
##
##    def SetNegate(self, DisplayCondition, Negate):
##        'Sets if a logical not operation is applied to a display condition in the composite when the composite is evaluated.'
##        #return 
##
##    def GetNegateAt(self, Index):
##        'Determines if a logical not operation is applied to a display condition in the composite.'
##        #return pRetVal
##
##    def SetNegateAt(self, Index, Negate):
##        'Sets if a logical not operation is applied to a display condition in the composite when the composite is evaluated.'
##        #return 
##

_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._methods_ = [
    COMMETHOD([dispid(17101), helpstring('Updates the pathPrimitive at the specified date.')], HRESULT, 'Update',
              ( ['in'], POINTER(IAgStkGraphicsPathPrimitive), 'PathPrimitive' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'Date' )),
    COMMETHOD([dispid(10001), helpstring('Gets or sets the maximum number of points in the path.'), 'propget'], HRESULT, 'MaximumCount',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10001), helpstring('Gets or sets the maximum number of points in the path.'), 'propput'], HRESULT, 'MaximumCount',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(10002), helpstring('Gets or sets where the positions on the path are removed from.'), 'propget'], HRESULT, 'RemoveLocation',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPathPrimitiveRemoveLocation), 'pRetVal' )),
    COMMETHOD([dispid(10002), helpstring('Gets or sets where the positions on the path are removed from.'), 'propput'], HRESULT, 'RemoveLocation',
              ( ['in'], AgEStkGraphicsPathPrimitiveRemoveLocation, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy implementation
##class _IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy_Impl(object):
##    def Update(self, PathPrimitive, Date):
##        'Updates the pathPrimitive at the specified date.'
##        #return 
##
##    def _get(self):
##        'Gets or sets the maximum number of points in the path.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum number of points in the path.'
##    MaximumCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets where the positions on the path are removed from.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets where the positions on the path are removed from.'
##    RemoveLocation = property(_get, _set, doc = _set.__doc__)
##

class IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The Activator class provides methods to load COM plugins that implement custom image globe overlays. For more information about custom image globe overlays, see the STK Programming Interface.'
    _iid_ = GUID('{C80D1AE6-DB35-4F55-A9A4-131260022535}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Defines an inclusive distance interval, in meters, that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the distance, in meters, from the camera to the ..."
    _iid_ = GUID('{05BC2DBC-8533-467A-85D2-720C583F1C7E}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'path primitive update policy that removes points from remove location after a given duration.'
    _iid_ = GUID('{4EA0BB3E-5620-4A74-B721-6B0000EAFDC2}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsGlobeImageOverlayInitializer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A globe overlay that shows an image.'
    _iid_ = GUID('{CF06DC51-75AD-45A2-A1FF-9E3B550BE24F}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsAlphaFromPixelFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Adds an alpha band to the source raster based on the value of its first pixel. All pixels in the source raster that are the same color as the first pixel will be made transparent.'
    _iid_ = GUID('{F9802000-AEA6-453D-B797-D68FAE4A491B}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsAlphaFromRasterFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Adds an alpha band to the source raster derived from the color bands or alpha of another raster. This filter can be used to apply an alpha mask to the source raster.'
    _iid_ = GUID('{F7139FC1-F8F8-4BD2-A33F-9E06FDB4F63C}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsConvolutionFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    "Applies convolution to the source raster. Convolution is the modification of a pixel's value based on the values of its surrounding pixels. The kernel is the numerical matrix that is applied to each pixel in this process..."
    _iid_ = GUID('{F262F8E7-74A5-440E-9754-D3C8A4196ABF}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsFilteringRasterStreamFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A class decorator for applying a raster filter to each update of a raster stream. Can be used to apply filters to videos and other raster streams as they are updated.'
    _iid_ = GUID('{3C0A84BB-9330-422B-808E-6F9CF0AA3055}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsFlipFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Flips the source raster along the given flip axis.'
    _iid_ = GUID('{0F7BC6A1-42AC-41F0-8F42-D915FBA6B859}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'The Activator class provides methods to load COM plugins that implement projection and raster streaming. For more information about the projection and raster plugins, see the STK Programming Interface.'
    _iid_ = GUID('{D7DF6203-7DC8-4F07-8211-78E6D3C268A1}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsMarkerBatchPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    ' Renders one or more markers in the 3D scene. Markers are 2D images that always face the viewer which can be sized in pixels or meters. Markers are also referred to as sprites or billboards...'
    _iid_ = GUID('{02A33D9E-CFB3-41C8-BE66-E452AE1B7AC3}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'path primitive update policy that removes points from remove location when the number of points in the path exceeds maximum count.'
    _iid_ = GUID('{046383CC-B5B9-4FF5-B662-701E694170BA}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsPointBatchPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    ' Renders one or more points in the 3D scene. Each point in the batch has a unique position and an optional color. All points in the batch share the same pixel size. For best performance, avoid creating lots of batches with only a few points each...'
    _iid_ = GUID('{5DD03481-3541-486C-973F-F079EB35973C}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsPolylinePrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Renders a polyline in the 3D scene. Each line segment may have a different color. A polyline can be constructed with a position interpolator to render great arcs or rhumb lines.'
    _iid_ = GUID('{16A27023-42D5-4994-9ACE-165E027E72D8}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'Optional per-string and per-batch parameters for text batch primitive...'
    _iid_ = GUID('{03511893-3980-4C0E-9B99-7F86398ACADF}')
    _idlflags_ = ['oleautomation']
class IAgStkGraphicsTextureMatrixFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    'A 4 by 4 matrix applied to a texture coordinate.'
    _iid_ = GUID('{D4FCC6C9-D53A-4988-A09E-3EDC080936D4}')
    _idlflags_ = ['oleautomation']
_IAgStkGraphicsFactoryAndInitializers._methods_ = [
    COMMETHOD([dispid(1901), helpstring("Access global methods and properties of BoxTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'BoxTriangulator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoxTriangulatorInitializer)), 'ppRetVal' )),
    COMMETHOD([dispid(1902), helpstring("Access global methods and properties of CylinderTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'CylinderTriangulator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCylinderTriangulatorInitializer)), 'ppRetVal' )),
    COMMETHOD([dispid(1903), helpstring("Access global methods and properties of EllipsoidTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'EllipsoidTriangulator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsEllipsoidTriangulatorInitializer)), 'ppRetVal' )),
    COMMETHOD([dispid(1904), helpstring("Access global methods and properties of ExtrudedPolylineTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'ExtrudedPolylineTriangulator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer)), 'ppRetVal' )),
    COMMETHOD([dispid(1905), helpstring("Access global methods and properties of SurfaceExtentTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'SurfaceExtentTriangulator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceExtentTriangulatorInitializer)), 'ppRetVal' )),
    COMMETHOD([dispid(1906), helpstring("Access global methods and properties of SurfacePolygonTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'SurfacePolygonTriangulator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfacePolygonTriangulatorInitializer)), 'ppRetVal' )),
    COMMETHOD([dispid(1907), helpstring("Access global methods and properties of SurfaceShapes (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'SurfaceShapes',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesInitializer)), 'ppRetVal' )),
    COMMETHOD([dispid(1934), helpstring("Access global methods and properties of AGIProcessedImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'AGIProcessedImageGlobeOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1935), helpstring("Access global methods and properties of AGIProcessedTerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'AGIProcessedTerrainOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAGIProcessedTerrainOverlayFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1936), helpstring("Access global methods and properties of AGIRoamImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'AGIRoamImageGlobeOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAGIRoamImageGlobeOverlayFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1986), helpstring("Access global methods and properties of CustomImageGlobeOverlayPluginActivator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'CustomImageGlobeOverlayPluginActivator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1937), helpstring("Access global methods and properties of GeospatialImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'GeospatialImageGlobeOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGeospatialImageGlobeOverlayFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1938), helpstring("Access global methods and properties of ProjectedRasterOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'ProjectedRasterOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjectedRasterOverlayFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1939), helpstring("Access global methods and properties of Projection (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'Projection',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjectionFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1908), helpstring("Access global methods and properties of AltitudeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'AltitudeDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAltitudeDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1909), helpstring("Access global methods and properties of CompositeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'CompositeDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCompositeDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1910), helpstring("Access global methods and properties of CompositePrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'CompositePrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCompositePrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1911), helpstring("Access global methods and properties of ConstantDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'ConstantDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsConstantDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1912), helpstring("Access global methods and properties of DistanceDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'DistanceDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1940), helpstring("Access global methods and properties of DistanceToGlobeOverlayDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'DistanceToGlobeOverlayDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1913), helpstring("Access global methods and properties of DistanceToPositionDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'DistanceToPositionDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToPositionDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1914), helpstring("Access global methods and properties of DistanceToPrimitiveDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'DistanceToPrimitiveDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1941), helpstring("Access global methods and properties of DurationPathPrimitiveUpdatePolicy (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'DurationPathPrimitiveUpdatePolicy',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1953), helpstring("Access global methods and properties of GlobeImageOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'GlobeImageOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeImageOverlayInitializer)), 'ppRetVal' )),
    COMMETHOD([dispid(1915), helpstring("Access global methods and properties of GraphicsFont (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'GraphicsFont',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGraphicsFontFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1916), helpstring("Access global methods and properties of GreatArcInterpolator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'GreatArcInterpolator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGreatArcInterpolatorFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1962), helpstring("Access global methods and properties of AlphaFromLuminanceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'AlphaFromLuminanceFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAlphaFromLuminanceFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1963), helpstring("Access global methods and properties of AlphaFromPixelFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'AlphaFromPixelFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAlphaFromPixelFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1964), helpstring("Access global methods and properties of AlphaFromRasterFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'AlphaFromRasterFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAlphaFromRasterFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1965), helpstring("Access global methods and properties of BandExtractFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'BandExtractFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBandExtractFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1966), helpstring("Access global methods and properties of BandOrderFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'BandOrderFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBandOrderFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1967), helpstring("Access global methods and properties of BlurFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'BlurFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBlurFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1968), helpstring("Access global methods and properties of BrightnessFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'BrightnessFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBrightnessFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1969), helpstring("Access global methods and properties of ColorToLuminanceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'ColorToLuminanceFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsColorToLuminanceFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1970), helpstring("Access global methods and properties of ContrastFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'ContrastFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsContrastFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1971), helpstring("Access global methods and properties of ConvolutionFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'ConvolutionFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsConvolutionFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1972), helpstring("Access global methods and properties of EdgeDetectFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'EdgeDetectFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsEdgeDetectFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1960), helpstring("Access global methods and properties of FilteringRasterStream (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'FilteringRasterStream',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsFilteringRasterStreamFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1973), helpstring("Access global methods and properties of FlipFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'FlipFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsFlipFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1974), helpstring("Access global methods and properties of GammaCorrectionFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'GammaCorrectionFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGammaCorrectionFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1975), helpstring("Access global methods and properties of GaussianBlurFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'GaussianBlurFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGaussianBlurFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1976), helpstring("Access global methods and properties of GradientDetectFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'GradientDetectFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGradientDetectFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1982), helpstring("Access global methods and properties of Jpeg2000Writer (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'Jpeg2000Writer',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsJpeg2000WriterInitializer)), 'ppRetVal' )),
    COMMETHOD([dispid(1977), helpstring("Access global methods and properties of LevelsFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'LevelsFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsLevelsFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1984), helpstring("Access global methods and properties of ProjectionRasterStreamPluginActivator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'ProjectionRasterStreamPluginActivator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1942), helpstring("Access global methods and properties of Raster (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'Raster',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1943), helpstring("Access global methods and properties of RasterAttributes (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'RasterAttributes',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributesFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1978), helpstring("Access global methods and properties of RotateFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'RotateFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRotateFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1979), helpstring("Access global methods and properties of SequenceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'SequenceFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSequenceFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1980), helpstring("Access global methods and properties of SharpenFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'SharpenFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSharpenFilterFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1961), helpstring("Access global methods and properties of VideoStream (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'VideoStream',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsVideoStreamFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1917), helpstring("Access global methods and properties of MarkerBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'MarkerBatchPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1918), helpstring("Access global methods and properties of MarkerBatchPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'MarkerBatchPrimitiveOptionalParameters',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1944), helpstring("Access global methods and properties of MaximumCountPathPrimitiveUpdatePolicy (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'MaximumCountPathPrimitiveUpdatePolicy',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1919), helpstring("Access global methods and properties of ModelPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'ModelPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1945), helpstring("Access global methods and properties of PathPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'PathPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1920), helpstring("Access global methods and properties of PixelSizeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'PixelSizeDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPixelSizeDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1921), helpstring("Access global methods and properties of PointBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'PointBatchPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPointBatchPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1922), helpstring("Access global methods and properties of PolylinePrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'PolylinePrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPolylinePrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1946), helpstring("Access global methods and properties of RasterImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'RasterImageGlobeOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterImageGlobeOverlayFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1923), helpstring("Access global methods and properties of RhumbLineInterpolator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'RhumbLineInterpolator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRhumbLineInterpolatorFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1947), helpstring("Access global methods and properties of SceneDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'SceneDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSceneDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1951), helpstring("Access global methods and properties of SceneManager (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'SceneManager',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSceneManagerInitializer)), 'ppRetVal' )),
    COMMETHOD([dispid(1948), helpstring("Access global methods and properties of ScreenOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'ScreenOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1924), helpstring("Access global methods and properties of SolidPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'SolidPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSolidPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1925), helpstring("Access global methods and properties of SurfaceMeshPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'SurfaceMeshPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceMeshPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1954), helpstring("Access global methods and properties of TerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'TerrainOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTerrainOverlayInitializer)), 'ppRetVal' )),
    COMMETHOD([dispid(1926), helpstring("Access global methods and properties of TextBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'TextBatchPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextBatchPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1927), helpstring("Access global methods and properties of TextBatchPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'TextBatchPrimitiveOptionalParameters',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1928), helpstring("Access global methods and properties of TextureMatrix (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'TextureMatrix',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureMatrixFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1949), helpstring("Access global methods and properties of TextureScreenOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'TextureScreenOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureScreenOverlayFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1929), helpstring("Access global methods and properties of TimeIntervalDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'TimeIntervalDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTimeIntervalDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1930), helpstring("Access global methods and properties of TriangleMeshPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'TriangleMeshPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTriangleMeshPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1987), helpstring("Access global methods and properties of TriangleMeshPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'TriangleMeshPrimitiveOptionalParameters',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1952), helpstring('Factory creates texture filters.'), 'propget'], HRESULT, 'TextureFilter2D',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2DFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1957), helpstring('Factory creates bounding spheres.'), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphereFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1958), helpstring('Factory creates path points.'), 'propget'], HRESULT, 'PathPoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPointFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1990), helpstring("Access global methods and properties of TextOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'TextOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextOverlayFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1992), helpstring("Access global methods and properties of AGICustomTerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'AGICustomTerrainOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAGICustomTerrainOverlayFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1995), helpstring("Access global methods and properties of AxesPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'AxesPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAxesPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(1994), helpstring("Access global methods and properties of VectorPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"), 'propget'], HRESULT, 'VectorPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsVectorPrimitiveFactory)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsFactoryAndInitializers implementation
##class _IAgStkGraphicsFactoryAndInitializers_Impl(object):
##    @property
##    def BoxTriangulator(self):
##        "Access global methods and properties of BoxTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def CylinderTriangulator(self):
##        "Access global methods and properties of CylinderTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def EllipsoidTriangulator(self):
##        "Access global methods and properties of EllipsoidTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ExtrudedPolylineTriangulator(self):
##        "Access global methods and properties of ExtrudedPolylineTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SurfaceExtentTriangulator(self):
##        "Access global methods and properties of SurfaceExtentTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SurfacePolygonTriangulator(self):
##        "Access global methods and properties of SurfacePolygonTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SurfaceShapes(self):
##        "Access global methods and properties of SurfaceShapes (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AGIProcessedImageGlobeOverlay(self):
##        "Access global methods and properties of AGIProcessedImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AGIProcessedTerrainOverlay(self):
##        "Access global methods and properties of AGIProcessedTerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AGIRoamImageGlobeOverlay(self):
##        "Access global methods and properties of AGIRoamImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def CustomImageGlobeOverlayPluginActivator(self):
##        "Access global methods and properties of CustomImageGlobeOverlayPluginActivator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def GeospatialImageGlobeOverlay(self):
##        "Access global methods and properties of GeospatialImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ProjectedRasterOverlay(self):
##        "Access global methods and properties of ProjectedRasterOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def Projection(self):
##        "Access global methods and properties of Projection (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AltitudeDisplayCondition(self):
##        "Access global methods and properties of AltitudeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def CompositeDisplayCondition(self):
##        "Access global methods and properties of CompositeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def CompositePrimitive(self):
##        "Access global methods and properties of CompositePrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ConstantDisplayCondition(self):
##        "Access global methods and properties of ConstantDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def DistanceDisplayCondition(self):
##        "Access global methods and properties of DistanceDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def DistanceToGlobeOverlayDisplayCondition(self):
##        "Access global methods and properties of DistanceToGlobeOverlayDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def DistanceToPositionDisplayCondition(self):
##        "Access global methods and properties of DistanceToPositionDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def DistanceToPrimitiveDisplayCondition(self):
##        "Access global methods and properties of DistanceToPrimitiveDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def DurationPathPrimitiveUpdatePolicy(self):
##        "Access global methods and properties of DurationPathPrimitiveUpdatePolicy (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def GlobeImageOverlay(self):
##        "Access global methods and properties of GlobeImageOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def GraphicsFont(self):
##        "Access global methods and properties of GraphicsFont (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def GreatArcInterpolator(self):
##        "Access global methods and properties of GreatArcInterpolator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AlphaFromLuminanceFilter(self):
##        "Access global methods and properties of AlphaFromLuminanceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AlphaFromPixelFilter(self):
##        "Access global methods and properties of AlphaFromPixelFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AlphaFromRasterFilter(self):
##        "Access global methods and properties of AlphaFromRasterFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def BandExtractFilter(self):
##        "Access global methods and properties of BandExtractFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def BandOrderFilter(self):
##        "Access global methods and properties of BandOrderFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def BlurFilter(self):
##        "Access global methods and properties of BlurFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def BrightnessFilter(self):
##        "Access global methods and properties of BrightnessFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ColorToLuminanceFilter(self):
##        "Access global methods and properties of ColorToLuminanceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ContrastFilter(self):
##        "Access global methods and properties of ContrastFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ConvolutionFilter(self):
##        "Access global methods and properties of ConvolutionFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def EdgeDetectFilter(self):
##        "Access global methods and properties of EdgeDetectFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def FilteringRasterStream(self):
##        "Access global methods and properties of FilteringRasterStream (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def FlipFilter(self):
##        "Access global methods and properties of FlipFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def GammaCorrectionFilter(self):
##        "Access global methods and properties of GammaCorrectionFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def GaussianBlurFilter(self):
##        "Access global methods and properties of GaussianBlurFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def GradientDetectFilter(self):
##        "Access global methods and properties of GradientDetectFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def Jpeg2000Writer(self):
##        "Access global methods and properties of Jpeg2000Writer (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def LevelsFilter(self):
##        "Access global methods and properties of LevelsFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ProjectionRasterStreamPluginActivator(self):
##        "Access global methods and properties of ProjectionRasterStreamPluginActivator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def Raster(self):
##        "Access global methods and properties of Raster (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def RasterAttributes(self):
##        "Access global methods and properties of RasterAttributes (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def RotateFilter(self):
##        "Access global methods and properties of RotateFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SequenceFilter(self):
##        "Access global methods and properties of SequenceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SharpenFilter(self):
##        "Access global methods and properties of SharpenFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def VideoStream(self):
##        "Access global methods and properties of VideoStream (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def MarkerBatchPrimitive(self):
##        "Access global methods and properties of MarkerBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def MarkerBatchPrimitiveOptionalParameters(self):
##        "Access global methods and properties of MarkerBatchPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def MaximumCountPathPrimitiveUpdatePolicy(self):
##        "Access global methods and properties of MaximumCountPathPrimitiveUpdatePolicy (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ModelPrimitive(self):
##        "Access global methods and properties of ModelPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def PathPrimitive(self):
##        "Access global methods and properties of PathPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def PixelSizeDisplayCondition(self):
##        "Access global methods and properties of PixelSizeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def PointBatchPrimitive(self):
##        "Access global methods and properties of PointBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def PolylinePrimitive(self):
##        "Access global methods and properties of PolylinePrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def RasterImageGlobeOverlay(self):
##        "Access global methods and properties of RasterImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def RhumbLineInterpolator(self):
##        "Access global methods and properties of RhumbLineInterpolator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SceneDisplayCondition(self):
##        "Access global methods and properties of SceneDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SceneManager(self):
##        "Access global methods and properties of SceneManager (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ScreenOverlay(self):
##        "Access global methods and properties of ScreenOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SolidPrimitive(self):
##        "Access global methods and properties of SolidPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SurfaceMeshPrimitive(self):
##        "Access global methods and properties of SurfaceMeshPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TerrainOverlay(self):
##        "Access global methods and properties of TerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TextBatchPrimitive(self):
##        "Access global methods and properties of TextBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TextBatchPrimitiveOptionalParameters(self):
##        "Access global methods and properties of TextBatchPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TextureMatrix(self):
##        "Access global methods and properties of TextureMatrix (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TextureScreenOverlay(self):
##        "Access global methods and properties of TextureScreenOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TimeIntervalDisplayCondition(self):
##        "Access global methods and properties of TimeIntervalDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TriangleMeshPrimitive(self):
##        "Access global methods and properties of TriangleMeshPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TriangleMeshPrimitiveOptionalParameters(self):
##        "Access global methods and properties of TriangleMeshPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TextureFilter2D(self):
##        'Factory creates texture filters.'
##        #return ppRetVal
##
##    @property
##    def BoundingSphere(self):
##        'Factory creates bounding spheres.'
##        #return ppRetVal
##
##    @property
##    def PathPoint(self):
##        'Factory creates path points.'
##        #return ppRetVal
##
##    @property
##    def TextOverlay(self):
##        "Access global methods and properties of TextOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AGICustomTerrainOverlay(self):
##        "Access global methods and properties of AGICustomTerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AxesPrimitive(self):
##        "Access global methods and properties of AxesPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def VectorPrimitive(self):
##        "Access global methods and properties of VectorPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##

IAgStkGraphicsTerrainCollectionEvents._disp_methods_ = [
    DISPMETHOD([dispid(13401), helpstring('Raised when an asynchronous add is completed.')], None, 'AddComplete',
               ( [], VARIANT, 'Sender' ),
               ( ['in'], POINTER(IAgStkGraphicsTerrainOverlayAddCompleteEventArgs), 'Args' )),
]
class AgStkGraphicsDurationPathPrimitiveUpdatePolicy(CoClass):
    'path primitive update policy that removes points from remove location after a given duration.'
    _reg_clsid_ = GUID('{CB9E4E48-CB8A-4EF0-A528-4465EF9EAB61}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsDurationPathPrimitiveUpdatePolicy._com_interfaces_ = [_IAgStkGraphicsDurationPathPrimitiveUpdatePolicy, IAgStkGraphicsDurationPathPrimitiveUpdatePolicy, IAgStkGraphicsPathPrimitiveUpdatePolicy]

IAgStkGraphicsPrimitive._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the reference frame this primitive is defined and rendered in.')], HRESULT, 'ReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the reference frame this primitive is defined and rendered in.')], HRESULT, 'ReferenceFrame',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame.")], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame.")], HRESULT, 'BoundingSphere',
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets if the primitive's bounding sphere is automatically computed.")], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets if the primitive's bounding sphere is automatically computed.")], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered.")], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered.")], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered.")], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered.")], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the primitive's color.")], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the primitive's color.")], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.")], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.")], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets custom value associated with this primitive.')], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets custom value associated with this primitive.')], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsPrimitive implementation
##class IAgStkGraphicsPrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##    ReferenceFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##    BoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##    AutomaticallyComputeBoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's color."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsAlphaFromPixelFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAlphaFromPixelFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsAlphaFromPixelFilterFactory implementation
##class IAgStkGraphicsAlphaFromPixelFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##

class AgStkGraphicsLevelsFilter(CoClass):
    'Adjusts the band levels of the source raster linearly.'
    _reg_clsid_ = GUID('{50D3DD49-7536-43AB-870A-4ABBB6049955}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsLevelsFilter._com_interfaces_ = [_IAgStkGraphicsLevelsFilter, IAgStkGraphicsLevelsFilter, IAgStkGraphicsRasterFilter]

class _IAgStkGraphicsGraphicsFontFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGraphicsFontFactory'
    _iid_ = GUID('{23A6DE17-5972-41FA-A0AD-418E247042D5}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsGraphicsFontFactory._methods_ = [
    COMMETHOD([dispid(7502), helpstring('Initializes a graphics font with the given arguments.')], HRESULT, 'InitializeWithNameSizeFontStyleOutline',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Size' ),
              ( ['in'], AgEStkGraphicsFontStyle, 'FontStyle' ),
              ( ['in'], VARIANT_BOOL, 'Outline' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGraphicsFont)), 'ppRetVal' )),
    COMMETHOD([dispid(7501), helpstring('Initializes a graphics font with the typeface name and size.')], HRESULT, 'InitializeWithNameSize',
              ( ['in'], BSTR, 'Name' ),
              ( ['in'], c_int, 'Size' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGraphicsFont)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGraphicsFontFactory implementation
##class _IAgStkGraphicsGraphicsFontFactory_Impl(object):
##    def InitializeWithNameSizeFontStyleOutline(self, Name, Size, FontStyle, Outline):
##        'Initializes a graphics font with the given arguments.'
##        #return ppRetVal
##
##    def InitializeWithNameSize(self, Name, Size):
##        'Initializes a graphics font with the typeface name and size.'
##        #return ppRetVal
##

class AgStkGraphicsAGICustomTerrainOverlayFactory(CoClass):
    'A terrain overlay for handling AGI Cesium Terrain.'
    _reg_clsid_ = GUID('{91501FD0-BDDD-44DE-A889-99F5B8B5509C}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsAGICustomTerrainOverlayFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAGICustomTerrainOverlayFactory'
    _iid_ = GUID('{97850345-8EF0-4D7E-86B8-5AB5B2E820A1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsAGICustomTerrainOverlayFactory._com_interfaces_ = [_IAgStkGraphicsAGICustomTerrainOverlayFactory, IAgStkGraphicsAGICustomTerrainOverlayFactory]

class AgStkGraphicsGlobeImageOverlay(CoClass):
    'A globe overlay that shows an image.'
    _reg_clsid_ = GUID('{222F6A2F-349A-473A-B94C-DD30D0903B5B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsGlobeImageOverlay._com_interfaces_ = [_IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeImageOverlay, IAgStkGraphicsGlobeOverlay]

class AgStkGraphicsProjectionRasterStreamPluginActivator(CoClass):
    'The Activator class provides methods to load COM plugins that implement projection and raster streaming. For more information about the projection and raster plugins, see the STK Programming Interface.'
    _reg_clsid_ = GUID('{630B395D-F7FE-49A3-B98B-59C879810E4D}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsProjectionRasterStreamPluginActivator._com_interfaces_ = [_IAgStkGraphicsProjectionRasterStreamPluginActivator, IAgStkGraphicsProjectionRasterStreamPluginActivator]

class AgStkGraphicsAGIProcessedImageGlobeOverlayFactory(CoClass):
    'A globe image overlay for handling AGI Processed Image (PDTTX) files.'
    _reg_clsid_ = GUID('{E2BB79BE-F444-42F3-82BE-B65212C72485}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsAGIProcessedImageGlobeOverlayFactory._com_interfaces_ = [_IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory, IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory]

IAgStkGraphicsConvolutionFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsConvolutionFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with the specified kernel.')], HRESULT, 'InitializeWithKernel',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Kernel' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsConvolutionFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with the specified kernel and divisor.')], HRESULT, 'InitializeWithKernelAndDivisor',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Kernel' ),
              ( ['in'], c_double, 'Divisor' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsConvolutionFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with the specified kernel, divisor, and offset.')], HRESULT, 'InitializeWithKernelDivisorAndOffset',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Kernel' ),
              ( ['in'], c_double, 'Divisor' ),
              ( ['in'], c_double, 'Offset' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsConvolutionFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsConvolutionFilterFactory implementation
##class IAgStkGraphicsConvolutionFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithKernel(self, Kernel):
##        'Initializes a new instance with the specified kernel.'
##        #return ppRetVal
##
##    def InitializeWithKernelAndDivisor(self, Kernel, Divisor):
##        'Initializes a new instance with the specified kernel and divisor.'
##        #return ppRetVal
##
##    def InitializeWithKernelDivisorAndOffset(self, Kernel, Divisor, Offset):
##        'Initializes a new instance with the specified kernel, divisor, and offset.'
##        #return ppRetVal
##

IAgStkGraphicsTextureScreenOverlay._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the texture (image) to be drawn on the overlay. Textures can be obtained from textures.')], HRESULT, 'Texture',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRendererTexture2D)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the texture (image) to be drawn on the overlay. Textures can be obtained from textures.')], HRESULT, 'Texture',
              ( ['in'], POINTER(IAgStkGraphicsRendererTexture2D), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the filter used for the texture associated with this overlay.')], HRESULT, 'TextureFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the filter used for the texture associated with this overlay.')], HRESULT, 'TextureFilter',
              ( ['in'], POINTER(IAgStkGraphicsTextureFilter2D), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets a value indicating whether the aspect ratio of the texture screen overlay is maintained or not.')], HRESULT, 'MaintainAspectRatio',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMaintainAspectRatio), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets a value indicating whether the aspect ratio of the texture screen overlay is maintained or not.')], HRESULT, 'MaintainAspectRatio',
              ( ['in'], AgEStkGraphicsMaintainAspectRatio, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTextureScreenOverlay implementation
##class IAgStkGraphicsTextureScreenOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the texture (image) to be drawn on the overlay. Textures can be obtained from textures.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the texture (image) to be drawn on the overlay. Textures can be obtained from textures.'
##    Texture = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the filter used for the texture associated with this overlay.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the filter used for the texture associated with this overlay.'
##    TextureFilter = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a value indicating whether the aspect ratio of the texture screen overlay is maintained or not.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a value indicating whether the aspect ratio of the texture screen overlay is maintained or not.'
##    MaintainAspectRatio = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsGraphicsFont(CoClass):
    'A font that is suitable for use with the text batch primitive. For best performance, avoid creating duplicate font objects. Instead assign the same font object to several text batch primitives.'
    _reg_clsid_ = GUID('{EE0FB486-6E04-4F68-BC78-C92761BDE1A6}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsGraphicsFont._com_interfaces_ = [_IAgStkGraphicsGraphicsFont, IAgStkGraphicsGraphicsFont]

class AgStkGraphicsProjectionRasterStreamPluginProxy(CoClass):
    'A proxy class provides access to the raster and projection streams implemented by a plugin. Proxies are instantiated using projection raster stream plugin activator.'
    _reg_clsid_ = GUID('{82623680-8635-448C-A4F7-598D2B332DDB}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsProjectionRasterStreamPluginProxy._com_interfaces_ = [_IAgStkGraphicsProjectionRasterStreamPluginProxy, IAgStkGraphicsProjectionRasterStreamPluginProxy]

class AgStkGraphicsAGIProcessedTerrainOverlayFactory(CoClass):
    'A terrain overlay for handling AGI Processed Terrain (PDTT) files.'
    _reg_clsid_ = GUID('{DA795126-84AD-4546-922C-E28862C5962F}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsAGIProcessedTerrainOverlayFactory._com_interfaces_ = [_IAgStkGraphicsAGIProcessedTerrainOverlayFactory, IAgStkGraphicsAGIProcessedTerrainOverlayFactory]

class _IAgStkGraphicsGreatArcInterpolatorFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsGreatArcInterpolatorFactory'
    _iid_ = GUID('{6A19E993-A462-476A-9D4C-20810B263445}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsGreatArcInterpolatorFactory._methods_ = [
    COMMETHOD([dispid(7601), helpstring('Initializes a default great arc interpolator. This is equivalent to constructing a great arc interpolator with a central body equal to an instance of earth central body and a granularity of 1 degree.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGreatArcInterpolator)), 'ppRetVal' )),
    COMMETHOD([dispid(7602), helpstring('Initializes a great arc interpolator with the specified centralBody and a granularity of 1 degree.')], HRESULT, 'InitializeWithCentralBody',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGreatArcInterpolator)), 'ppRetVal' )),
    COMMETHOD([dispid(7603), helpstring('Initializes a great arc interpolator with the specified centralBody and granularity.')], HRESULT, 'InitializeWithCentralBodyAndGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGreatArcInterpolator)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGreatArcInterpolatorFactory implementation
##class _IAgStkGraphicsGreatArcInterpolatorFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default great arc interpolator. This is equivalent to constructing a great arc interpolator with a central body equal to an instance of earth central body and a granularity of 1 degree.'
##        #return ppRetVal
##
##    def InitializeWithCentralBody(self, CentralBody):
##        'Initializes a great arc interpolator with the specified centralBody and a granularity of 1 degree.'
##        #return ppRetVal
##
##    def InitializeWithCentralBodyAndGranularity(self, CentralBody, Granularity):
##        'Initializes a great arc interpolator with the specified centralBody and granularity.'
##        #return ppRetVal
##

IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._methods_ = [
    COMMETHOD([helpstring('Constructs a default update policy. This is equivalent to constructing a policy with maximum count set to 0 and a remove location of Front.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a policy with the specified maximumCount and removeLocation.')], HRESULT, 'InitializeWithParameters',
              ( ['in'], c_int, 'MaximumCount' ),
              ( ['in'], AgEStkGraphicsPathPrimitiveRemoveLocation, 'RemoveLocation' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory implementation
##class IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory_Impl(object):
##    def Initialize(self):
##        'Constructs a default update policy. This is equivalent to constructing a policy with maximum count set to 0 and a remove location of Front.'
##        #return ppRetVal
##
##    def InitializeWithParameters(self, MaximumCount, RemoveLocation):
##        'Initializes a policy with the specified maximumCount and removeLocation.'
##        #return ppRetVal
##

IAgStkGraphicsPointBatchPrimitiveFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a default point batch primitive. This is equivalent to constructing a point batch with a set hint of Frequent.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPointBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance of a point batch primitive with the specified set hint.')], HRESULT, 'InitializeWithSetHint',
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPointBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the minimum pixel size supported by the video card.')], HRESULT, 'MinimumPixelSizeSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the maximum pixel size supported by the video card.')], HRESULT, 'MaximumPixelSizeSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsPointBatchPrimitiveFactory implementation
##class IAgStkGraphicsPointBatchPrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default point batch primitive. This is equivalent to constructing a point batch with a set hint of Frequent.'
##        #return ppRetVal
##
##    def InitializeWithSetHint(self, SetHint):
##        'Initializes a new instance of a point batch primitive with the specified set hint.'
##        #return ppRetVal
##
##    @property
##    def MinimumPixelSizeSupported(self):
##        'Gets the minimum pixel size supported by the video card.'
##        #return pRetVal
##
##    @property
##    def MaximumPixelSizeSupported(self):
##        'Gets the maximum pixel size supported by the video card.'
##        #return pRetVal
##

IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory._methods_ = [
    COMMETHOD([helpstring('Initializes default text batch primitive optional parameters.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory implementation
##class IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory_Impl(object):
##    def Initialize(self):
##        'Initializes default text batch primitive optional parameters.'
##        #return ppRetVal
##

class AgStkGraphicsGreatArcInterpolator(CoClass):
    'The great arc interpolator computes interpolated positions along a great arc. A great arc is the shortest path between two positions on an ellipsoid.'
    _reg_clsid_ = GUID('{E990A7B4-A62B-4373-962E-032FDB65AA6B}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsGreatArcInterpolator._com_interfaces_ = [_IAgStkGraphicsGreatArcInterpolator, IAgStkGraphicsGreatArcInterpolator, IAgStkGraphicsPositionInterpolator]

class AgStkGraphicsRaster(CoClass):
    'A raster dataset. A raster consists of one or more bands, or sets of values, which are most commonly associated with colors when the raster represents an image...'
    _reg_clsid_ = GUID('{136F44D6-D316-4C64-B3DA-B342E2836A76}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsRaster._com_interfaces_ = [_IAgStkGraphicsRaster, IAgStkGraphicsRaster]

class AgStkGraphicsAGIRoamImageGlobeOverlayFactory(CoClass):
    'A globe image overlay for handling ROAM (TXM/TXB) files.'
    _reg_clsid_ = GUID('{5B29F8FE-12CC-45A5-844B-8FF971C0385E}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsAGIRoamImageGlobeOverlayFactory._com_interfaces_ = [_IAgStkGraphicsAGIRoamImageGlobeOverlayFactory, IAgStkGraphicsAGIRoamImageGlobeOverlayFactory]

IAgStkGraphicsFactoryAndInitializers._methods_ = [
    COMMETHOD(['propget', helpstring("Access global methods and properties of BoxTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'BoxTriangulator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoxTriangulatorInitializer)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of CylinderTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'CylinderTriangulator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCylinderTriangulatorInitializer)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of EllipsoidTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'EllipsoidTriangulator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsEllipsoidTriangulatorInitializer)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of ExtrudedPolylineTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'ExtrudedPolylineTriangulator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorInitializer)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of SurfaceExtentTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'SurfaceExtentTriangulator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceExtentTriangulatorInitializer)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of SurfacePolygonTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'SurfacePolygonTriangulator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfacePolygonTriangulatorInitializer)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of SurfaceShapes (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'SurfaceShapes',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceShapesInitializer)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of AGIProcessedImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'AGIProcessedImageGlobeOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of AGIProcessedTerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'AGIProcessedTerrainOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAGIProcessedTerrainOverlayFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of AGIRoamImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'AGIRoamImageGlobeOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAGIRoamImageGlobeOverlayFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of CustomImageGlobeOverlayPluginActivator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'CustomImageGlobeOverlayPluginActivator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of GeospatialImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'GeospatialImageGlobeOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGeospatialImageGlobeOverlayFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of ProjectedRasterOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'ProjectedRasterOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjectedRasterOverlayFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of Projection (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'Projection',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjectionFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of AltitudeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'AltitudeDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAltitudeDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of CompositeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'CompositeDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCompositeDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of CompositePrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'CompositePrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCompositePrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of ConstantDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'ConstantDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsConstantDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of DistanceDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'DistanceDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of DistanceToGlobeOverlayDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'DistanceToGlobeOverlayDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of DistanceToPositionDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'DistanceToPositionDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToPositionDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of DistanceToPrimitiveDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'DistanceToPrimitiveDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of DurationPathPrimitiveUpdatePolicy (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'DurationPathPrimitiveUpdatePolicy',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of GlobeImageOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'GlobeImageOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeImageOverlayInitializer)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of GraphicsFont (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'GraphicsFont',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGraphicsFontFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of GreatArcInterpolator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'GreatArcInterpolator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGreatArcInterpolatorFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of AlphaFromLuminanceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'AlphaFromLuminanceFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAlphaFromLuminanceFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of AlphaFromPixelFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'AlphaFromPixelFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAlphaFromPixelFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of AlphaFromRasterFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'AlphaFromRasterFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAlphaFromRasterFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of BandExtractFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'BandExtractFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBandExtractFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of BandOrderFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'BandOrderFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBandOrderFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of BlurFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'BlurFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBlurFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of BrightnessFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'BrightnessFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBrightnessFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of ColorToLuminanceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'ColorToLuminanceFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsColorToLuminanceFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of ContrastFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'ContrastFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsContrastFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of ConvolutionFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'ConvolutionFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsConvolutionFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of EdgeDetectFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'EdgeDetectFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsEdgeDetectFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of FilteringRasterStream (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'FilteringRasterStream',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsFilteringRasterStreamFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of FlipFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'FlipFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsFlipFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of GammaCorrectionFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'GammaCorrectionFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGammaCorrectionFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of GaussianBlurFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'GaussianBlurFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGaussianBlurFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of GradientDetectFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'GradientDetectFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGradientDetectFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of Jpeg2000Writer (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'Jpeg2000Writer',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsJpeg2000WriterInitializer)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of LevelsFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'LevelsFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsLevelsFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of ProjectionRasterStreamPluginActivator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'ProjectionRasterStreamPluginActivator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of Raster (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'Raster',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of RasterAttributes (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'RasterAttributes',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributesFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of RotateFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'RotateFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRotateFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of SequenceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'SequenceFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSequenceFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of SharpenFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'SharpenFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSharpenFilterFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of VideoStream (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'VideoStream',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsVideoStreamFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of MarkerBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'MarkerBatchPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of MarkerBatchPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'MarkerBatchPrimitiveOptionalParameters',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of MaximumCountPathPrimitiveUpdatePolicy (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'MaximumCountPathPrimitiveUpdatePolicy',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of ModelPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'ModelPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsModelPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of PathPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'PathPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of PixelSizeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'PixelSizeDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPixelSizeDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of PointBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'PointBatchPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPointBatchPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of PolylinePrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'PolylinePrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPolylinePrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of RasterImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'RasterImageGlobeOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterImageGlobeOverlayFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of RhumbLineInterpolator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'RhumbLineInterpolator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRhumbLineInterpolatorFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of SceneDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'SceneDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSceneDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of SceneManager (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'SceneManager',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSceneManagerInitializer)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of ScreenOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'ScreenOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of SolidPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'SolidPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSolidPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of SurfaceMeshPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'SurfaceMeshPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSurfaceMeshPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of TerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'TerrainOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTerrainOverlayInitializer)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of TextBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'TextBatchPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextBatchPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of TextBatchPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'TextBatchPrimitiveOptionalParameters',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of TextureMatrix (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'TextureMatrix',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureMatrixFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of TextureScreenOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'TextureScreenOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureScreenOverlayFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of TimeIntervalDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'TimeIntervalDisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTimeIntervalDisplayConditionFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of TriangleMeshPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'TriangleMeshPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTriangleMeshPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of TriangleMeshPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'TriangleMeshPrimitiveOptionalParameters',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Factory creates texture filters.')], HRESULT, 'TextureFilter2D',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2DFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Factory creates bounding spheres.')], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphereFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Factory creates path points.')], HRESULT, 'PathPoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPointFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of TextOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'TextOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextOverlayFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of AGICustomTerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'AGICustomTerrainOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAGICustomTerrainOverlayFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of AxesPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'AxesPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAxesPrimitiveFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Access global methods and properties of VectorPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)")], HRESULT, 'VectorPrimitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsVectorPrimitiveFactory)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsFactoryAndInitializers implementation
##class IAgStkGraphicsFactoryAndInitializers_Impl(object):
##    @property
##    def BoxTriangulator(self):
##        "Access global methods and properties of BoxTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def CylinderTriangulator(self):
##        "Access global methods and properties of CylinderTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def EllipsoidTriangulator(self):
##        "Access global methods and properties of EllipsoidTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ExtrudedPolylineTriangulator(self):
##        "Access global methods and properties of ExtrudedPolylineTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SurfaceExtentTriangulator(self):
##        "Access global methods and properties of SurfaceExtentTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SurfacePolygonTriangulator(self):
##        "Access global methods and properties of SurfacePolygonTriangulator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SurfaceShapes(self):
##        "Access global methods and properties of SurfaceShapes (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AGIProcessedImageGlobeOverlay(self):
##        "Access global methods and properties of AGIProcessedImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AGIProcessedTerrainOverlay(self):
##        "Access global methods and properties of AGIProcessedTerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AGIRoamImageGlobeOverlay(self):
##        "Access global methods and properties of AGIRoamImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def CustomImageGlobeOverlayPluginActivator(self):
##        "Access global methods and properties of CustomImageGlobeOverlayPluginActivator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def GeospatialImageGlobeOverlay(self):
##        "Access global methods and properties of GeospatialImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ProjectedRasterOverlay(self):
##        "Access global methods and properties of ProjectedRasterOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def Projection(self):
##        "Access global methods and properties of Projection (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AltitudeDisplayCondition(self):
##        "Access global methods and properties of AltitudeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def CompositeDisplayCondition(self):
##        "Access global methods and properties of CompositeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def CompositePrimitive(self):
##        "Access global methods and properties of CompositePrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ConstantDisplayCondition(self):
##        "Access global methods and properties of ConstantDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def DistanceDisplayCondition(self):
##        "Access global methods and properties of DistanceDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def DistanceToGlobeOverlayDisplayCondition(self):
##        "Access global methods and properties of DistanceToGlobeOverlayDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def DistanceToPositionDisplayCondition(self):
##        "Access global methods and properties of DistanceToPositionDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def DistanceToPrimitiveDisplayCondition(self):
##        "Access global methods and properties of DistanceToPrimitiveDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def DurationPathPrimitiveUpdatePolicy(self):
##        "Access global methods and properties of DurationPathPrimitiveUpdatePolicy (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def GlobeImageOverlay(self):
##        "Access global methods and properties of GlobeImageOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def GraphicsFont(self):
##        "Access global methods and properties of GraphicsFont (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def GreatArcInterpolator(self):
##        "Access global methods and properties of GreatArcInterpolator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AlphaFromLuminanceFilter(self):
##        "Access global methods and properties of AlphaFromLuminanceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AlphaFromPixelFilter(self):
##        "Access global methods and properties of AlphaFromPixelFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AlphaFromRasterFilter(self):
##        "Access global methods and properties of AlphaFromRasterFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def BandExtractFilter(self):
##        "Access global methods and properties of BandExtractFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def BandOrderFilter(self):
##        "Access global methods and properties of BandOrderFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def BlurFilter(self):
##        "Access global methods and properties of BlurFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def BrightnessFilter(self):
##        "Access global methods and properties of BrightnessFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ColorToLuminanceFilter(self):
##        "Access global methods and properties of ColorToLuminanceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ContrastFilter(self):
##        "Access global methods and properties of ContrastFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ConvolutionFilter(self):
##        "Access global methods and properties of ConvolutionFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def EdgeDetectFilter(self):
##        "Access global methods and properties of EdgeDetectFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def FilteringRasterStream(self):
##        "Access global methods and properties of FilteringRasterStream (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def FlipFilter(self):
##        "Access global methods and properties of FlipFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def GammaCorrectionFilter(self):
##        "Access global methods and properties of GammaCorrectionFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def GaussianBlurFilter(self):
##        "Access global methods and properties of GaussianBlurFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def GradientDetectFilter(self):
##        "Access global methods and properties of GradientDetectFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def Jpeg2000Writer(self):
##        "Access global methods and properties of Jpeg2000Writer (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def LevelsFilter(self):
##        "Access global methods and properties of LevelsFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ProjectionRasterStreamPluginActivator(self):
##        "Access global methods and properties of ProjectionRasterStreamPluginActivator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def Raster(self):
##        "Access global methods and properties of Raster (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def RasterAttributes(self):
##        "Access global methods and properties of RasterAttributes (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def RotateFilter(self):
##        "Access global methods and properties of RotateFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SequenceFilter(self):
##        "Access global methods and properties of SequenceFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SharpenFilter(self):
##        "Access global methods and properties of SharpenFilter (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def VideoStream(self):
##        "Access global methods and properties of VideoStream (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def MarkerBatchPrimitive(self):
##        "Access global methods and properties of MarkerBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def MarkerBatchPrimitiveOptionalParameters(self):
##        "Access global methods and properties of MarkerBatchPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def MaximumCountPathPrimitiveUpdatePolicy(self):
##        "Access global methods and properties of MaximumCountPathPrimitiveUpdatePolicy (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ModelPrimitive(self):
##        "Access global methods and properties of ModelPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def PathPrimitive(self):
##        "Access global methods and properties of PathPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def PixelSizeDisplayCondition(self):
##        "Access global methods and properties of PixelSizeDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def PointBatchPrimitive(self):
##        "Access global methods and properties of PointBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def PolylinePrimitive(self):
##        "Access global methods and properties of PolylinePrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def RasterImageGlobeOverlay(self):
##        "Access global methods and properties of RasterImageGlobeOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def RhumbLineInterpolator(self):
##        "Access global methods and properties of RhumbLineInterpolator (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SceneDisplayCondition(self):
##        "Access global methods and properties of SceneDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SceneManager(self):
##        "Access global methods and properties of SceneManager (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def ScreenOverlay(self):
##        "Access global methods and properties of ScreenOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SolidPrimitive(self):
##        "Access global methods and properties of SolidPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def SurfaceMeshPrimitive(self):
##        "Access global methods and properties of SurfaceMeshPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TerrainOverlay(self):
##        "Access global methods and properties of TerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TextBatchPrimitive(self):
##        "Access global methods and properties of TextBatchPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TextBatchPrimitiveOptionalParameters(self):
##        "Access global methods and properties of TextBatchPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TextureMatrix(self):
##        "Access global methods and properties of TextureMatrix (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TextureScreenOverlay(self):
##        "Access global methods and properties of TextureScreenOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TimeIntervalDisplayCondition(self):
##        "Access global methods and properties of TimeIntervalDisplayCondition (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TriangleMeshPrimitive(self):
##        "Access global methods and properties of TriangleMeshPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TriangleMeshPrimitiveOptionalParameters(self):
##        "Access global methods and properties of TriangleMeshPrimitiveOptionalParameters (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def TextureFilter2D(self):
##        'Factory creates texture filters.'
##        #return ppRetVal
##
##    @property
##    def BoundingSphere(self):
##        'Factory creates bounding spheres.'
##        #return ppRetVal
##
##    @property
##    def PathPoint(self):
##        'Factory creates path points.'
##        #return ppRetVal
##
##    @property
##    def TextOverlay(self):
##        "Access global methods and properties of TextOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AGICustomTerrainOverlay(self):
##        "Access global methods and properties of AGICustomTerrainOverlay (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def AxesPrimitive(self):
##        "Access global methods and properties of AxesPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##
##    @property
##    def VectorPrimitive(self):
##        "Access global methods and properties of VectorPrimitive (what's known as static properties, static methods and constructors in languages such as C++, C#, etc.)"
##        #return ppRetVal
##

IAgStkGraphicsAlphaFromPixelFilter._methods_ = [
]
################################################################
## code template for IAgStkGraphicsAlphaFromPixelFilter implementation
##class IAgStkGraphicsAlphaFromPixelFilter_Impl(object):

class _IAgStkGraphicsTextBatchPrimitiveFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTextBatchPrimitiveFactory'
    _iid_ = GUID('{92460A04-1900-4108-BA29-D27B8B1B2973}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsTextBatchPrimitiveFactory._methods_ = [
    COMMETHOD([dispid(8601), helpstring('Initializes a marker batch primitive with the specified font. This is equivalent to constructing a text batch with the specified font and a set hint of Frequent.')], HRESULT, 'InitializeWithGraphicsFont',
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(8602), helpstring('Initializes a marker batch primitive with the specified font and setHint.')], HRESULT, 'InitializeWithGraphicsFontAndSetHint',
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([dispid(8603), helpstring('Initializes a text batch primitive with the specified font and setHint, optimized for 2d screen space rendering.')], HRESULT, 'InitializeWithGraphicsFontAndSetHint2d',
              ( ['in'], POINTER(IAgStkGraphicsGraphicsFont), 'Font' ),
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['in'], VARIANT_BOOL, 'RenderInScreenSpace' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextBatchPrimitive)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTextBatchPrimitiveFactory implementation
##class _IAgStkGraphicsTextBatchPrimitiveFactory_Impl(object):
##    def InitializeWithGraphicsFont(self, Font):
##        'Initializes a marker batch primitive with the specified font. This is equivalent to constructing a text batch with the specified font and a set hint of Frequent.'
##        #return ppRetVal
##
##    def InitializeWithGraphicsFontAndSetHint(self, Font, SetHint):
##        'Initializes a marker batch primitive with the specified font and setHint.'
##        #return ppRetVal
##
##    def InitializeWithGraphicsFontAndSetHint2d(self, Font, SetHint, RenderInScreenSpace):
##        'Initializes a text batch primitive with the specified font and setHint, optimized for 2d screen space rendering.'
##        #return ppRetVal
##

class AgStkGraphicsPathPoint(CoClass):
    'Represents a path point used in conjunction with the Path Primitive.'
    _reg_clsid_ = GUID('{8E4BE765-6A2B-4118-B17B-2252073C4010}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsPathPoint._com_interfaces_ = [_IAgStkGraphicsPathPoint, IAgStkGraphicsPathPoint]

class AgStkGraphicsImageCollection(CoClass):
    'A collection of globe image overlay objects.'
    _reg_clsid_ = GUID('{066F5C95-C5B3-4BD3-929B-80DA9B6F3392}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsImageCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsImageCollection'
    _iid_ = GUID('{83DCE447-FA4F-4CBD-89C7-12E2394FDDEB}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsImageCollection._com_interfaces_ = [_IAgStkGraphicsImageCollection, IAgStkGraphicsImageCollection]
AgStkGraphicsImageCollection._outgoing_interfaces_ = [IAgStkGraphicsImageCollectionEvents]

class AgStkGraphicsRasterAttributes(CoClass):
    'The attributes describing a raster dataset. raster attributes define the memory layout of a raster, and includes properties defining the order of each raster band that the raster contains, as specified by the raster format...'
    _reg_clsid_ = GUID('{409028D0-8BDB-4E7A-B0DF-4D1AA6558A54}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsRasterAttributes._com_interfaces_ = [_IAgStkGraphicsRasterAttributes, IAgStkGraphicsRasterAttributes]

class AgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory(CoClass):
    'The Activator class provides methods to load COM plugins that implement custom image globe overlays. For more information about custom image globe overlays, see the STK Programming Interface.'
    _reg_clsid_ = GUID('{D082DD5A-BD02-4C6E-9DEB-F117B29DD4EB}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._com_interfaces_ = [_IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory, IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory]

class _IAgStkGraphicsRhumbLineInterpolatorFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsRhumbLineInterpolatorFactory'
    _iid_ = GUID('{3E8FE3B1-1C3F-431F-8680-E20EEAFDF3C6}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsRhumbLineInterpolatorFactory._methods_ = [
    COMMETHOD([dispid(8301), helpstring('Initializes a default rhumb line interpolator. This is equivalent to constructing a rhumb line interpolator with a central body equal to an instance of earth central body and a granularity of 1 degree.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRhumbLineInterpolator)), 'ppRetVal' )),
    COMMETHOD([dispid(8302), helpstring('Initializes a rhumb line interpolator with the specified centralBody and a granularity of 1 degree.')], HRESULT, 'InitializeWithCentralBody',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRhumbLineInterpolator)), 'ppRetVal' )),
    COMMETHOD([dispid(8303), helpstring('Initializes a rhumb line interpolator with the specified centralBody and granularity.')], HRESULT, 'InitializeWithCentralBodyAndGranularity',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], c_double, 'Granularity' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRhumbLineInterpolator)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsRhumbLineInterpolatorFactory implementation
##class _IAgStkGraphicsRhumbLineInterpolatorFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default rhumb line interpolator. This is equivalent to constructing a rhumb line interpolator with a central body equal to an instance of earth central body and a granularity of 1 degree.'
##        #return ppRetVal
##
##    def InitializeWithCentralBody(self, CentralBody):
##        'Initializes a rhumb line interpolator with the specified centralBody and a granularity of 1 degree.'
##        #return ppRetVal
##
##    def InitializeWithCentralBodyAndGranularity(self, CentralBody, Granularity):
##        'Initializes a rhumb line interpolator with the specified centralBody and granularity.'
##        #return ppRetVal
##

IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._methods_ = [
    COMMETHOD([helpstring("Initializes a default distance to globe overlay display condition. With this constructor, an object is always <topic name='Glossary' anchor='Render'>rendered</topic> regardless of the camera's distance to the globe overlay.")], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a distance display condition with the globe overlay and the inclusive distance interval [minimumDistance, maximumDistance]...')], HRESULT, 'InitializeWithDistances',
              ( ['in'], POINTER(IAgStkGraphicsGlobeOverlay), 'GlobeOverlay' ),
              ( ['in'], c_double, 'MinimumDistance' ),
              ( ['in'], c_double, 'MaximumDistance' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory implementation
##class IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory_Impl(object):
##    def Initialize(self):
##        "Initializes a default distance to globe overlay display condition. With this constructor, an object is always <topic name='Glossary' anchor='Render'>rendered</topic> regardless of the camera's distance to the globe overlay."
##        #return ppRetVal
##
##    def InitializeWithDistances(self, GlobeOverlay, MinimumDistance, MaximumDistance):
##        'Initializes a distance display condition with the globe overlay and the inclusive distance interval [minimumDistance, maximumDistance]...'
##        #return ppRetVal
##

IAgStkGraphicsConvolutionFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the divisor for the result of the convolution kernel operation.')], HRESULT, 'Divisor',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the divisor for the result of the convolution kernel operation.')], HRESULT, 'Divisor',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.')], HRESULT, 'Offset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.')], HRESULT, 'Offset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...')], HRESULT, 'Kernel',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...')], HRESULT, 'Kernel',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsConvolutionFilter implementation
##class IAgStkGraphicsConvolutionFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the divisor for the result of the convolution kernel operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the divisor for the result of the convolution kernel operation.'
##    Divisor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'
##    Offset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'
##    Kernel = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsPathPointFactory(CoClass):
    'Factory creates path points.'
    _reg_clsid_ = GUID('{B9F4D355-F31B-4ED5-8631-337FFFC32DF8}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsPathPointFactory._com_interfaces_ = [_IAgStkGraphicsPathPointFactory, IAgStkGraphicsPathPointFactory]

class AgStkGraphicsAlphaFromLuminanceFilter(CoClass):
    "Adds an alpha band to the source raster derived from the luminance of the raster's color bands."
    _reg_clsid_ = GUID('{87C1BF94-457E-4AA2-B4D7-D6A22CF18371}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsAlphaFromLuminanceFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAlphaFromLuminanceFilter'
    _iid_ = GUID('{0375BD22-C555-41F2-B5F5-6505CAF4A015}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsAlphaFromLuminanceFilter._com_interfaces_ = [_IAgStkGraphicsAlphaFromLuminanceFilter, IAgStkGraphicsAlphaFromLuminanceFilter, IAgStkGraphicsRasterFilter]

class AgStkGraphicsRasterFilter(CoClass):
    'A filter for processing raster datasets. RasterFilter is the base class for all raster filters...'
    _reg_clsid_ = GUID('{7A7D2E68-A56F-415B-ACA2-EFDE4BE4D8C3}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsRasterFilter._com_interfaces_ = [_IAgStkGraphicsRasterFilter, IAgStkGraphicsRasterFilter]

_IAgStkGraphicsProjectionStream._methods_ = [
    COMMETHOD([dispid(9301), helpstring("Gets or sets the cartesian defining the position of the projection in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(9301), helpstring("Gets or sets the cartesian defining the position of the projection in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."), 'propput'], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(9302), helpstring("Gets or sets the unit quaternion defining the orientation of the projection in the central body's fixed reference frame."), 'propget'], HRESULT, 'Orientation',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation)), 'ppRetVal' )),
    COMMETHOD([dispid(9302), helpstring("Gets or sets the unit quaternion defining the orientation of the projection in the central body's fixed reference frame."), 'propput'], HRESULT, 'Orientation',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgOrientation), 'ppRetVal' )),
    COMMETHOD([dispid(9303), helpstring('Gets or sets the horizontal field of view associated with the projection.'), 'propget'], HRESULT, 'FieldOfViewHorizontal',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(9303), helpstring('Gets or sets the horizontal field of view associated with the projection.'), 'propput'], HRESULT, 'FieldOfViewHorizontal',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(9304), helpstring('Gets or sets the vertical field of view associated with the projection.'), 'propget'], HRESULT, 'FieldOfViewVertical',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(9304), helpstring('Gets or sets the vertical field of view associated with the projection.'), 'propput'], HRESULT, 'FieldOfViewVertical',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(9305), helpstring('Gets or sets the near plane associated with the projection.'), 'propget'], HRESULT, 'NearPlane',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(9305), helpstring('Gets or sets the near plane associated with the projection.'), 'propput'], HRESULT, 'NearPlane',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(9306), helpstring('Gets or sets the far plane associated with the projection.'), 'propget'], HRESULT, 'FarPlane',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(9306), helpstring('Gets or sets the far plane associated with the projection.'), 'propput'], HRESULT, 'FarPlane',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(24201), helpstring('Gets or sets the update delta of the projection stream in seconds. The update delta defines the interval at which the Update method will be called...'), 'propget'], HRESULT, 'UpdateDelta',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(24201), helpstring('Gets or sets the update delta of the projection stream in seconds. The update delta defines the interval at which the Update method will be called...'), 'propput'], HRESULT, 'UpdateDelta',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(24202), helpstring('When overridden in a derived class, updates the projection data associated with the projection stream at the specified time. When the Update method is called, the projection stream contains the current projection data...')], HRESULT, 'Update',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'Time' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'NextTime' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsProjectionStream implementation
##class _IAgStkGraphicsProjectionStream_Impl(object):
##    def _get(self):
##        "Gets or sets the cartesian defining the position of the projection in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the cartesian defining the position of the projection in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the unit quaternion defining the orientation of the projection in the central body's fixed reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the unit quaternion defining the orientation of the projection in the central body's fixed reference frame."
##    Orientation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the horizontal field of view associated with the projection.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the horizontal field of view associated with the projection.'
##    FieldOfViewHorizontal = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the vertical field of view associated with the projection.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the vertical field of view associated with the projection.'
##    FieldOfViewVertical = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the near plane associated with the projection.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the near plane associated with the projection.'
##    NearPlane = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the far plane associated with the projection.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the far plane associated with the projection.'
##    FarPlane = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the update delta of the projection stream in seconds. The update delta defines the interval at which the Update method will be called...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the update delta of the projection stream in seconds. The update delta defines the interval at which the Update method will be called...'
##    UpdateDelta = property(_get, _set, doc = _set.__doc__)
##
##    def Update(self, Time, NextTime):
##        'When overridden in a derived class, updates the projection data associated with the projection stream at the specified time. When the Update method is called, the projection stream contains the current projection data...'
##        #return pRetVal
##

class AgStkGraphicsGeospatialImageGlobeOverlayFactory(CoClass):
    "A globe image overlay for handling <a href='http://www.jpeg.org/jpeg2000/'>JPEG 2000</a> (.jp2), ECW (.ecw), ECWP, and MrSid (.sid) image formats in the WGS84 geographic projection."
    _reg_clsid_ = GUID('{103B647C-7326-4AC7-BE4A-4C1D7C079200}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsGeospatialImageGlobeOverlayFactory._com_interfaces_ = [_IAgStkGraphicsGeospatialImageGlobeOverlayFactory, IAgStkGraphicsGeospatialImageGlobeOverlayFactory]

IAgStkGraphicsAlphaFromRasterFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAlphaFromRasterFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with the raster that the source raster will use to derive an alpha band.')], HRESULT, 'InitializeWithRaster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAlphaFromRasterFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsAlphaFromRasterFilterFactory implementation
##class IAgStkGraphicsAlphaFromRasterFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithRaster(self, Raster):
##        'Initializes a new instance with the raster that the source raster will use to derive an alpha band.'
##        #return ppRetVal
##

class _IAgStkGraphicsSequenceFilter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsSequenceFilter'
    _iid_ = GUID('{562F055D-D965-400C-A082-AA8CDF90BED1}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsSequenceFilter._methods_ = [
    COMMETHOD([dispid(21501), helpstring('Gets or sets whether to continue applying filters in the sequence regardless of individual filter failures. When set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied.'), 'propget'], HRESULT, 'ContinueOnFailure',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(21501), helpstring('Gets or sets whether to continue applying filters in the sequence regardless of individual filter failures. When set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied.'), 'propput'], HRESULT, 'ContinueOnFailure',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(21502), helpstring('Gets the number of filters in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(21503), helpstring('Adds a filter to the sequence.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' )),
    COMMETHOD([dispid(21504), helpstring('Removes a filter from the sequence.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' )),
    COMMETHOD([dispid(21505), helpstring('Clears all filters from the sequence.')], HRESULT, 'Clear'),
    COMMETHOD([dispid(21506), helpstring('Returns true if the sequence contains the filter.')], HRESULT, 'Contains',
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSequenceFilter implementation
##class _IAgStkGraphicsSequenceFilter_Impl(object):
##    def _get(self):
##        'Gets or sets whether to continue applying filters in the sequence regardless of individual filter failures. When set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether to continue applying filters in the sequence regardless of individual filter failures. When set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied.'
##    ContinueOnFailure = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Count(self):
##        'Gets the number of filters in the collection.'
##        #return pRetVal
##
##    def Add(self, Filter):
##        'Adds a filter to the sequence.'
##        #return 
##
##    def Remove(self, Filter):
##        'Removes a filter from the sequence.'
##        #return 
##
##    def Clear(self):
##        'Clears all filters from the sequence.'
##        #return 
##
##    def Contains(self, Filter):
##        'Returns true if the sequence contains the filter.'
##        #return pRetVal
##

IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the maximum number of points in the path.')], HRESULT, 'MaximumCount',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the maximum number of points in the path.')], HRESULT, 'MaximumCount',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets where the positions on the path are removed from.')], HRESULT, 'RemoveLocation',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPathPrimitiveRemoveLocation), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets where the positions on the path are removed from.')], HRESULT, 'RemoveLocation',
              ( ['in'], AgEStkGraphicsPathPrimitiveRemoveLocation, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy implementation
##class IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy_Impl(object):
##    def _get(self):
##        'Gets or sets the maximum number of points in the path.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum number of points in the path.'
##    MaximumCount = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets where the positions on the path are removed from.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets where the positions on the path are removed from.'
##    RemoveLocation = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsPointBatchPrimitive._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets whether an outline is rendered around each point in the batch.')], HRESULT, 'DisplayOutline',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether an outline is rendered around each point in the batch.')], HRESULT, 'DisplayOutline',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the outline's color.")], HRESULT, 'OutlineColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the outline's color.")], HRESULT, 'OutlineColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.')], HRESULT, 'OutlineTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.')], HRESULT, 'OutlineTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the size, in pixels, of the outline around each point in the batch.')], HRESULT, 'OutlineWidth',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the size, in pixels, of the outline around each point in the batch.')], HRESULT, 'OutlineWidth',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the size, in pixels, of each point in the point batch.')], HRESULT, 'PixelSize',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the size, in pixels, of each point in the point batch.')], HRESULT, 'PixelSize',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the minimum pixel size supported by the video card.')], HRESULT, 'MinimumPixelSizeSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the maximum pixel size supported by the video card.')], HRESULT, 'MaximumPixelSizeSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets a distance display condition that is evaluated per point in the point batch during rendering. This is different than display condition, which is evaluated once for the entire point batch...')], HRESULT, 'DistanceDisplayConditionPerPoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceDisplayCondition)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets a distance display condition that is evaluated per point in the point batch during rendering. This is different than display condition, which is evaluated once for the entire point batch...')], HRESULT, 'DistanceDisplayConditionPerPoint',
              ( ['in'], POINTER(IAgStkGraphicsDistanceDisplayCondition), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with.")], HRESULT, 'SetHint',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSetHint), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets whether individual point indices will be included in the pick results returned from the scene's Pick method. Each point index that is picked will be returned as a batch primitive index.")], HRESULT, 'PerItemPickingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets whether individual point indices will be included in the pick results returned from the scene's Pick method. Each point index that is picked will be returned as a batch primitive index.")], HRESULT, 'PerItemPickingEnabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([helpstring("Defines the positions of points in a point batch. The points are rendered in the primitive's reference frame.")], HRESULT, 'Set',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' )),
    COMMETHOD([helpstring("Defines the positions and colors of points in a point batch. The points are rendered in the primitive's reference frame.")], HRESULT, 'SetWithColors',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' )),
    COMMETHOD([helpstring("Defines the positions and colors of points in a point batch. The points are rendered in the primitive's reference frame. renderPassHint is provided for efficiency.")], HRESULT, 'SetWithColorsAndRenderPass',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([helpstring('For convenience. Defines the positions of points in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling Set.')], HRESULT, 'SetCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' )),
    COMMETHOD([helpstring('For convenience. Defines the positions and colors of points in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetCartographicWithColors',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' )),
    COMMETHOD([helpstring('For convenience. Defines the positions and colors of points in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. renderPassHint is provided for efficiency...')], HRESULT, 'SetCartographicWithColorsAndRenderPass',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([helpstring('Updates a subset of positions in a point batch.')], HRESULT, 'SetPartial',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring('Updates a subset of positions in a point batch.')], HRESULT, 'SetPartialWithIndicesOrder',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' )),
    COMMETHOD([helpstring('Updates a subset of positions and/or colors in a point batch.')], HRESULT, 'SetPartialWithColors',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring('Updates a subset of positions and/or colors in a point batch.')], HRESULT, 'SetPartialWithColorsIndicesOrderAndRenderPass',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([helpstring('For convenience. Updates a subset of positions in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling SetPartial')], HRESULT, 'SetPartialCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring('For convenience. Updates a subset of positions in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling SetPartial')], HRESULT, 'SetPartialCartographicWithIndicesOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' )),
    COMMETHOD([helpstring('For convenience. Updates a subset of positions and/or colors in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithColors',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring('For convenience. Updates a subset of positions and/or colors in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithColorsIndicesOrderAndRenderPass',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether individual points will be clipped by the central body.')], HRESULT, 'CentralBodyClipped',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether individual points will be clipped by the central body.')], HRESULT, 'CentralBodyClipped',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsPointBatchPrimitive implementation
##class IAgStkGraphicsPointBatchPrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets whether an outline is rendered around each point in the batch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether an outline is rendered around each point in the batch.'
##    DisplayOutline = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the outline's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the outline's color."
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.'
##    OutlineTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the size, in pixels, of the outline around each point in the batch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the size, in pixels, of the outline around each point in the batch.'
##    OutlineWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the size, in pixels, of each point in the point batch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the size, in pixels, of each point in the point batch.'
##    PixelSize = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumPixelSizeSupported(self):
##        'Gets the minimum pixel size supported by the video card.'
##        #return pRetVal
##
##    @property
##    def MaximumPixelSizeSupported(self):
##        'Gets the maximum pixel size supported by the video card.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets a distance display condition that is evaluated per point in the point batch during rendering. This is different than display condition, which is evaluated once for the entire point batch...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets a distance display condition that is evaluated per point in the point batch during rendering. This is different than display condition, which is evaluated once for the entire point batch...'
##    DistanceDisplayConditionPerPoint = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SetHint(self):
##        "Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."
##        #return pRetVal
##
##    def _get(self):
##        "Gets or sets whether individual point indices will be included in the pick results returned from the scene's Pick method. Each point index that is picked will be returned as a batch primitive index."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether individual point indices will be included in the pick results returned from the scene's Pick method. Each point index that is picked will be returned as a batch primitive index."
##    PerItemPickingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def Set(self, Positions):
##        "Defines the positions of points in a point batch. The points are rendered in the primitive's reference frame."
##        #return 
##
##    def SetWithColors(self, Positions, Colors):
##        "Defines the positions and colors of points in a point batch. The points are rendered in the primitive's reference frame."
##        #return 
##
##    def SetWithColorsAndRenderPass(self, Positions, Colors, RenderPassHint):
##        "Defines the positions and colors of points in a point batch. The points are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."
##        #return 
##
##    def SetCartographic(self, CentralBody, Positions):
##        'For convenience. Defines the positions of points in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling Set.'
##        #return 
##
##    def SetCartographicWithColors(self, CentralBody, Positions, Colors):
##        'For convenience. Defines the positions and colors of points in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetCartographicWithColorsAndRenderPass(self, CentralBody, Positions, Colors, RenderPassHint):
##        'For convenience. Defines the positions and colors of points in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. renderPassHint is provided for efficiency...'
##        #return 
##
##    def SetPartial(self, Positions, Indices):
##        'Updates a subset of positions in a point batch.'
##        #return 
##
##    def SetPartialWithIndicesOrder(self, Positions, Indices, IndicesOrderHint):
##        'Updates a subset of positions in a point batch.'
##        #return 
##
##    def SetPartialWithColors(self, Positions, Colors, Indices):
##        'Updates a subset of positions and/or colors in a point batch.'
##        #return 
##
##    def SetPartialWithColorsIndicesOrderAndRenderPass(self, Positions, Colors, Indices, IndicesOrderHint, RenderPassHint):
##        'Updates a subset of positions and/or colors in a point batch.'
##        #return 
##
##    def SetPartialCartographic(self, CentralBody, Positions, Indices):
##        'For convenience. Updates a subset of positions in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling SetPartial'
##        #return 
##
##    def SetPartialCartographicWithIndicesOrder(self, CentralBody, Positions, Indices, IndicesOrderHint):
##        'For convenience. Updates a subset of positions in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling SetPartial'
##        #return 
##
##    def SetPartialCartographicWithColors(self, CentralBody, Positions, Colors, Indices):
##        'For convenience. Updates a subset of positions and/or colors in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartialCartographicWithColorsIndicesOrderAndRenderPass(self, CentralBody, Positions, Colors, Indices, IndicesOrderHint, RenderPassHint):
##        'For convenience. Updates a subset of positions and/or colors in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def _get(self):
##        'Gets or sets whether individual points will be clipped by the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether individual points will be clipped by the central body.'
##    CentralBodyClipped = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsBoundingSphere(CoClass):
    'A sphere that encapsulates an object.'
    _reg_clsid_ = GUID('{81FC7252-98A3-4CB7-9AE7-64217F66BA78}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
class _IAgStkGraphicsBoundingSphere(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsBoundingSphere'
    _iid_ = GUID('{1C768789-45E4-4108-B666-4585D76DC1AD}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
AgStkGraphicsBoundingSphere._com_interfaces_ = [_IAgStkGraphicsBoundingSphere, IAgStkGraphicsBoundingSphere]

class AgStkGraphicsAlphaFromPixelFilter(CoClass):
    'Adds an alpha band to the source raster based on the value of its first pixel. All pixels in the source raster that are the same color as the first pixel will be made transparent.'
    _reg_clsid_ = GUID('{35AD06E8-947E-41D3-A8A9-625EA9A3E0C5}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsAlphaFromPixelFilter._com_interfaces_ = [_IAgStkGraphicsAlphaFromPixelFilter, IAgStkGraphicsAlphaFromPixelFilter, IAgStkGraphicsRasterFilter]

class AgStkGraphicsRasterStream(CoClass):
    'A raster, the data of which, is updated dynamically at the specified update delta. The class can be used to stream video and other dynamic raster data to textures and other raster clients...'
    _reg_clsid_ = GUID('{8D14C4D9-31C4-4565-A72C-F9AA6610B019}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsRasterStream._com_interfaces_ = [_IAgStkGraphicsRasterStream, IAgStkGraphicsRasterStream, IAgStkGraphicsRaster]

class AgStkGraphicsProjectedRasterOverlayFactory(CoClass):
    'A globe image overlay which projects a raster onto the terrain or surface of the central body. You can also enable projection onto models by setting projected raster model projection to true for a Scene...'
    _reg_clsid_ = GUID('{0DF1A8AE-8A31-49CC-9361-8E343D29F389}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsProjectedRasterOverlayFactory._com_interfaces_ = [_IAgStkGraphicsProjectedRasterOverlayFactory, IAgStkGraphicsProjectedRasterOverlayFactory]

IAgStkGraphicsLighting._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets whether or not lighting is enabled.')], HRESULT, 'Enabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether or not lighting is enabled.')], HRESULT, 'Enabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the ambient intensity throughout the scene.')], HRESULT, 'AmbientIntensity',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the ambient intensity throughout the scene.')], HRESULT, 'AmbientIntensity',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the diffuse intensity from the sun.')], HRESULT, 'DiffuseIntensity',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the diffuse intensity from the sun.')], HRESULT, 'DiffuseIntensity',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the overall brightness for the night light's image overlay, night overlay.")], HRESULT, 'NightLightsIntensity',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the overall brightness for the night light's image overlay, night overlay.")], HRESULT, 'NightLightsIntensity',
              ( ['in'], c_float, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsLighting implementation
##class IAgStkGraphicsLighting_Impl(object):
##    def _get(self):
##        'Gets or sets whether or not lighting is enabled.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether or not lighting is enabled.'
##    Enabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the ambient intensity throughout the scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the ambient intensity throughout the scene.'
##    AmbientIntensity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the diffuse intensity from the sun.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the diffuse intensity from the sun.'
##    DiffuseIntensity = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the overall brightness for the night light's image overlay, night overlay."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overall brightness for the night light's image overlay, night overlay."
##    NightLightsIntensity = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsTextureMatrixFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a texture matrix to the identity matrix.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureMatrix)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a texture matrix. The subscripts define [row][column].')], HRESULT, 'InitializeByValues',
              ( ['in'], c_float, 'M11' ),
              ( ['in'], c_float, 'M12' ),
              ( ['in'], c_float, 'M13' ),
              ( ['in'], c_float, 'M14' ),
              ( ['in'], c_float, 'M21' ),
              ( ['in'], c_float, 'M22' ),
              ( ['in'], c_float, 'M23' ),
              ( ['in'], c_float, 'M24' ),
              ( ['in'], c_float, 'M31' ),
              ( ['in'], c_float, 'M32' ),
              ( ['in'], c_float, 'M33' ),
              ( ['in'], c_float, 'M34' ),
              ( ['in'], c_float, 'M41' ),
              ( ['in'], c_float, 'M42' ),
              ( ['in'], c_float, 'M43' ),
              ( ['in'], c_float, 'M44' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureMatrix)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a texture matrix from a matrix. The upper left 2x2 matrix defines rotation and scaling. The top two elements of the last column define translation.')], HRESULT, 'InitializeWithAffineTransform',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Matrix' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureMatrix)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a texture matrix from texture corner points. Normally, a texture is mapped such that the lower left corner is texture coordinate (0, 0), the lower right is (1, 0), the upper right is (1, 1), and the upper left is (0, 1)...')], HRESULT, 'InitializeWithRectangles',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Corner0' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Corner1' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Corner2' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Corner3' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureMatrix)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTextureMatrixFactory implementation
##class IAgStkGraphicsTextureMatrixFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a texture matrix to the identity matrix.'
##        #return ppRetVal
##
##    def InitializeByValues(self, M11, M12, M13, M14, M21, M22, M23, M24, M31, M32, M33, M34, M41, M42, M43, M44):
##        'Initializes a texture matrix. The subscripts define [row][column].'
##        #return ppRetVal
##
##    def InitializeWithAffineTransform(self, Matrix):
##        'Initializes a texture matrix from a matrix. The upper left 2x2 matrix defines rotation and scaling. The top two elements of the last column define translation.'
##        #return ppRetVal
##
##    def InitializeWithRectangles(self, Corner0, Corner1, Corner2, Corner3):
##        'Initializes a texture matrix from texture corner points. Normally, a texture is mapped such that the lower left corner is texture coordinate (0, 0), the lower right is (1, 0), the upper right is (1, 1), and the upper left is (0, 1)...'
##        #return ppRetVal
##

IAgStkGraphicsBoxTriangulatorInitializer._methods_ = [
    COMMETHOD([helpstring('Computes the triangulation for a box of the specified size, centered at the origin.')], HRESULT, 'Compute',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Size' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSolidTriangulatorResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsBoxTriangulatorInitializer implementation
##class IAgStkGraphicsBoxTriangulatorInitializer_Impl(object):
##    def Compute(self, Size):
##        'Computes the triangulation for a box of the specified size, centered at the origin.'
##        #return ppRetVal
##

class _IAgStkGraphicsAlphaFromLuminanceFilterFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsAlphaFromLuminanceFilterFactory'
    _iid_ = GUID('{1F130A3D-9187-4FC1-AB93-AD1648C1BF3B}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsAlphaFromLuminanceFilterFactory._methods_ = [
    COMMETHOD([dispid(21801), helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAlphaFromLuminanceFilter)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsAlphaFromLuminanceFilterFactory implementation
##class _IAgStkGraphicsAlphaFromLuminanceFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##

class AgStkGraphicsBoundingSphereFactory(CoClass):
    'Creates bounding spheres.'
    _reg_clsid_ = GUID('{FE586A48-A273-4577-8403-6ACC7E948169}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsBoundingSphereFactory._com_interfaces_ = [_IAgStkGraphicsBoundingSphereFactory, IAgStkGraphicsBoundingSphereFactory]

class _IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    'Hidden interface for IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory'
    _iid_ = GUID('{F3F1AAB9-A67B-4EAB-912E-4099608EC970}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']
_IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory._methods_ = [
    COMMETHOD([dispid(8701), helpstring('Initializes default text batch primitive optional parameters.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory implementation
##class _IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory_Impl(object):
##    def Initialize(self):
##        'Initializes default text batch primitive optional parameters.'
##        #return ppRetVal
##

class AgStkGraphicsAlphaFromRasterFilter(CoClass):
    'Adds an alpha band to the source raster derived from the color bands or alpha of another raster. This filter can be used to apply an alpha mask to the source raster.'
    _reg_clsid_ = GUID('{C925D56F-7286-4FE5-8EE5-72009682D84E}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsAlphaFromRasterFilter._com_interfaces_ = [_IAgStkGraphicsAlphaFromRasterFilter, IAgStkGraphicsAlphaFromRasterFilter, IAgStkGraphicsRasterFilter]

class AgStkGraphicsRotateFilter(CoClass):
    'Rotates the source raster clockwise by the specified angle.'
    _reg_clsid_ = GUID('{C83AB663-4646-4DBA-9C3D-C68180DEABA9}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsRotateFilter._com_interfaces_ = [_IAgStkGraphicsRotateFilter, IAgStkGraphicsRotateFilter, IAgStkGraphicsRasterFilter]

IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the globe overlay associated with this instance.')], HRESULT, 'GlobeOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeOverlay)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the globe overlay associated with this instance.')], HRESULT, 'GlobeOverlay',
              ( ['in'], POINTER(IAgStkGraphicsGlobeOverlay), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the minimum distance, in meters, of the inclusive distance interval.')], HRESULT, 'MinimumDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the minimum distance, in meters, of the inclusive distance interval.')], HRESULT, 'MinimumDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the squared minimum distance, in meters, of the inclusive distance interval.')], HRESULT, 'MinimumDistanceSquared',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.')], HRESULT, 'MaximumDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.')], HRESULT, 'MaximumDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the squared maximum distance, in meters, of the inclusive distance interval.')], HRESULT, 'MaximumDistanceSquared',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition implementation
##class IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition_Impl(object):
##    def _get(self):
##        'Gets or sets the globe overlay associated with this instance.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the globe overlay associated with this instance.'
##    GlobeOverlay = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the minimum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the minimum distance, in meters, of the inclusive distance interval.'
##    MinimumDistance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumDistanceSquared(self):
##        'Gets the squared minimum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'
##    MaximumDistance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MaximumDistanceSquared(self):
##        'Gets the squared maximum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##

IAgStkGraphicsGlobeImageOverlay._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.')], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.')], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used...")], HRESULT, 'UseAltitudeBasedTranslucency',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used...")], HRESULT, 'UseAltitudeBasedTranslucency',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ...")], HRESULT, 'AltitudeBasedTranslucencyLowerTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ...")], HRESULT, 'AltitudeBasedTranslucencyLowerTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ...")], HRESULT, 'AltitudeBasedTranslucencyUpperTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ...")], HRESULT, 'AltitudeBasedTranslucencyUpperTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />...")], HRESULT, 'AltitudeBasedTranslucencyLowerAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />...")], HRESULT, 'AltitudeBasedTranslucencyLowerAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />...")], HRESULT, 'AltitudeBasedTranslucencyUpperAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />...")], HRESULT, 'AltitudeBasedTranslucencyUpperAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.')], HRESULT, 'MoreThanOneImageGlobeOverlaySupported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsGlobeImageOverlay implementation
##class IAgStkGraphicsGlobeImageOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."
##    UseAltitudeBasedTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."
##    AltitudeBasedTranslucencyLowerTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."
##    AltitudeBasedTranslucencyUpperTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##    AltitudeBasedTranslucencyLowerAltitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##    AltitudeBasedTranslucencyUpperAltitude = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MoreThanOneImageGlobeOverlaySupported(self):
##        'Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'
##        #return pRetVal
##

class AgStkGraphicsTextureFilter2D(CoClass):
    'A texture filter.'
    _reg_clsid_ = GUID('{EFD1A44F-BB50-4443-ABE9-1025B82FB1C9}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTextureFilter2D._com_interfaces_ = [_IAgStkGraphicsTextureFilter2D, IAgStkGraphicsTextureFilter2D]

class AgStkGraphicsBandExtractFilter(CoClass):
    'Extracts a band or set of bands from the source raster. The extract format property specifies the bands and the order of the bands that will be extracted.'
    _reg_clsid_ = GUID('{BCFF5D70-6169-4D62-AD7D-6B6F0A4FEDA2}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsBandExtractFilter._com_interfaces_ = [_IAgStkGraphicsBandExtractFilter, IAgStkGraphicsBandExtractFilter, IAgStkGraphicsRasterFilter]

class AgStkGraphicsSequenceFilter(CoClass):
    'Applies a sequence of filters to the source raster in the order in which they were added. When continue on failure is set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied.'
    _reg_clsid_ = GUID('{8F8F7FA3-2C25-4EFA-8363-AB756E658F24}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsSequenceFilter._com_interfaces_ = [_IAgStkGraphicsSequenceFilter, IAgStkGraphicsSequenceFilter, IAgStkGraphicsRasterFilter]

class AgStkGraphicsAltitudeDisplayConditionFactory(CoClass):
    "Defines an inclusive altitude interval, in meters, that determines when an object is <topic name='Glossary' anchor='Render'>rendered</topic> based on the camera's altitude relative to a central body."
    _reg_clsid_ = GUID('{B58D9A70-E952-472B-A54C-BFC28A22C264}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsAltitudeDisplayConditionFactory._com_interfaces_ = [_IAgStkGraphicsAltitudeDisplayConditionFactory, IAgStkGraphicsAltitudeDisplayConditionFactory]

class AgStkGraphicsAxesPrimitiveFactory(CoClass):
    'Renders an axes in the 3D scene.'
    _reg_clsid_ = GUID('{7FC5AA9F-1758-4595-8DC5-F07861E68483}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsAxesPrimitiveFactory._com_interfaces_ = [_IAgStkGraphicsAxesPrimitiveFactory, IAgStkGraphicsAxesPrimitiveFactory]

class AgStkGraphicsPixelSizeDisplayConditionFactory(CoClass):
    "Defines an inclusive interval, in pixels, that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the number of pixels the object's bounding sphere (or in ..."
    _reg_clsid_ = GUID('{B55263CA-5C17-42F9-B6DF-FB64A5734607}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsPixelSizeDisplayConditionFactory._com_interfaces_ = [_IAgStkGraphicsPixelSizeDisplayConditionFactory, IAgStkGraphicsPixelSizeDisplayConditionFactory]

class AgStkGraphicsCompositeDisplayConditionFactory(CoClass):
    'A composite of display conditions combined using a binary logic operation. For example, several time interval display condition objects can be added to a composite...'
    _reg_clsid_ = GUID('{0BAD46D4-2C24-40F2-A2CC-EA19BB77A767}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsCompositeDisplayConditionFactory._com_interfaces_ = [_IAgStkGraphicsCompositeDisplayConditionFactory, IAgStkGraphicsCompositeDisplayConditionFactory]

class AgStkGraphicsPointBatchPrimitiveFactory(CoClass):
    ' Renders one or more points in the 3D scene. Each point in the batch has a unique position and an optional color. All points in the batch share the same pixel size. For best performance, avoid creating lots of batches with only a few points each...'
    _reg_clsid_ = GUID('{28D6FAC1-9BE2-4857-91CF-65342BDC32E0}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsPointBatchPrimitiveFactory._com_interfaces_ = [_IAgStkGraphicsPointBatchPrimitiveFactory, IAgStkGraphicsPointBatchPrimitiveFactory]

class AgStkGraphicsCompositePrimitiveFactory(CoClass):
    " A primitive that is composed of multiple other primitives. Since composites can contain other composites, they are commonly used to build hierarchies of primitives to efficiently evaluate <topic name='Display Conditions'>display conditions</topic>..."
    _reg_clsid_ = GUID('{F1C103CD-912F-4553-BF8D-EB9EB6D5063D}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsCompositePrimitiveFactory._com_interfaces_ = [_IAgStkGraphicsCompositePrimitiveFactory, IAgStkGraphicsCompositePrimitiveFactory]

class AgStkGraphicsPolylinePrimitiveFactory(CoClass):
    'Renders a polyline in the 3D scene. Each line segment may have a different color. A polyline can be constructed with a position interpolator to render great arcs or rhumb lines.'
    _reg_clsid_ = GUID('{7D9FCA76-8173-442D-B44E-C42409EAAD60}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsPolylinePrimitiveFactory._com_interfaces_ = [_IAgStkGraphicsPolylinePrimitiveFactory, IAgStkGraphicsPolylinePrimitiveFactory]

IAgStkGraphicsPathPrimitiveUpdatePolicy._methods_ = [
    COMMETHOD([helpstring('Updates the pathPrimitive at the specified date.')], HRESULT, 'Update',
              ( ['in'], POINTER(IAgStkGraphicsPathPrimitive), 'PathPrimitive' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'Date' )),
]
################################################################
## code template for IAgStkGraphicsPathPrimitiveUpdatePolicy implementation
##class IAgStkGraphicsPathPrimitiveUpdatePolicy_Impl(object):
##    def Update(self, PathPrimitive, Date):
##        'Updates the pathPrimitive at the specified date.'
##        #return 
##

_IAgStkGraphicsPositionInterpolator._methods_ = [
    COMMETHOD([dispid(17201), helpstring('Gets the polyline type of positions returned from interpolate'), 'propget'], HRESULT, 'PolylineType',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPolylineType), 'pRetVal' )),
    COMMETHOD([dispid(17202), helpstring('Computes interpolated positions based on the input positions. Returns an array of positions in the order x, y, z.')], HRESULT, 'Interpolate',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsPositionInterpolator implementation
##class _IAgStkGraphicsPositionInterpolator_Impl(object):
##    @property
##    def PolylineType(self):
##        'Gets the polyline type of positions returned from interpolate'
##        #return pRetVal
##
##    def Interpolate(self, Positions):
##        'Computes interpolated positions based on the input positions. Returns an array of positions in the order x, y, z.'
##        #return ppRetVal
##

IAgStkGraphicsPickResultCollection._methods_ = [
    COMMETHOD(['propget', helpstring('A total number of elements in the collection.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a picked object at the specified position in the collection.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPickResult)), 'ppRetVal' )),
    COMMETHOD(['propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsPickResultCollection implementation
##class IAgStkGraphicsPickResultCollection_Impl(object):
##    @property
##    def Count(self):
##        'A total number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Returns a picked object at the specified position in the collection.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return ppRetVal
##

class AgStkGraphicsConstantDisplayConditionFactory(CoClass):
    "A display condition that evaluates to a user-defined value. This is commonly used to hide <topic name='Primitives'>primitives</topic> by assigning to a primitive a display condition that always returns false."
    _reg_clsid_ = GUID('{6ECDFE5E-60B8-466B-8B97-20DE1B749BC6}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsConstantDisplayConditionFactory._com_interfaces_ = [_IAgStkGraphicsConstantDisplayConditionFactory, IAgStkGraphicsConstantDisplayConditionFactory]

class AgStkGraphicsRasterImageGlobeOverlayFactory(CoClass):
    'A globe image overlay for handling rasters.'
    _reg_clsid_ = GUID('{6C3E6E2F-B331-419C-95B4-B1A89867BFBA}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsRasterImageGlobeOverlayFactory._com_interfaces_ = [_IAgStkGraphicsRasterImageGlobeOverlayFactory, IAgStkGraphicsRasterImageGlobeOverlayFactory]

class AgStkGraphicsDistanceDisplayConditionFactory(CoClass):
    "Defines an inclusive distance interval, in meters, that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the distance, in meters, from the camera to the ..."
    _reg_clsid_ = GUID('{93830C33-18FA-488E-BFB0-676F4DBBF020}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsDistanceDisplayConditionFactory._com_interfaces_ = [_IAgStkGraphicsDistanceDisplayConditionFactory, IAgStkGraphicsDistanceDisplayConditionFactory]

class AgStkGraphicsRhumbLineInterpolatorFactory(CoClass):
    'The rhumb line interpolator computes interpolated positions along a rhumb line. Rhumb lines are lines of constant bearing. They appear as straight lines on a Mercator 2D map projection and are well suited to navigation.'
    _reg_clsid_ = GUID('{E7C9FF04-B681-465D-9820-C3CA130CE7CA}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsRhumbLineInterpolatorFactory._com_interfaces_ = [_IAgStkGraphicsRhumbLineInterpolatorFactory, IAgStkGraphicsRhumbLineInterpolatorFactory]

IAgStkGraphicsExtrudedPolylineTriangulatorInitializer._methods_ = [
    COMMETHOD([helpstring('Computes an extrusion between bottomPositions and topPositions on the specified centralBody. This is equivalent to calling Compute with a positionsWindingOrder of compute.')], HRESULT, 'Compute',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'BottomPositions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'TopPositions' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes an extrusion between bottomPositions and topPositions on the specified centralBody.')], HRESULT, 'ComputeWithWindingOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'BottomPositions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'TopPositions' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'PositionsWindingOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('For convenience. Computes an extrusion between bottomPositions and topPositions on the specified centralBody using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'BottomPositions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'TopPositions' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('For convenience. Computes an extrusion between bottomPositions and topPositions on the specified centralBody using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeCartographicWithWindingOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'BottomPositions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'TopPositions' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'PositionsWindingOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude. This is equivalent to calling Compute with a positionsWindingOrder of compute.')], HRESULT, 'ComputeWithAltitudes',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'BottomAltitude' ),
              ( ['in'], c_double, 'TopAltitude' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude.')], HRESULT, 'ComputeWithAltitudesAndWindingOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'BottomAltitude' ),
              ( ['in'], c_double, 'TopAltitude' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'PositionsWindingOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('For convenience. Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeCartographicWithAltitudes',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'BottomAltitude' ),
              ( ['in'], c_double, 'TopAltitude' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('For convenience. Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'ComputeCartographicWithAltitudesAndWindingOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'BottomAltitude' ),
              ( ['in'], c_double, 'TopAltitude' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'PositionsWindingOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes an extrusion of positions on the specified centralBody. One side of the extrusion has a constant altitude and the other has the original altitudes from positions...')], HRESULT, 'ComputeSingleConstantAltitude',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('Computes an extrusion of positions on the specified centralBody. One side of the extrusion has a constant altitude and the other has the original altitudes from positions.')], HRESULT, 'ComputeSingleConstantAltitudeWithWindingOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'PositionsWindingOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('For convenience. Computes an extrusion of positions on the specified centralBody using cartographic positions. One side of the extrusion has a constant altitude and the other has the original altitudes from positions...')], HRESULT, 'ComputeSingleConstantAltitudeCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
    COMMETHOD([helpstring('For convenience. Computes an extrusion of positions on the specified centralBody using cartographic positions. One side of the extrusion has a constant altitude and the other has the original altitudes from positions...')], HRESULT, 'ComputeSingleConstantAltitudeCartographicWithWindingOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_double, 'Altitude' ),
              ( ['in'], AgEStkGraphicsWindingOrder, 'PositionsWindingOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsExtrudedPolylineTriangulatorResult)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsExtrudedPolylineTriangulatorInitializer implementation
##class IAgStkGraphicsExtrudedPolylineTriangulatorInitializer_Impl(object):
##    def Compute(self, CentralBody, BottomPositions, TopPositions):
##        'Computes an extrusion between bottomPositions and topPositions on the specified centralBody. This is equivalent to calling Compute with a positionsWindingOrder of compute.'
##        #return ppRetVal
##
##    def ComputeWithWindingOrder(self, CentralBody, BottomPositions, TopPositions, PositionsWindingOrder):
##        'Computes an extrusion between bottomPositions and topPositions on the specified centralBody.'
##        #return ppRetVal
##
##    def ComputeCartographic(self, CentralBody, BottomPositions, TopPositions):
##        'For convenience. Computes an extrusion between bottomPositions and topPositions on the specified centralBody using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeCartographicWithWindingOrder(self, CentralBody, BottomPositions, TopPositions, PositionsWindingOrder):
##        'For convenience. Computes an extrusion between bottomPositions and topPositions on the specified centralBody using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeWithAltitudes(self, CentralBody, Positions, BottomAltitude, TopAltitude):
##        'Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude. This is equivalent to calling Compute with a positionsWindingOrder of compute.'
##        #return ppRetVal
##
##    def ComputeWithAltitudesAndWindingOrder(self, CentralBody, Positions, BottomAltitude, TopAltitude, PositionsWindingOrder):
##        'Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude.'
##        #return ppRetVal
##
##    def ComputeCartographicWithAltitudes(self, CentralBody, Positions, BottomAltitude, TopAltitude):
##        'For convenience. Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeCartographicWithAltitudesAndWindingOrder(self, CentralBody, Positions, BottomAltitude, TopAltitude, PositionsWindingOrder):
##        'For convenience. Computes an extrusion of positions on the specified centralBody with a constant bottomAltitude and topAltitude using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return ppRetVal
##
##    def ComputeSingleConstantAltitude(self, CentralBody, Positions, Altitude):
##        'Computes an extrusion of positions on the specified centralBody. One side of the extrusion has a constant altitude and the other has the original altitudes from positions...'
##        #return ppRetVal
##
##    def ComputeSingleConstantAltitudeWithWindingOrder(self, CentralBody, Positions, Altitude, PositionsWindingOrder):
##        'Computes an extrusion of positions on the specified centralBody. One side of the extrusion has a constant altitude and the other has the original altitudes from positions.'
##        #return ppRetVal
##
##    def ComputeSingleConstantAltitudeCartographic(self, CentralBody, Positions, Altitude):
##        'For convenience. Computes an extrusion of positions on the specified centralBody using cartographic positions. One side of the extrusion has a constant altitude and the other has the original altitudes from positions...'
##        #return ppRetVal
##
##    def ComputeSingleConstantAltitudeCartographicWithWindingOrder(self, CentralBody, Positions, Altitude, PositionsWindingOrder):
##        'For convenience. Computes an extrusion of positions on the specified centralBody using cartographic positions. One side of the extrusion has a constant altitude and the other has the original altitudes from positions...'
##        #return ppRetVal
##

class AgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory(CoClass):
    "Defines an inclusive distance interval, in meters, that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the distance, in meters, from the camera to the ..."
    _reg_clsid_ = GUID('{8A73371E-D6C6-4987-9D08-14B26938A1A8}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory._com_interfaces_ = [_IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory, IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory]

class AgStkGraphicsSceneDisplayConditionFactory(CoClass):
    "A display condition used to control what scene or scenes an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> in. This is used to show an object in some scenes and hide it in others."
    _reg_clsid_ = GUID('{273B68D9-4746-456D-AFA4-74F6A9D986CE}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsSceneDisplayConditionFactory._com_interfaces_ = [_IAgStkGraphicsSceneDisplayConditionFactory, IAgStkGraphicsSceneDisplayConditionFactory]

IAgStkGraphicsPolylinePrimitiveFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a default polyline primitive. This is equivalent to constructing a polyline with a set hint of Frequent and a polyline type of LineStrip.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPolylinePrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a polyline primitive with the specified interpolator and setHint.')], HRESULT, 'InitializeWithInterpolatorAndSetHint',
              ( ['in'], POINTER(IAgStkGraphicsPositionInterpolator), 'Interpolator' ),
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPolylinePrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance of a polyline primitive with the specified polylineType and setHint.')], HRESULT, 'InitializeWithTypeAndHint',
              ( ['in'], AgEStkGraphicsPolylineType, 'PolylineType' ),
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPolylinePrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a polyline primitive with the specified interpolator. This is equivalent to constructing a polyline with the specified interpolator and a set hint of Frequent.')], HRESULT, 'InitializeWithInterpolator',
              ( ['in'], POINTER(IAgStkGraphicsPositionInterpolator), 'Interpolator' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPolylinePrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance of a polyline primitive with the specified set hint. This is equivalent to constructing a polyline with a polyline type of LineStrip and the specified set hint.')], HRESULT, 'InitializeWithHint',
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPolylinePrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a polyline primitive with the specified polylineType. This is equivalent to constructing a polyline with the specified polylineType and a set hint of Frequent.')], HRESULT, 'InitializeWithType',
              ( ['in'], AgEStkGraphicsPolylineType, 'PolylineType' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPolylinePrimitive)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the minimum width, in pixels, supported by the video card.')], HRESULT, 'MinimumWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the maximum width, in pixels, supported by the video card.')], HRESULT, 'MaximumWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsPolylinePrimitiveFactory implementation
##class IAgStkGraphicsPolylinePrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default polyline primitive. This is equivalent to constructing a polyline with a set hint of Frequent and a polyline type of LineStrip.'
##        #return ppRetVal
##
##    def InitializeWithInterpolatorAndSetHint(self, Interpolator, SetHint):
##        'Initializes a polyline primitive with the specified interpolator and setHint.'
##        #return ppRetVal
##
##    def InitializeWithTypeAndHint(self, PolylineType, SetHint):
##        'Initializes a new instance of a polyline primitive with the specified polylineType and setHint.'
##        #return ppRetVal
##
##    def InitializeWithInterpolator(self, Interpolator):
##        'Initializes a polyline primitive with the specified interpolator. This is equivalent to constructing a polyline with the specified interpolator and a set hint of Frequent.'
##        #return ppRetVal
##
##    def InitializeWithHint(self, SetHint):
##        'Initializes a new instance of a polyline primitive with the specified set hint. This is equivalent to constructing a polyline with a polyline type of LineStrip and the specified set hint.'
##        #return ppRetVal
##
##    def InitializeWithType(self, PolylineType):
##        'Initializes a polyline primitive with the specified polylineType. This is equivalent to constructing a polyline with the specified polylineType and a set hint of Frequent.'
##        #return ppRetVal
##
##    @property
##    def MinimumWidthSupported(self):
##        'Gets the minimum width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    @property
##    def MaximumWidthSupported(self):
##        'Gets the maximum width, in pixels, supported by the video card.'
##        #return pRetVal
##

class AgStkGraphicsDistanceToPositionDisplayConditionFactory(CoClass):
    "Defines an inclusive distance interval, in meters, that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the distance, in meters, from the camera to a po..."
    _reg_clsid_ = GUID('{C5302375-C194-4496-B4A1-5A3DB9DF7F40}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsDistanceToPositionDisplayConditionFactory._com_interfaces_ = [_IAgStkGraphicsDistanceToPositionDisplayConditionFactory, IAgStkGraphicsDistanceToPositionDisplayConditionFactory]

class AgStkGraphicsSceneManagerInitializer(CoClass):
    'The static scene manager class provides global properties and functionality that apply to all scenes and thus affect the rendering of every globe control...'
    _reg_clsid_ = GUID('{5FD868FB-9643-4642-A9F9-4405641507A4}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsSceneManagerInitializer._com_interfaces_ = [_IAgStkGraphicsSceneManagerInitializer, IAgStkGraphicsSceneManagerInitializer]

class AgStkGraphicsDistanceToPrimitiveDisplayConditionFactory(CoClass):
    "Defines an inclusive distance interval, in meters, that determines when an object, such as a <topic name='Screen Overlays'>screen overlay</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the distance, in meters, from the came..."
    _reg_clsid_ = GUID('{EE7C1507-D7DE-4282-A1E1-A9C55EBE9B11}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsDistanceToPrimitiveDisplayConditionFactory._com_interfaces_ = [_IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory, IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory]

class AgStkGraphicsScreenOverlayFactory(CoClass):
    'A visible element drawn in screen space. Overlays are useful for floating logos, heads up displays, and integrating user interfaces into the 3D window.'
    _reg_clsid_ = GUID('{16759EBF-C3D2-4A24-AA74-1DB53B885808}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsScreenOverlayFactory._com_interfaces_ = [_IAgStkGraphicsScreenOverlayFactory, IAgStkGraphicsScreenOverlayFactory]

IAgStkGraphicsPickResult._methods_ = [
    COMMETHOD(['propget', helpstring('Gets a collection of objects that were on the pick stack for the picked object.')], HRESULT, 'Objects',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsObjectCollection)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the depth of the picked location in the 3D scene.')], HRESULT, 'Depth',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets the position of the picked location in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z.")], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsPickResult implementation
##class IAgStkGraphicsPickResult_Impl(object):
##    @property
##    def Objects(self):
##        'Gets a collection of objects that were on the pick stack for the picked object.'
##        #return ppRetVal
##
##    @property
##    def Depth(self):
##        'Gets the depth of the picked location in the 3D scene.'
##        #return pRetVal
##
##    @property
##    def Position(self):
##        "Gets the position of the picked location in the central body's fixed reference frame. The array contains the components of the position arranged in the order x, y, z."
##        #return ppRetVal
##

class AgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory(CoClass):
    'path primitive update policy that removes points from remove location after a given duration.'
    _reg_clsid_ = GUID('{1088E0EF-F47C-48E3-8465-59993C3D31AE}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._com_interfaces_ = [_IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory, IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory]

class AgStkGraphicsSolidPrimitiveFactory(CoClass):
    "Renders filled solid objects and their outlines. Example solids include boxes and ellipsoids. Various effects are supported, such as displaying the solid's silhouette, and hidding the outline of the backside of the solid..."
    _reg_clsid_ = GUID('{721080E7-8CAB-42CB-BA79-100D08DB4489}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsSolidPrimitiveFactory._com_interfaces_ = [_IAgStkGraphicsSolidPrimitiveFactory, IAgStkGraphicsSolidPrimitiveFactory]

_IAgStkGraphicsSceneManager._methods_ = [
    COMMETHOD([dispid(5301), helpstring('Gets the primitive manager, which is used to add primitives to your scenes.'), 'propget'], HRESULT, 'Primitives',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPrimitiveManager)), 'ppRetVal' )),
    COMMETHOD([dispid(5302), helpstring('Gets the screen overlay manager, which is used to add screen overlays to your scenes.'), 'propget'], HRESULT, 'ScreenOverlays',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayManager)), 'ppRetVal' )),
    COMMETHOD([dispid(5303), helpstring('Gets the texture 2d factory, which can be used to create textures from various sources.'), 'propget'], HRESULT, 'Textures',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTexture2DFactory)), 'ppRetVal' )),
    COMMETHOD([dispid(5304), helpstring('Gets the globe overlay settings, which are used to set global settings for all globe overlays.'), 'propget'], HRESULT, 'GlobeOverlaySettings',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeOverlaySettings)), 'ppRetVal' )),
    COMMETHOD([dispid(5305), helpstring('Gets a read-only collection of scenes that are associated with the scene manager.'), 'propget'], HRESULT, 'Scenes',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSceneCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(5307), helpstring('Renders all scenes within an application. To render a specific scene, use the Render method.')], HRESULT, 'Render'),
    COMMETHOD([dispid(5308), helpstring('Allows the user to create or initialize primitives, display conditions, tringulators and other types of objects.'), 'propget'], HRESULT, 'Initializers',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsFactoryAndInitializers)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSceneManager implementation
##class _IAgStkGraphicsSceneManager_Impl(object):
##    @property
##    def Primitives(self):
##        'Gets the primitive manager, which is used to add primitives to your scenes.'
##        #return ppRetVal
##
##    @property
##    def ScreenOverlays(self):
##        'Gets the screen overlay manager, which is used to add screen overlays to your scenes.'
##        #return ppRetVal
##
##    @property
##    def Textures(self):
##        'Gets the texture 2d factory, which can be used to create textures from various sources.'
##        #return ppRetVal
##
##    @property
##    def GlobeOverlaySettings(self):
##        'Gets the globe overlay settings, which are used to set global settings for all globe overlays.'
##        #return ppRetVal
##
##    @property
##    def Scenes(self):
##        'Gets a read-only collection of scenes that are associated with the scene manager.'
##        #return ppRetVal
##
##    def Render(self):
##        'Renders all scenes within an application. To render a specific scene, use the Render method.'
##        #return 
##
##    @property
##    def Initializers(self):
##        'Allows the user to create or initialize primitives, display conditions, tringulators and other types of objects.'
##        #return ppRetVal
##

IAgStkGraphicsPolylinePrimitive._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the line width, in pixels.')], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the line width, in pixels.')], HRESULT, 'Width',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the minimum width, in pixels, supported by the video card.')], HRESULT, 'MinimumWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the maximum width, in pixels, supported by the video card.')], HRESULT, 'MaximumWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the position interpolator applied to positions passed to Set, SetCartographic, SetSubset, and SetSubsetCartographic methods. When this property is null, linear interpolation is used.')], HRESULT, 'PositionInterpolator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPositionInterpolator)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets how the polyline interprets the positions passed to Set methods.')], HRESULT, 'PolylineType',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPolylineType), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with.")], HRESULT, 'SetHint',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSetHint), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether an outline is rendered around the polyline.')], HRESULT, 'DisplayOutline',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether an outline is rendered around the polyline.')], HRESULT, 'DisplayOutline',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the outline's color.")], HRESULT, 'OutlineColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the outline's color.")], HRESULT, 'OutlineColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.')], HRESULT, 'OutlineTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.')], HRESULT, 'OutlineTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the width, in pixels, of the outline around the polyline.')], HRESULT, 'OutlineWidth',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the width, in pixels, of the outline around the polyline.')], HRESULT, 'OutlineWidth',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index.")], HRESULT, 'PerItemPickingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index.")], HRESULT, 'PerItemPickingEnabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([helpstring("Defines the positions for a polyline primitive. The polyline is rendered in it's reference frame.")], HRESULT, 'Set',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' )),
    COMMETHOD([helpstring("Defines the positions and colors of a polyline. The polyline is rendered in it's reference frame.")], HRESULT, 'SetWithColors',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' )),
    COMMETHOD([helpstring("Defines the positions and colors of a polyline. The polyline is rendered in it's reference frame. renderPassHint is provided for efficiency.")], HRESULT, 'SetWithColorsAndHint',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([helpstring('Defines the positions of a polyline using the positions of the specified surfaceShapesResult.')], HRESULT, 'SetWithSurfaceShapesResult',
              ( ['in'], POINTER(IAgStkGraphicsSurfaceShapesResult), 'SurfaceShapesResult' )),
    COMMETHOD([helpstring('Defines the positions of a polyline using the boundary positions of the specified surfaceTriangulatorResult.')], HRESULT, 'SetWithSurfaceTriangulatorResult',
              ( ['in'], POINTER(IAgStkGraphicsSurfaceTriangulatorResult), 'SurfaceTriangulatorResult' )),
    COMMETHOD([helpstring('Defines the positions of a polyline using the outline positions of the specified solidTriangulatorResult.')], HRESULT, 'SetWithSolidTriangulatorResult',
              ( ['in'], POINTER(IAgStkGraphicsSolidTriangulatorResult), 'SolidTriangulatorResult' )),
    COMMETHOD([helpstring('For convenience. Defines the positions of a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling Set.')], HRESULT, 'SetCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' )),
    COMMETHOD([helpstring('For convenience. Defines the positions and colors of a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling Set.')], HRESULT, 'SetCartographicWithColors',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' )),
    COMMETHOD([helpstring('For convenience. Defines the positions and colors of a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. renderPassHint is provided for efficiency...')], HRESULT, 'SetCartographicWithColorsAndHint',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([helpstring('Defines the positions of a polyline using a subset of input positions.')], HRESULT, 'SetSubset',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'Count' )),
    COMMETHOD([helpstring('For convenience. Defines the positions of a polyline using a subset of input cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetSubsetCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'Count' )),
    COMMETHOD([helpstring('Updates a subset of positions in a polyline.')], HRESULT, 'SetPartial',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring('Updates a subset of positions in a polyline.')], HRESULT, 'SetPartialWithIndicesOrder',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' )),
    COMMETHOD([helpstring('Updates a subset of positions and/or colors in a polyline.')], HRESULT, 'SetPartialWithColors',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring('Updates a subset of positions and/or colors in a polyline.')], HRESULT, 'SetPartialWithColorsIndicesOrderAndRenderPassHint',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([helpstring('For convenience. Updates a subset of positions in a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling SetPartial')], HRESULT, 'SetPartialCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring('For convenience. Updates a subset of positions in a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling SetPartial')], HRESULT, 'SetPartialCartographicWithIndicesOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' )),
    COMMETHOD([helpstring('For convenience. Updates a subset of positions and/or colors in a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithColors',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring('For convenience. Updates a subset of positions and/or colors in a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithColorsIndicesOrderAndRenderPass',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the polyline will be clipped by the central body.')], HRESULT, 'CentralBodyClipped',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the polyline will be clipped by the central body.')], HRESULT, 'CentralBodyClipped',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsPolylinePrimitive implementation
##class IAgStkGraphicsPolylinePrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets the line width, in pixels.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the line width, in pixels.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumWidthSupported(self):
##        'Gets the minimum width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    @property
##    def MaximumWidthSupported(self):
##        'Gets the maximum width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    @property
##    def PositionInterpolator(self):
##        'Gets the position interpolator applied to positions passed to Set, SetCartographic, SetSubset, and SetSubsetCartographic methods. When this property is null, linear interpolation is used.'
##        #return ppRetVal
##
##    @property
##    def PolylineType(self):
##        'Gets how the polyline interprets the positions passed to Set methods.'
##        #return pRetVal
##
##    @property
##    def SetHint(self):
##        "Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets whether an outline is rendered around the polyline.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether an outline is rendered around the polyline.'
##    DisplayOutline = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the outline's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the outline's color."
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.'
##    OutlineTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the width, in pixels, of the outline around the polyline.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the width, in pixels, of the outline around the polyline.'
##    OutlineWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."
##    PerItemPickingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def Set(self, Positions):
##        "Defines the positions for a polyline primitive. The polyline is rendered in it's reference frame."
##        #return 
##
##    def SetWithColors(self, Positions, Colors):
##        "Defines the positions and colors of a polyline. The polyline is rendered in it's reference frame."
##        #return 
##
##    def SetWithColorsAndHint(self, Positions, Colors, RenderPassHint):
##        "Defines the positions and colors of a polyline. The polyline is rendered in it's reference frame. renderPassHint is provided for efficiency."
##        #return 
##
##    def SetWithSurfaceShapesResult(self, SurfaceShapesResult):
##        'Defines the positions of a polyline using the positions of the specified surfaceShapesResult.'
##        #return 
##
##    def SetWithSurfaceTriangulatorResult(self, SurfaceTriangulatorResult):
##        'Defines the positions of a polyline using the boundary positions of the specified surfaceTriangulatorResult.'
##        #return 
##
##    def SetWithSolidTriangulatorResult(self, SolidTriangulatorResult):
##        'Defines the positions of a polyline using the outline positions of the specified solidTriangulatorResult.'
##        #return 
##
##    def SetCartographic(self, CentralBody, Positions):
##        'For convenience. Defines the positions of a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling Set.'
##        #return 
##
##    def SetCartographicWithColors(self, CentralBody, Positions, Colors):
##        'For convenience. Defines the positions and colors of a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling Set.'
##        #return 
##
##    def SetCartographicWithColorsAndHint(self, CentralBody, Positions, Colors, RenderPassHint):
##        'For convenience. Defines the positions and colors of a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. renderPassHint is provided for efficiency...'
##        #return 
##
##    def SetSubset(self, Positions, Index, Count):
##        'Defines the positions of a polyline using a subset of input positions.'
##        #return 
##
##    def SetSubsetCartographic(self, CentralBody, Positions, Index, Count):
##        'For convenience. Defines the positions of a polyline using a subset of input cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartial(self, Positions, Indices):
##        'Updates a subset of positions in a polyline.'
##        #return 
##
##    def SetPartialWithIndicesOrder(self, Positions, Indices, IndicesOrderHint):
##        'Updates a subset of positions in a polyline.'
##        #return 
##
##    def SetPartialWithColors(self, Positions, Colors, Indices):
##        'Updates a subset of positions and/or colors in a polyline.'
##        #return 
##
##    def SetPartialWithColorsIndicesOrderAndRenderPassHint(self, Positions, Colors, Indices, IndicesOrderHint, RenderPassHint):
##        'Updates a subset of positions and/or colors in a polyline.'
##        #return 
##
##    def SetPartialCartographic(self, CentralBody, Positions, Indices):
##        'For convenience. Updates a subset of positions in a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling SetPartial'
##        #return 
##
##    def SetPartialCartographicWithIndicesOrder(self, CentralBody, Positions, Indices, IndicesOrderHint):
##        'For convenience. Updates a subset of positions in a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling SetPartial'
##        #return 
##
##    def SetPartialCartographicWithColors(self, CentralBody, Positions, Colors, Indices):
##        'For convenience. Updates a subset of positions and/or colors in a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartialCartographicWithColorsIndicesOrderAndRenderPass(self, CentralBody, Positions, Colors, Indices, IndicesOrderHint, RenderPassHint):
##        'For convenience. Updates a subset of positions and/or colors in a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def _get(self):
##        'Gets or sets whether the polyline will be clipped by the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the polyline will be clipped by the central body.'
##    CentralBodyClipped = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsGlobeImageOverlayInitializer(CoClass):
    'A globe overlay that shows an image.'
    _reg_clsid_ = GUID('{5500AB70-3F63-418F-A965-DB4BE15B0ABD}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsGlobeImageOverlayInitializer._com_interfaces_ = [_IAgStkGraphicsGlobeImageOverlayInitializer, IAgStkGraphicsGlobeImageOverlayInitializer]

class AgStkGraphicsSurfaceMeshPrimitiveFactory(CoClass):
    'A triangle mesh primitive for meshes on the surface that need to conform to terrain.'
    _reg_clsid_ = GUID('{FB5877F1-32C4-496D-83F6-D7383D88892A}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsSurfaceMeshPrimitiveFactory._com_interfaces_ = [_IAgStkGraphicsSurfaceMeshPrimitiveFactory, IAgStkGraphicsSurfaceMeshPrimitiveFactory]

_IAgStkGraphicsBoundingSphere._methods_ = [
    COMMETHOD([dispid(17601), helpstring('A center of the bounding sphere. The center point is specified as one-dimensional array with three elements corresponding to (X,Y,Z) cartesian coordinates.'), 'propget'], HRESULT, 'Center',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17602), helpstring('A radius of the bounding sphere.'), 'propget'], HRESULT, 'Radius',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsBoundingSphere implementation
##class _IAgStkGraphicsBoundingSphere_Impl(object):
##    @property
##    def Center(self):
##        'A center of the bounding sphere. The center point is specified as one-dimensional array with three elements corresponding to (X,Y,Z) cartesian coordinates.'
##        #return ppRetVal
##
##    @property
##    def Radius(self):
##        'A radius of the bounding sphere.'
##        #return pRetVal
##

IAgStkGraphicsExtrudedPolylineTriangulatorResult._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the boundary positions along the top of the extrusion. Three array elements (in the order x, y, z) constitute one position.')], HRESULT, 'TopBoundaryPositions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the boundary positions along the bottom of the extrusion. Three array elements (in the order x, y, z) constitute one position.')], HRESULT, 'BottomBoundaryPositions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the winding order of top boundary positions and bottom boundary positions.')], HRESULT, 'BoundaryPositionsWindingOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsWindingOrder), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsExtrudedPolylineTriangulatorResult implementation
##class IAgStkGraphicsExtrudedPolylineTriangulatorResult_Impl(object):
##    @property
##    def TopBoundaryPositions(self):
##        'Gets the boundary positions along the top of the extrusion. Three array elements (in the order x, y, z) constitute one position.'
##        #return ppRetVal
##
##    @property
##    def BottomBoundaryPositions(self):
##        'Gets the boundary positions along the bottom of the extrusion. Three array elements (in the order x, y, z) constitute one position.'
##        #return ppRetVal
##
##    @property
##    def BoundaryPositionsWindingOrder(self):
##        'Gets the winding order of top boundary positions and bottom boundary positions.'
##        #return pRetVal
##

class AgStkGraphicsGraphicsFontFactory(CoClass):
    'A font that is suitable for use with the text batch primitive. For best performance, avoid creating duplicate font objects. Instead assign the same font object to several text batch primitives.'
    _reg_clsid_ = GUID('{11E87F5B-BE0B-4D4B-8FE2-BB1B098C9C52}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsGraphicsFontFactory._com_interfaces_ = [_IAgStkGraphicsGraphicsFontFactory, IAgStkGraphicsGraphicsFontFactory]

class AgStkGraphicsTerrainOverlayInitializer(CoClass):
    'A globe overlay which shows terrain.'
    _reg_clsid_ = GUID('{B54B31AB-29D1-45C7-B3F1-52B1F1F5587A}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTerrainOverlayInitializer._com_interfaces_ = [_IAgStkGraphicsTerrainOverlayInitializer, IAgStkGraphicsTerrainOverlayInitializer]

_IAgStkGraphicsPolylinePrimitive._methods_ = [
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propget'], HRESULT, 'ReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propput'], HRESULT, 'ReferenceFrame',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propput'], HRESULT, 'BoundingSphere',
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'ppRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propget'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propput'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(4901), helpstring('Gets or sets the line width, in pixels.'), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(4901), helpstring('Gets or sets the line width, in pixels.'), 'propput'], HRESULT, 'Width',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(4902), helpstring('Gets the minimum width, in pixels, supported by the video card.'), 'propget'], HRESULT, 'MinimumWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(4903), helpstring('Gets the maximum width, in pixels, supported by the video card.'), 'propget'], HRESULT, 'MaximumWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(4904), helpstring('Gets the position interpolator applied to positions passed to Set, SetCartographic, SetSubset, and SetSubsetCartographic methods. When this property is null, linear interpolation is used.'), 'propget'], HRESULT, 'PositionInterpolator',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPositionInterpolator)), 'ppRetVal' )),
    COMMETHOD([dispid(4905), helpstring('Gets how the polyline interprets the positions passed to Set methods.'), 'propget'], HRESULT, 'PolylineType',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPolylineType), 'pRetVal' )),
    COMMETHOD([dispid(4906), helpstring("Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."), 'propget'], HRESULT, 'SetHint',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSetHint), 'pRetVal' )),
    COMMETHOD([dispid(4907), helpstring('Gets or sets whether an outline is rendered around the polyline.'), 'propget'], HRESULT, 'DisplayOutline',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(4907), helpstring('Gets or sets whether an outline is rendered around the polyline.'), 'propput'], HRESULT, 'DisplayOutline',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(4908), helpstring("Gets or sets the outline's color."), 'propget'], HRESULT, 'OutlineColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(4908), helpstring("Gets or sets the outline's color."), 'propput'], HRESULT, 'OutlineColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(4909), helpstring('Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.'), 'propget'], HRESULT, 'OutlineTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(4909), helpstring('Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.'), 'propput'], HRESULT, 'OutlineTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(4910), helpstring('Gets or sets the width, in pixels, of the outline around the polyline.'), 'propget'], HRESULT, 'OutlineWidth',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(4910), helpstring('Gets or sets the width, in pixels, of the outline around the polyline.'), 'propput'], HRESULT, 'OutlineWidth',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(4911), helpstring("Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."), 'propget'], HRESULT, 'PerItemPickingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(4911), helpstring("Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."), 'propput'], HRESULT, 'PerItemPickingEnabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(4912), helpstring("Defines the positions for a polyline primitive. The polyline is rendered in it's reference frame.")], HRESULT, 'Set',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' )),
    COMMETHOD([dispid(4913), helpstring("Defines the positions and colors of a polyline. The polyline is rendered in it's reference frame.")], HRESULT, 'SetWithColors',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' )),
    COMMETHOD([dispid(4914), helpstring("Defines the positions and colors of a polyline. The polyline is rendered in it's reference frame. renderPassHint is provided for efficiency.")], HRESULT, 'SetWithColorsAndHint',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([dispid(4915), helpstring('Defines the positions of a polyline using the positions of the specified surfaceShapesResult.')], HRESULT, 'SetWithSurfaceShapesResult',
              ( ['in'], POINTER(IAgStkGraphicsSurfaceShapesResult), 'SurfaceShapesResult' )),
    COMMETHOD([dispid(4916), helpstring('Defines the positions of a polyline using the boundary positions of the specified surfaceTriangulatorResult.')], HRESULT, 'SetWithSurfaceTriangulatorResult',
              ( ['in'], POINTER(IAgStkGraphicsSurfaceTriangulatorResult), 'SurfaceTriangulatorResult' )),
    COMMETHOD([dispid(4917), helpstring('Defines the positions of a polyline using the outline positions of the specified solidTriangulatorResult.')], HRESULT, 'SetWithSolidTriangulatorResult',
              ( ['in'], POINTER(IAgStkGraphicsSolidTriangulatorResult), 'SolidTriangulatorResult' )),
    COMMETHOD([dispid(4918), helpstring('For convenience. Defines the positions of a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling Set.')], HRESULT, 'SetCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' )),
    COMMETHOD([dispid(4919), helpstring('For convenience. Defines the positions and colors of a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling Set.')], HRESULT, 'SetCartographicWithColors',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' )),
    COMMETHOD([dispid(4920), helpstring('For convenience. Defines the positions and colors of a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. renderPassHint is provided for efficiency...')], HRESULT, 'SetCartographicWithColorsAndHint',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([dispid(4921), helpstring('Defines the positions of a polyline using a subset of input positions.')], HRESULT, 'SetSubset',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'Count' )),
    COMMETHOD([dispid(4922), helpstring('For convenience. Defines the positions of a polyline using a subset of input cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetSubsetCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'Count' )),
    COMMETHOD([dispid(4923), helpstring('Updates a subset of positions in a polyline.')], HRESULT, 'SetPartial',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(4924), helpstring('Updates a subset of positions in a polyline.')], HRESULT, 'SetPartialWithIndicesOrder',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' )),
    COMMETHOD([dispid(4925), helpstring('Updates a subset of positions and/or colors in a polyline.')], HRESULT, 'SetPartialWithColors',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(4926), helpstring('Updates a subset of positions and/or colors in a polyline.')], HRESULT, 'SetPartialWithColorsIndicesOrderAndRenderPassHint',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([dispid(4927), helpstring('For convenience. Updates a subset of positions in a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling SetPartial')], HRESULT, 'SetPartialCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(4928), helpstring('For convenience. Updates a subset of positions in a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling SetPartial')], HRESULT, 'SetPartialCartographicWithIndicesOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' )),
    COMMETHOD([dispid(4929), helpstring('For convenience. Updates a subset of positions and/or colors in a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithColors',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(4930), helpstring('For convenience. Updates a subset of positions and/or colors in a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithColorsIndicesOrderAndRenderPass',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
    COMMETHOD([dispid(4932), helpstring('Gets or sets whether the polyline will be clipped by the central body.'), 'propget'], HRESULT, 'CentralBodyClipped',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(4932), helpstring('Gets or sets whether the polyline will be clipped by the central body.'), 'propput'], HRESULT, 'CentralBodyClipped',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsPolylinePrimitive implementation
##class _IAgStkGraphicsPolylinePrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##    ReferenceFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##    BoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##    AutomaticallyComputeBoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's color."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the line width, in pixels.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the line width, in pixels.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumWidthSupported(self):
##        'Gets the minimum width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    @property
##    def MaximumWidthSupported(self):
##        'Gets the maximum width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    @property
##    def PositionInterpolator(self):
##        'Gets the position interpolator applied to positions passed to Set, SetCartographic, SetSubset, and SetSubsetCartographic methods. When this property is null, linear interpolation is used.'
##        #return ppRetVal
##
##    @property
##    def PolylineType(self):
##        'Gets how the polyline interprets the positions passed to Set methods.'
##        #return pRetVal
##
##    @property
##    def SetHint(self):
##        "Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets whether an outline is rendered around the polyline.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether an outline is rendered around the polyline.'
##    DisplayOutline = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the outline's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the outline's color."
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.'
##    OutlineTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the width, in pixels, of the outline around the polyline.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the width, in pixels, of the outline around the polyline.'
##    OutlineWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."
##    PerItemPickingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def Set(self, Positions):
##        "Defines the positions for a polyline primitive. The polyline is rendered in it's reference frame."
##        #return 
##
##    def SetWithColors(self, Positions, Colors):
##        "Defines the positions and colors of a polyline. The polyline is rendered in it's reference frame."
##        #return 
##
##    def SetWithColorsAndHint(self, Positions, Colors, RenderPassHint):
##        "Defines the positions and colors of a polyline. The polyline is rendered in it's reference frame. renderPassHint is provided for efficiency."
##        #return 
##
##    def SetWithSurfaceShapesResult(self, SurfaceShapesResult):
##        'Defines the positions of a polyline using the positions of the specified surfaceShapesResult.'
##        #return 
##
##    def SetWithSurfaceTriangulatorResult(self, SurfaceTriangulatorResult):
##        'Defines the positions of a polyline using the boundary positions of the specified surfaceTriangulatorResult.'
##        #return 
##
##    def SetWithSolidTriangulatorResult(self, SolidTriangulatorResult):
##        'Defines the positions of a polyline using the outline positions of the specified solidTriangulatorResult.'
##        #return 
##
##    def SetCartographic(self, CentralBody, Positions):
##        'For convenience. Defines the positions of a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling Set.'
##        #return 
##
##    def SetCartographicWithColors(self, CentralBody, Positions, Colors):
##        'For convenience. Defines the positions and colors of a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling Set.'
##        #return 
##
##    def SetCartographicWithColorsAndHint(self, CentralBody, Positions, Colors, RenderPassHint):
##        'For convenience. Defines the positions and colors of a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. renderPassHint is provided for efficiency...'
##        #return 
##
##    def SetSubset(self, Positions, Index, Count):
##        'Defines the positions of a polyline using a subset of input positions.'
##        #return 
##
##    def SetSubsetCartographic(self, CentralBody, Positions, Index, Count):
##        'For convenience. Defines the positions of a polyline using a subset of input cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartial(self, Positions, Indices):
##        'Updates a subset of positions in a polyline.'
##        #return 
##
##    def SetPartialWithIndicesOrder(self, Positions, Indices, IndicesOrderHint):
##        'Updates a subset of positions in a polyline.'
##        #return 
##
##    def SetPartialWithColors(self, Positions, Colors, Indices):
##        'Updates a subset of positions and/or colors in a polyline.'
##        #return 
##
##    def SetPartialWithColorsIndicesOrderAndRenderPassHint(self, Positions, Colors, Indices, IndicesOrderHint, RenderPassHint):
##        'Updates a subset of positions and/or colors in a polyline.'
##        #return 
##
##    def SetPartialCartographic(self, CentralBody, Positions, Indices):
##        'For convenience. Updates a subset of positions in a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling SetPartial'
##        #return 
##
##    def SetPartialCartographicWithIndicesOrder(self, CentralBody, Positions, Indices, IndicesOrderHint):
##        'For convenience. Updates a subset of positions in a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling SetPartial'
##        #return 
##
##    def SetPartialCartographicWithColors(self, CentralBody, Positions, Colors, Indices):
##        'For convenience. Updates a subset of positions and/or colors in a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartialCartographicWithColorsIndicesOrderAndRenderPass(self, CentralBody, Positions, Colors, Indices, IndicesOrderHint, RenderPassHint):
##        'For convenience. Updates a subset of positions and/or colors in a polyline using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the polyline will be clipped by the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the polyline will be clipped by the central body.'
##    CentralBodyClipped = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsGreatArcInterpolatorFactory(CoClass):
    'The great arc interpolator computes interpolated positions along a great arc. A great arc is the shortest path between two positions on an ellipsoid.'
    _reg_clsid_ = GUID('{D758DB32-1475-40F6-A753-A2582DF38882}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsGreatArcInterpolatorFactory._com_interfaces_ = [_IAgStkGraphicsGreatArcInterpolatorFactory, IAgStkGraphicsGreatArcInterpolatorFactory]

class AgStkGraphicsTextBatchPrimitiveFactory(CoClass):
    " Renders one or more strings in the 3D scene.  For best performance, avoid creating lots of batches with only a few strings each. See the <topic name='Batching'>Batching Performance Overview</topic>. "
    _reg_clsid_ = GUID('{201E12F5-4859-449D-810F-F387E7F325CC}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTextBatchPrimitiveFactory._com_interfaces_ = [_IAgStkGraphicsTextBatchPrimitiveFactory, IAgStkGraphicsTextBatchPrimitiveFactory]

IAgStkGraphicsSceneManager._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the primitive manager, which is used to add primitives to your scenes.')], HRESULT, 'Primitives',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPrimitiveManager)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the screen overlay manager, which is used to add screen overlays to your scenes.')], HRESULT, 'ScreenOverlays',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayManager)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the texture 2d factory, which can be used to create textures from various sources.')], HRESULT, 'Textures',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTexture2DFactory)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the globe overlay settings, which are used to set global settings for all globe overlays.')], HRESULT, 'GlobeOverlaySettings',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeOverlaySettings)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets a read-only collection of scenes that are associated with the scene manager.')], HRESULT, 'Scenes',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSceneCollection)), 'ppRetVal' )),
    COMMETHOD([helpstring('Renders all scenes within an application. To render a specific scene, use the Render method.')], HRESULT, 'Render'),
    COMMETHOD(['propget', helpstring('Allows the user to create or initialize primitives, display conditions, tringulators and other types of objects.')], HRESULT, 'Initializers',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsFactoryAndInitializers)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSceneManager implementation
##class IAgStkGraphicsSceneManager_Impl(object):
##    @property
##    def Primitives(self):
##        'Gets the primitive manager, which is used to add primitives to your scenes.'
##        #return ppRetVal
##
##    @property
##    def ScreenOverlays(self):
##        'Gets the screen overlay manager, which is used to add screen overlays to your scenes.'
##        #return ppRetVal
##
##    @property
##    def Textures(self):
##        'Gets the texture 2d factory, which can be used to create textures from various sources.'
##        #return ppRetVal
##
##    @property
##    def GlobeOverlaySettings(self):
##        'Gets the globe overlay settings, which are used to set global settings for all globe overlays.'
##        #return ppRetVal
##
##    @property
##    def Scenes(self):
##        'Gets a read-only collection of scenes that are associated with the scene manager.'
##        #return ppRetVal
##
##    def Render(self):
##        'Renders all scenes within an application. To render a specific scene, use the Render method.'
##        #return 
##
##    @property
##    def Initializers(self):
##        'Allows the user to create or initialize primitives, display conditions, tringulators and other types of objects.'
##        #return ppRetVal
##

class AgStkGraphicsAlphaFromLuminanceFilterFactory(CoClass):
    "Adds an alpha band to the source raster derived from the luminance of the raster's color bands."
    _reg_clsid_ = GUID('{76B51BCF-0FA7-4FD6-987F-2C1347AE5D8C}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsAlphaFromLuminanceFilterFactory._com_interfaces_ = [_IAgStkGraphicsAlphaFromLuminanceFilterFactory, IAgStkGraphicsAlphaFromLuminanceFilterFactory]

class AgStkGraphicsTextBatchPrimitiveOptionalParametersFactory(CoClass):
    'Optional per-string and per-batch parameters for text batch primitive...'
    _reg_clsid_ = GUID('{AE90082F-0A09-4035-B519-185A7EA1A2C9}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTextBatchPrimitiveOptionalParametersFactory._com_interfaces_ = [_IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory, IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory]

IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters._methods_ = [
    COMMETHOD([helpstring('Defines a collection of texture coordinates.')], HRESULT, 'SetTextureCoordinates',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'TextureCoordinates' )),
    COMMETHOD([helpstring('Defines a collection of colors.')], HRESULT, 'SetPerVertexColors',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' )),
]
################################################################
## code template for IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters implementation
##class IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters_Impl(object):
##    def SetTextureCoordinates(self, TextureCoordinates):
##        'Defines a collection of texture coordinates.'
##        #return 
##
##    def SetPerVertexColors(self, Colors):
##        'Defines a collection of colors.'
##        #return 
##

IAgStkGraphicsTerrainCollection._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the number of terrain overlay objects in the collection.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets whether or not the collection is read only.')], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the terrain overlay at the specified index.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTerrainOverlay)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Constructs an iterator that can be used to iterate the collection.')], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([helpstring('Checks the presence of a terrain overlay in the collection.')], HRESULT, 'Contains',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Checks the presence of a terrain overlay with the specified Uri in the collection.')], HRESULT, 'ContainsUriString',
              ( ['in'], BSTR, 'StringUri' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Removes a terrain overlay from the collection.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Removes all terrain overlay objects from the collection.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring('Adds terrainOverlay to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay' )),
    COMMETHOD([helpstring('Adds terrainOverlay to the collection asynchronously.')], HRESULT, 'AddAsync',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay' )),
    COMMETHOD([helpstring('Gets the index of the specified terrain overlay.')], HRESULT, 'IndexOf',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([helpstring('Gets the index of the terrain overlay with the specified Uri.')], HRESULT, 'IndexOfUriString',
              ( ['in'], BSTR, 'StringUri' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([helpstring('Creates a terrain overlay from the uri, which represents a uri, and adds it to the collection.')], HRESULT, 'AddUriString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTerrainOverlay)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a terrain overlay from the uri, which represents a uri, and adds it to the collection asynchronously.')], HRESULT, 'AddAsyncUriString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTerrainOverlay)), 'ppRetVal' )),
    COMMETHOD([helpstring('Swaps the position of two terrain overlay objects.')], HRESULT, 'Swap',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay1' ),
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay2' )),
    COMMETHOD([helpstring('Swaps the position of two terrain overlay objects at the specified indices.')], HRESULT, 'SwapByIndex',
              ( ['in'], c_int, 'Index1' ),
              ( ['in'], c_int, 'Index2' )),
    COMMETHOD([helpstring('Moves the terrain overlay to the specified position.')], HRESULT, 'Move',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay' ),
              ( ['in'], c_int, 'NewPosition' )),
    COMMETHOD([helpstring('Moves the terrain overlay at the specified index to the specified position.')], HRESULT, 'MoveByIndex',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'NewPosition' )),
    COMMETHOD([helpstring('Brings the terrain overlay to the front of the collection so it is rendered first or on the bottom.')], HRESULT, 'BringToFront',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay' )),
    COMMETHOD([helpstring('Sends the terrain overlay to the back of the collection so it is rendered last or on the top.')], HRESULT, 'SendToBack',
              ( ['in'], POINTER(IAgStkGraphicsTerrainOverlay), 'TerrainOverlay' )),
]
################################################################
## code template for IAgStkGraphicsTerrainCollection implementation
##class IAgStkGraphicsTerrainCollection_Impl(object):
##    @property
##    def Count(self):
##        'Gets the number of terrain overlay objects in the collection.'
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Gets whether or not the collection is read only.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Gets the terrain overlay at the specified index.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Constructs an iterator that can be used to iterate the collection.'
##        #return ppRetVal
##
##    def Contains(self, TerrainOverlay):
##        'Checks the presence of a terrain overlay in the collection.'
##        #return pRetVal
##
##    def ContainsUriString(self, StringUri):
##        'Checks the presence of a terrain overlay with the specified Uri in the collection.'
##        #return pRetVal
##
##    def Remove(self, TerrainOverlay):
##        'Removes a terrain overlay from the collection.'
##        #return pRetVal
##
##    def Clear(self):
##        'Removes all terrain overlay objects from the collection.'
##        #return 
##
##    def Add(self, TerrainOverlay):
##        'Adds terrainOverlay to the collection.'
##        #return 
##
##    def AddAsync(self, TerrainOverlay):
##        'Adds terrainOverlay to the collection asynchronously.'
##        #return 
##
##    def IndexOf(self, TerrainOverlay):
##        'Gets the index of the specified terrain overlay.'
##        #return pRetVal
##
##    def IndexOfUriString(self, StringUri):
##        'Gets the index of the terrain overlay with the specified Uri.'
##        #return pRetVal
##
##    def AddUriString(self, Uri):
##        'Creates a terrain overlay from the uri, which represents a uri, and adds it to the collection.'
##        #return ppRetVal
##
##    def AddAsyncUriString(self, Uri):
##        'Creates a terrain overlay from the uri, which represents a uri, and adds it to the collection asynchronously.'
##        #return ppRetVal
##
##    def Swap(self, TerrainOverlay1, TerrainOverlay2):
##        'Swaps the position of two terrain overlay objects.'
##        #return 
##
##    def SwapByIndex(self, Index1, Index2):
##        'Swaps the position of two terrain overlay objects at the specified indices.'
##        #return 
##
##    def Move(self, TerrainOverlay, NewPosition):
##        'Moves the terrain overlay to the specified position.'
##        #return 
##
##    def MoveByIndex(self, Index, NewPosition):
##        'Moves the terrain overlay at the specified index to the specified position.'
##        #return 
##
##    def BringToFront(self, TerrainOverlay):
##        'Brings the terrain overlay to the front of the collection so it is rendered first or on the bottom.'
##        #return 
##
##    def SendToBack(self, TerrainOverlay):
##        'Sends the terrain overlay to the back of the collection so it is rendered last or on the top.'
##        #return 
##

class AgStkGraphicsAlphaFromPixelFilterFactory(CoClass):
    'Adds an alpha band to the source raster based on the value of its first pixel. All pixels in the source raster that are the same color as the first pixel will be made transparent.'
    _reg_clsid_ = GUID('{07EBF3FE-5EEA-44CD-9B43-26DF48264084}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsAlphaFromPixelFilterFactory._com_interfaces_ = [_IAgStkGraphicsAlphaFromPixelFilterFactory, IAgStkGraphicsAlphaFromPixelFilterFactory]

class AgStkGraphicsTextOverlayFactory(CoClass):
    'A rectangular overlay that contains text.'
    _reg_clsid_ = GUID('{93510500-DB25-43DE-B2ED-8431DB7BE2FE}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTextOverlayFactory._com_interfaces_ = [_IAgStkGraphicsTextOverlayFactory, IAgStkGraphicsTextOverlayFactory]

class AgStkGraphicsAlphaFromRasterFilterFactory(CoClass):
    'Adds an alpha band to the source raster derived from the color bands or alpha of another raster. This filter can be used to apply an alpha mask to the source raster.'
    _reg_clsid_ = GUID('{832E5956-B115-4EAF-BC9D-05F81C2D1FD9}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsAlphaFromRasterFilterFactory._com_interfaces_ = [_IAgStkGraphicsAlphaFromRasterFilterFactory, IAgStkGraphicsAlphaFromRasterFilterFactory]

class AgStkGraphicsTextureMatrixFactory(CoClass):
    'A 4 by 4 matrix applied to a texture coordinate.'
    _reg_clsid_ = GUID('{765386A1-D447-4711-96CC-2D874B412CFB}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTextureMatrixFactory._com_interfaces_ = [_IAgStkGraphicsTextureMatrixFactory, IAgStkGraphicsTextureMatrixFactory]

IAgStkGraphicsPositionInterpolator._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the polyline type of positions returned from interpolate')], HRESULT, 'PolylineType',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPolylineType), 'pRetVal' )),
    COMMETHOD([helpstring('Computes interpolated positions based on the input positions. Returns an array of positions in the order x, y, z.')], HRESULT, 'Interpolate',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsPositionInterpolator implementation
##class IAgStkGraphicsPositionInterpolator_Impl(object):
##    @property
##    def PolylineType(self):
##        'Gets the polyline type of positions returned from interpolate'
##        #return pRetVal
##
##    def Interpolate(self, Positions):
##        'Computes interpolated positions based on the input positions. Returns an array of positions in the order x, y, z.'
##        #return ppRetVal
##

IAgStkGraphicsScreenOverlayPickResultCollection._methods_ = [
    COMMETHOD(['propget', helpstring('A total number of elements in the collection.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Get an element at the specified position in the collection.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayPickResult)), 'ppRetVal' )),
    COMMETHOD(['propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsScreenOverlayPickResultCollection implementation
##class IAgStkGraphicsScreenOverlayPickResultCollection_Impl(object):
##    @property
##    def Count(self):
##        'A total number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Get an element at the specified position in the collection.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return ppRetVal
##

class AgStkGraphicsBandExtractFilterFactory(CoClass):
    'Extracts a band or set of bands from the source raster. The extract format property specifies the bands and the order of the bands that will be extracted.'
    _reg_clsid_ = GUID('{36AEF3B5-6A84-494F-BB28-A829687B7E37}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsBandExtractFilterFactory._com_interfaces_ = [_IAgStkGraphicsBandExtractFilterFactory, IAgStkGraphicsBandExtractFilterFactory]

class AgStkGraphicsTextureScreenOverlayFactory(CoClass):
    'A rectangular overlay that can be assigned a texture.'
    _reg_clsid_ = GUID('{1020A593-757E-4DFB-86B6-A22059CF813D}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTextureScreenOverlayFactory._com_interfaces_ = [_IAgStkGraphicsTextureScreenOverlayFactory, IAgStkGraphicsTextureScreenOverlayFactory]

_IAgStkGraphicsPointBatchPrimitive._methods_ = [
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propget'], HRESULT, 'ReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propput'], HRESULT, 'ReferenceFrame',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propput'], HRESULT, 'BoundingSphere',
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'ppRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propget'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propput'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(4801), helpstring('Gets or sets whether an outline is rendered around each point in the batch.'), 'propget'], HRESULT, 'DisplayOutline',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(4801), helpstring('Gets or sets whether an outline is rendered around each point in the batch.'), 'propput'], HRESULT, 'DisplayOutline',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(4802), helpstring("Gets or sets the outline's color."), 'propget'], HRESULT, 'OutlineColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(4802), helpstring("Gets or sets the outline's color."), 'propput'], HRESULT, 'OutlineColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(4803), helpstring('Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.'), 'propget'], HRESULT, 'OutlineTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(4803), helpstring('Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.'), 'propput'], HRESULT, 'OutlineTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(4804), helpstring('Gets or sets the size, in pixels, of the outline around each point in the batch.'), 'propget'], HRESULT, 'OutlineWidth',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(4804), helpstring('Gets or sets the size, in pixels, of the outline around each point in the batch.'), 'propput'], HRESULT, 'OutlineWidth',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(4805), helpstring('Gets or sets the size, in pixels, of each point in the point batch.'), 'propget'], HRESULT, 'PixelSize',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(4805), helpstring('Gets or sets the size, in pixels, of each point in the point batch.'), 'propput'], HRESULT, 'PixelSize',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(4806), helpstring('Gets the minimum pixel size supported by the video card.'), 'propget'], HRESULT, 'MinimumPixelSizeSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(4807), helpstring('Gets the maximum pixel size supported by the video card.'), 'propget'], HRESULT, 'MaximumPixelSizeSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(4808), helpstring('Gets or sets a distance display condition that is evaluated per point in the point batch during rendering. This is different than display condition, which is evaluated once for the entire point batch...'), 'propget'], HRESULT, 'DistanceDisplayConditionPerPoint',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(4808), helpstring('Gets or sets a distance display condition that is evaluated per point in the point batch during rendering. This is different than display condition, which is evaluated once for the entire point batch...'), 'propput'], HRESULT, 'DistanceDisplayConditionPerPoint',
              ( ['in'], POINTER(IAgStkGraphicsDistanceDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(4809), helpstring("Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."), 'propget'], HRESULT, 'SetHint',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSetHint), 'pRetVal' )),
    COMMETHOD([dispid(4810), helpstring("Gets or sets whether individual point indices will be included in the pick results returned from the scene's Pick method. Each point index that is picked will be returned as a batch primitive index."), 'propget'], HRESULT, 'PerItemPickingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(4810), helpstring("Gets or sets whether individual point indices will be included in the pick results returned from the scene's Pick method. Each point index that is picked will be returned as a batch primitive index."), 'propput'], HRESULT, 'PerItemPickingEnabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(4811), helpstring("Defines the positions of points in a point batch. The points are rendered in the primitive's reference frame.")], HRESULT, 'Set',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' )),
    COMMETHOD([dispid(4812), helpstring("Defines the positions and colors of points in a point batch. The points are rendered in the primitive's reference frame.")], HRESULT, 'SetWithColors',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' )),
    COMMETHOD([dispid(4813), helpstring("Defines the positions and colors of points in a point batch. The points are rendered in the primitive's reference frame. renderPassHint is provided for efficiency.")], HRESULT, 'SetWithColorsAndRenderPass',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([dispid(4816), helpstring('For convenience. Defines the positions of points in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling Set.')], HRESULT, 'SetCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' )),
    COMMETHOD([dispid(4825), helpstring('For convenience. Defines the positions and colors of points in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetCartographicWithColors',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' )),
    COMMETHOD([dispid(4826), helpstring('For convenience. Defines the positions and colors of points in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. renderPassHint is provided for efficiency...')], HRESULT, 'SetCartographicWithColorsAndRenderPass',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([dispid(4827), helpstring('Updates a subset of positions in a point batch.')], HRESULT, 'SetPartial',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(4828), helpstring('Updates a subset of positions in a point batch.')], HRESULT, 'SetPartialWithIndicesOrder',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' )),
    COMMETHOD([dispid(4829), helpstring('Updates a subset of positions and/or colors in a point batch.')], HRESULT, 'SetPartialWithColors',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(4830), helpstring('Updates a subset of positions and/or colors in a point batch.')], HRESULT, 'SetPartialWithColorsIndicesOrderAndRenderPass',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([dispid(4821), helpstring('For convenience. Updates a subset of positions in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling SetPartial')], HRESULT, 'SetPartialCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(4822), helpstring('For convenience. Updates a subset of positions in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling SetPartial')], HRESULT, 'SetPartialCartographicWithIndicesOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' )),
    COMMETHOD([dispid(4823), helpstring('For convenience. Updates a subset of positions and/or colors in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithColors',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(4824), helpstring('For convenience. Updates a subset of positions and/or colors in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithColorsIndicesOrderAndRenderPass',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
    COMMETHOD([dispid(4831), helpstring('Gets or sets whether individual points will be clipped by the central body.'), 'propget'], HRESULT, 'CentralBodyClipped',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(4831), helpstring('Gets or sets whether individual points will be clipped by the central body.'), 'propput'], HRESULT, 'CentralBodyClipped',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsPointBatchPrimitive implementation
##class _IAgStkGraphicsPointBatchPrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##    ReferenceFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##    BoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##    AutomaticallyComputeBoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's color."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether an outline is rendered around each point in the batch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether an outline is rendered around each point in the batch.'
##    DisplayOutline = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the outline's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the outline's color."
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency of the outline. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent.'
##    OutlineTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the size, in pixels, of the outline around each point in the batch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the size, in pixels, of the outline around each point in the batch.'
##    OutlineWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the size, in pixels, of each point in the point batch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the size, in pixels, of each point in the point batch.'
##    PixelSize = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumPixelSizeSupported(self):
##        'Gets the minimum pixel size supported by the video card.'
##        #return pRetVal
##
##    @property
##    def MaximumPixelSizeSupported(self):
##        'Gets the maximum pixel size supported by the video card.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets a distance display condition that is evaluated per point in the point batch during rendering. This is different than display condition, which is evaluated once for the entire point batch...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets a distance display condition that is evaluated per point in the point batch during rendering. This is different than display condition, which is evaluated once for the entire point batch...'
##    DistanceDisplayConditionPerPoint = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SetHint(self):
##        "Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."
##        #return pRetVal
##
##    def _get(self):
##        "Gets or sets whether individual point indices will be included in the pick results returned from the scene's Pick method. Each point index that is picked will be returned as a batch primitive index."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether individual point indices will be included in the pick results returned from the scene's Pick method. Each point index that is picked will be returned as a batch primitive index."
##    PerItemPickingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def Set(self, Positions):
##        "Defines the positions of points in a point batch. The points are rendered in the primitive's reference frame."
##        #return 
##
##    def SetWithColors(self, Positions, Colors):
##        "Defines the positions and colors of points in a point batch. The points are rendered in the primitive's reference frame."
##        #return 
##
##    def SetWithColorsAndRenderPass(self, Positions, Colors, RenderPassHint):
##        "Defines the positions and colors of points in a point batch. The points are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."
##        #return 
##
##    def SetCartographic(self, CentralBody, Positions):
##        'For convenience. Defines the positions of points in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling Set.'
##        #return 
##
##    def SetCartographicWithColors(self, CentralBody, Positions, Colors):
##        'For convenience. Defines the positions and colors of points in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetCartographicWithColorsAndRenderPass(self, CentralBody, Positions, Colors, RenderPassHint):
##        'For convenience. Defines the positions and colors of points in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. renderPassHint is provided for efficiency...'
##        #return 
##
##    def SetPartial(self, Positions, Indices):
##        'Updates a subset of positions in a point batch.'
##        #return 
##
##    def SetPartialWithIndicesOrder(self, Positions, Indices, IndicesOrderHint):
##        'Updates a subset of positions in a point batch.'
##        #return 
##
##    def SetPartialWithColors(self, Positions, Colors, Indices):
##        'Updates a subset of positions and/or colors in a point batch.'
##        #return 
##
##    def SetPartialWithColorsIndicesOrderAndRenderPass(self, Positions, Colors, Indices, IndicesOrderHint, RenderPassHint):
##        'Updates a subset of positions and/or colors in a point batch.'
##        #return 
##
##    def SetPartialCartographic(self, CentralBody, Positions, Indices):
##        'For convenience. Updates a subset of positions in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling SetPartial'
##        #return 
##
##    def SetPartialCartographicWithIndicesOrder(self, CentralBody, Positions, Indices, IndicesOrderHint):
##        'For convenience. Updates a subset of positions in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling SetPartial'
##        #return 
##
##    def SetPartialCartographicWithColors(self, CentralBody, Positions, Colors, Indices):
##        'For convenience. Updates a subset of positions and/or colors in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartialCartographicWithColorsIndicesOrderAndRenderPass(self, CentralBody, Positions, Colors, Indices, IndicesOrderHint, RenderPassHint):
##        'For convenience. Updates a subset of positions and/or colors in a point batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether individual points will be clipped by the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether individual points will be clipped by the central body.'
##    CentralBodyClipped = property(_get, _set, doc = _set.__doc__)
##

_IAgStkGraphicsPathPrimitive._methods_ = [
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propget'], HRESULT, 'ReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propput'], HRESULT, 'ReferenceFrame',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propput'], HRESULT, 'BoundingSphere',
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'ppRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propget'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propput'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Returns the number of points.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10102), helpstring('Returns the capacity that was set during object construction. The capacity is the amount of memory reserved for storing the points on the path. This will be automatically updated when adding/removing points.'), 'propget'], HRESULT, 'Capacity',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(10103), helpstring('Gets or sets how the primitive will be updated based on the current animation time.'), 'propget'], HRESULT, 'UpdatePolicy',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPrimitiveUpdatePolicy)), 'ppRetVal' )),
    COMMETHOD([dispid(10103), helpstring('Gets or sets how the primitive will be updated based on the current animation time.'), 'propput'], HRESULT, 'UpdatePolicy',
              ( ['in'], POINTER(IAgStkGraphicsPathPrimitiveUpdatePolicy), 'ppRetVal' )),
    COMMETHOD([dispid(10104), helpstring('Gets or sets how the primitive interprets the positions.'), 'propget'], HRESULT, 'PolylineType',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPolylineType), 'pRetVal' )),
    COMMETHOD([dispid(10104), helpstring('Gets or sets how the primitive interprets the positions.'), 'propput'], HRESULT, 'PolylineType',
              ( ['in'], AgEStkGraphicsPolylineType, 'pRetVal' )),
    COMMETHOD([dispid(10105), helpstring('Gets or sets the line width, in pixels.'), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(10105), helpstring('Gets or sets the line width, in pixels.'), 'propput'], HRESULT, 'Width',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(10106), helpstring('Gets the minimum width, in pixels, supported by the video card.'), 'propget'], HRESULT, 'MinimumWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(10107), helpstring('Gets the maximum width, in pixels, supported by the video card.'), 'propget'], HRESULT, 'MaximumWidthSupported',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(10108), helpstring('Gets or sets whether an outline is rendered around the line.'), 'propget'], HRESULT, 'DisplayOutline',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(10108), helpstring('Gets or sets whether an outline is rendered around the line.'), 'propput'], HRESULT, 'DisplayOutline',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(10109), helpstring('Gets or sets the width, in pixels, of the outline around the line.'), 'propget'], HRESULT, 'OutlineWidth',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(10109), helpstring('Gets or sets the width, in pixels, of the outline around the line.'), 'propput'], HRESULT, 'OutlineWidth',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(10110), helpstring("Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."), 'propget'], HRESULT, 'PerItemPickingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(10110), helpstring("Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."), 'propput'], HRESULT, 'PerItemPickingEnabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Returns the point at the given zero-based index.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Returns an enumerator that iterates through the collection.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([dispid(10113), helpstring('Add a path point to the front of the line.')], HRESULT, 'AddFront',
              ( ['in'], POINTER(IAgStkGraphicsPathPoint), 'PathPoint' )),
    COMMETHOD([dispid(10114), helpstring('Add the range of path points to the front of the line.')], HRESULT, 'AddRangeToFront',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' )),
    COMMETHOD([dispid(10115), helpstring('Add a path point to the back of the line.')], HRESULT, 'AddBack',
              ( ['in'], POINTER(IAgStkGraphicsPathPoint), 'PathPoint' )),
    COMMETHOD([dispid(10116), helpstring('Add the range of path points to the back of the line.')], HRESULT, 'AddRangeToBack',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' )),
    COMMETHOD([dispid(10117), helpstring('Remove a path point to the front of the line.')], HRESULT, 'RemoveFront'),
    COMMETHOD([dispid(10118), helpstring('Remove all points before index.')], HRESULT, 'RemoveAllBefore',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([dispid(10119), helpstring('Remove a path point to the back of the line.')], HRESULT, 'RemoveBack'),
    COMMETHOD([dispid(10120), helpstring('Remove all points after index.')], HRESULT, 'RemoveAllAfter',
              ( ['in'], c_int, 'Index' )),
    COMMETHOD([dispid(10121), helpstring('Access the path point at the front of the line.')], HRESULT, 'Front',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(10122), helpstring('Access the path point at the back of the line.')], HRESULT, 'Back',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
    COMMETHOD([dispid(10123), helpstring('Removes all of the points.')], HRESULT, 'Clear'),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
    COMMETHOD([dispid(10124), helpstring('Gets or sets whether the polyline will be clipped by the central body.'), 'propget'], HRESULT, 'CentralBodyClipped',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(10124), helpstring('Gets or sets whether the polyline will be clipped by the central body.'), 'propput'], HRESULT, 'CentralBodyClipped',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsPathPrimitive implementation
##class _IAgStkGraphicsPathPrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##    ReferenceFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##    BoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##    AutomaticallyComputeBoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's color."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Count(self):
##        'Returns the number of points.'
##        #return pRetVal
##
##    @property
##    def Capacity(self):
##        'Returns the capacity that was set during object construction. The capacity is the amount of memory reserved for storing the points on the path. This will be automatically updated when adding/removing points.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets how the primitive will be updated based on the current animation time.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets how the primitive will be updated based on the current animation time.'
##    UpdatePolicy = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets how the primitive interprets the positions.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets how the primitive interprets the positions.'
##    PolylineType = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the line width, in pixels.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the line width, in pixels.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumWidthSupported(self):
##        'Gets the minimum width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    @property
##    def MaximumWidthSupported(self):
##        'Gets the maximum width, in pixels, supported by the video card.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets whether an outline is rendered around the line.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether an outline is rendered around the line.'
##    DisplayOutline = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the width, in pixels, of the outline around the line.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the width, in pixels, of the outline around the line.'
##    OutlineWidth = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether individual line indices will be included in the pick results returned from the scene's Pick method. Each line index that is picked will be returned as a batch primitive index."
##    PerItemPickingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Item(self, Index):
##        'Returns the point at the given zero-based index.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Returns an enumerator that iterates through the collection.'
##        #return ppRetVal
##
##    def AddFront(self, PathPoint):
##        'Add a path point to the front of the line.'
##        #return 
##
##    def AddRangeToFront(self, Positions):
##        'Add the range of path points to the front of the line.'
##        #return 
##
##    def AddBack(self, PathPoint):
##        'Add a path point to the back of the line.'
##        #return 
##
##    def AddRangeToBack(self, Positions):
##        'Add the range of path points to the back of the line.'
##        #return 
##
##    def RemoveFront(self):
##        'Remove a path point to the front of the line.'
##        #return 
##
##    def RemoveAllBefore(self, Index):
##        'Remove all points before index.'
##        #return 
##
##    def RemoveBack(self):
##        'Remove a path point to the back of the line.'
##        #return 
##
##    def RemoveAllAfter(self, Index):
##        'Remove all points after index.'
##        #return 
##
##    def Front(self):
##        'Access the path point at the front of the line.'
##        #return ppRetVal
##
##    def Back(self):
##        'Access the path point at the back of the line.'
##        #return ppRetVal
##
##    def Clear(self):
##        'Removes all of the points.'
##        #return 
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the polyline will be clipped by the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the polyline will be clipped by the central body.'
##    CentralBodyClipped = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsBandOrderFilterFactory(CoClass):
    "Reorders or swizzles the bands of the source raster to match the band order of the raster format specified by the band order property. When maintain raster format is true, the source raster's format is maintained after swizzling."
    _reg_clsid_ = GUID('{7145194E-C0FB-4516-A8BE-056715FDB03E}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsBandOrderFilterFactory._com_interfaces_ = [_IAgStkGraphicsBandOrderFilterFactory, IAgStkGraphicsBandOrderFilterFactory]

class AgStkGraphicsTimeIntervalDisplayConditionFactory(CoClass):
    "Defines an inclusive time interval that determines when an object, such as a <topic name='Primitives'>primitive</topic>, is <topic name='Glossary' anchor='Render'>rendered</topic> based on the current animation time ."
    _reg_clsid_ = GUID('{13B8E519-8D0A-4240-8C0E-47B1DD902168}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTimeIntervalDisplayConditionFactory._com_interfaces_ = [_IAgStkGraphicsTimeIntervalDisplayConditionFactory, IAgStkGraphicsTimeIntervalDisplayConditionFactory]

IAgStkGraphicsTriangulatorResult._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the positions of the mesh. Three array elements (in the order x, y, z) constitute one position.')], HRESULT, 'Positions',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the normals of the mesh. Every position in positions has corresponding normal. Normals are commonly used for lighting. Three array elements (in the order x, y, z) constitute one normal.')], HRESULT, 'Normals',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets indices into positions and normals. Every 3 indices represent 1 triangle. The indices returned consider the three components of a position or normal (x, y, and z) as a single array element...')], HRESULT, 'Indices',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the orientation of front-facing triangles in the mesh.')], HRESULT, 'TriangleWindingOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsWindingOrder), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the bounding sphere that encompasses the mesh.')], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTriangulatorResult implementation
##class IAgStkGraphicsTriangulatorResult_Impl(object):
##    @property
##    def Positions(self):
##        'Gets the positions of the mesh. Three array elements (in the order x, y, z) constitute one position.'
##        #return ppRetVal
##
##    @property
##    def Normals(self):
##        'Gets the normals of the mesh. Every position in positions has corresponding normal. Normals are commonly used for lighting. Three array elements (in the order x, y, z) constitute one normal.'
##        #return ppRetVal
##
##    @property
##    def Indices(self):
##        'Gets indices into positions and normals. Every 3 indices represent 1 triangle. The indices returned consider the three components of a position or normal (x, y, and z) as a single array element...'
##        #return ppRetVal
##
##    @property
##    def TriangleWindingOrder(self):
##        'Gets the orientation of front-facing triangles in the mesh.'
##        #return pRetVal
##
##    @property
##    def BoundingSphere(self):
##        'Gets the bounding sphere that encompasses the mesh.'
##        #return ppRetVal
##

_IAgStkGraphicsPixelSizeDisplayCondition._methods_ = [
    COMMETHOD([dispid(4701), helpstring('Gets or sets the minimum pixel size of the inclusive distance interval.'), 'propget'], HRESULT, 'MinimumPixelSize',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4701), helpstring('Gets or sets the minimum pixel size of the inclusive distance interval.'), 'propput'], HRESULT, 'MinimumPixelSize',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(4702), helpstring('Gets or sets the maximum pixel size of the inclusive distance interval. Use Int32.MaxValue to ignore checking the maximum distance.'), 'propget'], HRESULT, 'MaximumPixelSize',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(4702), helpstring('Gets or sets the maximum pixel size of the inclusive distance interval. Use Int32.MaxValue to ignore checking the maximum distance.'), 'propput'], HRESULT, 'MaximumPixelSize',
              ( ['in'], c_int, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsPixelSizeDisplayCondition implementation
##class _IAgStkGraphicsPixelSizeDisplayCondition_Impl(object):
##    def _get(self):
##        'Gets or sets the minimum pixel size of the inclusive distance interval.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the minimum pixel size of the inclusive distance interval.'
##    MinimumPixelSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the maximum pixel size of the inclusive distance interval. Use Int32.MaxValue to ignore checking the maximum distance.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum pixel size of the inclusive distance interval. Use Int32.MaxValue to ignore checking the maximum distance.'
##    MaximumPixelSize = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsBlurFilterFactory(CoClass):
    'Applies a convolution filter to blur or smooth the source raster. Can be used to reduce noise in the raster.'
    _reg_clsid_ = GUID('{C9271BE4-C823-4127-89B4-11BE9074F904}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsBlurFilterFactory._com_interfaces_ = [_IAgStkGraphicsBlurFilterFactory, IAgStkGraphicsBlurFilterFactory]

class AgStkGraphicsTriangleMeshPrimitiveFactory(CoClass):
    'Renders a triangle mesh in the 3D scene. Examples of triangle meshes includes polygons on the globe (e.g. states or countries), terrain and imagery extents, ellipses, and extrusions.'
    _reg_clsid_ = GUID('{60BCF84F-A10C-462A-9D34-89BD20C92D61}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTriangleMeshPrimitiveFactory._com_interfaces_ = [_IAgStkGraphicsTriangleMeshPrimitiveFactory, IAgStkGraphicsTriangleMeshPrimitiveFactory]

IAgStkGraphicsTerrainOverlay._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the value from which to offset the terrain height.')], HRESULT, 'AltitudeOffset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the value from which to offset the terrain height.')], HRESULT, 'AltitudeOffset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the value from which to scale the terrain height.')], HRESULT, 'AltitudeScale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the value from which to scale the terrain height.')], HRESULT, 'AltitudeScale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects.')], HRESULT, 'Supported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsTerrainOverlay implementation
##class IAgStkGraphicsTerrainOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the value from which to offset the terrain height.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value from which to offset the terrain height.'
##    AltitudeOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value from which to scale the terrain height.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value from which to scale the terrain height.'
##    AltitudeScale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Supported(self):
##        'Gets whether the video card supports adding terrain overlay objects. Video cards that support OpenGL 1.2 or higher support terrain overlay objects.'
##        #return pRetVal
##

class AgStkGraphicsBrightnessFilterFactory(CoClass):
    "Adjusts the brightness of the source raster's color bands. The adjustment to brightness is a value between -1 and 1, corresponding to least bright to most bright."
    _reg_clsid_ = GUID('{7365692E-CAC8-40A1-9018-F877FB3521E6}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsBrightnessFilterFactory._com_interfaces_ = [_IAgStkGraphicsBrightnessFilterFactory, IAgStkGraphicsBrightnessFilterFactory]

class AgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory(CoClass):
    'Optional parameters for triangle mesh primitive...'
    _reg_clsid_ = GUID('{AC6B9C58-12AE-492C-8868-1A5F527D1589}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory._com_interfaces_ = [_IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory, IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory]

IAgStkGraphicsScreenOverlayPickResult._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the position that was picked within the picked overlay. The array represents the picked position and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.')], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the position that was picked within the overall globe control. This is essentially the same position that was passed to pick screen overlays. The array represents the picked position and has a size of 4...')], HRESULT, 'ControlPosition',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the screen overlay that was picked.')], HRESULT, 'Overlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlay)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsScreenOverlayPickResult implementation
##class IAgStkGraphicsScreenOverlayPickResult_Impl(object):
##    @property
##    def Position(self):
##        'Gets the position that was picked within the picked overlay. The array represents the picked position and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##        #return ppRetVal
##
##    @property
##    def ControlPosition(self):
##        'Gets the position that was picked within the overall globe control. This is essentially the same position that was passed to pick screen overlays. The array represents the picked position and has a size of 4...'
##        #return ppRetVal
##
##    @property
##    def Overlay(self):
##        'Gets the screen overlay that was picked.'
##        #return ppRetVal
##

_IAgStkGraphicsScreenOverlay._methods_ = [
    COMMETHOD([dispid(17301), helpstring('Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'), 'propget'], HRESULT, 'Position',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17301), helpstring('Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'), 'propput'], HRESULT, 'Position',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17302), helpstring('Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'), 'propget'], HRESULT, 'PinningPosition',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17302), helpstring('Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'), 'propput'], HRESULT, 'PinningPosition',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17303), helpstring('Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'), 'propget'], HRESULT, 'X',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17303), helpstring('Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'), 'propput'], HRESULT, 'X',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17304), helpstring('Gets or sets the unit of the x property.'), 'propget'], HRESULT, 'XUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD([dispid(17304), helpstring('Gets or sets the unit of the x property.'), 'propput'], HRESULT, 'XUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD([dispid(17305), helpstring('Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'), 'propget'], HRESULT, 'Y',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17305), helpstring('Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'), 'propput'], HRESULT, 'Y',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17306), helpstring('Gets or sets the unit of the y property.'), 'propget'], HRESULT, 'YUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD([dispid(17306), helpstring('Gets or sets the unit of the y property.'), 'propput'], HRESULT, 'YUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD([dispid(17307), helpstring('Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'), 'propget'], HRESULT, 'Size',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17307), helpstring('Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'), 'propput'], HRESULT, 'Size',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17308), helpstring('Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17308), helpstring('Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'), 'propput'], HRESULT, 'Width',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17309), helpstring('Gets or sets the unit of the width property.'), 'propget'], HRESULT, 'WidthUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD([dispid(17309), helpstring('Gets or sets the unit of the width property.'), 'propput'], HRESULT, 'WidthUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD([dispid(17310), helpstring('Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17310), helpstring('Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'), 'propput'], HRESULT, 'Height',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17311), helpstring('Gets or sets the unit of the height property.'), 'propget'], HRESULT, 'HeightUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayUnit), 'pRetVal' )),
    COMMETHOD([dispid(17311), helpstring('Gets or sets the unit of the height property.'), 'propput'], HRESULT, 'HeightUnit',
              ( ['in'], AgEStkGraphicsScreenOverlayUnit, 'pRetVal' )),
    COMMETHOD([dispid(17312), helpstring("Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."), 'propget'], HRESULT, 'MinimumSize',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17312), helpstring("Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."), 'propput'], HRESULT, 'MinimumSize',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17313), helpstring("Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."), 'propget'], HRESULT, 'MaximumSize',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17313), helpstring("Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."), 'propput'], HRESULT, 'MaximumSize',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17314), helpstring('Gets the bounds of the overlay relative to its parent. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'), 'propget'], HRESULT, 'Bounds',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17315), helpstring("Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."), 'propget'], HRESULT, 'BorderColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17315), helpstring("Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."), 'propput'], HRESULT, 'BorderColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17316), helpstring("Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."), 'propget'], HRESULT, 'BorderSize',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(17316), helpstring("Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."), 'propput'], HRESULT, 'BorderSize',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(17317), helpstring('Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'), 'propget'], HRESULT, 'BorderTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17317), helpstring('Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'), 'propput'], HRESULT, 'BorderTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(17318), helpstring('Gets or sets the value with which the overlay will be translated from the X value of the position property.'), 'propget'], HRESULT, 'TranslationX',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17318), helpstring('Gets or sets the value with which the overlay will be translated from the X value of the position property.'), 'propput'], HRESULT, 'TranslationX',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17319), helpstring('Gets or sets the value with which the overlay will be translated from the Y value of the position property.'), 'propget'], HRESULT, 'TranslationY',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17319), helpstring('Gets or sets the value with which the overlay will be translated from the Y value of the position property.'), 'propput'], HRESULT, 'TranslationY',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17320), helpstring('Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'), 'propget'], HRESULT, 'RotationAngle',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17320), helpstring('Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'), 'propput'], HRESULT, 'RotationAngle',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17321), helpstring('Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'), 'propget'], HRESULT, 'RotationPoint',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17321), helpstring('Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'), 'propput'], HRESULT, 'RotationPoint',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17322), helpstring("Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."), 'propget'], HRESULT, 'Scale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(17322), helpstring("Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."), 'propput'], HRESULT, 'Scale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(17323), helpstring('Gets or sets whether the overlay will be flipped along its X axis.'), 'propget'], HRESULT, 'FlipX',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17323), helpstring('Gets or sets whether the overlay will be flipped along its X axis.'), 'propput'], HRESULT, 'FlipX',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17324), helpstring('Gets or sets whether the overlay will be flipped along its Y axis.'), 'propget'], HRESULT, 'FlipY',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17324), helpstring('Gets or sets whether the overlay will be flipped along its Y axis.'), 'propput'], HRESULT, 'FlipY',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17325), helpstring("Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."), 'propget'], HRESULT, 'Origin',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayOrigin), 'pRetVal' )),
    COMMETHOD([dispid(17325), helpstring("Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."), 'propput'], HRESULT, 'Origin',
              ( ['in'], AgEStkGraphicsScreenOverlayOrigin, 'pRetVal' )),
    COMMETHOD([dispid(17326), helpstring('Gets or sets the origin of the pinning position property, relative to the overlay...'), 'propget'], HRESULT, 'PinningOrigin',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsScreenOverlayPinningOrigin), 'pRetVal' )),
    COMMETHOD([dispid(17326), helpstring('Gets or sets the origin of the pinning position property, relative to the overlay...'), 'propput'], HRESULT, 'PinningOrigin',
              ( ['in'], AgEStkGraphicsScreenOverlayPinningOrigin, 'pRetVal' )),
    COMMETHOD([dispid(17327), helpstring("Gets the overlay's parent. This may be another overlay if this overlay was added to that overlay's overlays collection. Or, it may be the screen overlay manager if this overlay was added to the scene manager'sscreen overlays collection."), 'propget'], HRESULT, 'Parent',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayContainer)), 'ppRetVal' )),
    COMMETHOD([dispid(17328), helpstring("Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17328), helpstring("Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(17329), helpstring("Gets or sets the overlay's color. By default, the overlay is white."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17329), helpstring("Gets or sets the overlay's color. By default, the overlay is white."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17330), helpstring('Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'), 'propget'], HRESULT, 'PickingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17330), helpstring('Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'), 'propput'], HRESULT, 'PickingEnabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17331), helpstring("Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."), 'propget'], HRESULT, 'ClipToParent',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17331), helpstring("Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."), 'propput'], HRESULT, 'ClipToParent',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17332), helpstring("Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17332), helpstring("Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17333), helpstring('Gets the position of the overlay in coordinates relative to the overall globe control. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'), 'propget'], HRESULT, 'ControlPosition',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17334), helpstring('Gets the size of the overlay in coordinates relative to the overall globe control. The elements are in the order width, height, width screen overlay unit, height screen overlay unit.'), 'propget'], HRESULT, 'ControlSize',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17335), helpstring('Gets the bounds of the overlay in coordinates relative to the overall globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'), 'propget'], HRESULT, 'ControlBounds',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17336), helpstring("Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17336), helpstring("Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17338), helpstring('Gets the collection of overlays that are contained within this overlay.'), 'propget'], HRESULT, 'Overlays',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(17339), helpstring('Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'), 'propget'], HRESULT, 'Padding',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17339), helpstring('Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'), 'propput'], HRESULT, 'Padding',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(17340), helpstring('Brings the overlay to the front of the z-order, so it is on top of all other overlays with the same parent')], HRESULT, 'BringToFront'),
    COMMETHOD([dispid(17341), helpstring('Sends the overlay to the back of the z-order, so it is underneath all other overlays with the same parent')], HRESULT, 'SendToBack'),
    COMMETHOD([dispid(17342), helpstring('Transforms a given position, specified relative to the overlay, into coordinates relative to the overall globe control...')], HRESULT, 'OverlayToControl',
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17343), helpstring('Transforms a given position, specified relative to the overall globe control, into coordinates relative to this overlay...')], HRESULT, 'ControlToOverlay',
              ( ['in'], c_double, 'X' ),
              ( ['in'], c_double, 'Y' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(17337), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17337), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsScreenOverlay implementation
##class _IAgStkGraphicsScreenOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the position of the overlay relative to its parent. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##    Position = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the pinning position of the overlay, relative to the overlay, which determines the point on the overlay that corresponds to the position property. The array represents the pinning position of the overlay and has a size of 4...'
##    PinningPosition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the X position of the overlay relative to its parent. The unit in which the position is defined is specified by the x unit property. The position is measured horizontally from the origin, which is, by default, the lower-left corner.'
##    X = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the x property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the x property.'
##    XUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the Y position of the overlay relative to its parent. The unit in which the position is defined is specified by the y unit property. The position is measured vertically from the origin, which is, by default, the lower-left corner.'
##    Y = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the y property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the y property.'
##    YUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the size of the overlay. The array elements represent the size of the overlay in the order width, height, width screen overlay unit, height screen overlay unit.'
##    Size = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the width of the overlay. The unit in which the width is defined is specified by the width unit property.'
##    Width = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the width property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the width property.'
##    WidthUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the height of the overlay. The unit in which the height is defined is specified by the height unit property.'
##    Height = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the unit of the height property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the unit of the height property.'
##    HeightUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the minimum size of the overlay. The overlay will never be smaller than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very small..."
##    MinimumSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the maximum size of the overlay. The overlay will never be larger than this size, even if the overlay's size is specified as a percentage of its parent and its parent is very large..."
##    MaximumSize = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Bounds(self):
##        'Gets the bounds of the overlay relative to its parent. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overlay's border color. By default, the border color is white. However, also by default, the overlay has a border size of 0.0 so the border is not displayed."
##    BorderColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the size of the overlay's border. By default, this is 0.0 so the border is not displayed."
##    BorderSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency of the overlay border. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent.'
##    BorderTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value with which the overlay will be translated from the X value of the position property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value with which the overlay will be translated from the X value of the position property.'
##    TranslationX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the value with which the overlay will be translated from the Y value of the position property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the value with which the overlay will be translated from the Y value of the position property.'
##    TranslationY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the counter-clockwise rotation of the overlay, in radians. The overlay is rotated around the point specified by the rotation point property.'
##    RotationAngle = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the point that the overlay is rotated around when the rotation angle property has a value other than 0.0. The array contains seven elements defining the properties of the rotation point...'
##    RotationPoint = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the fractional value used to scale the overlay's size property. A value greater than 1.0 will make the overlay larger while a value less than 1.0 will make it smaller."
##    Scale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the overlay will be flipped along its X axis.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the overlay will be flipped along its X axis.'
##    FlipX = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the overlay will be flipped along its Y axis.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the overlay will be flipped along its Y axis.'
##    FlipY = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the origin from which the overlay's position is defined. By default, the value of this property is bottom left..."
##    Origin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the origin of the pinning position property, relative to the overlay...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the origin of the pinning position property, relative to the overlay...'
##    PinningOrigin = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Parent(self):
##        "Gets the overlay's parent. This may be another overlay if this overlay was added to that overlay's overlays collection. Or, it may be the screen overlay manager if this overlay was added to the scene manager'sscreen overlays collection."
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overlay's translucency. Translucency is a value between 0.0 and 1.0, where 0.0 is completely opaque and 1.0 is completely transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the overlay's color. By default, the overlay is white."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the overlay's color. By default, the overlay is white."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a value indicating whether or not picking on the overlay is enabled. If picking is disabled, this overlay will never show up in the result of PickScreenOverlay, even if it occupies the specified pick position.'
##    PickingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets a value indicating whether or not the overlay will be clipped by the bounds of its parent. If this property is <see langword='false' />, part of this overlay may be visible outside of its parent's bounds."
##    ClipToParent = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if this overlay and the collection of overlays that are contained within this overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def ControlPosition(self):
##        'Gets the position of the overlay in coordinates relative to the overall globe control. The array represents the position of the overlay and has a size of 4. The elements are in the order x position, y position, x screen overlay unit, y screen overlay unit.'
##        #return ppRetVal
##
##    @property
##    def ControlSize(self):
##        'Gets the size of the overlay in coordinates relative to the overall globe control. The elements are in the order width, height, width screen overlay unit, height screen overlay unit.'
##        #return ppRetVal
##
##    @property
##    def ControlBounds(self):
##        'Gets the bounds of the overlay in coordinates relative to the overall globe control. The array contains the properties defining the bounds in the order left x location, top y location, width, height.'
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the overlay should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaulate to true for the overlay to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Overlays(self):
##        'Gets the collection of overlays that are contained within this overlay.'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the padding surrounding the overlays that are contained within this overlay. The array contains the components of the padding arranged in the order left, top, right, bottom.'
##    Padding = property(_get, _set, doc = _set.__doc__)
##
##    def BringToFront(self):
##        'Brings the overlay to the front of the z-order, so it is on top of all other overlays with the same parent'
##        #return 
##
##    def SendToBack(self):
##        'Sends the overlay to the back of the z-order, so it is underneath all other overlays with the same parent'
##        #return 
##
##    def OverlayToControl(self, X, Y):
##        'Transforms a given position, specified relative to the overlay, into coordinates relative to the overall globe control...'
##        #return ppRetVal
##
##    def ControlToOverlay(self, X, Y):
##        'Transforms a given position, specified relative to the overall globe control, into coordinates relative to this overlay...'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsColorToLuminanceFilterFactory(CoClass):
    'Extracts a luminance band derived from the color bands of the source raster.'
    _reg_clsid_ = GUID('{82180125-E2F3-400A-ADB7-E13A154BF6A8}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsColorToLuminanceFilterFactory._com_interfaces_ = [_IAgStkGraphicsColorToLuminanceFilterFactory, IAgStkGraphicsColorToLuminanceFilterFactory]

class AgStkGraphicsVectorPrimitiveFactory(CoClass):
    'Renders a vector in the 3D scene. A vector is defined by a source (given by an ISystem) and a direction (given by an IVector or IPoint). Length is auto-calculated or can be set separately.'
    _reg_clsid_ = GUID('{798697C4-C903-4E26-A97B-0F95E69C9027}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsVectorPrimitiveFactory._com_interfaces_ = [_IAgStkGraphicsVectorPrimitiveFactory, IAgStkGraphicsVectorPrimitiveFactory]

class AgStkGraphicsContrastFilterFactory(CoClass):
    'Adjusts the contrast of the source raster. The adjustment to contrast is a value between -1 and 1, corresponding to least contrast to most contrast.'
    _reg_clsid_ = GUID('{796431DE-C471-471B-A348-6CE2D087E3DF}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsContrastFilterFactory._com_interfaces_ = [_IAgStkGraphicsContrastFilterFactory, IAgStkGraphicsContrastFilterFactory]

IAgStkGraphicsPathPointCollection._methods_ = [
    COMMETHOD(['propget', helpstring('A total number of elements in the collection.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a path point at the specified position in the collection.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPathPoint)), 'ppRetVal' )),
    COMMETHOD(['propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsPathPointCollection implementation
##class IAgStkGraphicsPathPointCollection_Impl(object):
##    @property
##    def Count(self):
##        'A total number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Returns a path point at the specified position in the collection.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return ppRetVal
##

IAgStkGraphicsDistanceToPrimitiveDisplayCondition._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the primitive associated with this instance.')], HRESULT, 'Primitive',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPrimitive)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the primitive associated with this instance.')], HRESULT, 'Primitive',
              ( ['in'], POINTER(IAgStkGraphicsPrimitive), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the minimum distance, in meters, of the inclusive distance interval.')], HRESULT, 'MinimumDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the minimum distance, in meters, of the inclusive distance interval.')], HRESULT, 'MinimumDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the squared minimum distance, in meters, of the inclusive distance interval.')], HRESULT, 'MinimumDistanceSquared',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.')], HRESULT, 'MaximumDistance',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.')], HRESULT, 'MaximumDistance',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the squared maximum distance, in meters, of the inclusive distance interval.')], HRESULT, 'MaximumDistanceSquared',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsDistanceToPrimitiveDisplayCondition implementation
##class IAgStkGraphicsDistanceToPrimitiveDisplayCondition_Impl(object):
##    def _get(self):
##        'Gets or sets the primitive associated with this instance.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the primitive associated with this instance.'
##    Primitive = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the minimum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the minimum distance, in meters, of the inclusive distance interval.'
##    MinimumDistance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MinimumDistanceSquared(self):
##        'Gets the squared minimum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum distance, in meters, of the inclusive distance interval. Use Double.MaxValue to ignore checking the maximum distance.'
##    MaximumDistance = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MaximumDistanceSquared(self):
##        'Gets the squared maximum distance, in meters, of the inclusive distance interval.'
##        #return pRetVal
##

IAgStkGraphicsFilteringRasterStreamFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance with a raster stream and the raster filter that will be applied to each update of that stream.')], HRESULT, 'Initialize',
              ( ['in'], POINTER(IAgStkGraphicsRasterStream), 'RasterStream' ),
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsFilteringRasterStream)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsFilteringRasterStreamFactory implementation
##class IAgStkGraphicsFilteringRasterStreamFactory_Impl(object):
##    def Initialize(self, RasterStream, Filter):
##        'Initializes a new instance with a raster stream and the raster filter that will be applied to each update of that stream.'
##        #return ppRetVal
##

class AgStkGraphicsConvolutionFilterFactory(CoClass):
    "Applies convolution to the source raster. Convolution is the modification of a pixel's value based on the values of its surrounding pixels. The kernel is the numerical matrix that is applied to each pixel in this process..."
    _reg_clsid_ = GUID('{1331A62B-1CBE-4135-98AF-0E0356BB1EBB}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsConvolutionFilterFactory._com_interfaces_ = [_IAgStkGraphicsConvolutionFilterFactory, IAgStkGraphicsConvolutionFilterFactory]

_IAgStkGraphicsRasterImageGlobeOverlay._methods_ = [
    COMMETHOD([dispid(16701), helpstring('Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16701), helpstring('Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16703), helpstring("Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."), 'propget'], HRESULT, 'UseAltitudeBasedTranslucency',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16703), helpstring("Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."), 'propput'], HRESULT, 'UseAltitudeBasedTranslucency',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(16704), helpstring("Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyLowerTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16704), helpstring("Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyLowerTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16705), helpstring("Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyUpperTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(16705), helpstring("Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyUpperTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(16706), helpstring("Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyLowerAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16706), helpstring("Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyLowerAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16707), helpstring("Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propget'], HRESULT, 'AltitudeBasedTranslucencyUpperAltitude',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(16707), helpstring("Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."), 'propput'], HRESULT, 'AltitudeBasedTranslucencyUpperAltitude',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(16702), helpstring('Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'), 'propget'], HRESULT, 'MoreThanOneImageGlobeOverlaySupported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16801), helpstring("Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16802), helpstring('Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'), 'propget'], HRESULT, 'Extent',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16803), helpstring('Gets the globe overlay role of the globe overlay.'), 'propget'], HRESULT, 'Role',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsGlobeOverlayRole), 'pRetVal' )),
    COMMETHOD([dispid(16804), helpstring('Gets the absolute URI specifying the location of the globe overlay.'), 'propget'], HRESULT, 'UriAsString',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16805), helpstring('Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(10201), helpstring('Gets or sets whether transparent color should be used.'), 'propget'], HRESULT, 'UseTransparentColor',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(10201), helpstring('Gets or sets whether transparent color should be used.'), 'propput'], HRESULT, 'UseTransparentColor',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(10202), helpstring('Gets or sets the color that will become transparent.'), 'propget'], HRESULT, 'TransparentColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(10202), helpstring('Gets or sets the color that will become transparent.'), 'propput'], HRESULT, 'TransparentColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsRasterImageGlobeOverlay implementation
##class _IAgStkGraphicsRasterImageGlobeOverlay_Impl(object):
##    def _get(self):
##        'Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the translucency value for the image. The translucency is between 0 and 1, where 0 is fully opaque and 1 is invisible.'
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether to use altitude to determine the translucency value for the image or not. If <see langword='false' />, the globe image overlay . translucency value is used..."
##    UseAltitudeBasedTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the lower translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or below globe image overlay ..."
##    AltitudeBasedTranslucencyLowerTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the upper translucency value for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />. When the altitude of the viewer is at or above globe image overlay ..."
##    AltitudeBasedTranslucencyUpperTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the lower altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##    AltitudeBasedTranslucencyLowerAltitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the upper altitude bound used to calculate translucency for the image when globe image overlay . use altitude based translucency is set to <see langword='true' />..."
##    AltitudeBasedTranslucencyUpperAltitude = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def MoreThanOneImageGlobeOverlaySupported(self):
##        'Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'
##        #return pRetVal
##
##    @property
##    def CentralBody(self):
##        "Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."
##        #return pRetVal
##
##    @property
##    def Extent(self):
##        'Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'
##        #return ppRetVal
##
##    @property
##    def Role(self):
##        'Gets the globe overlay role of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def UriAsString(self):
##        'Gets the absolute URI specifying the location of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether transparent color should be used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether transparent color should be used.'
##    UseTransparentColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the color that will become transparent.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the color that will become transparent.'
##    TransparentColor = property(_get, _set, doc = _set.__doc__)
##

_IAgStkGraphicsImageCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('Gets the number of globe overlay objects in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12902), helpstring('Gets whether or not the collection is read only.'), 'propget'], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('Gets the globe image overlay at the specified index.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeImageOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), helpstring('Constructs an iterator that can be used to iterate the collection.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([dispid(12905), helpstring('Checks the presence of a globe image overlay in the collection.')], HRESULT, 'Contains',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(12907), helpstring('Checks the presence of a globe image overlay with the specified Uri in the collection.')], HRESULT, 'ContainsUriString',
              ( ['in'], BSTR, 'StringUri' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(12908), helpstring('Removes a globe image overlay from the collection.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'GlobeOverlay' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(12909), helpstring('Removes all globe image overlay objects from the collection.')], HRESULT, 'Clear'),
    COMMETHOD([dispid(12910), helpstring('Adds imageryOverlay to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay' )),
    COMMETHOD([dispid(12911), helpstring('Adds imageryOverlay to the collection asynchronously.')], HRESULT, 'AddAsync',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay' )),
    COMMETHOD([dispid(12914), helpstring('Gets the index of the specified globe image overlay.')], HRESULT, 'IndexOf',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12916), helpstring('Gets the index of the globe image overlay with the specified Uri.')], HRESULT, 'IndexOfUriString',
              ( ['in'], BSTR, 'StringUri' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(12919), helpstring('Creates a globe overlay from the uri, which represents a uri, and adds it to the collection.')], HRESULT, 'AddUriString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeImageOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(12920), helpstring('Creates a globe image overlay from the uri, which represents a uri, and adds it to the collection asynchronously.')], HRESULT, 'AddAsyncUriString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeImageOverlay)), 'ppRetVal' )),
    COMMETHOD([dispid(12921), helpstring('Swaps the position of two globe image overlay objects.')], HRESULT, 'Swap',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay1' ),
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay2' )),
    COMMETHOD([dispid(12922), helpstring('Swaps the position of two globe image overlay objects at the specified indices.')], HRESULT, 'SwapByIndex',
              ( ['in'], c_int, 'Index1' ),
              ( ['in'], c_int, 'Index2' )),
    COMMETHOD([dispid(12923), helpstring('Moves the globe image overlay to the specified position.')], HRESULT, 'Move',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay' ),
              ( ['in'], c_int, 'NewPosition' )),
    COMMETHOD([dispid(12924), helpstring('Moves the globe image overlay at the specified index to the specified position.')], HRESULT, 'MoveByIndex',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'NewPosition' )),
    COMMETHOD([dispid(12925), helpstring('Brings the globe image overlay to the front of the collection so it is rendered first or on the bottom.')], HRESULT, 'BringToFront',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay' )),
    COMMETHOD([dispid(12926), helpstring('Sends the globe image overlay to the back of the collection so it is rendered last or on the top.')], HRESULT, 'SendToBack',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay' )),
]
################################################################
## code template for _IAgStkGraphicsImageCollection implementation
##class _IAgStkGraphicsImageCollection_Impl(object):
##    @property
##    def Count(self):
##        'Gets the number of globe overlay objects in the collection.'
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Gets whether or not the collection is read only.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Gets the globe image overlay at the specified index.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Constructs an iterator that can be used to iterate the collection.'
##        #return ppRetVal
##
##    def Contains(self, ImageryOverlay):
##        'Checks the presence of a globe image overlay in the collection.'
##        #return pRetVal
##
##    def ContainsUriString(self, StringUri):
##        'Checks the presence of a globe image overlay with the specified Uri in the collection.'
##        #return pRetVal
##
##    def Remove(self, GlobeOverlay):
##        'Removes a globe image overlay from the collection.'
##        #return pRetVal
##
##    def Clear(self):
##        'Removes all globe image overlay objects from the collection.'
##        #return 
##
##    def Add(self, ImageryOverlay):
##        'Adds imageryOverlay to the collection.'
##        #return 
##
##    def AddAsync(self, ImageryOverlay):
##        'Adds imageryOverlay to the collection asynchronously.'
##        #return 
##
##    def IndexOf(self, ImageryOverlay):
##        'Gets the index of the specified globe image overlay.'
##        #return pRetVal
##
##    def IndexOfUriString(self, StringUri):
##        'Gets the index of the globe image overlay with the specified Uri.'
##        #return pRetVal
##
##    def AddUriString(self, Uri):
##        'Creates a globe overlay from the uri, which represents a uri, and adds it to the collection.'
##        #return ppRetVal
##
##    def AddAsyncUriString(self, Uri):
##        'Creates a globe image overlay from the uri, which represents a uri, and adds it to the collection asynchronously.'
##        #return ppRetVal
##
##    def Swap(self, ImageryOverlay1, ImageryOverlay2):
##        'Swaps the position of two globe image overlay objects.'
##        #return 
##
##    def SwapByIndex(self, Index1, Index2):
##        'Swaps the position of two globe image overlay objects at the specified indices.'
##        #return 
##
##    def Move(self, ImageryOverlay, NewPosition):
##        'Moves the globe image overlay to the specified position.'
##        #return 
##
##    def MoveByIndex(self, Index, NewPosition):
##        'Moves the globe image overlay at the specified index to the specified position.'
##        #return 
##
##    def BringToFront(self, ImageryOverlay):
##        'Brings the globe image overlay to the front of the collection so it is rendered first or on the bottom.'
##        #return 
##
##    def SendToBack(self, ImageryOverlay):
##        'Sends the globe image overlay to the back of the collection so it is rendered last or on the top.'
##        #return 
##

IAgStkGraphicsKmlDocument._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the uri of the document.')], HRESULT, 'Uri',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsKmlDocument implementation
##class IAgStkGraphicsKmlDocument_Impl(object):
##    @property
##    def Uri(self):
##        'Gets the uri of the document.'
##        #return pRetVal
##

IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance of the Activator type.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCustomImageGlobeOverlayPluginActivator)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory implementation
##class IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance of the Activator type.'
##        #return ppRetVal
##

IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance of the Activator type.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjectionRasterStreamPluginActivator)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory implementation
##class IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance of the Activator type.'
##        #return ppRetVal
##

class AgStkGraphicsEdgeDetectFilterFactory(CoClass):
    'Applies a convolution filter to detect edges in the source raster.'
    _reg_clsid_ = GUID('{0A2B762F-40E9-4117-8EF1-73B14B665DAE}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsEdgeDetectFilterFactory._com_interfaces_ = [_IAgStkGraphicsEdgeDetectFilterFactory, IAgStkGraphicsEdgeDetectFilterFactory]

_IAgStkGraphicsSharpenFilter._methods_ = [
    COMMETHOD([dispid(20501), helpstring('Gets or sets the divisor for the result of the convolution kernel operation.'), 'propget'], HRESULT, 'Divisor',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(20501), helpstring('Gets or sets the divisor for the result of the convolution kernel operation.'), 'propput'], HRESULT, 'Divisor',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(20502), helpstring('Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'), 'propget'], HRESULT, 'Offset',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(20502), helpstring('Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'), 'propput'], HRESULT, 'Offset',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(20503), helpstring('Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'), 'propget'], HRESULT, 'Kernel',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(20503), helpstring('Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'), 'propput'], HRESULT, 'Kernel',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(21601), helpstring('Gets or sets the method used to sharpen the source raster.'), 'propget'], HRESULT, 'Method',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSharpenMethod), 'pRetVal' )),
    COMMETHOD([dispid(21601), helpstring('Gets or sets the method used to sharpen the source raster.'), 'propput'], HRESULT, 'Method',
              ( ['in'], AgEStkGraphicsSharpenMethod, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSharpenFilter implementation
##class _IAgStkGraphicsSharpenFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the divisor for the result of the convolution kernel operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the divisor for the result of the convolution kernel operation.'
##    Divisor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the offset for the result of the convolution kernel operation. The value is added to the result of the operation.'
##    Offset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the convolution kernel of the filter. The array contains the 9 elements of the kernel of the convolution matrix...'
##    Kernel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the method used to sharpen the source raster.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the method used to sharpen the source raster.'
##    Method = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsFilteringRasterStreamFactory(CoClass):
    'A class decorator for applying a raster filter to each update of a raster stream. Can be used to apply filters to videos and other raster streams as they are updated.'
    _reg_clsid_ = GUID('{5520EA28-8AF7-40A3-8F54-7F55FDE80772}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsFilteringRasterStreamFactory._com_interfaces_ = [_IAgStkGraphicsFilteringRasterStreamFactory, IAgStkGraphicsFilteringRasterStreamFactory]

_IAgStkGraphicsVideoStream._methods_ = [
    COMMETHOD([dispid(19601), helpstring('Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes...'), 'propget'], HRESULT, 'UpdateDelta',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(19601), helpstring('Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes...'), 'propput'], HRESULT, 'UpdateDelta',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(19602), helpstring('When overridden in a derived class, updates the raster data associated with the raster stream at the specified time...')], HRESULT, 'Update',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'Time' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'NextTime' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(9801), helpstring('Gets the raster attributes that define the raster data.'), 'propget'], HRESULT, 'Attributes',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterAttributes)), 'ppRetVal' )),
    COMMETHOD([dispid(9802), helpstring('Gets the width of the raster in pixels.'), 'propget'], HRESULT, 'Width',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9803), helpstring('Gets the height of the raster in pixels.'), 'propget'], HRESULT, 'Height',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(9804), helpstring('Flips the raster along the given axis.')], HRESULT, 'Flip',
              ( ['in'], AgEStkGraphicsFlipAxis, 'Axis' )),
    COMMETHOD([dispid(9805), helpstring('Rotates the raster by the given angle.')], HRESULT, 'Rotate',
              ( ['in'], c_double, 'Angle' )),
    COMMETHOD([dispid(9806), helpstring('Applies a raster filter to the raster and returns a new raster with the results of the filtering. The current raster is not modified.')], HRESULT, 'Apply',
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(9807), helpstring('Applies a raster filter to the raster. The current raster will contain the results of the filtering.')], HRESULT, 'ApplyInPlace',
              ( ['in'], POINTER(IAgStkGraphicsRasterFilter), 'Filter' )),
    COMMETHOD([dispid(9808), helpstring('Extracts the band of raster data associated with the given raster band.')], HRESULT, 'ExtractBand',
              ( ['in'], AgEStkGraphicsRasterBand, 'Band' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(9809), helpstring('Extracts the bands of raster data associated with the given raster format.')], HRESULT, 'ExtractBandFromRasterFormat',
              ( ['in'], AgEStkGraphicsRasterFormat, 'Format' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRaster)), 'ppRetVal' )),
    COMMETHOD([dispid(9810), helpstring('Copies the data associated with the given raster into this raster.')], HRESULT, 'CopyFromRaster',
              ( ['in'], POINTER(IAgStkGraphicsRaster), 'Raster' )),
    COMMETHOD([dispid(19801), helpstring('Gets the uri of the video.'), 'propget'], HRESULT, 'Uri',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(19802), helpstring('Gets or sets the video playback mode of the video.'), 'propget'], HRESULT, 'Playback',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsVideoPlayback), 'pRetVal' )),
    COMMETHOD([dispid(19802), helpstring('Gets or sets the video playback mode of the video.'), 'propput'], HRESULT, 'Playback',
              ( ['in'], AgEStkGraphicsVideoPlayback, 'pRetVal' )),
    COMMETHOD([dispid(19803), helpstring('Gets or sets the frame rate of the video when the playback property is set to real time. If this property is not set, the internal framerate of the video is used.'), 'propget'], HRESULT, 'FrameRate',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(19803), helpstring('Gets or sets the frame rate of the video when the playback property is set to real time. If this property is not set, the internal framerate of the video is used.'), 'propput'], HRESULT, 'FrameRate',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(19804), helpstring('Gets or sets the scene manager time at which the video will begin playing when the playback property is set to time interval.'), 'propget'], HRESULT, 'IntervalStartTime',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate)), 'ppRetVal' )),
    COMMETHOD([dispid(19804), helpstring('Gets or sets the scene manager time at which the video will begin playing when the playback property is set to time interval.'), 'propput'], HRESULT, 'IntervalStartTime',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'ppRetVal' )),
    COMMETHOD([dispid(19805), helpstring('Gets or sets the scene manager time at which the video will stop playing when the playback property is set to time interval.'), 'propget'], HRESULT, 'IntervalEndTime',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate)), 'ppRetVal' )),
    COMMETHOD([dispid(19805), helpstring('Gets or sets the scene manager time at which the video will stop playing when the playback property is set to time interval.'), 'propput'], HRESULT, 'IntervalEndTime',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'ppRetVal' )),
    COMMETHOD([dispid(19806), helpstring('Gets or sets the start time of the video in seconds. Changing the start time property also changes the start frame property to the frame in the video that corresponds to the specified time.'), 'propget'], HRESULT, 'StartTime',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(19806), helpstring('Gets or sets the start time of the video in seconds. Changing the start time property also changes the start frame property to the frame in the video that corresponds to the specified time.'), 'propput'], HRESULT, 'StartTime',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(19807), helpstring('Gets or sets the end time of the video in seconds. Changing the end time property also changes the end frame property to the frame in the video that corresponds to the specified time.'), 'propget'], HRESULT, 'EndTime',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(19807), helpstring('Gets or sets the end time of the video in seconds. Changing the end time property also changes the end frame property to the frame in the video that corresponds to the specified time.'), 'propput'], HRESULT, 'EndTime',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(19808), helpstring('Gets or sets the start frame of the video. Changing the start frame property also changes the start time property to the time in the video that corresponds to the specified frame.'), 'propget'], HRESULT, 'StartFrame',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19808), helpstring('Gets or sets the start frame of the video. Changing the start frame property also changes the start time property to the time in the video that corresponds to the specified frame.'), 'propput'], HRESULT, 'StartFrame',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(19809), helpstring('Gets or sets the end frame of the video. Changing the end frame property also changes the end time property to the time in the video that corresponds to the specified frame.'), 'propget'], HRESULT, 'EndFrame',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19809), helpstring('Gets or sets the end frame of the video. Changing the end frame property also changes the end time property to the time in the video that corresponds to the specified frame.'), 'propput'], HRESULT, 'EndFrame',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(19810), helpstring('Gets or sets whether the video will loop when it reaches its last frame when the playback property is set to real time.'), 'propget'], HRESULT, 'Loop',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(19810), helpstring('Gets or sets whether the video will loop when it reaches its last frame when the playback property is set to real time.'), 'propput'], HRESULT, 'Loop',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(19811), helpstring('Gets whether or not the video is playing. Use the play, pause, stop, and Reset methods to control the playback of the video when the playback property is set to real time.'), 'propget'], HRESULT, 'IsPlaying',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(19812), helpstring('Gets or sets the thread processing yield time for asynchronous streaming of video over common protocols like udp. Setting a high value may increase performance, but may cause frames or packets to drop, effecting visual quality...'), 'propget'], HRESULT, 'PacketAcquirementYieldTime',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19812), helpstring('Gets or sets the thread processing yield time for asynchronous streaming of video over common protocols like udp. Setting a high value may increase performance, but may cause frames or packets to drop, effecting visual quality...'), 'propput'], HRESULT, 'PacketAcquirementYieldTime',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(19813), helpstring('Gets or sets a value indicating the buffering limit for packets when processing a video stream...'), 'propget'], HRESULT, 'PacketBufferLimit',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(19813), helpstring('Gets or sets a value indicating the buffering limit for packets when processing a video stream...'), 'propput'], HRESULT, 'PacketBufferLimit',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(19814), helpstring('Gets or sets a value indicating if frames should be dropped if video processing can not keep up with a video stream. If this is set to false, the video quality may degrade when the processing load is too high...'), 'propget'], HRESULT, 'AllowFrameDrop',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(19814), helpstring('Gets or sets a value indicating if frames should be dropped if video processing can not keep up with a video stream. If this is set to false, the video quality may degrade when the processing load is too high...'), 'propput'], HRESULT, 'AllowFrameDrop',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(19822), helpstring('Gets or sets a value indicating if the encoded audio stream should be synchronized to video playback If this is set to false, the audio stream will be disabled...'), 'propget'], HRESULT, 'EnableAudio',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(19822), helpstring('Gets or sets a value indicating if the encoded audio stream should be synchronized to video playback If this is set to false, the audio stream will be disabled...'), 'propput'], HRESULT, 'EnableAudio',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(19820), helpstring("Reinitializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage.")], HRESULT, 'ReinitializeWithStringUri',
              ( ['in'], BSTR, 'Uri' )),
    COMMETHOD([dispid(19815), helpstring('Begins playing the video when the playback property is set to real time.')], HRESULT, 'Play'),
    COMMETHOD([dispid(19816), helpstring('Pauses the video when the playback property is set to real time.')], HRESULT, 'Pause'),
    COMMETHOD([dispid(19817), helpstring('Stops the video when the playback property is set to real time. Stopping the video will seek to the first frame and pause playback. Use the Play method to begin playing the video again.')], HRESULT, 'Stop'),
    COMMETHOD([dispid(19818), helpstring('Seeks the video to its first frame and begins playing the video when the playback property is set to real time.')], HRESULT, 'Reset'),
    COMMETHOD([dispid(19821), helpstring('Closes the video stream and any associated resources.')], HRESULT, 'Close'),
    COMMETHOD([dispid(19823), helpstring('Gets the uri of the audio.'), 'propget'], HRESULT, 'AudioUri',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsVideoStream implementation
##class _IAgStkGraphicsVideoStream_Impl(object):
##    def _get(self):
##        'Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes...'
##    UpdateDelta = property(_get, _set, doc = _set.__doc__)
##
##    def Update(self, Time, NextTime):
##        'When overridden in a derived class, updates the raster data associated with the raster stream at the specified time...'
##        #return pRetVal
##
##    @property
##    def Attributes(self):
##        'Gets the raster attributes that define the raster data.'
##        #return ppRetVal
##
##    @property
##    def Width(self):
##        'Gets the width of the raster in pixels.'
##        #return pRetVal
##
##    @property
##    def Height(self):
##        'Gets the height of the raster in pixels.'
##        #return pRetVal
##
##    def Flip(self, Axis):
##        'Flips the raster along the given axis.'
##        #return 
##
##    def Rotate(self, Angle):
##        'Rotates the raster by the given angle.'
##        #return 
##
##    def Apply(self, Filter):
##        'Applies a raster filter to the raster and returns a new raster with the results of the filtering. The current raster is not modified.'
##        #return ppRetVal
##
##    def ApplyInPlace(self, Filter):
##        'Applies a raster filter to the raster. The current raster will contain the results of the filtering.'
##        #return 
##
##    def ExtractBand(self, Band):
##        'Extracts the band of raster data associated with the given raster band.'
##        #return ppRetVal
##
##    def ExtractBandFromRasterFormat(self, Format):
##        'Extracts the bands of raster data associated with the given raster format.'
##        #return ppRetVal
##
##    def CopyFromRaster(self, Raster):
##        'Copies the data associated with the given raster into this raster.'
##        #return 
##
##    @property
##    def Uri(self):
##        'Gets the uri of the video.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the video playback mode of the video.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the video playback mode of the video.'
##    Playback = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the frame rate of the video when the playback property is set to real time. If this property is not set, the internal framerate of the video is used.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the frame rate of the video when the playback property is set to real time. If this property is not set, the internal framerate of the video is used.'
##    FrameRate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the scene manager time at which the video will begin playing when the playback property is set to time interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the scene manager time at which the video will begin playing when the playback property is set to time interval.'
##    IntervalStartTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the scene manager time at which the video will stop playing when the playback property is set to time interval.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the scene manager time at which the video will stop playing when the playback property is set to time interval.'
##    IntervalEndTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the start time of the video in seconds. Changing the start time property also changes the start frame property to the frame in the video that corresponds to the specified time.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the start time of the video in seconds. Changing the start time property also changes the start frame property to the frame in the video that corresponds to the specified time.'
##    StartTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the end time of the video in seconds. Changing the end time property also changes the end frame property to the frame in the video that corresponds to the specified time.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the end time of the video in seconds. Changing the end time property also changes the end frame property to the frame in the video that corresponds to the specified time.'
##    EndTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the start frame of the video. Changing the start frame property also changes the start time property to the time in the video that corresponds to the specified frame.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the start frame of the video. Changing the start frame property also changes the start time property to the time in the video that corresponds to the specified frame.'
##    StartFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the end frame of the video. Changing the end frame property also changes the end time property to the time in the video that corresponds to the specified frame.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the end frame of the video. Changing the end frame property also changes the end time property to the time in the video that corresponds to the specified frame.'
##    EndFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the video will loop when it reaches its last frame when the playback property is set to real time.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the video will loop when it reaches its last frame when the playback property is set to real time.'
##    Loop = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def IsPlaying(self):
##        'Gets whether or not the video is playing. Use the play, pause, stop, and Reset methods to control the playback of the video when the playback property is set to real time.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the thread processing yield time for asynchronous streaming of video over common protocols like udp. Setting a high value may increase performance, but may cause frames or packets to drop, effecting visual quality...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the thread processing yield time for asynchronous streaming of video over common protocols like udp. Setting a high value may increase performance, but may cause frames or packets to drop, effecting visual quality...'
##    PacketAcquirementYieldTime = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a value indicating the buffering limit for packets when processing a video stream...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a value indicating the buffering limit for packets when processing a video stream...'
##    PacketBufferLimit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a value indicating if frames should be dropped if video processing can not keep up with a video stream. If this is set to false, the video quality may degrade when the processing load is too high...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a value indicating if frames should be dropped if video processing can not keep up with a video stream. If this is set to false, the video quality may degrade when the processing load is too high...'
##    AllowFrameDrop = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a value indicating if the encoded audio stream should be synchronized to video playback If this is set to false, the audio stream will be disabled...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a value indicating if the encoded audio stream should be synchronized to video playback If this is set to false, the audio stream will be disabled...'
##    EnableAudio = property(_get, _set, doc = _set.__doc__)
##
##    def ReinitializeWithStringUri(self, Uri):
##        "Reinitializes the video stream from a Uri, which can be a file, HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage."
##        #return 
##
##    def Play(self):
##        'Begins playing the video when the playback property is set to real time.'
##        #return 
##
##    def Pause(self):
##        'Pauses the video when the playback property is set to real time.'
##        #return 
##
##    def Stop(self):
##        'Stops the video when the playback property is set to real time. Stopping the video will seek to the first frame and pause playback. Use the Play method to begin playing the video again.'
##        #return 
##
##    def Reset(self):
##        'Seeks the video to its first frame and begins playing the video when the playback property is set to real time.'
##        #return 
##
##    def Close(self):
##        'Closes the video stream and any associated resources.'
##        #return 
##
##    @property
##    def AudioUri(self):
##        'Gets the uri of the audio.'
##        #return pRetVal
##

class AgStkGraphicsFlipFilterFactory(CoClass):
    'Flips the source raster along the given flip axis.'
    _reg_clsid_ = GUID('{E105191A-14A5-473B-9E70-6CFB2228A3C9}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsFlipFilterFactory._com_interfaces_ = [_IAgStkGraphicsFlipFilterFactory, IAgStkGraphicsFlipFilterFactory]

IAgStkGraphicsRasterStream._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes...')], HRESULT, 'UpdateDelta',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes...')], HRESULT, 'UpdateDelta',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([helpstring('When overridden in a derived class, updates the raster data associated with the raster stream at the specified time...')], HRESULT, 'Update',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'Time' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'NextTime' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsRasterStream implementation
##class IAgStkGraphicsRasterStream_Impl(object):
##    def _get(self):
##        'Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the update delta of the raster stream in seconds. The update delta defines the interval at which the Update method will be called. The default update delta is 0, which will call the Update method every time the scene manager time changes...'
##    UpdateDelta = property(_get, _set, doc = _set.__doc__)
##
##    def Update(self, Time, NextTime):
##        'When overridden in a derived class, updates the raster data associated with the raster stream at the specified time...'
##        #return pRetVal
##

_IAgStkGraphicsGlobeOverlay._methods_ = [
    COMMETHOD([dispid(16801), helpstring("Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16802), helpstring('Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'), 'propget'], HRESULT, 'Extent',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(16803), helpstring('Gets the globe overlay role of the globe overlay.'), 'propget'], HRESULT, 'Role',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsGlobeOverlayRole), 'pRetVal' )),
    COMMETHOD([dispid(16804), helpstring('Gets the absolute URI specifying the location of the globe overlay.'), 'propget'], HRESULT, 'UriAsString',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(16805), helpstring('Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'), 'propget'], HRESULT, 'IsValid',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(16806), helpstring('Gets or sets the display condition that controls whether or not the globe overlay is displayed.'), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGlobeOverlay implementation
##class _IAgStkGraphicsGlobeOverlay_Impl(object):
##    @property
##    def CentralBody(self):
##        "Gets the central body that the globe overlay is displayed on. It will return <see langword='null' /> if the globe overlay hasn't been added to a central body."
##        #return pRetVal
##
##    @property
##    def Extent(self):
##        'Gets the cartographic extent that represents the area covered by the globe overlay. The array elements are arranged in the order west longitude, south latitude, east longitude, north latitude.'
##        #return ppRetVal
##
##    @property
##    def Role(self):
##        'Gets the globe overlay role of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def UriAsString(self):
##        'Gets the absolute URI specifying the location of the globe overlay.'
##        #return pRetVal
##
##    @property
##    def IsValid(self):
##        'Gets whether or not the overlay is valid. It can be invalid because of a missing file, corrupt file, unlicensed file, or a file on the incorrect central body.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the display condition that controls whether or not the globe overlay is displayed.'
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##

_IAgStkGraphicsScene._methods_ = [
    COMMETHOD([dispid(5201), helpstring('Gets the camera associated with the scene, which affects the view that is rendered by the scene.'), 'propget'], HRESULT, 'Camera',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCamera)), 'ppRetVal' )),
    COMMETHOD([dispid(5202), helpstring('Gets the lighting associated with the scene.'), 'propget'], HRESULT, 'Lighting',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsLighting)), 'ppRetVal' )),
    COMMETHOD([dispid(5203), helpstring('Gets or sets whether sunshine is rendered by the Sun central body. Sunshine renders a halo effect around the sun when it is viewed in the scene.'), 'propget'], HRESULT, 'ShowSunshine',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5203), helpstring('Gets or sets whether sunshine is rendered by the Sun central body. Sunshine renders a halo effect around the sun when it is viewed in the scene.'), 'propput'], HRESULT, 'ShowSunshine',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(5204), helpstring('Gets the central body graphics for a specified central body.'), 'propget'], HRESULT, 'CentralBodies',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCentralBodyGraphicsIndexer)), 'ppRetVal' )),
    COMMETHOD([dispid(5205), helpstring('Gets or sets the background color of the scene.'), 'propget'], HRESULT, 'BackgroundColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(5205), helpstring('Gets or sets the background color of the scene.'), 'propput'], HRESULT, 'BackgroundColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(5206), helpstring('Gets or sets whether the sky will be shaded based on camera altitude. When shade sky based on altitude is set to true, the sky will become more blue as the Camera gets closer to the surface of the central body.'), 'propget'], HRESULT, 'ShadeSkyBasedOnAltitude',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5206), helpstring('Gets or sets whether the sky will be shaded based on camera altitude. When shade sky based on altitude is set to true, the sky will become more blue as the Camera gets closer to the surface of the central body.'), 'propput'], HRESULT, 'ShadeSkyBasedOnAltitude',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(5207), helpstring('Gets or sets whether stars are shown or hidden in the scene.'), 'propget'], HRESULT, 'ShowStars',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5207), helpstring('Gets or sets whether stars are shown or hidden in the scene.'), 'propput'], HRESULT, 'ShowStars',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(5208), helpstring('Gets the scene globe overlay settings for the scene.'), 'propget'], HRESULT, 'GlobeOverlaySettings',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSceneGlobeOverlaySettings)), 'ppRetVal' )),
    COMMETHOD([dispid(5210), helpstring('Renders the scene. To render all the scenes within an application, use the Render method.')], HRESULT, 'Render'),
    COMMETHOD([dispid(5211), helpstring('Executes a pick at the given x, y and returns a depth sorted collection of picked objects. The coordinate origin is top, left. To pick screen overlays, use the PickScreenOverlays method.')], HRESULT, 'Pick',
              ( ['in'], c_int, 'X' ),
              ( ['in'], c_int, 'Y' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPickResultCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(5212), helpstring('Executes a pick in the given rectangular region and returns a depth sorted collection of picked objects. The coordinate origin is top, left. To pick screen overlays, use the PickScreenOverlays method.')], HRESULT, 'PickRectangular',
              ( ['in'], c_int, 'Left' ),
              ( ['in'], c_int, 'Bottom' ),
              ( ['in'], c_int, 'Right' ),
              ( ['in'], c_int, 'Top' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPickResultCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(5213), helpstring('Executes a pick on screen overlays at the given x, y and returns a front to back sorted collection of picked overlays. The coordinate origin is top, left. To pick other objects in the scene, use the Pick method.')], HRESULT, 'PickScreenOverlays',
              ( ['in'], c_int, 'X' ),
              ( ['in'], c_int, 'Y' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayPickResultCollection)), 'ppRetVal' )),
    COMMETHOD([dispid(5209), helpstring('Returns the scene identifier.'), 'propget'], HRESULT, 'SceneID',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5214), helpstring('Gets or sets whether water surface on earth is shown or hidden in the scene.'), 'propget'], HRESULT, 'ShowWaterSurface',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5214), helpstring('Gets or sets whether water surface on earth is shown or hidden in the scene.'), 'propput'], HRESULT, 'ShowWaterSurface',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(5215), helpstring('Gets or sets the multisample anti-aliasing (MSAA) option for this scene. As the level of anti-aliasing increases, performance will generally decrease, but the quality of the anti-aliasing will improve.'), 'propget'], HRESULT, 'AntiAliasing',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsAntiAliasing), 'pRetVal' )),
    COMMETHOD([dispid(5215), helpstring('Gets or sets the multisample anti-aliasing (MSAA) option for this scene. As the level of anti-aliasing increases, performance will generally decrease, but the quality of the anti-aliasing will improve.'), 'propput'], HRESULT, 'AntiAliasing',
              ( ['in'], AgEStkGraphicsAntiAliasing, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsScene implementation
##class _IAgStkGraphicsScene_Impl(object):
##    @property
##    def Camera(self):
##        'Gets the camera associated with the scene, which affects the view that is rendered by the scene.'
##        #return ppRetVal
##
##    @property
##    def Lighting(self):
##        'Gets the lighting associated with the scene.'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets whether sunshine is rendered by the Sun central body. Sunshine renders a halo effect around the sun when it is viewed in the scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether sunshine is rendered by the Sun central body. Sunshine renders a halo effect around the sun when it is viewed in the scene.'
##    ShowSunshine = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CentralBodies(self):
##        'Gets the central body graphics for a specified central body.'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets the background color of the scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the background color of the scene.'
##    BackgroundColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the sky will be shaded based on camera altitude. When shade sky based on altitude is set to true, the sky will become more blue as the Camera gets closer to the surface of the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the sky will be shaded based on camera altitude. When shade sky based on altitude is set to true, the sky will become more blue as the Camera gets closer to the surface of the central body.'
##    ShadeSkyBasedOnAltitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether stars are shown or hidden in the scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether stars are shown or hidden in the scene.'
##    ShowStars = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def GlobeOverlaySettings(self):
##        'Gets the scene globe overlay settings for the scene.'
##        #return ppRetVal
##
##    def Render(self):
##        'Renders the scene. To render all the scenes within an application, use the Render method.'
##        #return 
##
##    def Pick(self, X, Y):
##        'Executes a pick at the given x, y and returns a depth sorted collection of picked objects. The coordinate origin is top, left. To pick screen overlays, use the PickScreenOverlays method.'
##        #return ppRetVal
##
##    def PickRectangular(self, Left, Bottom, Right, Top):
##        'Executes a pick in the given rectangular region and returns a depth sorted collection of picked objects. The coordinate origin is top, left. To pick screen overlays, use the PickScreenOverlays method.'
##        #return ppRetVal
##
##    def PickScreenOverlays(self, X, Y):
##        'Executes a pick on screen overlays at the given x, y and returns a front to back sorted collection of picked overlays. The coordinate origin is top, left. To pick other objects in the scene, use the Pick method.'
##        #return ppRetVal
##
##    @property
##    def SceneID(self):
##        'Returns the scene identifier.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets whether water surface on earth is shown or hidden in the scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether water surface on earth is shown or hidden in the scene.'
##    ShowWaterSurface = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the multisample anti-aliasing (MSAA) option for this scene. As the level of anti-aliasing increases, performance will generally decrease, but the quality of the anti-aliasing will improve.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the multisample anti-aliasing (MSAA) option for this scene. As the level of anti-aliasing increases, performance will generally decrease, but the quality of the anti-aliasing will improve.'
##    AntiAliasing = property(_get, _set, doc = _set.__doc__)
##

_IAgStkGraphicsObjectCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('A total number of elements in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('An item in the collection at the specified index.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(-4), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsObjectCollection implementation
##class _IAgStkGraphicsObjectCollection_Impl(object):
##    @property
##    def Count(self):
##        'A total number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'An item in the collection at the specified index.'
##        #return pRetVal
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return ppRetVal
##

class AgStkGraphicsGammaCorrectionFilterFactory(CoClass):
    'Applies gamma correction to the source raster. The gamma is a value between .2 and 5. The default gamma value is 2.2.'
    _reg_clsid_ = GUID('{6C48D094-ED24-4222-8BAA-DBB269B94127}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsGammaCorrectionFilterFactory._com_interfaces_ = [_IAgStkGraphicsGammaCorrectionFilterFactory, IAgStkGraphicsGammaCorrectionFilterFactory]

IAgStkGraphicsProjectionRasterStreamPluginActivator._methods_ = [
    COMMETHOD([helpstring('Loads a projection/raster COM plugin associated with the specified display name and returns a proxy object that allows accessing the raster and projection streams implemented by the plugin.')], HRESULT, 'CreateFromDisplayName',
              ( ['in'], BSTR, 'DisplayName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjectionRasterStreamPluginProxy)), 'ppRetVal' )),
    COMMETHOD([helpstring("Gets a list of available projection/raster plugins' Display Names (Programmatic Identifiers).")], HRESULT, 'GetAvailableDisplayNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsProjectionRasterStreamPluginActivator implementation
##class IAgStkGraphicsProjectionRasterStreamPluginActivator_Impl(object):
##    def CreateFromDisplayName(self, DisplayName):
##        'Loads a projection/raster COM plugin associated with the specified display name and returns a proxy object that allows accessing the raster and projection streams implemented by the plugin.'
##        #return ppRetVal
##
##    def GetAvailableDisplayNames(self):
##        "Gets a list of available projection/raster plugins' Display Names (Programmatic Identifiers)."
##        #return ppRetVal
##

IAgStkGraphicsCustomImageGlobeOverlayPluginActivator._methods_ = [
    COMMETHOD([helpstring('Loads a custom image globe overlay COM plugin associated with the specified display name and returns a proxy object that allows accessing the custom image globe overlays implemented by the plugin.')], HRESULT, 'CreateFromDisplayName',
              ( ['in'], BSTR, 'DisplayName' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCustomImageGlobeOverlayPluginProxy)), 'ppRetVal' )),
    COMMETHOD([helpstring('Gets a list of available custom image globe overlay Display Names (Programmatic Identifiers).')], HRESULT, 'GetAvailableDisplayNames',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsCustomImageGlobeOverlayPluginActivator implementation
##class IAgStkGraphicsCustomImageGlobeOverlayPluginActivator_Impl(object):
##    def CreateFromDisplayName(self, DisplayName):
##        'Loads a custom image globe overlay COM plugin associated with the specified display name and returns a proxy object that allows accessing the custom image globe overlays implemented by the plugin.'
##        #return ppRetVal
##
##    def GetAvailableDisplayNames(self):
##        'Gets a list of available custom image globe overlay Display Names (Programmatic Identifiers).'
##        #return ppRetVal
##

class AgStkGraphicsGaussianBlurFilterFactory(CoClass):
    'Applies a convolution filter to blur the source raster using the Gaussian function.'
    _reg_clsid_ = GUID('{C7029578-22B2-4CB9-A214-60C8222EE09C}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsGaussianBlurFilterFactory._com_interfaces_ = [_IAgStkGraphicsGaussianBlurFilterFactory, IAgStkGraphicsGaussianBlurFilterFactory]

_IAgStkGraphicsRhumbLineInterpolator._methods_ = [
    COMMETHOD([dispid(17201), helpstring('Gets the polyline type of positions returned from interpolate'), 'propget'], HRESULT, 'PolylineType',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPolylineType), 'pRetVal' )),
    COMMETHOD([dispid(17202), helpstring('Computes interpolated positions based on the input positions. Returns an array of positions in the order x, y, z.')], HRESULT, 'Interpolate',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(5101), helpstring('Gets or sets the central body used when interpolating with interpolate.'), 'propget'], HRESULT, 'CentralBody',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(5101), helpstring('Gets or sets the central body used when interpolating with interpolate.'), 'propput'], HRESULT, 'CentralBody',
              ( ['in'], BSTR, 'pRetVal' )),
    COMMETHOD([dispid(5102), helpstring('Gets or sets the granularity, in radians, used when interpolating with interpolate. Lower granularities are more precise but create more positions.'), 'propget'], HRESULT, 'Granularity',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(5102), helpstring('Gets or sets the granularity, in radians, used when interpolating with interpolate. Lower granularities are more precise but create more positions.'), 'propput'], HRESULT, 'Granularity',
              ( ['in'], c_double, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsRhumbLineInterpolator implementation
##class _IAgStkGraphicsRhumbLineInterpolator_Impl(object):
##    @property
##    def PolylineType(self):
##        'Gets the polyline type of positions returned from interpolate'
##        #return pRetVal
##
##    def Interpolate(self, Positions):
##        'Computes interpolated positions based on the input positions. Returns an array of positions in the order x, y, z.'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets the central body used when interpolating with interpolate.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the central body used when interpolating with interpolate.'
##    CentralBody = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the granularity, in radians, used when interpolating with interpolate. Lower granularities are more precise but create more positions.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the granularity, in radians, used when interpolating with interpolate. Lower granularities are more precise but create more positions.'
##    Granularity = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsGradientDetectFilterFactory(CoClass):
    'Applies a convolution filter to detect gradients in the source raster.'
    _reg_clsid_ = GUID('{544EE136-5C8B-4C03-8B7C-9CF5F5B9A7CA}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsGradientDetectFilterFactory._com_interfaces_ = [_IAgStkGraphicsGradientDetectFilterFactory, IAgStkGraphicsGradientDetectFilterFactory]

class AgStkGraphicsJpeg2000WriterInitializer(CoClass):
    'Converts an image, such as a BMP, to a GeoJP2 file that can be used as an image globe overlay.'
    _reg_clsid_ = GUID('{116F436F-2C47-43D0-8A0B-BC1F805A46B5}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsJpeg2000WriterInitializer._com_interfaces_ = [_IAgStkGraphicsJpeg2000WriterInitializer, IAgStkGraphicsJpeg2000WriterInitializer]

IAgStkGraphicsObjectCollection._methods_ = [
    COMMETHOD(['propget', helpstring('A total number of elements in the collection.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('An item in the collection at the specified index.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD(['propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsObjectCollection implementation
##class IAgStkGraphicsObjectCollection_Impl(object):
##    @property
##    def Count(self):
##        'A total number of elements in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'An item in the collection at the specified index.'
##        #return pRetVal
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return ppRetVal
##

IAgStkGraphicsProjectionRasterStreamPluginProxy._methods_ = [
    COMMETHOD(['propget', helpstring('Returns a raster stream.')], HRESULT, 'RasterStream',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterStream)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns a projection stream.')], HRESULT, 'ProjectionStream',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsProjectionStream)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns true if the raster streaming is supported.')], HRESULT, 'IsRasterStreamSupported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Returns true if the projection streaming is supported.')], HRESULT, 'IsProjectionStreamSupported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Returns a pointer to plugin object's IUnknown interface.")], HRESULT, 'RealPluginObject',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsProjectionRasterStreamPluginProxy implementation
##class IAgStkGraphicsProjectionRasterStreamPluginProxy_Impl(object):
##    @property
##    def RasterStream(self):
##        'Returns a raster stream.'
##        #return ppRetVal
##
##    @property
##    def ProjectionStream(self):
##        'Returns a projection stream.'
##        #return ppRetVal
##
##    @property
##    def IsRasterStreamSupported(self):
##        'Returns true if the raster streaming is supported.'
##        #return pRetVal
##
##    @property
##    def IsProjectionStreamSupported(self):
##        'Returns true if the projection streaming is supported.'
##        #return pRetVal
##
##    @property
##    def RealPluginObject(self):
##        "Returns a pointer to plugin object's IUnknown interface."
##        #return ppRetVal
##

IAgStkGraphicsCustomImageGlobeOverlayPluginProxy._methods_ = [
    COMMETHOD(['propget', helpstring('Returns a custom image globe overlay.')], HRESULT, 'CustomImageGlobeOverlay',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCustomImageGlobeOverlay)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns true if custom image globe overlays are supported.')], HRESULT, 'IsCustomImageGlobeOverlaySupported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Returns a pointer to plugin object's IUnknown interface.")], HRESULT, 'RealPluginObject',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsCustomImageGlobeOverlayPluginProxy implementation
##class IAgStkGraphicsCustomImageGlobeOverlayPluginProxy_Impl(object):
##    @property
##    def CustomImageGlobeOverlay(self):
##        'Returns a custom image globe overlay.'
##        #return ppRetVal
##
##    @property
##    def IsCustomImageGlobeOverlaySupported(self):
##        'Returns true if custom image globe overlays are supported.'
##        #return pRetVal
##
##    @property
##    def RealPluginObject(self):
##        "Returns a pointer to plugin object's IUnknown interface."
##        #return ppRetVal
##

_IAgStkGraphicsTextBatchPrimitive._methods_ = [
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propget'], HRESULT, 'ReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propput'], HRESULT, 'ReferenceFrame',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propput'], HRESULT, 'BoundingSphere',
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'ppRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propget'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propput'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(5601), helpstring("Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."), 'propget'], HRESULT, 'SetHint',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSetHint), 'pRetVal' )),
    COMMETHOD([dispid(5602), helpstring("Gets or sets the scale applied to the radius of this primitive's bounding sphere."), 'propget'], HRESULT, 'BoundingSphereScale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD([dispid(5602), helpstring("Gets or sets the scale applied to the radius of this primitive's bounding sphere."), 'propput'], HRESULT, 'BoundingSphereScale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([dispid(5603), helpstring('Gets the font used to render the text batch.'), 'propget'], HRESULT, 'Font',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGraphicsFont)), 'ppRetVal' )),
    COMMETHOD([dispid(5604), helpstring("Gets or sets the text's outline color."), 'propget'], HRESULT, 'OutlineColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(5604), helpstring("Gets or sets the text's outline color."), 'propput'], HRESULT, 'OutlineColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(5605), helpstring("Gets or sets the text's outline translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'OutlineTranslucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(5605), helpstring("Gets or sets the text's outline translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'OutlineTranslucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(5606), helpstring('Gets or sets whether the screen space position of each string is aligned to a pixel.'), 'propget'], HRESULT, 'AlignToPixel',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5606), helpstring('Gets or sets whether the screen space position of each string is aligned to a pixel.'), 'propput'], HRESULT, 'AlignToPixel',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(5607), helpstring('Gets or sets a distance display condition that is evaluated per string in the text batch during rendering. This is different than display condition, which is evaluated once for the entire text batch...'), 'propget'], HRESULT, 'DistanceDisplayConditionPerString',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(5607), helpstring('Gets or sets a distance display condition that is evaluated per string in the text batch during rendering. This is different than display condition, which is evaluated once for the entire text batch...'), 'propput'], HRESULT, 'DistanceDisplayConditionPerString',
              ( ['in'], POINTER(IAgStkGraphicsDistanceDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(5608), helpstring("Gets or sets whether individual text indices will be included in the pick results returned from the scene's Pick method. Each text index that is picked will be returned as a batch primitive index."), 'propget'], HRESULT, 'PerItemPickingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5608), helpstring("Gets or sets whether individual text indices will be included in the pick results returned from the scene's Pick method. Each text index that is picked will be returned as a batch primitive index."), 'propput'], HRESULT, 'PerItemPickingEnabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(5609), helpstring('Gets or sets the filter used to filter the texture-based font.'), 'propget'], HRESULT, 'TextureFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD([dispid(5609), helpstring('Gets or sets the filter used to filter the texture-based font.'), 'propput'], HRESULT, 'TextureFilter',
              ( ['in'], POINTER(IAgStkGraphicsTextureFilter2D), 'ppRetVal' )),
    COMMETHOD([dispid(5610), helpstring("Defines the positions and text of strings in a text batch. The strings are rendered in the primitive's reference frame.")], HRESULT, 'Set',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' )),
    COMMETHOD([dispid(5611), helpstring("Defines the positions, text, and optional parameters of strings in a text batch. The strings are rendered in the primitive's reference frame.")], HRESULT, 'SetWithOptionalParameters',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters), 'OptionalParameters' )),
    COMMETHOD([dispid(5612), helpstring("Defines the positions, text, and optional parameters of strings in a text batch. The strings are rendered in the primitive's reference frame. renderPassHint is provided for efficiency.")], HRESULT, 'SetWithOptionalParametersAndRenderPass',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([dispid(5613), helpstring('For convenience. Defines the positions and text of strings in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' )),
    COMMETHOD([dispid(5614), helpstring('For convenience. Defines the positions, text, and optional parameters of strings in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetCartographicWithOptionalParameters',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters), 'OptionalParameters' )),
    COMMETHOD([dispid(5615), helpstring('For convenience. Defines the positions, text, and optional parameters of strings in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetCartographicWithOptionalParametersAndRenderPass',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([dispid(5616), helpstring('Updates a subset of positions and/or text in a text batch.')], HRESULT, 'SetPartial',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(5617), helpstring('Updates a subset of positions and/or text in a text batch.')], HRESULT, 'SetPartialWithIndicesOrder',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' )),
    COMMETHOD([dispid(5618), helpstring('Updates a subset of positions, text, and/or optional per-string parameters in a text batch.')], HRESULT, 'SetPartialWithOptionalParameters',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(5619), helpstring('Updates a subset of positions, text, and/or optional per-string parameters in a text batch.')], HRESULT, 'SetPartialWithOptionalParametersIndicesOrderAndRenderPass',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([dispid(5620), helpstring('For convenience. Updates a subset of positions and/or text in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(5621), helpstring('For convenience. Updates a subset of positions and/or text in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithIndicesOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' )),
    COMMETHOD([dispid(5622), helpstring('For convenience. Updates a subset of positions, text, and/or per-string parameters in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithOptionalParameters',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([dispid(5623), helpstring('For convenience. Updates a subset of positions, text, and/or per-string parameters in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Text' ),
              ( ['in'], POINTER(IAgStkGraphicsTextBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
    COMMETHOD([dispid(5624), helpstring('Gets or sets whether the primitive is positioned and rendered in screen space coordinates.'), 'propget'], HRESULT, 'RenderInScreenSpace',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5624), helpstring('Gets or sets whether the primitive is positioned and rendered in screen space coordinates.'), 'propput'], HRESULT, 'RenderInScreenSpace',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTextBatchPrimitive implementation
##class _IAgStkGraphicsTextBatchPrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##    ReferenceFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##    BoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##    AutomaticallyComputeBoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's color."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def SetHint(self):
##        "Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."
##        #return pRetVal
##
##    def _get(self):
##        "Gets or sets the scale applied to the radius of this primitive's bounding sphere."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the scale applied to the radius of this primitive's bounding sphere."
##    BoundingSphereScale = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Font(self):
##        'Gets the font used to render the text batch.'
##        #return ppRetVal
##
##    def _get(self):
##        "Gets or sets the text's outline color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the text's outline color."
##    OutlineColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the text's outline translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the text's outline translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    OutlineTranslucency = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the screen space position of each string is aligned to a pixel.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the screen space position of each string is aligned to a pixel.'
##    AlignToPixel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a distance display condition that is evaluated per string in the text batch during rendering. This is different than display condition, which is evaluated once for the entire text batch...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets a distance display condition that is evaluated per string in the text batch during rendering. This is different than display condition, which is evaluated once for the entire text batch...'
##    DistanceDisplayConditionPerString = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether individual text indices will be included in the pick results returned from the scene's Pick method. Each text index that is picked will be returned as a batch primitive index."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether individual text indices will be included in the pick results returned from the scene's Pick method. Each text index that is picked will be returned as a batch primitive index."
##    PerItemPickingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the filter used to filter the texture-based font.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the filter used to filter the texture-based font.'
##    TextureFilter = property(_get, _set, doc = _set.__doc__)
##
##    def Set(self, Positions, Text):
##        "Defines the positions and text of strings in a text batch. The strings are rendered in the primitive's reference frame."
##        #return 
##
##    def SetWithOptionalParameters(self, Positions, Text, OptionalParameters):
##        "Defines the positions, text, and optional parameters of strings in a text batch. The strings are rendered in the primitive's reference frame."
##        #return 
##
##    def SetWithOptionalParametersAndRenderPass(self, Positions, Text, OptionalParameters, RenderPassHint):
##        "Defines the positions, text, and optional parameters of strings in a text batch. The strings are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."
##        #return 
##
##    def SetCartographic(self, CentralBody, Positions, Text):
##        'For convenience. Defines the positions and text of strings in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetCartographicWithOptionalParameters(self, CentralBody, Positions, Text, OptionalParameters):
##        'For convenience. Defines the positions, text, and optional parameters of strings in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetCartographicWithOptionalParametersAndRenderPass(self, CentralBody, Positions, Text, OptionalParameters, RenderPassHint):
##        'For convenience. Defines the positions, text, and optional parameters of strings in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartial(self, Positions, Text, Indices):
##        'Updates a subset of positions and/or text in a text batch.'
##        #return 
##
##    def SetPartialWithIndicesOrder(self, Positions, Text, Indices, IndicesOrderHint):
##        'Updates a subset of positions and/or text in a text batch.'
##        #return 
##
##    def SetPartialWithOptionalParameters(self, Positions, Text, OptionalParameters, Indices):
##        'Updates a subset of positions, text, and/or optional per-string parameters in a text batch.'
##        #return 
##
##    def SetPartialWithOptionalParametersIndicesOrderAndRenderPass(self, Positions, Text, OptionalParameters, Indices, IndicesOrderHint, RenderPassHint):
##        'Updates a subset of positions, text, and/or optional per-string parameters in a text batch.'
##        #return 
##
##    def SetPartialCartographic(self, CentralBody, Positions, Text, Indices):
##        'For convenience. Updates a subset of positions and/or text in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartialCartographicWithIndicesOrder(self, CentralBody, Positions, Text, Indices, IndicesOrderHint):
##        'For convenience. Updates a subset of positions and/or text in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartialCartographicWithOptionalParameters(self, CentralBody, Positions, Text, OptionalParameters, Indices):
##        'For convenience. Updates a subset of positions, text, and/or per-string parameters in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass(self, CentralBody, Positions, Text, OptionalParameters, Indices, IndicesOrderHint, RenderPassHint):
##        'For convenience. Updates a subset of positions, text, and/or per-string parameters in a text batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the primitive is positioned and rendered in screen space coordinates.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the primitive is positioned and rendered in screen space coordinates.'
##    RenderInScreenSpace = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsLevelsFilterFactory(CoClass):
    'Adjusts the band levels of the source raster linearly.'
    _reg_clsid_ = GUID('{A81C7827-B8E2-462D-94C3-C265529A8351}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsLevelsFilterFactory._com_interfaces_ = [_IAgStkGraphicsLevelsFilterFactory, IAgStkGraphicsLevelsFilterFactory]

IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory._methods_ = [
    COMMETHOD([helpstring('Constructs a default update policy. This is equivalent to constructing a policy with duration set to 0 and a remove location of Front.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a policy with the specified duration and removeLocation.')], HRESULT, 'InitializeWithParameters',
              ( ['in'], c_double, 'Duration' ),
              ( ['in'], AgEStkGraphicsPathPrimitiveRemoveLocation, 'RemoveLocation' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDurationPathPrimitiveUpdatePolicy)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory implementation
##class IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory_Impl(object):
##    def Initialize(self):
##        'Constructs a default update policy. This is equivalent to constructing a policy with duration set to 0 and a remove location of Front.'
##        #return ppRetVal
##
##    def InitializeWithParameters(self, Duration, RemoveLocation):
##        'Initializes a policy with the specified duration and removeLocation.'
##        #return ppRetVal
##

IAgStkGraphicsFilteringRasterStream._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the raster filter that will be applied to the raster stream on each update.')], HRESULT, 'Filter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterFilter)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the raster stream that will have the raster filter applied on each update.')], HRESULT, 'Stream',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRasterStream)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsFilteringRasterStream implementation
##class IAgStkGraphicsFilteringRasterStream_Impl(object):
##    @property
##    def Filter(self):
##        'Gets the raster filter that will be applied to the raster stream on each update.'
##        #return ppRetVal
##
##    @property
##    def Stream(self):
##        'Gets the raster stream that will have the raster filter applied on each update.'
##        #return ppRetVal
##

class AgStkGraphicsProjectionRasterStreamPluginActivatorFactory(CoClass):
    'The Activator class provides methods to load COM plugins that implement projection and raster streaming. For more information about the projection and raster plugins, see the STK Programming Interface.'
    _reg_clsid_ = GUID('{9A400FCE-C79B-4EE1-A9BB-9E6886DAFF30}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsProjectionRasterStreamPluginActivatorFactory._com_interfaces_ = [_IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory, IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory]

_IAgStkGraphicsAlphaFromLuminanceFilter._methods_ = [
]
################################################################
## code template for _IAgStkGraphicsAlphaFromLuminanceFilter implementation
##class _IAgStkGraphicsAlphaFromLuminanceFilter_Impl(object):

class AgStkGraphicsRasterFactory(CoClass):
    'A raster dataset. A raster consists of one or more bands, or sets of values, which are most commonly associated with colors when the raster represents an image...'
    _reg_clsid_ = GUID('{F2D66293-B9CB-44D5-A9B7-3ED87BD2F304}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsRasterFactory._com_interfaces_ = [_IAgStkGraphicsRasterFactory, IAgStkGraphicsRasterFactory]

IAgStkGraphicsMarkerBatchPrimitiveFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a default marker batch primitive...')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a marker batch primitive with the specified setHint...')], HRESULT, 'InitializeWithSetHint',
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a marker batch primitive with the specified sizeSource...')], HRESULT, 'InitializeWithSizeSource',
              ( ['in'], AgEStkGraphicsMarkerBatchSizeSource, 'SizeSource' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a marker batch primitive with the specified sizeSource and sortOrder...')], HRESULT, 'InitializeWithSizeSourceAndSortOrder',
              ( ['in'], AgEStkGraphicsMarkerBatchSizeSource, 'SizeSource' ),
              ( ['in'], AgEStkGraphicsMarkerBatchSortOrder, 'SortOrder' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a marker batch primitive with the specified sizeSource, sortOrder, and setHint. This is equivalent to constructing a marker batch with the specified arguments and a marker batch rendering method of Automatic.')], HRESULT, 'InitializeSizeSourceSortOrderAndSetHint',
              ( ['in'], AgEStkGraphicsMarkerBatchSizeSource, 'SizeSource' ),
              ( ['in'], AgEStkGraphicsMarkerBatchSortOrder, 'SortOrder' ),
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a marker batch primitive with the specified arguments.')], HRESULT, 'InitializeSizeSourceSortOrderSetHintAndRenderingMethod',
              ( ['in'], AgEStkGraphicsMarkerBatchSizeSource, 'SizeSource' ),
              ( ['in'], AgEStkGraphicsMarkerBatchSortOrder, 'SortOrder' ),
              ( ['in'], AgEStkGraphicsSetHint, 'SetHint' ),
              ( ['in'], AgEStkGraphicsMarkerBatchRenderingMethod, 'RenderingMethod' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsMarkerBatchPrimitive)), 'ppRetVal' )),
    COMMETHOD([helpstring('Determines whether or not the video card supports the marker batch primitive with the given renderingMethod.')], HRESULT, 'Supported',
              ( ['in'], AgEStkGraphicsMarkerBatchRenderingMethod, 'RenderingMethod' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsMarkerBatchPrimitiveFactory implementation
##class IAgStkGraphicsMarkerBatchPrimitiveFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a default marker batch primitive...'
##        #return ppRetVal
##
##    def InitializeWithSetHint(self, SetHint):
##        'Initializes a marker batch primitive with the specified setHint...'
##        #return ppRetVal
##
##    def InitializeWithSizeSource(self, SizeSource):
##        'Initializes a marker batch primitive with the specified sizeSource...'
##        #return ppRetVal
##
##    def InitializeWithSizeSourceAndSortOrder(self, SizeSource, SortOrder):
##        'Initializes a marker batch primitive with the specified sizeSource and sortOrder...'
##        #return ppRetVal
##
##    def InitializeSizeSourceSortOrderAndSetHint(self, SizeSource, SortOrder, SetHint):
##        'Initializes a marker batch primitive with the specified sizeSource, sortOrder, and setHint. This is equivalent to constructing a marker batch with the specified arguments and a marker batch rendering method of Automatic.'
##        #return ppRetVal
##
##    def InitializeSizeSourceSortOrderSetHintAndRenderingMethod(self, SizeSource, SortOrder, SetHint, RenderingMethod):
##        'Initializes a marker batch primitive with the specified arguments.'
##        #return ppRetVal
##
##    def Supported(self, RenderingMethod):
##        'Determines whether or not the video card supports the marker batch primitive with the given renderingMethod.'
##        #return pRetVal
##

IAgStkGraphicsCustomImageGlobeOverlay._methods_ = [
    COMMETHOD(['propget', helpstring('Gets whether the overlay contains translucent imagery.')], HRESULT, 'IsTranslucent',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the maximum resolution of the inlay in meters per pixel.')], HRESULT, 'MaximumMetersPerPixel',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the map projection. Valid values are mercator and equidistant cylindical.')], HRESULT, 'Projection',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMapProjection), 'pRetVal' )),
    COMMETHOD([helpstring('Called automatically when imagery is being added to the globe.')], HRESULT, 'StartUp',
              ( ['in'], POINTER(IAgStkGraphicsScene), 'Scene' )),
    COMMETHOD([helpstring('Called automatically when imagery is being removed from the globe.')], HRESULT, 'ShutDown',
              ( ['in'], POINTER(IAgStkGraphicsScene), 'Scene' )),
    COMMETHOD([helpstring('Clears the image data cache associated with this instance. This is equivalent to deleting and re-adding the overlay.')], HRESULT, 'ClearCache'),
    COMMETHOD([helpstring('Reloads the image data associated with this instance. Preserves the current image data until new image data replaces it.')], HRESULT, 'Reload'),
    COMMETHOD([helpstring('Reads a tile from the specified extent, scales it to and stores the result in image.')], HRESULT, 'Read',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Extent' ),
              ( ['in'], VARIANT, 'UserTileData' ),
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp), 'Image' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsCustomImageGlobeOverlay implementation
##class IAgStkGraphicsCustomImageGlobeOverlay_Impl(object):
##    @property
##    def IsTranslucent(self):
##        'Gets whether the overlay contains translucent imagery.'
##        #return pRetVal
##
##    @property
##    def MaximumMetersPerPixel(self):
##        'Gets the maximum resolution of the inlay in meters per pixel.'
##        #return pRetVal
##
##    @property
##    def Projection(self):
##        'Gets the map projection. Valid values are mercator and equidistant cylindical.'
##        #return pRetVal
##
##    def StartUp(self, Scene):
##        'Called automatically when imagery is being added to the globe.'
##        #return 
##
##    def ShutDown(self, Scene):
##        'Called automatically when imagery is being removed from the globe.'
##        #return 
##
##    def ClearCache(self):
##        'Clears the image data cache associated with this instance. This is equivalent to deleting and re-adding the overlay.'
##        #return 
##
##    def Reload(self):
##        'Reloads the image data associated with this instance. Preserves the current image data until new image data replaces it.'
##        #return 
##
##    def Read(self, Extent, UserTileData, Image):
##        'Reads a tile from the specified extent, scales it to and stores the result in image.'
##        #return pRetVal
##

_IAgStkGraphicsSceneDisplayCondition._methods_ = [
    COMMETHOD([dispid(10301), helpstring("Allows or disallows <topic name='Glossary' anchor='Render'>rendering</topic> for in a particular scene for.")], HRESULT, 'SetDisplayInScene',
              ( ['in'], POINTER(IAgStkGraphicsScene), 'Scene' ),
              ( ['in'], VARIANT_BOOL, 'On' )),
    COMMETHOD([dispid(10302), helpstring("Determines whether the display condition allows rendering <topic name='Glossary' anchor='Render'>rendering</topic> in the given scene.")], HRESULT, 'GetDisplayInScene',
              ( ['in'], POINTER(IAgStkGraphicsScene), 'Scene' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(10303), helpstring("Allows <topic name='Glossary' anchor='Render'>rendering</topic> only in the given scene. The display condition will not allow rendering in other scenes, including newly created ones.")], HRESULT, 'DisplayOnlyInScene',
              ( ['in'], POINTER(IAgStkGraphicsScene), 'Scene' )),
]
################################################################
## code template for _IAgStkGraphicsSceneDisplayCondition implementation
##class _IAgStkGraphicsSceneDisplayCondition_Impl(object):
##    def SetDisplayInScene(self, Scene, On):
##        "Allows or disallows <topic name='Glossary' anchor='Render'>rendering</topic> for in a particular scene for."
##        #return 
##
##    def GetDisplayInScene(self, Scene):
##        "Determines whether the display condition allows rendering <topic name='Glossary' anchor='Render'>rendering</topic> in the given scene."
##        #return pRetVal
##
##    def DisplayOnlyInScene(self, Scene):
##        "Allows <topic name='Glossary' anchor='Render'>rendering</topic> only in the given scene. The display condition will not allow rendering in other scenes, including newly created ones."
##        #return 
##

class AgStkGraphicsRasterAttributesFactory(CoClass):
    'The attributes describing a raster dataset. raster attributes define the memory layout of a raster, and includes properties defining the order of each raster band that the raster contains, as specified by the raster format...'
    _reg_clsid_ = GUID('{7F988242-9F5F-4B06-8A3D-84CECCF0C671}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsRasterAttributesFactory._com_interfaces_ = [_IAgStkGraphicsRasterAttributesFactory, IAgStkGraphicsRasterAttributesFactory]

_IAgStkGraphicsSceneCollection._methods_ = [
    COMMETHOD([dispid(1), helpstring('Total number of scenes in the collection.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(0), helpstring('A scene in the collection at a specified index.'), 'propget'], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScene)), 'ppRetVal' )),
    COMMETHOD([dispid(-4), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsSceneCollection implementation
##class _IAgStkGraphicsSceneCollection_Impl(object):
##    @property
##    def Count(self):
##        'Total number of scenes in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'A scene in the collection at a specified index.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return ppRetVal
##

IAgStkGraphicsDurationPathPrimitiveUpdatePolicy._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the maximum duration that a point will lie on the line.')], HRESULT, 'Duration',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the maximum duration that a point will lie on the line.')], HRESULT, 'Duration',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets where the positions on the path are removed from.')], HRESULT, 'RemoveLocation',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPathPrimitiveRemoveLocation), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets where the positions on the path are removed from.')], HRESULT, 'RemoveLocation',
              ( ['in'], AgEStkGraphicsPathPrimitiveRemoveLocation, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsDurationPathPrimitiveUpdatePolicy implementation
##class IAgStkGraphicsDurationPathPrimitiveUpdatePolicy_Impl(object):
##    def _get(self):
##        'Gets or sets the maximum duration that a point will lie on the line.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum duration that a point will lie on the line.'
##    Duration = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets where the positions on the path are removed from.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets where the positions on the path are removed from.'
##    RemoveLocation = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsProjectionStream._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the update delta of the projection stream in seconds. The update delta defines the interval at which the Update method will be called...')], HRESULT, 'UpdateDelta',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the update delta of the projection stream in seconds. The update delta defines the interval at which the Update method will be called...')], HRESULT, 'UpdateDelta',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD([helpstring('When overridden in a derived class, updates the projection data associated with the projection stream at the specified time. When the Update method is called, the projection stream contains the current projection data...')], HRESULT, 'Update',
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'Time' ),
              ( ['in'], POINTER(comtypes.gen._00DD7BD4_53D5_4870_996B_8ADB8AF904FA_0_1_0.IAgDate), 'NextTime' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsProjectionStream implementation
##class IAgStkGraphicsProjectionStream_Impl(object):
##    def _get(self):
##        'Gets or sets the update delta of the projection stream in seconds. The update delta defines the interval at which the Update method will be called...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the update delta of the projection stream in seconds. The update delta defines the interval at which the Update method will be called...'
##    UpdateDelta = property(_get, _set, doc = _set.__doc__)
##
##    def Update(self, Time, NextTime):
##        'When overridden in a derived class, updates the projection data associated with the projection stream at the specified time. When the Update method is called, the projection stream contains the current projection data...'
##        #return pRetVal
##

class AgStkGraphicsRotateFilterFactory(CoClass):
    'Rotates the source raster clockwise by the specified angle.'
    _reg_clsid_ = GUID('{048EB8D8-6DE3-49D4-9BD8-39ED5304E67D}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsRotateFilterFactory._com_interfaces_ = [_IAgStkGraphicsRotateFilterFactory, IAgStkGraphicsRotateFilterFactory]

class AgStkGraphicsSequenceFilterFactory(CoClass):
    'Applies a sequence of filters to the source raster in the order in which they were added. When continue on failure is set to true, subsequent filters will still be applied to the source raster even if one or more filters in the sequence cannot be applied.'
    _reg_clsid_ = GUID('{BA979648-DF93-4C71-82AF-F6D9C3A7D15B}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsSequenceFilterFactory._com_interfaces_ = [_IAgStkGraphicsSequenceFilterFactory, IAgStkGraphicsSequenceFilterFactory]

IAgStkGraphicsMarkerBatchPrimitive._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the source used for the size of markers in the batch.')], HRESULT, 'SizeSource',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMarkerBatchSizeSource), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the order in which markers in the marker batch are sorted before rendering.')], HRESULT, 'SortOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMarkerBatchSortOrder), 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with.")], HRESULT, 'SetHint',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsSetHint), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the rendering method used to render the marker batch.')], HRESULT, 'RenderingMethod',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMarkerBatchRenderingMethod), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the pass during which the marker batch is rendered.')], HRESULT, 'RenderPass',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMarkerBatchRenderPass), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the pass during which the marker batch is rendered.')], HRESULT, 'RenderPass',
              ( ['in'], AgEStkGraphicsMarkerBatchRenderPass, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the scale applied to the radius of this primitive's bounding sphere.")], HRESULT, 'BoundingSphereScale',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the scale applied to the radius of this primitive's bounding sphere.")], HRESULT, 'BoundingSphereScale',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets a distance display condition that is evaluated per marker in the marker batch during rendering. This is different than display condition, which is evaluated once for the entire marker batch...')], HRESULT, 'DistanceDisplayConditionPerMarker',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDistanceDisplayCondition)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets a distance display condition that is evaluated per marker in the marker batch during rendering. This is different than display condition, which is evaluated once for the entire marker batch...')], HRESULT, 'DistanceDisplayConditionPerMarker',
              ( ['in'], POINTER(IAgStkGraphicsDistanceDisplayCondition), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the per-batch texture, which is applied to each marker in the batch.')], HRESULT, 'Texture',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsRendererTexture2D)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the per-batch texture, which is applied to each marker in the batch.')], HRESULT, 'Texture',
              ( ['in'], POINTER(IAgStkGraphicsRendererTexture2D), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets the unit that each marker's size is defined in.")], HRESULT, 'SizeUnit',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsMarkerBatchUnit), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets the unit that each marker's size is defined in.")], HRESULT, 'SizeUnit',
              ( ['in'], AgEStkGraphicsMarkerBatchUnit, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the per-batch size, which is applied to each marker in the batch. The array contains one width followed by one height.')], HRESULT, 'Size',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the per-batch size, which is applied to each marker in the batch. The array contains one width followed by one height.')], HRESULT, 'Size',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the per-batch origin, which is applied to each marker in the batch.')], HRESULT, 'Origin',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsOrigin), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the per-batch origin, which is applied to each marker in the batch.')], HRESULT, 'Origin',
              ( ['in'], AgEStkGraphicsOrigin, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the per-batch pixel offset, which is applied to each marker in the batch. The array contains one x pixel offset followed by one y pixel offset.')], HRESULT, 'PixelOffset',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the per-batch pixel offset, which is applied to each marker in the batch. The array contains one x pixel offset followed by one y pixel offset.')], HRESULT, 'PixelOffset',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the per-batch eye offset, which is applied to each marker in the batch. The array contains the components of the eye offset in the order x, y, z.')], HRESULT, 'EyeOffset',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the per-batch eye offset, which is applied to each marker in the batch. The array contains the components of the eye offset in the order x, y, z.')], HRESULT, 'EyeOffset',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the per-batch rotation angle, in radians, which is applied to each marker in the batch.')], HRESULT, 'Rotation',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the per-batch rotation angle, in radians, which is applied to each marker in the batch.')], HRESULT, 'Rotation',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the per-batch texture coordinate, which is applied to each marker in the batch. The array contains the texture coordinates arranged in the order s, t, p, q.')], HRESULT, 'TextureCoordinate',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the per-batch texture coordinate, which is applied to each marker in the batch. The array contains the texture coordinates arranged in the order s, t, p, q.')], HRESULT, 'TextureCoordinate',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('This property is deprecated. This property has been deprecated in favor of ClampToPixel. Gets or sets whether the screen space position of each marker is aligned to a pixel.')], HRESULT, 'AlignToPixel',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('This property is deprecated. This property has been deprecated in favor of ClampToPixel. Gets or sets whether the screen space position of each marker is aligned to a pixel.')], HRESULT, 'AlignToPixel',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.')], HRESULT, 'Wireframe',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.')], HRESULT, 'Wireframe',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring("Gets or sets whether individual marker indices will be included in the pick results returned from the scene's Pick method. Each marker index that is picked will be returned as a batch primitive index.")], HRESULT, 'PerItemPickingEnabled',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring("Gets or sets whether individual marker indices will be included in the pick results returned from the scene's Pick method. Each marker index that is picked will be returned as a batch primitive index.")], HRESULT, 'PerItemPickingEnabled',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the filter used for per-marker or per-batch textures.')], HRESULT, 'TextureFilter',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsTextureFilter2D)), 'ppRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the filter used for per-marker or per-batch textures.')], HRESULT, 'TextureFilter',
              ( ['in'], POINTER(IAgStkGraphicsTextureFilter2D), 'ppRetVal' )),
    COMMETHOD([helpstring("Defines the positions of markers in a marker batch. The markers are rendered in the primitive's reference frame.")], HRESULT, 'Set',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' )),
    COMMETHOD([helpstring("Defines the positions and optional per-marker parameters of markers in a marker batch. The markers are rendered in the primitive's reference frame.")], HRESULT, 'SetWithOptionalParameters',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters), 'OptionalParameters' )),
    COMMETHOD([helpstring("Defines the positions and optional per-marker parameters of markers in a marker batch. The markers are rendered in the primitive's reference frame. renderPassHint is provided for efficiency.")], HRESULT, 'SetWithOptionalParametersAndRenderPassHint',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([helpstring('For convenience. Defines the positions of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling Set.')], HRESULT, 'SetCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' )),
    COMMETHOD([helpstring('For convenience. Defines the positions and optional per-marker parameters of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetCartographicWithOptionalParameters',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters), 'OptionalParameters' )),
    COMMETHOD([helpstring('For convenience. Defines the positions and optional per-marker parameters of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. renderPassHint is provided for efficiency...')], HRESULT, 'SetCartographicWithOptionalParametersAndRenderPassHint',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([helpstring('Updates a subset of marker positions in a marker batch.')], HRESULT, 'SetPartial',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring('Updates a subset of marker positions in a marker batch.')], HRESULT, 'SetPartialWithIndicesOrder',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' )),
    COMMETHOD([helpstring('Updates a subset of marker positions and/or per-marker parameters in a marker batch.')], HRESULT, 'SetPartialWithOptionalParameters',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring('Updates a subset of marker positions and/or per-marker parameters in a marker batch.')], HRESULT, 'SetPartialWithOptionalParametersIndicesOrderAndRenderPass',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([helpstring('For convenience. Updates a subset of positions in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographic',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring('For convenience. Updates a subset of positions in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithIndicesOrder',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' )),
    COMMETHOD([helpstring('For convenience. Updates a subset of positions and/or optional per-marker parameters of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...')], HRESULT, 'SetPartialCartographicWithOptionalParameters',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' )),
    COMMETHOD([helpstring('For convenience. Updates a subset of positions and/or optional per-marker parameters of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. renderPassHint is provided for efficiency...')], HRESULT, 'SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Positions' ),
              ( ['in'], POINTER(IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters), 'OptionalParameters' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Indices' ),
              ( ['in'], AgEStkGraphicsIndicesOrderHint, 'IndicesOrderHint' ),
              ( ['in'], AgEStkGraphicsRenderPassHint, 'RenderPassHint' )),
    COMMETHOD([helpstring('Determines whether or not the video card supports the marker batch primitive with the given renderingMethod.')], HRESULT, 'Supported',
              ( ['in'], AgEStkGraphicsMarkerBatchRenderingMethod, 'RenderingMethod' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the screen space position of each marker is clamped to a pixel.')], HRESULT, 'ClampToPixel',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the screen space position of each marker is clamped to a pixel.')], HRESULT, 'ClampToPixel',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the markers are clipped by the central body.')], HRESULT, 'CentralBodyClipped',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the markers are clipped by the central body.')], HRESULT, 'CentralBodyClipped',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([helpstring('Sets the up vector of the markers to always be aligned to the up vector of the camera. This is the default alignment.')], HRESULT, 'AlignToScreen'),
    COMMETHOD([helpstring('Sets the up vector of the markers to point towards the north axis of centralBody. It will be aligned with the tangent vector of the surface that points north.')], HRESULT, 'AlignToNorth',
              ( ['in'], BSTR, 'CentralBody' )),
    COMMETHOD([helpstring('Sets the up vector of the markers to point towards the axis of centralBody. It will be aligned with the tangent vector of the surface that points towards the axis...')], HRESULT, 'AlignToAxis',
              ( ['in'], BSTR, 'CentralBody' ),
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Axis' )),
]
################################################################
## code template for IAgStkGraphicsMarkerBatchPrimitive implementation
##class IAgStkGraphicsMarkerBatchPrimitive_Impl(object):
##    @property
##    def SizeSource(self):
##        'Gets the source used for the size of markers in the batch.'
##        #return pRetVal
##
##    @property
##    def SortOrder(self):
##        'Gets the order in which markers in the marker batch are sorted before rendering.'
##        #return pRetVal
##
##    @property
##    def SetHint(self):
##        "Gets the primitive's set hint. See the <topic name='Set Hint'>Set Hint Performance Overview</topic> for selecting an appropriate value to construct the primitive with."
##        #return pRetVal
##
##    @property
##    def RenderingMethod(self):
##        'Gets the rendering method used to render the marker batch.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the pass during which the marker batch is rendered.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the pass during which the marker batch is rendered.'
##    RenderPass = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the scale applied to the radius of this primitive's bounding sphere."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the scale applied to the radius of this primitive's bounding sphere."
##    BoundingSphereScale = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets a distance display condition that is evaluated per marker in the marker batch during rendering. This is different than display condition, which is evaluated once for the entire marker batch...'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets a distance display condition that is evaluated per marker in the marker batch during rendering. This is different than display condition, which is evaluated once for the entire marker batch...'
##    DistanceDisplayConditionPerMarker = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch texture, which is applied to each marker in the batch.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the per-batch texture, which is applied to each marker in the batch.'
##    Texture = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the unit that each marker's size is defined in."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the unit that each marker's size is defined in."
##    SizeUnit = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch size, which is applied to each marker in the batch. The array contains one width followed by one height.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the per-batch size, which is applied to each marker in the batch. The array contains one width followed by one height.'
##    Size = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch origin, which is applied to each marker in the batch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the per-batch origin, which is applied to each marker in the batch.'
##    Origin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch pixel offset, which is applied to each marker in the batch. The array contains one x pixel offset followed by one y pixel offset.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the per-batch pixel offset, which is applied to each marker in the batch. The array contains one x pixel offset followed by one y pixel offset.'
##    PixelOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch eye offset, which is applied to each marker in the batch. The array contains the components of the eye offset in the order x, y, z.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the per-batch eye offset, which is applied to each marker in the batch. The array contains the components of the eye offset in the order x, y, z.'
##    EyeOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch rotation angle, in radians, which is applied to each marker in the batch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the per-batch rotation angle, in radians, which is applied to each marker in the batch.'
##    Rotation = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch texture coordinate, which is applied to each marker in the batch. The array contains the texture coordinates arranged in the order s, t, p, q.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the per-batch texture coordinate, which is applied to each marker in the batch. The array contains the texture coordinates arranged in the order s, t, p, q.'
##    TextureCoordinate = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'This property is deprecated. This property has been deprecated in favor of ClampToPixel. Gets or sets whether the screen space position of each marker is aligned to a pixel.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'This property is deprecated. This property has been deprecated in favor of ClampToPixel. Gets or sets whether the screen space position of each marker is aligned to a pixel.'
##    AlignToPixel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the primitive is rendered in wireframe. This is useful for debugging.'
##    Wireframe = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets whether individual marker indices will be included in the pick results returned from the scene's Pick method. Each marker index that is picked will be returned as a batch primitive index."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets whether individual marker indices will be included in the pick results returned from the scene's Pick method. Each marker index that is picked will be returned as a batch primitive index."
##    PerItemPickingEnabled = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the filter used for per-marker or per-batch textures.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the filter used for per-marker or per-batch textures.'
##    TextureFilter = property(_get, _set, doc = _set.__doc__)
##
##    def Set(self, Positions):
##        "Defines the positions of markers in a marker batch. The markers are rendered in the primitive's reference frame."
##        #return 
##
##    def SetWithOptionalParameters(self, Positions, OptionalParameters):
##        "Defines the positions and optional per-marker parameters of markers in a marker batch. The markers are rendered in the primitive's reference frame."
##        #return 
##
##    def SetWithOptionalParametersAndRenderPassHint(self, Positions, OptionalParameters, RenderPassHint):
##        "Defines the positions and optional per-marker parameters of markers in a marker batch. The markers are rendered in the primitive's reference frame. renderPassHint is provided for efficiency."
##        #return 
##
##    def SetCartographic(self, CentralBody, Positions):
##        'For convenience. Defines the positions of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. This is equivalent to converting each position in positions to cartesian and calling Set.'
##        #return 
##
##    def SetCartographicWithOptionalParameters(self, CentralBody, Positions, OptionalParameters):
##        'For convenience. Defines the positions and optional per-marker parameters of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetCartographicWithOptionalParametersAndRenderPassHint(self, CentralBody, Positions, OptionalParameters, RenderPassHint):
##        'For convenience. Defines the positions and optional per-marker parameters of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. renderPassHint is provided for efficiency...'
##        #return 
##
##    def SetPartial(self, Positions, Indices):
##        'Updates a subset of marker positions in a marker batch.'
##        #return 
##
##    def SetPartialWithIndicesOrder(self, Positions, Indices, IndicesOrderHint):
##        'Updates a subset of marker positions in a marker batch.'
##        #return 
##
##    def SetPartialWithOptionalParameters(self, Positions, OptionalParameters, Indices):
##        'Updates a subset of marker positions and/or per-marker parameters in a marker batch.'
##        #return 
##
##    def SetPartialWithOptionalParametersIndicesOrderAndRenderPass(self, Positions, OptionalParameters, Indices, IndicesOrderHint, RenderPassHint):
##        'Updates a subset of marker positions and/or per-marker parameters in a marker batch.'
##        #return 
##
##    def SetPartialCartographic(self, CentralBody, Positions, Indices):
##        'For convenience. Updates a subset of positions in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartialCartographicWithIndicesOrder(self, CentralBody, Positions, Indices, IndicesOrderHint):
##        'For convenience. Updates a subset of positions in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartialCartographicWithOptionalParameters(self, CentralBody, Positions, OptionalParameters, Indices):
##        'For convenience. Updates a subset of positions and/or optional per-marker parameters of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters...'
##        #return 
##
##    def SetPartialCartographicWithOptionalParametersIndicesOrderAndRenderPass(self, CentralBody, Positions, OptionalParameters, Indices, IndicesOrderHint, RenderPassHint):
##        'For convenience. Updates a subset of positions and/or optional per-marker parameters of markers in a marker batch using cartographic positions. Longitude and latitude are in radians, and altitude is in meters. renderPassHint is provided for efficiency...'
##        #return 
##
##    def Supported(self, RenderingMethod):
##        'Determines whether or not the video card supports the marker batch primitive with the given renderingMethod.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets whether the screen space position of each marker is clamped to a pixel.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the screen space position of each marker is clamped to a pixel.'
##    ClampToPixel = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the markers are clipped by the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the markers are clipped by the central body.'
##    CentralBodyClipped = property(_get, _set, doc = _set.__doc__)
##
##    def AlignToScreen(self):
##        'Sets the up vector of the markers to always be aligned to the up vector of the camera. This is the default alignment.'
##        #return 
##
##    def AlignToNorth(self, CentralBody):
##        'Sets the up vector of the markers to point towards the north axis of centralBody. It will be aligned with the tangent vector of the surface that points north.'
##        #return 
##
##    def AlignToAxis(self, CentralBody, Axis):
##        'Sets the up vector of the markers to point towards the axis of centralBody. It will be aligned with the tangent vector of the surface that points towards the axis...'
##        #return 
##

IAgStkGraphicsFlipFilterFactory._methods_ = [
    COMMETHOD([helpstring('Initializes a new instance.')], HRESULT, 'Initialize',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsFlipFilter)), 'ppRetVal' )),
    COMMETHOD([helpstring('Initializes a new instance with the specified flip axis.')], HRESULT, 'InitializeWithFlipAxis',
              ( ['in'], AgEStkGraphicsFlipAxis, 'FlipAxis' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsFlipFilter)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsFlipFilterFactory implementation
##class IAgStkGraphicsFlipFilterFactory_Impl(object):
##    def Initialize(self):
##        'Initializes a new instance.'
##        #return ppRetVal
##
##    def InitializeWithFlipAxis(self, FlipAxis):
##        'Initializes a new instance with the specified flip axis.'
##        #return ppRetVal
##

_IAgStkGraphicsCompositePrimitive._methods_ = [
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propget'], HRESULT, 'ReferenceFrame',
              ( ['out', 'retval'], POINTER(POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem)), 'ppRetVal' )),
    COMMETHOD([dispid(17001), helpstring('Gets or sets the reference frame this primitive is defined and rendered in.'), 'propput'], HRESULT, 'ReferenceFrame',
              ( ['in'], POINTER(comtypes.gen._8B49F426_4BF0_49F7_A59B_93961D83CB5D_0_1_0.IAgCrdnSystem), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(17002), helpstring("Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."), 'propput'], HRESULT, 'BoundingSphere',
              ( ['in'], POINTER(IAgStkGraphicsBoundingSphere), 'ppRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propget'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17003), helpstring("Gets or sets if the primitive's bounding sphere is automatically computed."), 'propput'], HRESULT, 'AutomaticallyComputeBoundingSphere',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'DisplayCondition',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsDisplayCondition)), 'ppRetVal' )),
    COMMETHOD([dispid(17004), helpstring("Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'DisplayCondition',
              ( ['in'], POINTER(IAgStkGraphicsDisplayCondition), 'ppRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(17005), helpstring("Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propget'], HRESULT, 'Color',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD([dispid(17006), helpstring("Gets or sets the primitive's color."), 'propput'], HRESULT, 'Color',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propget'], HRESULT, 'Translucency',
              ( ['out', 'retval'], POINTER(c_float), 'pRetVal' )),
    COMMETHOD([dispid(17007), helpstring("Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."), 'propput'], HRESULT, 'Translucency',
              ( ['in'], c_float, 'pRetVal' )),
    COMMETHOD([dispid(1), helpstring('Gets the number of primitives in the composite.'), 'propget'], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(3302), helpstring('Gets or sets the sort order for translucent primitives in this composite. This determines a trade-off between rendering speed and quality...'), 'propget'], HRESULT, 'TranslucentPrimitivesSortOrder',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsPrimitivesSortOrder), 'pRetVal' )),
    COMMETHOD([dispid(3302), helpstring('Gets or sets the sort order for translucent primitives in this composite. This determines a trade-off between rendering speed and quality...'), 'propput'], HRESULT, 'TranslucentPrimitivesSortOrder',
              ( ['in'], AgEStkGraphicsPrimitivesSortOrder, 'pRetVal' )),
    COMMETHOD([dispid(3303), helpstring('Adds a primitive to the composite.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAgStkGraphicsPrimitive), 'Primitive' )),
    COMMETHOD([dispid(3304), helpstring('Removes a primitive from the composite.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAgStkGraphicsPrimitive), 'Primitive' )),
    COMMETHOD([dispid(3305), helpstring('Determines whether the composite contains a primitive.')], HRESULT, 'Contains',
              ( ['in'], POINTER(IAgStkGraphicsPrimitive), 'Primitive' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(3306), helpstring('Removes all primitives from the composite.')], HRESULT, 'Clear'),
    COMMETHOD([dispid(-4), helpstring('Returns an enumerator that iterates through the collection. The order of the primitives is not guaranteed to be the order that the primitives were added.'), 'propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propget'], HRESULT, 'Tag',
              ( ['out', 'retval'], POINTER(VARIANT), 'pRetVal' )),
    COMMETHOD([dispid(17008), helpstring('Gets or sets custom value associated with this primitive.'), 'propput'], HRESULT, 'Tag',
              ( ['in'], VARIANT, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsCompositePrimitive implementation
##class _IAgStkGraphicsCompositePrimitive_Impl(object):
##    def _get(self):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the reference frame this primitive is defined and rendered in.'
##    ReferenceFrame = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the bounding sphere that encompasses the primitive. The center is defined in the primitive's reference frame."
##    BoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive's bounding sphere is automatically computed."
##    AutomaticallyComputeBoundingSphere = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        "Gets or sets the display condition that determines if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display must evaluate to true for the primitive to be rendered."
##    DisplayCondition = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets if the primitive should be <topic name='Glossary' anchor='Render'>rendered</topic>. Both this and display condition must evaluate to true for the primitive to be rendered."
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's color."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's color."
##    Color = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##        #return pRetVal
##    def _set(self, pRetVal):
##        "Gets or sets the primitive's translucency. Translucency is between 0 and 1, where 0 is opaque and 1 is transparent."
##    Translucency = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Count(self):
##        'Gets the number of primitives in the composite.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets the sort order for translucent primitives in this composite. This determines a trade-off between rendering speed and quality...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the sort order for translucent primitives in this composite. This determines a trade-off between rendering speed and quality...'
##    TranslucentPrimitivesSortOrder = property(_get, _set, doc = _set.__doc__)
##
##    def Add(self, Primitive):
##        'Adds a primitive to the composite.'
##        #return 
##
##    def Remove(self, Primitive):
##        'Removes a primitive from the composite.'
##        #return 
##
##    def Contains(self, Primitive):
##        'Determines whether the composite contains a primitive.'
##        #return pRetVal
##
##    def Clear(self):
##        'Removes all primitives from the composite.'
##        #return 
##
##    @property
##    def _NewEnum(self):
##        'Returns an enumerator that iterates through the collection. The order of the primitives is not guaranteed to be the order that the primitives were added.'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets custom value associated with this primitive.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets custom value associated with this primitive.'
##    Tag = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsSharpenFilterFactory(CoClass):
    'Applies a convolution filter to increase the sharpness of the source raster.'
    _reg_clsid_ = GUID('{AC41C343-C70F-4E85-A7D3-37AB6C4CF077}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsSharpenFilterFactory._com_interfaces_ = [_IAgStkGraphicsSharpenFilterFactory, IAgStkGraphicsSharpenFilterFactory]

IAgStkGraphicsSceneCollection._methods_ = [
    COMMETHOD(['propget', helpstring('Total number of scenes in the collection.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('A scene in the collection at a specified index.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScene)), 'ppRetVal' )),
    COMMETHOD(['propget'], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSceneCollection implementation
##class IAgStkGraphicsSceneCollection_Impl(object):
##    @property
##    def Count(self):
##        'Total number of scenes in the collection.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'A scene in the collection at a specified index.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        '-no docstring-'
##        #return ppRetVal
##

_IAgStkGraphicsKmlContainer._methods_ = [
    COMMETHOD([dispid(26601), helpstring('Gets whether the document associated with this feature is loaded.'), 'propget'], HRESULT, 'IsLoaded',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(26602), helpstring('Gets or sets whether this feature will be displayed in the Scene.'), 'propget'], HRESULT, 'Display',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(26602), helpstring('Gets or sets whether this feature will be displayed in the Scene.'), 'propput'], HRESULT, 'Display',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(26603), helpstring('Gets the content associated with this feature.'), 'propget'], HRESULT, 'Content',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26604), helpstring('Gets the name of this feature.'), 'propget'], HRESULT, 'Name',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26605), helpstring('Gets the description associated with this feature.'), 'propget'], HRESULT, 'Description',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26606), helpstring('Gets the snippet associated with this feature.'), 'propget'], HRESULT, 'Snippet',
              ( ['out', 'retval'], POINTER(BSTR), 'pRetVal' )),
    COMMETHOD([dispid(26607), helpstring('The bounding sphere encompassing the area associated with this feature.'), 'propget'], HRESULT, 'BoundingSphere',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsBoundingSphere)), 'ppRetVal' )),
    COMMETHOD([dispid(26608), helpstring('Moves the camera to the area encompassing this feature.')], HRESULT, 'FlyTo'),
    COMMETHOD([dispid(26701), helpstring('The collection of kml features that are children of this container.'), 'propget'], HRESULT, 'Children',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsKmlFeatureCollection)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsKmlContainer implementation
##class _IAgStkGraphicsKmlContainer_Impl(object):
##    @property
##    def IsLoaded(self):
##        'Gets whether the document associated with this feature is loaded.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets whether this feature will be displayed in the Scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether this feature will be displayed in the Scene.'
##    Display = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def Content(self):
##        'Gets the content associated with this feature.'
##        #return pRetVal
##
##    @property
##    def Name(self):
##        'Gets the name of this feature.'
##        #return pRetVal
##
##    @property
##    def Description(self):
##        'Gets the description associated with this feature.'
##        #return pRetVal
##
##    @property
##    def Snippet(self):
##        'Gets the snippet associated with this feature.'
##        #return pRetVal
##
##    @property
##    def BoundingSphere(self):
##        'The bounding sphere encompassing the area associated with this feature.'
##        #return ppRetVal
##
##    def FlyTo(self):
##        'Moves the camera to the area encompassing this feature.'
##        #return 
##
##    @property
##    def Children(self):
##        'The collection of kml features that are children of this container.'
##        #return ppRetVal
##

_IAgStkGraphicsAGICustomTerrainOverlayFactory._methods_ = [
    COMMETHOD([dispid(27801), helpstring('Initializes an agi custom terrain overlay with the provided values.')], HRESULT, 'InitializeWithString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsAGICustomTerrainOverlay)), 'ppRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsAGICustomTerrainOverlayFactory implementation
##class _IAgStkGraphicsAGICustomTerrainOverlayFactory_Impl(object):
##    def InitializeWithString(self, Uri):
##        'Initializes an agi custom terrain overlay with the provided values.'
##        #return ppRetVal
##

class AgStkGraphicsVideoStreamFactory(CoClass):
    "A raster stream that streams from a video. The video can be read from a file, or streamed from an HTTP, RTP, UDP, or TCP source. See the <topic name='Video Streams'>Video Streams Overview</topic> for a list of supported video formats and Uri usage."
    _reg_clsid_ = GUID('{B375724F-A9D7-4052-8923-A5B45DAE50F6}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsVideoStreamFactory._com_interfaces_ = [_IAgStkGraphicsVideoStreamFactory, IAgStkGraphicsVideoStreamFactory]

IAgStkGraphicsImageCollection._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the number of globe overlay objects in the collection.')], HRESULT, 'Count',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets whether or not the collection is read only.')], HRESULT, 'IsReadOnly',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the globe image overlay at the specified index.')], HRESULT, 'Item',
              ( ['in'], c_int, 'Index' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeImageOverlay)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Constructs an iterator that can be used to iterate the collection.')], HRESULT, '_NewEnum',
              ( ['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppRetVal' )),
    COMMETHOD([helpstring('Checks the presence of a globe image overlay in the collection.')], HRESULT, 'Contains',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Checks the presence of a globe image overlay with the specified Uri in the collection.')], HRESULT, 'ContainsUriString',
              ( ['in'], BSTR, 'StringUri' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Removes a globe image overlay from the collection.')], HRESULT, 'Remove',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'GlobeOverlay' ),
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([helpstring('Removes all globe image overlay objects from the collection.')], HRESULT, 'Clear'),
    COMMETHOD([helpstring('Adds imageryOverlay to the collection.')], HRESULT, 'Add',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay' )),
    COMMETHOD([helpstring('Adds imageryOverlay to the collection asynchronously.')], HRESULT, 'AddAsync',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay' )),
    COMMETHOD([helpstring('Gets the index of the specified globe image overlay.')], HRESULT, 'IndexOf',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([helpstring('Gets the index of the globe image overlay with the specified Uri.')], HRESULT, 'IndexOfUriString',
              ( ['in'], BSTR, 'StringUri' ),
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([helpstring('Creates a globe overlay from the uri, which represents a uri, and adds it to the collection.')], HRESULT, 'AddUriString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeImageOverlay)), 'ppRetVal' )),
    COMMETHOD([helpstring('Creates a globe image overlay from the uri, which represents a uri, and adds it to the collection asynchronously.')], HRESULT, 'AddAsyncUriString',
              ( ['in'], BSTR, 'Uri' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsGlobeImageOverlay)), 'ppRetVal' )),
    COMMETHOD([helpstring('Swaps the position of two globe image overlay objects.')], HRESULT, 'Swap',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay1' ),
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay2' )),
    COMMETHOD([helpstring('Swaps the position of two globe image overlay objects at the specified indices.')], HRESULT, 'SwapByIndex',
              ( ['in'], c_int, 'Index1' ),
              ( ['in'], c_int, 'Index2' )),
    COMMETHOD([helpstring('Moves the globe image overlay to the specified position.')], HRESULT, 'Move',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay' ),
              ( ['in'], c_int, 'NewPosition' )),
    COMMETHOD([helpstring('Moves the globe image overlay at the specified index to the specified position.')], HRESULT, 'MoveByIndex',
              ( ['in'], c_int, 'Index' ),
              ( ['in'], c_int, 'NewPosition' )),
    COMMETHOD([helpstring('Brings the globe image overlay to the front of the collection so it is rendered first or on the bottom.')], HRESULT, 'BringToFront',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay' )),
    COMMETHOD([helpstring('Sends the globe image overlay to the back of the collection so it is rendered last or on the top.')], HRESULT, 'SendToBack',
              ( ['in'], POINTER(IAgStkGraphicsGlobeImageOverlay), 'ImageryOverlay' )),
]
################################################################
## code template for IAgStkGraphicsImageCollection implementation
##class IAgStkGraphicsImageCollection_Impl(object):
##    @property
##    def Count(self):
##        'Gets the number of globe overlay objects in the collection.'
##        #return pRetVal
##
##    @property
##    def IsReadOnly(self):
##        'Gets whether or not the collection is read only.'
##        #return pRetVal
##
##    @property
##    def Item(self, Index):
##        'Gets the globe image overlay at the specified index.'
##        #return ppRetVal
##
##    @property
##    def _NewEnum(self):
##        'Constructs an iterator that can be used to iterate the collection.'
##        #return ppRetVal
##
##    def Contains(self, ImageryOverlay):
##        'Checks the presence of a globe image overlay in the collection.'
##        #return pRetVal
##
##    def ContainsUriString(self, StringUri):
##        'Checks the presence of a globe image overlay with the specified Uri in the collection.'
##        #return pRetVal
##
##    def Remove(self, GlobeOverlay):
##        'Removes a globe image overlay from the collection.'
##        #return pRetVal
##
##    def Clear(self):
##        'Removes all globe image overlay objects from the collection.'
##        #return 
##
##    def Add(self, ImageryOverlay):
##        'Adds imageryOverlay to the collection.'
##        #return 
##
##    def AddAsync(self, ImageryOverlay):
##        'Adds imageryOverlay to the collection asynchronously.'
##        #return 
##
##    def IndexOf(self, ImageryOverlay):
##        'Gets the index of the specified globe image overlay.'
##        #return pRetVal
##
##    def IndexOfUriString(self, StringUri):
##        'Gets the index of the globe image overlay with the specified Uri.'
##        #return pRetVal
##
##    def AddUriString(self, Uri):
##        'Creates a globe overlay from the uri, which represents a uri, and adds it to the collection.'
##        #return ppRetVal
##
##    def AddAsyncUriString(self, Uri):
##        'Creates a globe image overlay from the uri, which represents a uri, and adds it to the collection asynchronously.'
##        #return ppRetVal
##
##    def Swap(self, ImageryOverlay1, ImageryOverlay2):
##        'Swaps the position of two globe image overlay objects.'
##        #return 
##
##    def SwapByIndex(self, Index1, Index2):
##        'Swaps the position of two globe image overlay objects at the specified indices.'
##        #return 
##
##    def Move(self, ImageryOverlay, NewPosition):
##        'Moves the globe image overlay to the specified position.'
##        #return 
##
##    def MoveByIndex(self, Index, NewPosition):
##        'Moves the globe image overlay at the specified index to the specified position.'
##        #return 
##
##    def BringToFront(self, ImageryOverlay):
##        'Brings the globe image overlay to the front of the collection so it is rendered first or on the bottom.'
##        #return 
##
##    def SendToBack(self, ImageryOverlay):
##        'Sends the globe image overlay to the back of the collection so it is rendered last or on the top.'
##        #return 
##

class AgStkGraphicsMarkerBatchPrimitiveFactory(CoClass):
    ' Renders one or more markers in the 3D scene. Markers are 2D images that always face the viewer which can be sized in pixels or meters. Markers are also referred to as sprites or billboards...'
    _reg_clsid_ = GUID('{00191ECA-151B-4107-90F6-85E780E4ACAB}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsMarkerBatchPrimitiveFactory._com_interfaces_ = [_IAgStkGraphicsMarkerBatchPrimitiveFactory, IAgStkGraphicsMarkerBatchPrimitiveFactory]

_IAgStkGraphicsGlobeOverlaySettings._methods_ = [
    COMMETHOD([dispid(15201), helpstring('Gets or sets the size of the terrain cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered.'), 'propget'], HRESULT, 'TerrainCacheSize',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15201), helpstring('Gets or sets the size of the terrain cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered.'), 'propput'], HRESULT, 'TerrainCacheSize',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(15202), helpstring('Gets or sets the size of the imagery cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered.'), 'propget'], HRESULT, 'ImageryCacheSize',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(15202), helpstring('Gets or sets the size of the imagery cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered.'), 'propput'], HRESULT, 'ImageryCacheSize',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(15204), helpstring('Gets or sets whether per-pixel lighting is used for terrain and imagery...'), 'propget'], HRESULT, 'UsePerPixelLighting',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(15204), helpstring('Gets or sets whether per-pixel lighting is used for terrain and imagery...'), 'propput'], HRESULT, 'UsePerPixelLighting',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD([dispid(15203), helpstring('Gets or sets whether terrain and imagery are preloaded. When set to true, terrain and imagery are preloaded to get the best visual quality; when set to false, they are not preloaded...'), 'propget'], HRESULT, 'PreloadTerrainAndImagery',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(15203), helpstring('Gets or sets whether terrain and imagery are preloaded. When set to true, terrain and imagery are preloaded to get the best visual quality; when set to false, they are not preloaded...'), 'propput'], HRESULT, 'PreloadTerrainAndImagery',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsGlobeOverlaySettings implementation
##class _IAgStkGraphicsGlobeOverlaySettings_Impl(object):
##    def _get(self):
##        'Gets or sets the size of the terrain cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the size of the terrain cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered.'
##    TerrainCacheSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the size of the imagery cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the size of the imagery cache in megabytes. It is not recommended to go above 128 megabytes. Large cache sizes can slow down rendering since so much imagery will be rendered.'
##    ImageryCacheSize = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether per-pixel lighting is used for terrain and imagery...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether per-pixel lighting is used for terrain and imagery...'
##    UsePerPixelLighting = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether terrain and imagery are preloaded. When set to true, terrain and imagery are preloaded to get the best visual quality; when set to false, they are not preloaded...'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether terrain and imagery are preloaded. When set to true, terrain and imagery are preloaded to get the best visual quality; when set to false, they are not preloaded...'
##    PreloadTerrainAndImagery = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsFlipFilter._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets the flip axis along which the source raster will be flipped.')], HRESULT, 'FlipAxis',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsFlipAxis), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the flip axis along which the source raster will be flipped.')], HRESULT, 'FlipAxis',
              ( ['in'], AgEStkGraphicsFlipAxis, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsFlipFilter implementation
##class IAgStkGraphicsFlipFilter_Impl(object):
##    def _get(self):
##        'Gets or sets the flip axis along which the source raster will be flipped.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the flip axis along which the source raster will be flipped.'
##    FlipAxis = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory(CoClass):
    "Optional per-marker parameters for marker batch primitive that overrides the marker batch's per-batch parameters..."
    _reg_clsid_ = GUID('{C7F7D84F-A597-48E4-928E-5090A308876E}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory._com_interfaces_ = [_IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory, IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory]

IAgStkGraphicsSceneGlobeOverlaySettings._methods_ = [
    COMMETHOD(['propget', helpstring('Gets or sets a value indicating whether or not imagery is anti-aliased.')], HRESULT, 'AntiAliasImagery',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets a value indicating whether or not imagery is anti-aliased.')], HRESULT, 'AntiAliasImagery',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the pixel error for terrain meshes. This is the number of pixels that the rendered terrain is different from the actual terrain data. The default is 2.0 pixels.')], HRESULT, 'TerrainMeshPixelError',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the pixel error for terrain meshes. This is the number of pixels that the rendered terrain is different from the actual terrain data. The default is 2.0 pixels.')], HRESULT, 'TerrainMeshPixelError',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the pixel error for imagery. This is the number of pixels that the rendered imagery is different from the actual imagery data. The default is 1.0 pixel.')], HRESULT, 'ImageryPixelError',
              ( ['out', 'retval'], POINTER(c_double), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the pixel error for imagery. This is the number of pixels that the rendered imagery is different from the actual imagery data. The default is 1.0 pixel.')], HRESULT, 'ImageryPixelError',
              ( ['in'], c_double, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether projected raster globe overlays will also project onto models.')], HRESULT, 'ProjectedRasterModelProjection',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether projected raster globe overlays will also project onto models.')], HRESULT, 'ProjectedRasterModelProjection',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsSceneGlobeOverlaySettings implementation
##class IAgStkGraphicsSceneGlobeOverlaySettings_Impl(object):
##    def _get(self):
##        'Gets or sets a value indicating whether or not imagery is anti-aliased.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a value indicating whether or not imagery is anti-aliased.'
##    AntiAliasImagery = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the pixel error for terrain meshes. This is the number of pixels that the rendered terrain is different from the actual terrain data. The default is 2.0 pixels.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the pixel error for terrain meshes. This is the number of pixels that the rendered terrain is different from the actual terrain data. The default is 2.0 pixels.'
##    TerrainMeshPixelError = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the pixel error for imagery. This is the number of pixels that the rendered imagery is different from the actual imagery data. The default is 1.0 pixel.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the pixel error for imagery. This is the number of pixels that the rendered imagery is different from the actual imagery data. The default is 1.0 pixel.'
##    ImageryPixelError = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether projected raster globe overlays will also project onto models.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether projected raster globe overlays will also project onto models.'
##    ProjectedRasterModelProjection = property(_get, _set, doc = _set.__doc__)
##

class AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory(CoClass):
    'path primitive update policy that removes points from remove location when the number of points in the path exceeds maximum count.'
    _reg_clsid_ = GUID('{4396FD8E-28E2-46EC-9E64-18A7C316A5C6}')
    _idlflags_ = ['hidden', 'noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{42D2781B-8A06-4DB2-9969-72D6ABF01A72}', 1, 0)
AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory._com_interfaces_ = [_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory, IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory]

_IAgStkGraphicsTextBatchPrimitiveOptionalParameters._methods_ = [
    COMMETHOD([dispid(5701), helpstring('Gets or sets the per-batch origin, which is applied to each string in the text batch.'), 'propget'], HRESULT, 'Origin',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsOrigin), 'pRetVal' )),
    COMMETHOD([dispid(5701), helpstring('Gets or sets the per-batch origin, which is applied to each string in the text batch.'), 'propput'], HRESULT, 'Origin',
              ( ['in'], AgEStkGraphicsOrigin, 'pRetVal' )),
    COMMETHOD([dispid(5702), helpstring('Gets or sets the per-batch eye offset, which is applied to each string in the text batch. The array contains the components of the offset arranged in the order x, y, z.'), 'propget'], HRESULT, 'EyeOffset',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(5702), helpstring('Gets or sets the per-batch eye offset, which is applied to each string in the text batch. The array contains the components of the offset arranged in the order x, y, z.'), 'propput'], HRESULT, 'EyeOffset',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(5703), helpstring('Gets or sets the per-batch pixel offset, which is applied to each string in the text batch. The array contains one x pixel offset followed by one y pixel offset.'), 'propget'], HRESULT, 'PixelOffset',
              ( ['out', 'retval'], POINTER(_midlSAFEARRAY(VARIANT)), 'ppRetVal' )),
    COMMETHOD([dispid(5703), helpstring('Gets or sets the per-batch pixel offset, which is applied to each string in the text batch. The array contains one x pixel offset followed by one y pixel offset.'), 'propput'], HRESULT, 'PixelOffset',
              ( ['in'], _midlSAFEARRAY(VARIANT), 'ppRetVal' )),
    COMMETHOD([dispid(5704), helpstring('Gets or sets the maximum length of each string in the text batch.'), 'propget'], HRESULT, 'MaximumStringLength',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD([dispid(5704), helpstring('Gets or sets the maximum length of each string in the text batch.'), 'propput'], HRESULT, 'MaximumStringLength',
              ( ['in'], c_int, 'pRetVal' )),
    COMMETHOD([dispid(5705), helpstring('Defines a collection of origins, one for each string in the batch.')], HRESULT, 'SetOrigins',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Origins' )),
    COMMETHOD([dispid(5706), helpstring('Defines a collection of eye offsets, one for each string in the batch.')], HRESULT, 'SetEyeOffsets',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'EyeOffsets' )),
    COMMETHOD([dispid(5707), helpstring('Defines a collection of pixel offsets, one for each string in the batch.')], HRESULT, 'SetPixelOffsets',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'PixelOffsets' )),
    COMMETHOD([dispid(5708), helpstring('Defines a collection of colors, one for each string in the batch.')], HRESULT, 'SetColors',
              ( ['in'], POINTER(_midlSAFEARRAY(VARIANT)), 'Colors' )),
    COMMETHOD([dispid(5709), helpstring('Gets or sets a flag that informs the CTextBatchPrimitive to use rendering optimized for screen space text.'), 'propget'], HRESULT, 'ScreenSpaceRendering',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD([dispid(5709), helpstring('Gets or sets a flag that informs the CTextBatchPrimitive to use rendering optimized for screen space text.'), 'propput'], HRESULT, 'ScreenSpaceRendering',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
]
################################################################
## code template for _IAgStkGraphicsTextBatchPrimitiveOptionalParameters implementation
##class _IAgStkGraphicsTextBatchPrimitiveOptionalParameters_Impl(object):
##    def _get(self):
##        'Gets or sets the per-batch origin, which is applied to each string in the text batch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the per-batch origin, which is applied to each string in the text batch.'
##    Origin = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch eye offset, which is applied to each string in the text batch. The array contains the components of the offset arranged in the order x, y, z.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the per-batch eye offset, which is applied to each string in the text batch. The array contains the components of the offset arranged in the order x, y, z.'
##    EyeOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the per-batch pixel offset, which is applied to each string in the text batch. The array contains one x pixel offset followed by one y pixel offset.'
##        #return ppRetVal
##    def _set(self, ppRetVal):
##        'Gets or sets the per-batch pixel offset, which is applied to each string in the text batch. The array contains one x pixel offset followed by one y pixel offset.'
##    PixelOffset = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the maximum length of each string in the text batch.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the maximum length of each string in the text batch.'
##    MaximumStringLength = property(_get, _set, doc = _set.__doc__)
##
##    def SetOrigins(self, Origins):
##        'Defines a collection of origins, one for each string in the batch.'
##        #return 
##
##    def SetEyeOffsets(self, EyeOffsets):
##        'Defines a collection of eye offsets, one for each string in the batch.'
##        #return 
##
##    def SetPixelOffsets(self, PixelOffsets):
##        'Defines a collection of pixel offsets, one for each string in the batch.'
##        #return 
##
##    def SetColors(self, Colors):
##        'Defines a collection of colors, one for each string in the batch.'
##        #return 
##
##    def _get(self):
##        'Gets or sets a flag that informs the CTextBatchPrimitive to use rendering optimized for screen space text.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets a flag that informs the CTextBatchPrimitive to use rendering optimized for screen space text.'
##    ScreenSpaceRendering = property(_get, _set, doc = _set.__doc__)
##

IAgStkGraphicsGlobeImageOverlayInitializer._methods_ = [
    COMMETHOD(['propget', helpstring('Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.')], HRESULT, 'MoreThanOneImageGlobeOverlaySupported',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsGlobeImageOverlayInitializer implementation
##class IAgStkGraphicsGlobeImageOverlayInitializer_Impl(object):
##    @property
##    def MoreThanOneImageGlobeOverlaySupported(self):
##        'Gets whether or not the video card allows for more than one image globe overlay globe image overlay to be added.'
##        #return pRetVal
##

IAgStkGraphicsScene._methods_ = [
    COMMETHOD(['propget', helpstring('Gets the camera associated with the scene, which affects the view that is rendered by the scene.')], HRESULT, 'Camera',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCamera)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the lighting associated with the scene.')], HRESULT, 'Lighting',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsLighting)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether sunshine is rendered by the Sun central body. Sunshine renders a halo effect around the sun when it is viewed in the scene.')], HRESULT, 'ShowSunshine',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether sunshine is rendered by the Sun central body. Sunshine renders a halo effect around the sun when it is viewed in the scene.')], HRESULT, 'ShowSunshine',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the central body graphics for a specified central body.')], HRESULT, 'CentralBodies',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsCentralBodyGraphicsIndexer)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the background color of the scene.')], HRESULT, 'BackgroundColor',
              ( ['out', 'retval'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the background color of the scene.')], HRESULT, 'BackgroundColor',
              ( ['in'], comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.OLE_COLOR, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether the sky will be shaded based on camera altitude. When shade sky based on altitude is set to true, the sky will become more blue as the Camera gets closer to the surface of the central body.')], HRESULT, 'ShadeSkyBasedOnAltitude',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether the sky will be shaded based on camera altitude. When shade sky based on altitude is set to true, the sky will become more blue as the Camera gets closer to the surface of the central body.')], HRESULT, 'ShadeSkyBasedOnAltitude',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether stars are shown or hidden in the scene.')], HRESULT, 'ShowStars',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether stars are shown or hidden in the scene.')], HRESULT, 'ShowStars',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets the scene globe overlay settings for the scene.')], HRESULT, 'GlobeOverlaySettings',
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsSceneGlobeOverlaySettings)), 'ppRetVal' )),
    COMMETHOD([helpstring('Renders the scene. To render all the scenes within an application, use the Render method.')], HRESULT, 'Render'),
    COMMETHOD([helpstring('Executes a pick at the given x, y and returns a depth sorted collection of picked objects. The coordinate origin is top, left. To pick screen overlays, use the PickScreenOverlays method.')], HRESULT, 'Pick',
              ( ['in'], c_int, 'X' ),
              ( ['in'], c_int, 'Y' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPickResultCollection)), 'ppRetVal' )),
    COMMETHOD([helpstring('Executes a pick in the given rectangular region and returns a depth sorted collection of picked objects. The coordinate origin is top, left. To pick screen overlays, use the PickScreenOverlays method.')], HRESULT, 'PickRectangular',
              ( ['in'], c_int, 'Left' ),
              ( ['in'], c_int, 'Bottom' ),
              ( ['in'], c_int, 'Right' ),
              ( ['in'], c_int, 'Top' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsPickResultCollection)), 'ppRetVal' )),
    COMMETHOD([helpstring('Executes a pick on screen overlays at the given x, y and returns a front to back sorted collection of picked overlays. The coordinate origin is top, left. To pick other objects in the scene, use the Pick method.')], HRESULT, 'PickScreenOverlays',
              ( ['in'], c_int, 'X' ),
              ( ['in'], c_int, 'Y' ),
              ( ['out', 'retval'], POINTER(POINTER(IAgStkGraphicsScreenOverlayPickResultCollection)), 'ppRetVal' )),
    COMMETHOD(['propget', helpstring('Returns the scene identifier.')], HRESULT, 'SceneID',
              ( ['out', 'retval'], POINTER(c_int), 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets whether water surface on earth is shown or hidden in the scene.')], HRESULT, 'ShowWaterSurface',
              ( ['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets whether water surface on earth is shown or hidden in the scene.')], HRESULT, 'ShowWaterSurface',
              ( ['in'], VARIANT_BOOL, 'pRetVal' )),
    COMMETHOD(['propget', helpstring('Gets or sets the multisample anti-aliasing (MSAA) option for this scene. As the level of anti-aliasing increases, performance will generally decrease, but the quality of the anti-aliasing will improve.')], HRESULT, 'AntiAliasing',
              ( ['out', 'retval'], POINTER(AgEStkGraphicsAntiAliasing), 'pRetVal' )),
    COMMETHOD(['propput', helpstring('Gets or sets the multisample anti-aliasing (MSAA) option for this scene. As the level of anti-aliasing increases, performance will generally decrease, but the quality of the anti-aliasing will improve.')], HRESULT, 'AntiAliasing',
              ( ['in'], AgEStkGraphicsAntiAliasing, 'pRetVal' )),
]
################################################################
## code template for IAgStkGraphicsScene implementation
##class IAgStkGraphicsScene_Impl(object):
##    @property
##    def Camera(self):
##        'Gets the camera associated with the scene, which affects the view that is rendered by the scene.'
##        #return ppRetVal
##
##    @property
##    def Lighting(self):
##        'Gets the lighting associated with the scene.'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets whether sunshine is rendered by the Sun central body. Sunshine renders a halo effect around the sun when it is viewed in the scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether sunshine is rendered by the Sun central body. Sunshine renders a halo effect around the sun when it is viewed in the scene.'
##    ShowSunshine = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def CentralBodies(self):
##        'Gets the central body graphics for a specified central body.'
##        #return ppRetVal
##
##    def _get(self):
##        'Gets or sets the background color of the scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the background color of the scene.'
##    BackgroundColor = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether the sky will be shaded based on camera altitude. When shade sky based on altitude is set to true, the sky will become more blue as the Camera gets closer to the surface of the central body.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether the sky will be shaded based on camera altitude. When shade sky based on altitude is set to true, the sky will become more blue as the Camera gets closer to the surface of the central body.'
##    ShadeSkyBasedOnAltitude = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets whether stars are shown or hidden in the scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether stars are shown or hidden in the scene.'
##    ShowStars = property(_get, _set, doc = _set.__doc__)
##
##    @property
##    def GlobeOverlaySettings(self):
##        'Gets the scene globe overlay settings for the scene.'
##        #return ppRetVal
##
##    def Render(self):
##        'Renders the scene. To render all the scenes within an application, use the Render method.'
##        #return 
##
##    def Pick(self, X, Y):
##        'Executes a pick at the given x, y and returns a depth sorted collection of picked objects. The coordinate origin is top, left. To pick screen overlays, use the PickScreenOverlays method.'
##        #return ppRetVal
##
##    def PickRectangular(self, Left, Bottom, Right, Top):
##        'Executes a pick in the given rectangular region and returns a depth sorted collection of picked objects. The coordinate origin is top, left. To pick screen overlays, use the PickScreenOverlays method.'
##        #return ppRetVal
##
##    def PickScreenOverlays(self, X, Y):
##        'Executes a pick on screen overlays at the given x, y and returns a front to back sorted collection of picked overlays. The coordinate origin is top, left. To pick other objects in the scene, use the Pick method.'
##        #return ppRetVal
##
##    @property
##    def SceneID(self):
##        'Returns the scene identifier.'
##        #return pRetVal
##
##    def _get(self):
##        'Gets or sets whether water surface on earth is shown or hidden in the scene.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets whether water surface on earth is shown or hidden in the scene.'
##    ShowWaterSurface = property(_get, _set, doc = _set.__doc__)
##
##    def _get(self):
##        'Gets or sets the multisample anti-aliasing (MSAA) option for this scene. As the level of anti-aliasing increases, performance will generally decrease, but the quality of the anti-aliasing will improve.'
##        #return pRetVal
##    def _set(self, pRetVal):
##        'Gets or sets the multisample anti-aliasing (MSAA) option for this scene. As the level of anti-aliasing increases, performance will generally decrease, but the quality of the anti-aliasing will improve.'
##    AntiAliasing = property(_get, _set, doc = _set.__doc__)
##

__all__ = [ 'IAgStkGraphicsVectorPrimitive',
           'IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory',
           '_IAgStkGraphicsProjectedRasterOverlayFactory',
           'AgStkGraphicsScreenOverlayManager',
           'eStkGraphicsInternalTextureFormatRgb32F',
           'eStkGraphicsRasterFormatRgba',
           'eStkGraphicsMinificationFilterLinear',
           'AgStkGraphicsScreenOverlayPickResult',
           'eStkGraphicsScreenOverlayPinningOriginTopRight',
           'IAgStkGraphicsConvolutionFilter',
           '_IAgStkGraphicsPolylinePrimitiveFactory',
           'eStkGraphicsSetHintFrequent',
           '_IAgStkGraphicsCentralBodyGraphics',
           'AgEStkGraphicsAntiAliasing',
           'eStkGraphicsRasterFormatLuminance',
           'AgStkGraphicsPathPoint',
           'AgStkGraphicsTextBatchPrimitive',
           'AgStkGraphicsRasterAttributesFactory',
           'AgStkGraphicsRaster', 'eStkGraphicsCylinderFillWall',
           'eStkGraphicsScreenOverlayUnitFraction',
           'AgEStkGraphicsMapProjection',
           'eStkGraphicsECullFaceFront',
           '_IAgStkGraphicsGeospatialImageGlobeOverlayFactory',
           'eStkGraphicsPolylineTypeLines',
           'IAgStkGraphicsAGIRoamImageGlobeOverlay',
           '_IAgStkGraphicsSurfaceMeshPrimitiveFactory',
           'IAgStkGraphicsKmlNetworkLink', 'AgEStkGraphicsRasterBand',
           'IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs',
           'eStkGraphicsInternalTextureFormatRgba2',
           'AgStkGraphicsObjectCollection',
           'AgStkGraphicsTextureFilter2D',
           '_IAgStkGraphicsRasterFactory',
           '_IAgStkGraphicsBandOrderFilter',
           'IAgStkGraphicsTerrainOverlayAddCompleteEventArgs',
           'IAgStkGraphicsJpeg2000WriterInitializer',
           'eStkGraphicsKmlNetworkLinkRefreshModeOnInterval',
           'AgStkGraphicsGraphicsFont',
           'eStkGraphicsKmlNetworkLinkRefreshModeOnExpire',
           'eStkGraphicsInternalTextureFormatLuminance32F',
           'IAgStkGraphicsKmlFolder', 'IAgStkGraphicsGlobeOverlay',
           'AgStkGraphicsPointBatchPrimitive',
           'IAgStkGraphicsRenderingEventArgs',
           'IAgStkGraphicsProjectionRasterStreamPluginProxy',
           'IAgStkGraphicsBoxTriangulatorInitializer',
           'IAgStkGraphicsContrastFilterFactory',
           '_IAgStkGraphicsProjectionFactory',
           '_IAgStkGraphicsLevelsFilter',
           'AgEStkGraphicsGlobeOverlayRole',
           'AgStkGraphicsCentralBodyGraphicsIndexer',
           'AgEStkGraphicsRefreshRate',
           'AgStkGraphicsDistanceToGlobeOverlayDisplayCondition',
           '_IAgStkGraphicsRhumbLineInterpolatorFactory',
           'IAgStkGraphicsImageCollection',
           'IAgStkGraphicsProjection', 'eStkGraphicsAntiAliasingTwoX',
           '_IAgStkGraphicsAGIProcessedTerrainOverlay',
           'AgStkGraphicsKmlNetworkLink',
           'IAgStkGraphicsDisplayCondition',
           'IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory',
           '_IAgStkGraphicsBoundingSphereFactory',
           'AgStkGraphicsSequenceFilterFactory',
           'eStkGraphicsGradientDetectMethodNorthWest',
           '_IAgStkGraphicsTriangulatorResult',
           '_IAgStkGraphicsSceneManagerInitializer',
           'IAgStkGraphicsSequenceFilterFactory',
           'AgStkGraphicsRasterStream',
           'AgEStkGraphicsScreenOverlayPinningOrigin',
           'eStkGraphicsRemoveLocationBack',
           '_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory',
           'IAgStkGraphicsGraphicsFontFactory',
           '_IAgStkGraphicsAlphaFromLuminanceFilter',
           'IAgStkGraphicsFactoryAndInitializers',
           'AgStkGraphicsAGIProcessedImageGlobeOverlay',
           'AgStkGraphicsBoundingSphereFactory',
           'IAgStkGraphicsGraphicsFont',
           'eStkGraphicsMapProjectionEquidistantCylindrical',
           '_IAgStkGraphicsGeospatialImageGlobeOverlay',
           '_IAgStkGraphicsPathPoint',
           '_IAgStkGraphicsSurfaceShapesInitializer',
           'AgStkGraphicsSurfaceExtentTriangulatorInitializer',
           'eStkGraphicsStereoscopicDisplayModeSideBySide',
           'IAgStkGraphicsStereoscopic',
           'eStkGraphicsMinificationFilterNearest',
           'IAgStkGraphicsScreenOverlayFactory',
           'AgStkGraphicsBlurFilter',
           '_IAgStkGraphicsPointBatchPrimitive',
           'AgEStkGraphicsConstrainedUpAxis',
           'eStkGraphicsInternalTextureFormatRgb5A1',
           'AgStkGraphicsContrastFilterFactory',
           'IAgStkGraphicsGeospatialImageGlobeOverlay',
           'AgStkGraphicsAGICustomTerrainOverlay',
           'IAgStkGraphicsScene',
           'IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory',
           'IAgStkGraphicsRasterFactory',
           'eStkGraphicsGlobeOverlayRoleNone',
           'IAgStkGraphicsRotateFilterFactory',
           '_IAgStkGraphicsGreatArcInterpolator',
           '_IAgStkGraphicsCompositePrimitive',
           '_IAgStkGraphicsPathPrimitiveFactory',
           'IAgStkGraphicsTextBatchPrimitiveOptionalParameters',
           '_IAgStkGraphicsVideoStreamFactory',
           'IAgStkGraphicsVideoStreamFactory',
           'eStkGraphicsModelUpAxisZ',
           'IAgStkGraphicsGradientDetectFilter',
           'AgStkGraphicsDistanceToPositionDisplayConditionFactory',
           '_IAgStkGraphicsRenderingEventArgs',
           'eStkGraphicsAntiAliasingFourX',
           'eStkGraphicsRasterFormatBlue',
           'eStkGraphicsGradientDetectMethodSouthWest',
           'IAgStkGraphicsRhumbLineInterpolatorFactory',
           'eStkGraphicsVisibilityAll',
           'eStkGraphicsInternalTextureFormatAlpha8',
           'eStkGraphicsModelUpAxisNegativeY',
           'eStkGraphicsVideoPlaybackTimeInterval',
           'AgStkGraphicsSolidTriangulatorResult',
           'AgStkGraphicsLevelsFilter',
           'eStkGraphicsRendererShadeModelFlat',
           'eStkGraphicsInternalTextureFormatLuminance12',
           'AgStkGraphicsTextOverlay',
           '_IAgStkGraphicsConstantDisplayCondition',
           'AgStkGraphicsLevelsFilterFactory',
           'eStkGraphicsInternalTextureFormatRgba12',
           'eStkGraphicsMaintainAspectRatioHeight',
           'AgStkGraphicsTerrainOverlayAddCompleteEventArgs',
           '_IAgStkGraphicsSurfaceTriangulatorResult',
           'AgStkGraphicsDurationPathPrimitiveUpdatePolicy',
           'IAgStkGraphicsPrimitive',
           'eStkGraphicsModelTransformationTypeTextureRotateZ',
           'eStkGraphicsBlurMethodBasic', 'eStkGraphicsECullFaceBack',
           'eStkGraphicsRendererShadeModelGouraud',
           'AgStkGraphicsGreatArcInterpolator',
           'AgStkGraphicsAlphaFromRasterFilterFactory',
           'AgEStkGraphicsIndicesOrderHint',
           '_IAgStkGraphicsFilteringRasterStreamFactory',
           '_IAgStkGraphicsProjectionRasterStreamPluginActivator',
           'AgStkGraphicsFilteringRasterStream',
           'AgStkGraphicsPolylinePrimitiveFactory',
           'eStkGraphicsMarkerBatchSortOrderFrontToBack',
           'eStkGraphicsEdgeDetectMethodLaplacian',
           '_IAgStkGraphicsAGIProcessedTerrainOverlayFactory',
           'IAgStkGraphicsSceneManager',
           'eStkGraphicsKmlNetworkLinkViewRefreshModeOnStop',
           '_IAgStkGraphicsTextureScreenOverlayFactory',
           'eStkGraphicsTextureWrapClamp', 'AgStkGraphicsProjection',
           'AgStkGraphicsPickResult', 'AgEStkGraphicsPolylineType',
           'IAgStkGraphicsSceneEvents',
           'AgStkGraphicsExtrudedPolylineTriangulatorInitializer',
           'AgEStkGraphicsSharpenMethod',
           'IAgStkGraphicsAlphaFromLuminanceFilter',
           'AgEStkGraphicsCylinderFill',
           'eStkGraphicsRasterFormatLuminanceAlpha',
           'IAgStkGraphicsSceneManagerEvents',
           '_IAgStkGraphicsKmlNetworkLink',
           '_IAgStkGraphicsSceneDisplayCondition',
           'eStkGraphicsOriginTopRight',
           'AgStkGraphicsProjectionRasterStreamPluginActivatorFactory',
           'AgStkGraphicsAlphaFromPixelFilterFactory',
           'AgStkGraphicsOverlay',
           'IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory',
           'IAgStkGraphicsSurfaceShapesInitializer',
           'IAgStkGraphicsPositionInterpolator',
           'IAgStkGraphicsCustomImageGlobeOverlay',
           'IAgStkGraphicsLevelsFilterFactory',
           'AgStkGraphicsGradientDetectFilter',
           'IAgStkGraphicsSurfacePolygonTriangulatorInitializer',
           '_IAgStkGraphicsTextBatchPrimitiveOptionalParameters',
           'AgStkGraphicsCompositePrimitiveFactory',
           'AgStkGraphicsScreenOverlay',
           'IAgStkGraphicsSharpenFilterFactory',
           '_IAgStkGraphicsModelArticulationCollection',
           'eStkGraphicsRenderPassHintTranslucent',
           'eStkGraphicsPrimitivesSortOrderPrimitivesSortOrderBackToFront',
           '_IAgStkGraphicsPathPointCollection',
           'eStkGraphicsCameraSnapshotFileFormatRas',
           'AgStkGraphicsKmlFolder', 'AgStkGraphicsBoundingSphere',
           '_IAgStkGraphicsCompositeDisplayConditionFactory',
           '_IAgStkGraphicsDistanceToPositionDisplayConditionFactory',
           'IAgStkGraphicsTextureScreenOverlayFactory',
           'IAgStkGraphicsAGIProcessedTerrainOverlayFactory',
           'AgEStkGraphicsOutlineAppearance',
           'IAgStkGraphicsGradientDetectFilterFactory',
           '_IAgStkGraphicsRotateFilter',
           'IAgStkGraphicsTimeIntervalDisplayCondition',
           'IAgStkGraphicsSceneDisplayConditionFactory',
           'AgStkGraphicsFlipFilterFactory',
           'IAgStkGraphicsVideoStream',
           'eStkGraphicsAntiAliasingSixteenX',
           'IAgStkGraphicsCompositeDisplayConditionFactory',
           '_IAgStkGraphicsSurfacePolygonTriangulatorInitializer',
           'AgStkGraphicsKmlFeature',
           'AgStkGraphicsGlobeImageOverlayInitializer',
           'eStkGraphicsRasterFormatRgb',
           'IAgStkGraphicsPathPrimitive',
           'IAgStkGraphicsTerrainOverlay',
           '_IAgStkGraphicsTexture2DFactory',
           'AgStkGraphicsFlipFilter',
           'eStkGraphicsConstrainedUpAxisNone',
           'AgEStkGraphicsInternalTextureFormat',
           'eStkGraphicsCameraSnapshotFileFormatBmp',
           'eStkGraphicsGradientDetectMethodEast',
           'eStkGraphicsInternalTextureFormatAlpha12',
           'eStkGraphicsConstrainedUpAxisY',
           '_IAgStkGraphicsGlobeImageOverlayInitializer',
           'eStkGraphicsInternalTextureFormatRgb10',
           'AgStkGraphicsSharpenFilter',
           'eStkGraphicsFlipAxisVertical',
           'eStkGraphicsRasterTypeInt', 'IAgStkGraphicsScreenOverlay',
           'IAgStkGraphicsProjectedRasterOverlay',
           'AgStkGraphicsCompositePrimitive',
           'IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory',
           '_IAgStkGraphicsPointBatchPrimitiveFactory',
           'eStkGraphicsInternalTextureFormatLuminance12Alpha4',
           'AgStkGraphicsRendererTexture2D',
           '_IAgStkGraphicsScreenOverlayFactory',
           'AgStkGraphicsRasterImageGlobeOverlayFactory',
           'IAgStkGraphicsProjectionFactory',
           'AgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory',
           'AgStkGraphicsKmlDocumentLoadedEventArgs',
           'IAgStkGraphicsSharpenFilter',
           'IAgStkGraphicsFilteringRasterStreamFactory',
           '_IAgStkGraphicsTerrainOverlayAddCompleteEventArgs',
           'AgStkGraphicsRotateFilterFactory',
           'AgStkGraphicsScreenOverlayPickResultCollection',
           '_IAgStkGraphicsProjectionRasterStreamPluginProxy',
           '_IAgStkGraphicsTextureMatrixFactory',
           'IAgStkGraphicsCamera', 'AgStkGraphicsDisplayCondition',
           'IAgStkGraphicsCentralBodyGraphics',
           'AgStkGraphicsDistanceToPrimitiveDisplayConditionFactory',
           'eStkGraphicsCameraSnapshotFileFormatTiff',
           '_IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters',
           '_IAgStkGraphicsGlobeImageOverlayAddCompleteEventArgs',
           'IAgStkGraphicsTextOverlayFactory',
           'IAgStkGraphicsBandExtractFilter',
           'IAgStkGraphicsBrightnessFilterFactory',
           'eStkGraphicsModelTransformationTypeTranslateGreen',
           'IAgStkGraphicsLevelsFilter',
           'IAgStkGraphicsKmlDocumentLoadedEventArgs',
           '_IAgStkGraphicsScene', '_IAgStkGraphicsProjectionStream',
           'IAgStkGraphicsBatchPrimitiveIndex',
           '_IAgStkGraphicsAltitudeDisplayConditionFactory',
           'AgStkGraphicsRasterAttributes',
           '_IAgStkGraphicsBandOrderFilterFactory',
           'AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory',
           'AgStkGraphicsTriangulatorResult',
           'IAgStkGraphicsCompositeDisplayCondition',
           'AgStkGraphicsBoxTriangulatorInitializer',
           'AgStkGraphicsBandOrderFilter',
           'eStkGraphicsScreenOverlayOriginCenterRight',
           'AgStkGraphicsSolidPrimitiveFactory',
           'eStkGraphicsStereoProjectionAutomatic',
           'AgEStkGraphicsSurfaceMeshRenderingMethod',
           '_IAgStkGraphicsConvolutionFilter',
           'eStkGraphicsStereoProjectionFixedDistance',
           'eStkGraphicsFrontAndBackLines',
           'AgStkGraphicsRasterImageGlobeOverlay',
           'IAgStkGraphicsCustomImageGlobeOverlayPluginProxy',
           'IAgStkGraphicsExtrudedPolylineTriangulatorResult',
           'eStkGraphicsInternalTextureFormatRgb8',
           'IAgStkGraphicsDurationPathPrimitiveUpdatePolicy',
           '_IAgStkGraphicsPositionInterpolator',
           'AgStkGraphicsModelArticulationCollection',
           'eStkGraphicsScreenOverlayPinningOriginBottomCenter',
           'IAgStkGraphicsTerrainOverlayInitializer',
           'IAgStkGraphicsCompositePrimitiveFactory',
           'eStkGraphicsRasterOrientationBottomToTop',
           'eStkGraphicsWindingOrderCounterClockwise',
           '_IAgStkGraphicsFactoryAndInitializers',
           '_IAgStkGraphicsCompositePrimitiveFactory',
           'IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory',
           'AgStkGraphicsPathPrimitiveFactory',
           'AgStkGraphicsVideoStreamFactory',
           'AgStkGraphicsGeospatialImageGlobeOverlayFactory',
           'IAgStkGraphicsPickResult',
           'IAgStkGraphicsGammaCorrectionFilterFactory',
           'AgStkGraphicsSurfacePolygonTriangulatorInitializer',
           '_IAgStkGraphicsBatchPrimitiveIndex',
           'AgStkGraphicsLighting',
           'AgStkGraphicsConvolutionFilterFactory',
           '_IAgStkGraphicsKmlFeature',
           'AgEStkGraphicsGradientDetectMethod',
           'IAgStkGraphicsSceneManagerInitializer',
           'AgStkGraphicsConstantDisplayConditionFactory',
           '_IAgStkGraphicsKmlDocumentCollection',
           'eStkGraphicsEdgeDetectMethodSobelVertical',
           'eStkGraphicsMinificationFilterLinearMipMapNearest',
           'IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory',
           'eStkGraphicsSharpenMethodMeanRemoval',
           'AgStkGraphicsSurfaceTriangulatorResult',
           '_IAgStkGraphicsSolidPrimitiveFactory',
           'eStkGraphicsJpeg2000CompressionProfileNITF_BIIF_EPJE',
           'eStkGraphicsRasterBandLuminance',
           'eStkGraphicsInternalTextureFormatAlpha4',
           '_IAgStkGraphicsSharpenFilterFactory',
           'eStkGraphicsOriginCenterLeft',
           'eStkGraphicsModelTransformationTypeTextureScaleX',
           '_IAgStkGraphicsProjectedRasterOverlay',
           'IAgStkGraphicsKmlGraphicsEvents',
           'AgStkGraphicsKmlDocumentCollection',
           'IAgStkGraphicsPathPrimitiveFactory',
           '_IAgStkGraphicsTerrainOverlayInitializer',
           'eStkGraphicsModelTransformationTypeTextureScaleZ',
           'IAgStkGraphicsCameraVideoRecording',
           'AgStkGraphicsTextureMatrix',
           'eStkGraphicsPrimitivesSortOrderBackToFront',
           'IAgStkGraphicsDistanceDisplayCondition',
           'eStkGraphicsMapProjectionMercator',
           'IAgStkGraphicsDistanceDisplayConditionFactory',
           'IAgStkGraphicsExtrudedPolylineTriangulatorInitializer',
           'AgStkGraphicsAGIProcessedTerrainOverlayFactory',
           'eStkGraphicsModelTransformationTypeScaleUniform',
           '_IAgStkGraphicsKmlDocumentLoadedEventArgs',
           'IAgStkGraphicsPickResultCollection',
           '_IAgStkGraphicsPrimitiveManager',
           'IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicyFactory',
           'AgStkGraphicsGaussianBlurFilter',
           '_IAgStkGraphicsDistanceDisplayCondition',
           'eStkGraphicsInternalTextureFormatLuminance16',
           'IAgStkGraphicsRasterStream',
           'eStkGraphicsVisibilityPartial',
           'AgStkGraphicsTerrainOverlay',
           'IAgStkGraphicsPathPrimitiveUpdatePolicy',
           'eStkGraphicsScreenOverlayPinningOriginTopLeft',
           'IAgStkGraphicsRasterImageGlobeOverlay',
           '_IAgStkGraphicsPolylinePrimitive',
           'AgEStkGraphicsRasterOrientation',
           'IAgStkGraphicsTextBatchPrimitive',
           'IAgStkGraphicsConstantDisplayCondition',
           '_IAgStkGraphicsContrastFilterFactory',
           'AgEStkGraphicsScreenOverlayUnit',
           'eStkGraphicsModelUpAxisNegativeZ',
           'AgStkGraphicsSolidPrimitive',
           'AgStkGraphicsTerrainCollection',
           'IAgStkGraphicsTriangulatorResult',
           '_IAgStkGraphicsColorToLuminanceFilter',
           'IAgStkGraphicsSurfaceExtentTriangulatorInitializer',
           'IAgStkGraphicsCylinderTriangulatorInitializer',
           'IAgStkGraphicsAGIRoamImageGlobeOverlayFactory',
           'AgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy',
           'AgStkGraphicsTextureScreenOverlayFactory',
           '_IAgStkGraphicsEllipsoidTriangulatorInitializer',
           'eStkGraphicsRenderPassOrderedComposite',
           'eStkGraphicsFontStyleRegular',
           'eStkGraphicsScreenOverlayOriginTopCenter',
           '_IAgStkGraphicsCustomImageGlobeOverlayPluginActivator',
           'AgStkGraphicsRenderingEventArgs',
           'IAgStkGraphicsModelTransformation',
           '_IAgStkGraphicsProjection',
           'eStkGraphicsIndicesOrderHintNotSorted',
           '_IAgStkGraphicsRasterAttributes',
           'IAgStkGraphicsEdgeDetectFilter',
           'AgStkGraphicsSceneCollection',
           'AgStkGraphicsTexture2DFactory',
           '_IAgStkGraphicsCentralBodyGraphicsIndexer',
           'eStkGraphicsModelTransformationTypeScaleX',
           '_IAgStkGraphicsTextureFilter2D',
           '_IAgStkGraphicsStereoscopic',
           'IAgStkGraphicsModelPrimitive',
           'eStkGraphicsSurfaceMeshRenderingMethodAutomatic',
           '_IAgStkGraphicsSequenceFilter',
           'AgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory',
           'AgEStkGraphicsOrigin',
           'eStkGraphicsConstrainedUpAxisNegativeX',
           'AgEStkGraphicsJpeg2000CompressionProfile',
           'eStkGraphicsAntiAliasingEightX',
           '_IAgStkGraphicsConvolutionFilterFactory',
           'eStkGraphicsStereoscopicDisplayModeLeftEye',
           '_IAgStkGraphicsCameraSnapshot',
           'IAgStkGraphicsSceneDisplayCondition',
           'IAgStkGraphicsScreenOverlayCollectionBase',
           'eStkGraphicsInternalTextureFormatLuminance16Alpha16',
           '_IAgStkGraphicsPickResult',
           '_IAgStkGraphicsConstantDisplayConditionFactory',
           'eStkGraphicsInternalTextureFormatRgba8',
           'eStkGraphicsSurfaceMeshRenderingMethodGeometryShader',
           '_IAgStkGraphicsDistanceDisplayConditionFactory',
           '_IAgStkGraphicsSceneManager', 'AgEStkGraphicsBlurMethod',
           'AgStkGraphicsAxesPrimitiveFactory',
           '_IAgStkGraphicsAGIProcessedImageGlobeOverlayFactory',
           '_IAgStkGraphicsVectorPrimitiveFactory',
           'eStkGraphicsInternalTextureFormatR3G3B2',
           'IAgStkGraphicsBandExtractFilterFactory',
           'IAgStkGraphicsRotateFilter',
           'eStkGraphicsModelTransformationTypeTranslateX',
           'eStkGraphicsModelUpAxisX',
           'eStkGraphicsMarkerBatchUnitMeters',
           '_IAgStkGraphicsSurfaceShapesResult',
           '_IAgStkGraphicsTriangleMeshPrimitive',
           'eStkGraphicsKmlNetworkLinkViewRefreshModeNever',
           'IAgStkGraphicsScreenOverlayContainer',
           'eStkGraphicsBinaryLogicOperationOr',
           'IAgStkGraphicsKmlDocumentCollection',
           '_IAgStkGraphicsAGIRoamImageGlobeOverlayFactory',
           'eStkGraphicsGradientDetectMethodSouth',
           'eStkGraphicsInternalTextureFormatRgb16',
           'IAgStkGraphicsDistanceToPositionDisplayCondition',
           'IAgStkGraphicsTextureFilter2D',
           'eStkGraphicsOriginBottomRight',
           'eStkGraphicsInternalTextureFormatLuminance16Alpha16F',
           'eStkGraphicsAntiAliasingSixtyFourX',
           'eStkGraphicsModelTransformationTypeTextureTranslateX',
           'IAgStkGraphicsFlipFilter',
           'AgStkGraphicsAltitudeDisplayCondition',
           'IAgStkGraphicsConstantDisplayConditionFactory',
           'IAgStkGraphicsTriangleMeshPrimitiveOptionalParameters',
           'IAgStkGraphicsProjectionRasterStreamPluginActivator',
           'AgStkGraphicsTextureFilter2DFactory',
           'IAgStkGraphicsDistanceToPrimitiveDisplayCondition',
           'eStkGraphicsRasterFormatBgr',
           'AgStkGraphicsDistanceToPrimitiveDisplayCondition',
           '_IAgStkGraphicsRotateFilterFactory',
           'IAgStkGraphicsTerrainCollection',
           'AgStkGraphicsSequenceFilter',
           'IAgStkGraphicsSceneGlobeOverlaySettings',
           'AgStkGraphicsFactoryAndInitializers',
           '_IAgStkGraphicsBlurFilterFactory',
           'AgStkGraphicsKmlContainer',
           '_IAgStkGraphicsObjectCollection',
           'eStkGraphicsModelTransformationTypeTranslateRed',
           'AgStkGraphicsEdgeDetectFilterFactory',
           'AgEStkGraphicsMarkerBatchRenderingMethod',
           'eStkGraphicsRasterBandAlpha',
           'IAgStkGraphicsRasterAttributesFactory',
           'IAgStkGraphicsPathPointCollection',
           'AgStkGraphicsRotateFilter',
           'AgStkGraphicsTimeIntervalDisplayCondition',
           'eStkGraphicsModelUpAxisY',
           'eStkGraphicsStereoscopicDisplayModeAnaglyph',
           '_IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters',
           'eStkGraphicsRemoveLocationFront',
           'eStkGraphicsKmlNetworkLinkViewRefreshModeOnRequest',
           'IAgStkGraphicsEdgeDetectFilterFactory',
           '_IAgStkGraphicsRasterAttributesFactory',
           'eStkGraphicsTextureWrapClampToEdge',
           'AgStkGraphicsImageCollection',
           'AgStkGraphicsTerrainOverlayInitializer',
           'AgStkGraphicsSceneManagerInitializer',
           '_IAgStkGraphicsImageCollection',
           'eStkGraphicsGradientDetectMethodNorthEast',
           'AgStkGraphicsModelArticulation',
           'AgStkGraphicsSurfaceShapesInitializer',
           'IAgStkGraphicsAltitudeDisplayConditionFactory',
           'eStkGraphicsConstrainedUpAxisNegativeY',
           '_IAgStkGraphicsAlphaFromLuminanceFilterFactory',
           'eStkGraphicsEdgeDetectMethodHorizontal',
           'eStkGraphicsInternalTextureFormatLuminance6Alpha2',
           'eStkGraphicsModelTransformationTypeRotateX',
           'IAgStkGraphicsMarkerBatchPrimitiveOptionalParameters',
           'eStkGraphicsModelTransformationTypeTextureScaleUniform',
           'eStkGraphicsInternalTextureFormatLuminance12Alpha12',
           '_IAgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory',
           '_IAgStkGraphicsKmlGraphics',
           'eStkGraphicsInternalTextureFormatLuminance8Alpha8',
           'AgStkGraphicsBlurFilterFactory',
           'IAgStkGraphicsBrightnessFilter',
           '_IAgStkGraphicsExtrudedPolylineTriangulatorInitializer',
           'eStkGraphicsMarkerBatchUnitPixels',
           'eStkGraphicsOriginBottomCenter',
           'AgStkGraphicsRasterFilter',
           'IAgStkGraphicsContrastFilter',
           '_IAgStkGraphicsPathPrimitive',
           'eStkGraphicsModelTransformationTypeTextureRotateY',
           '_IAgStkGraphicsGaussianBlurFilter',
           'IAgStkGraphicsTimeIntervalDisplayConditionFactory',
           'IAgStkGraphicsRhumbLineInterpolator',
           '_IAgStkGraphicsDisplayCondition',
           '_IAgStkGraphicsLighting', 'eStkGraphicsRasterTypeDouble',
           '_IAgStkGraphicsSolidTriangulatorResult',
           'AgStkGraphicsProjectionStream',
           'eStkGraphicsEdgeDetectMethodPrewittLaplacian',
           'eStkGraphicsMarkerBatchRenderPassBasedOnTranslucency',
           'eStkGraphicsInternalTextureFormatRgb5',
           'eStkGraphicsRasterBandRed',
           'IAgStkGraphicsTextureFilter2DFactory',
           'AgStkGraphicsCylinderTriangulatorInitializer',
           'IAgStkGraphicsVectorPrimitiveFactory',
           'AgEStkGraphicsMarkerBatchUnit',
           '_IAgStkGraphicsFlipFilterFactory',
           'eStkGraphicsMarkerBatchRenderingMethodFixedFunction',
           'eStkGraphicsModelTransformationTypeTextureTranslateY',
           '_IAgStkGraphicsTextureScreenOverlay',
           'eStkGraphicsInternalTextureFormatRgba16',
           'eStkGraphicsConstrainedUpAxisX',
           'AgStkGraphicsAGICustomTerrainOverlayFactory',
           'IAgStkGraphicsRendererTexture2D',
           'AgStkGraphicsVideoStream',
           'eStkGraphicsInternalTextureFormatRgba16F',
           'eStkGraphicsScreenOverlayUnitPixels',
           'eStkGraphicsCylinderFillTopCap',
           'IAgStkGraphicsAGICustomTerrainOverlayFactory',
           'AgStkGraphicsProjectedRasterOverlay',
           '_IAgStkGraphicsCylinderTriangulatorInitializer',
           'eStkGraphicsModelTransformationTypeRotateY',
           '_IAgStkGraphicsMarkerBatchPrimitive',
           '_IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory',
           'eStkGraphicsJpeg2000CompressionProfileNITF_BIIF_NPJE',
           '_IAgStkGraphicsEdgeDetectFilterFactory',
           'IAgStkGraphicsBlurFilter', '_IAgStkGraphicsKmlFolder',
           'AgStkGraphicsTriangleMeshPrimitiveOptionalParameters',
           'AgStkGraphicsAlphaFromPixelFilter',
           'AgStkGraphicsSceneGlobeOverlaySettings',
           'AgStkGraphicsAxesPrimitive',
           '_IAgStkGraphicsScreenOverlayCollection',
           'IAgStkGraphicsModelPrimitiveFactory',
           'eStkGraphicsRefreshRateFastest',
           'AgStkGraphicsCustomImageGlobeOverlay',
           'IAgStkGraphicsOverlay',
           'eStkGraphicsRenderPassOrderedCompositeCentralBodyClipped',
           'IAgStkGraphicsTriangleMeshPrimitive',
           'AgEStkGraphicsScreenOverlayOrigin',
           'eStkGraphicsModelTransformationTypeScaleY',
           'AgStkGraphicsBandExtractFilterFactory',
           'IAgStkGraphicsPathPointFactory',
           'AgStkGraphicsTextOverlayFactory',
           'AgStkGraphicsProjectedRasterOverlayFactory',
           '_IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory',
           'IAgStkGraphicsMarkerBatchPrimitive',
           '_IAgStkGraphicsRasterFilter',
           'AgStkGraphicsTimeIntervalDisplayConditionFactory',
           '_IAgStkGraphicsRasterImageGlobeOverlay',
           '_IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition',
           'IAgStkGraphicsGammaCorrectionFilter',
           'eStkGraphicsInternalTextureFormatRgb10A2',
           'IAgStkGraphicsCompositePrimitive',
           '_IAgStkGraphicsModelTransformation',
           'IAgStkGraphicsSurfaceMeshPrimitive',
           '_IAgStkGraphicsAGIProcessedImageGlobeOverlay',
           'IAgStkGraphicsFilteringRasterStream',
           'IAgStkGraphicsConvolutionFilterFactory',
           'eStkGraphicsTextureWrapClampToBorder',
           'IAgStkGraphicsAGIProcessedTerrainOverlay',
           'AgStkGraphicsDistanceDisplayCondition',
           '_IAgStkGraphicsAlphaFromPixelFilter',
           '_IAgStkGraphicsTextOverlayFactory',
           'eStkGraphicsGradientDetectMethodNorth',
           'AgStkGraphicsGlobeImageOverlayAddCompleteEventArgs',
           '_IAgStkGraphicsGlobeOverlaySettings',
           'IAgStkGraphicsRasterImageGlobeOverlayFactory',
           'AgStkGraphicsAltitudeDisplayConditionFactory',
           'IAgStkGraphicsTexture2DFactory',
           'eStkGraphicsSurfaceMeshRenderingMethodVertexShader',
           'IAgStkGraphicsPolylinePrimitive',
           '_IAgStkGraphicsDistanceToPrimitiveDisplayConditionFactory',
           'eStkGraphicsInternalTextureFormatLuminance8',
           'eStkGraphicsRasterTypeFloat', 'AgStkGraphicsKmlGraphics',
           '_IAgStkGraphicsGraphicsFont',
           'eStkGraphicsScreenOverlayPinningOriginCenter',
           'eStkGraphicsMarkerBatchRenderingMethodAutomatic',
           'AgStkGraphicsTriangleMeshPrimitive',
           'IAgStkGraphicsBoundingSphereFactory',
           'IAgStkGraphicsGlobeImageOverlay',
           'IAgStkGraphicsCustomImageGlobeOverlayPluginActivator',
           'AgStkGraphicsScreenOverlayCollection',
           '_IAgStkGraphicsVectorPrimitive',
           'AgStkGraphicsBrightnessFilterFactory',
           'IAgStkGraphicsSequenceFilter',
           'AgStkGraphicsColorToLuminanceFilterFactory',
           '_IAgStkGraphicsBrightnessFilterFactory',
           'eStkGraphicsInternalTextureFormatRgb16F',
           'eStkGraphicsFontStyleUnderline',
           'eStkGraphicsMagnificationFilterLinear',
           'eStkGraphicsEdgeDetectMethodVertical',
           'eStkGraphicsStereoscopicDisplayModeOff',
           'IAgStkGraphicsGeospatialImageGlobeOverlayFactory',
           'IAgStkGraphicsModelArticulation',
           '_IAgStkGraphicsGammaCorrectionFilterFactory',
           '_IAgStkGraphicsScreenOverlayPickResult',
           'AgStkGraphicsRhumbLineInterpolatorFactory',
           'eStkGraphicsInternalTextureFormatLuminance16F',
           'eStkGraphicsInternalTextureFormatRgb4',
           'eStkGraphicsOriginBottomLeft',
           'AgStkGraphicsAGIRoamImageGlobeOverlayFactory',
           'AgStkGraphicsTextBatchPrimitiveOptionalParametersFactory',
           '_IAgStkGraphicsScreenOverlayManager',
           'eStkGraphicsModelUpAxisNegativeX',
           'IAgStkGraphicsImageCollectionEvents',
           'eStkGraphicsInternalTextureFormatRgba32F',
           'IAgStkGraphicsColorToLuminanceFilterFactory',
           'eStkGraphicsFrontLinesOnly',
           'IAgStkGraphicsAxesPrimitiveFactory',
           'IAgStkGraphicsAlphaFromPixelFilter',
           'eStkGraphicsECullFaceFrontAndBack',
           'eStkGraphicsEdgeDetectMethodLeftDiagonal',
           'AgStkGraphicsSceneDisplayConditionFactory',
           'IAgStkGraphicsProjectionStream', '_IAgStkGraphicsCamera',
           'eStkGraphicsRenderPassCentralBodyClipped',
           'eStkGraphicsInternalTextureFormatRgb12',
           '_IAgStkGraphicsSharpenFilter',
           'AgEStkGraphicsPathPrimitiveRemoveLocation',
           '_IAgStkGraphicsCameraVideoRecording',
           'AgEStkGraphicsRenderPassHint',
           'AgEStkGraphicsMaintainAspectRatio',
           'eStkGraphicsOriginTopLeft', 'AgEStkGraphicsVideoPlayback',
           'AgStkGraphicsMarkerBatchPrimitiveOptionalParameters',
           'AgEStkGraphicsRenderPass', 'AgStkGraphicsCamera',
           '_IAgStkGraphicsModelPrimitive',
           '_IAgStkGraphicsCustomImageGlobeOverlayPluginProxy',
           'eStkGraphicsEdgeDetectMethodSobelHorizontal',
           '_IAgStkGraphicsEdgeDetectFilter',
           'IAgStkGraphicsKmlGraphics',
           '_IAgStkGraphicsScreenOverlay',
           'AgStkGraphicsCameraSnapshot',
           'AgStkGraphicsAGIRoamImageGlobeOverlay',
           'AgStkGraphicsGreatArcInterpolatorFactory',
           'AgStkGraphicsVectorPrimitiveFactory',
           'AgStkGraphicsRhumbLineInterpolator',
           'IAgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory',
           'IAgStkGraphicsDistanceToGlobeOverlayDisplayCondition',
           'eStkGraphicsRasterTypeUnsignedShort',
           '_IAgStkGraphicsPathPrimitiveUpdatePolicy',
           '_IAgStkGraphicsScreenOverlayPickResultCollection',
           '_IAgStkGraphicsSceneGlobeOverlaySettings',
           'AgStkGraphicsDistanceToPositionDisplayCondition',
           'AgStkGraphicsGraphicsFontFactory',
           'AgStkGraphicsTextBatchPrimitiveOptionalParameters',
           'eStkGraphicsRenderPassOpaque',
           'IAgStkGraphicsPointBatchPrimitive',
           'eStkGraphicsMaintainAspectRatioWidth',
           'eStkGraphicsMarkerBatchSizeSourceFromTexture',
           'AgStkGraphicsModelPrimitiveFactory',
           '_IAgStkGraphicsSceneCollection',
           'IAgStkGraphicsAGICustomTerrainOverlay',
           'eStkGraphicsStereoProjectionParallel',
           'AgStkGraphicsExtrudedPolylineTriangulatorResult',
           '_IAgStkGraphicsTextBatchPrimitive',
           'eStkGraphicsRefreshRateTargetedFramesPerSecond',
           'AgStkGraphicsCentralBodyGraphics',
           'IAgStkGraphicsRasterAttributes',
           'eStkGraphicsModelTransformationTypeScaleZ',
           'IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy',
           'IAgStkGraphicsTextureMatrixFactory',
           'eStkGraphicsModelTransformationTypeTextureRotateX',
           'AgStkGraphicsMarkerBatchPrimitiveFactory',
           'eStkGraphicsInternalTextureFormatRgba4',
           'AgEStkGraphicsEdgeDetectMethod',
           'eStkGraphicsRasterBandGreen',
           'IAgStkGraphicsAltitudeDisplayCondition',
           'AgStkGraphicsGradientDetectFilterFactory',
           'AgStkGraphicsPathPrimitive',
           'eStkGraphicsTextureWrapRepeat',
           'IAgStkGraphicsAlphaFromPixelFilterFactory',
           '_IAgStkGraphicsDistanceToPrimitiveDisplayCondition',
           'eStkGraphicsStereoscopicDisplayModeQuadBuffer',
           'IAgStkGraphicsKmlFeatureCollection',
           '_IAgStkGraphicsPixelSizeDisplayConditionFactory',
           'AgStkGraphicsPickResultCollection',
           'AgStkGraphicsRendererTextureTemplate2D',
           'IAgStkGraphicsBoundingSphere',
           'AgStkGraphicsGlobeOverlaySettings',
           'IAgStkGraphicsAxesPrimitive',
           '_IAgStkGraphicsGlobeOverlay',
           'eStkGraphicsIndicesOrderHintSortedAscending',
           'AgStkGraphicsAlphaFromLuminanceFilterFactory',
           '_IAgStkGraphicsRaster',
           'AgStkGraphicsBatchPrimitiveIndex',
           'eStkGraphicsAntiAliasingFXAA',
           'eStkGraphicsFontStyleBold', 'IAgStkGraphicsKmlDocument',
           'eStkGraphicsScreenOverlayPinningOriginAutomatic',
           'IAgStkGraphicsTerrainCollectionEvents',
           'IAgStkGraphicsGreatArcInterpolator',
           'eStkGraphicsInternalTextureFormatLuminance32Alpha32F',
           '_IAgStkGraphicsRasterStream',
           'AgStkGraphicsTextBatchPrimitiveFactory',
           'IAgStkGraphicsBandOrderFilter',
           'IAgStkGraphicsBandOrderFilterFactory',
           'AgStkGraphicsMarkerBatchPrimitive',
           'eStkGraphicsAntiAliasingThirtyTwoX',
           'AgStkGraphicsColorToLuminanceFilter',
           'eStkGraphicsScreenOverlayOriginCenterLeft',
           '_IAgStkGraphicsCompositeDisplayCondition',
           'eStkGraphicsBlurMethodMean',
           'AgStkGraphicsPixelSizeDisplayCondition',
           'eStkGraphicsGlobeOverlayRoleBase',
           'eStkGraphicsScreenOverlayOriginCenter',
           'AgEStkGraphicsPrimitivesSortOrder',
           '_IAgStkGraphicsFilteringRasterStream',
           'eStkGraphicsWindingOrderClockwise',
           '_IAgStkGraphicsFlipFilter',
           'eStkGraphicsRenderPassHintUnknown',
           'eStkGraphicsRasterFormatAlpha',
           'IAgStkGraphicsSolidTriangulatorResult',
           '_IAgStkGraphicsSolidPrimitive',
           'AgStkGraphicsCameraVideoRecording',
           'AgStkGraphicsDistanceDisplayConditionFactory',
           'IAgStkGraphicsMarkerBatchPrimitiveFactory',
           'AgStkGraphicsPathPointCollection',
           'AgStkGraphicsProjectionRasterStreamPluginProxy',
           'IAgStkGraphicsModelArticulationCollection',
           'AgStkGraphicsPixelSizeDisplayConditionFactory',
           'AgEStkGraphicsCameraSnapshotFileFormat',
           '_IAgStkGraphicsKmlFeatureCollection',
           '_IAgStkGraphicsLevelsFilterFactory',
           'AgStkGraphicsGeospatialImageGlobeOverlay',
           'AgEStkGraphicsKmlNetworkLinkRefreshMode',
           '_IAgStkGraphicsTerrainOverlay',
           'eStkGraphicsKmlNetworkLinkRefreshModeOnChange',
           'AgStkGraphicsGammaCorrectionFilterFactory',
           '_IAgStkGraphicsBandExtractFilter',
           'AgStkGraphicsPrimitive',
           '_IAgStkGraphicsBoxTriangulatorInitializer',
           'AgStkGraphicsSurfaceShapesResult',
           'eStkGraphicsCylinderFillAll',
           'AgStkGraphicsPointBatchPrimitiveFactory',
           'eStkGraphicsGlobeOverlayRoleNormal',
           '_IAgStkGraphicsKmlDocument',
           '_IAgStkGraphicsKmlContainer',
           'IAgStkGraphicsScreenOverlayManager',
           'IAgStkGraphicsSolidPrimitiveFactory',
           'IAgStkGraphicsDistanceToPositionDisplayConditionFactory',
           'IAgStkGraphicsTextureScreenOverlay',
           'AgStkGraphicsBandOrderFilterFactory',
           'AgStkGraphicsBandExtractFilter',
           'eStkGraphicsConstrainedUpAxisZ',
           'eStkGraphicsPrimitivesSortOrderByState',
           'AgEStkGraphicsKmlNetworkLinkViewRefreshMode',
           'AgStkGraphicsConstantDisplayCondition',
           'AgStkGraphicsStereoscopic',
           '_IAgStkGraphicsAGICustomTerrainOverlayFactory',
           'IAgStkGraphicsAlphaFromRasterFilter',
           'eStkGraphicsSetHintInfrequent',
           'eStkGraphicsModelTransformationTypeTranslateY',
           'AgStkGraphicsEdgeDetectFilter',
           '_IAgStkGraphicsAltitudeDisplayCondition',
           'AgStkGraphicsSceneDisplayCondition',
           'AgEStkGraphicsVisibility',
           'AgEStkGraphicsMagnificationFilter',
           'eStkGraphicsRasterFormatRed', '_IAgStkGraphicsPrimitive',
           'eStkGraphicsInternalTextureFormatLuminance4',
           'IAgStkGraphicsSurfaceTriangulatorResult',
           'eStkGraphicsGradientDetectMethodWest',
           'eStkGraphicsRenderPassTranslucent',
           'AgEStkGraphicsWindingOrder',
           '_IAgStkGraphicsRhumbLineInterpolator',
           '_IAgStkGraphicsRasterImageGlobeOverlayFactory',
           '_IAgStkGraphicsTerrainCollection',
           'IAgStkGraphicsPathPoint',
           'IAgStkGraphicsTriangleMeshPrimitiveFactory',
           'IAgStkGraphicsAlphaFromRasterFilterFactory',
           'AgEStkGraphicsModelUpAxis',
           'IAgStkGraphicsScreenOverlayPickResult',
           'IAgStkGraphicsFlipFilterFactory',
           'AgStkGraphicsAGIProcessedTerrainOverlay',
           'eStkGraphicsModelTransformationTypeTranslateZ',
           'eStkGraphicsMarkerBatchSortOrderByTexture',
           'AgStkGraphicsProjectionRasterStreamPluginActivator',
           'eStkGraphicsMarkerBatchRenderingMethodGeometryShader',
           'AgStkGraphicsKmlDocument',
           '_IAgStkGraphicsRendererTexture2D',
           'eStkGraphicsMarkerBatchRenderPassOpaque',
           'AgEStkGraphicsBinaryLogicOperation',
           'eStkGraphicsMagnificationFilterNearest',
           'IAgStkGraphicsScreenOverlayCollection',
           '_IAgStkGraphicsSurfaceMeshPrimitive',
           'IAgStkGraphicsSurfaceMeshPrimitiveFactory',
           'eStkGraphicsBinaryLogicOperationAnd',
           'eStkGraphicsFontStyleStrikeout',
           'IAgStkGraphicsPixelSizeDisplayCondition',
           'eStkGraphicsRasterTypeUnsignedInt',
           '_IAgStkGraphicsBlurFilter',
           'IAgStkGraphicsBlurFilterFactory',
           'eStkGraphicsMarkerBatchRenderPassTranslucent',
           'eStkGraphicsWindingOrderCompute',
           'AgStkGraphicsSurfaceMeshPrimitive',
           '_IAgStkGraphicsModelArticulation',
           'AgEStkGraphicsSetHint', 'AgEStkGraphicsFontStyle',
           'eStkGraphicsModelTransformationTypeTextureTranslateZ',
           'IAgStkGraphicsKmlFeature',
           'eStkGraphicsCameraSnapshotFileFormatJpeg',
           '_IAgStkGraphicsMarkerBatchPrimitiveFactory',
           '_IAgStkGraphicsGreatArcInterpolatorFactory',
           'IAgStkGraphicsGreatArcInterpolatorFactory',
           '_IAgStkGraphicsVideoStream',
           'eStkGraphicsVideoPlaybackRealTime',
           'eStkGraphicsRasterTypeByte',
           'IAgStkGraphicsSolidPrimitive',
           '_IAgStkGraphicsGradientDetectFilterFactory',
           '_IAgStkGraphicsOverlay',
           'AgStkGraphicsAlphaFromRasterFilter',
           'AgEStkGraphicsMarkerBatchRenderPass',
           'AgStkGraphicsModelTransformation',
           '_IAgStkGraphicsAGICustomTerrainOverlay',
           'AgStkGraphicsSharpenFilterFactory',
           'eStkGraphicsMinificationFilterNearestMipMapNearest',
           'AgStkGraphicsScene', 'eStkGraphicsSharpenMethodBasic',
           'IAgStkGraphicsAlphaFromLuminanceFilterFactory',
           'AgStkGraphicsPathPointFactory',
           'eStkGraphicsVisibilityNone',
           'eStkGraphicsStylizeBackLines',
           'IAgStkGraphicsRendererTextureTemplate2D',
           '_IAgStkGraphicsPixelSizeDisplayCondition',
           'eStkGraphicsRasterBandBlue',
           'eStkGraphicsScreenOverlayOriginBottomLeft',
           'IAgStkGraphicsSceneCollection',
           'IAgStkGraphicsObjectCollection',
           '_IAgStkGraphicsRendererTextureTemplate2D',
           'AgStkGraphicsRasterFactory',
           '_IAgStkGraphicsTextureMatrix',
           '_IAgStkGraphicsAlphaFromRasterFilterFactory',
           '_IAgStkGraphicsPathPointFactory',
           'AgStkGraphicsCustomImageGlobeOverlayPluginProxy',
           'IAgStkGraphicsAGIProcessedImageGlobeOverlay',
           'AgEStkGraphicsCullFace',
           'AgStkGraphicsScreenOverlayCollectionBase',
           '_IAgStkGraphicsSurfaceExtentTriangulatorInitializer',
           'eStkGraphicsConstrainedUpAxisNegativeZ',
           'eStkGraphicsECullFaceNeither',
           'eStkGraphicsScreenOverlayPinningOriginBottomLeft',
           'AgEStkGraphicsStereoProjectionMode',
           'IAgStkGraphicsGaussianBlurFilterFactory',
           'eStkGraphicsOriginTopCenter',
           'AgStkGraphicsProjectionFactory',
           'IAgStkGraphicsTextBatchPrimitiveOptionalParametersFactory',
           '_IAgStkGraphicsDistanceToPositionDisplayCondition',
           '_IAgStkGraphicsCustomImageGlobeOverlay',
           'AgStkGraphicsCompositeDisplayConditionFactory',
           'IAgStkGraphicsCameraSnapshot',
           'AgStkGraphicsPolylinePrimitive',
           'eStkGraphicsScreenOverlayPinningOriginTopCenter',
           'IAgStkGraphicsColorToLuminanceFilter',
           'IAgStkGraphicsProjectedRasterOverlayFactory',
           '_IAgStkGraphicsTimeIntervalDisplayConditionFactory',
           'eStkGraphicsPrimitivesSortOrderPrimitivesSortOrderByState',
           '_IAgStkGraphicsAlphaFromRasterFilter',
           'eStkGraphicsRasterTypeShort',
           '_IAgStkGraphicsExtrudedPolylineTriangulatorResult',
           'IAgStkGraphicsEllipsoidTriangulatorInitializer',
           '_IAgStkGraphicsGlobeImageOverlay',
           'eStkGraphicsGlobeOverlayRoleSpecular',
           'eStkGraphicsOriginCenter',
           'AgStkGraphicsCompositeDisplayCondition',
           'AgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory',
           'eStkGraphicsRenderPassTerrain',
           'AgStkGraphicsSurfaceMeshPrimitiveFactory',
           'eStkGraphicsScreenOverlayOriginTopLeft',
           '_IAgStkGraphicsGaussianBlurFilterFactory',
           'eStkGraphicsMinificationFilterLinearMipMapLinear',
           'AgStkGraphicsGlobeImageOverlay',
           'IAgStkGraphicsTextOverlay',
           'AgStkGraphicsAlphaFromLuminanceFilter',
           'AgEStkGraphicsTextureWrap',
           'AgEStkGraphicsRendererShadeModel',
           'AgEStkGraphicsModelTransformationType',
           '_IAgStkGraphicsGammaCorrectionFilter',
           '_IAgStkGraphicsMarkerBatchPrimitiveOptionalParametersFactory',
           'IAgStkGraphicsCentralBodyGraphicsIndexer',
           '_IAgStkGraphicsAxesPrimitive',
           '_IAgStkGraphicsTextureFilter2DFactory',
           'eStkGraphicsRasterFormatGreen',
           'AgStkGraphicsBrightnessFilter',
           '_IAgStkGraphicsPickResultCollection',
           'eStkGraphicsScreenOverlayPinningOriginBottomRight',
           'AgEStkGraphicsMinificationFilter',
           'AgEStkGraphicsMarkerBatchSizeSource',
           'eStkGraphicsFlipAxisHorizontal',
           'eStkGraphicsKmlNetworkLinkViewRefreshModeOnRegion',
           'eStkGraphicsMinificationFilterNearestMipMapLinear',
           'IAgStkGraphicsSurfaceShapesResult',
           'AgStkGraphicsTriangleMeshPrimitiveFactory',
           'AgEStkGraphicsRasterType', 'IAgStkGraphicsKmlContainer',
           'eStkGraphicsModelTransformationTypeTranslateBlue',
           'eStkGraphicsOriginCenterRight',
           'eStkGraphicsAntiAliasingOff',
           'AgEStkGraphicsStereoscopicDisplayMode',
           'IAgStkGraphicsScreenOverlayPickResultCollection',
           '_IAgStkGraphicsBandExtractFilterFactory',
           'eStkGraphicsJpeg2000CompressionProfileDefault',
           '_IAgStkGraphicsDurationPathPrimitiveUpdatePolicyFactory',
           'AgStkGraphicsPathPrimitiveUpdatePolicy',
           '_IAgStkGraphicsSequenceFilterFactory',
           'IAgStkGraphicsPrimitiveManager',
           '_IAgStkGraphicsTextBatchPrimitiveFactory',
           'AgStkGraphicsGaussianBlurFilterFactory',
           '_IAgStkGraphicsSceneDisplayConditionFactory',
           'IAgStkGraphicsLighting',
           'AgStkGraphicsTriangleMeshPrimitiveOptionalParametersFactory',
           'IAgStkGraphicsPolylinePrimitiveFactory',
           'eStkGraphicsMarkerBatchSortOrderBackToFront',
           'AgStkGraphicsPrimitiveManager',
           'eStkGraphicsEdgeDetectMethodRightDiagonal',
           'AgStkGraphicsContrastFilter',
           'eStkGraphicsMarkerBatchSizeSourceUserDefined',
           'AgEStkGraphicsMarkerBatchSortOrder',
           'AgStkGraphicsSceneManager',
           'AgStkGraphicsEllipsoidTriangulatorInitializer',
           'eStkGraphicsRasterFormatBgra',
           '_IAgStkGraphicsBrightnessFilter',
           '_IAgStkGraphicsTriangleMeshPrimitiveFactory',
           'AgStkGraphicsJpeg2000WriterInitializer',
           '_IAgStkGraphicsTimeIntervalDisplayCondition',
           'eStkGraphicsSetHintPartial',
           'eStkGraphicsRasterTypeUnsignedByte',
           '_IAgStkGraphicsGradientDetectFilter',
           'eStkGraphicsPolylineTypeLineStrip',
           'IAgStkGraphicsRasterFilter',
           'IAgStkGraphicsTextureMatrix',
           'eStkGraphicsMaintainAspectRatioNone',
           'AgStkGraphicsScreenOverlayFactory',
           'eStkGraphicsRenderPassHintOpaque',
           'AgStkGraphicsTextureScreenOverlay',
           'eStkGraphicsRasterOrientationTopToBottom',
           'eStkGraphicsModelTransformationTypeRotateZ',
           'eStkGraphicsGlobeOverlayRoleNight',
           '_IAgStkGraphicsProjectionRasterStreamPluginActivatorFactory',
           'IAgStkGraphicsGaussianBlurFilter',
           'eStkGraphicsScreenOverlayOriginBottomCenter',
           '_IAgStkGraphicsScreenOverlayCollectionBase',
           '_IAgStkGraphicsModelPrimitiveFactory',
           'AgStkGraphicsVectorPrimitive',
           'IAgStkGraphicsGlobeImageOverlayInitializer',
           'AgStkGraphicsFilteringRasterStreamFactory',
           '_IAgStkGraphicsDistanceToGlobeOverlayDisplayConditionFactory',
           'eStkGraphicsScreenOverlayPinningOriginCenterLeft',
           'IAgStkGraphicsGlobeOverlaySettings',
           '_IAgStkGraphicsDurationPathPrimitiveUpdatePolicy',
           'AgStkGraphicsModelPrimitive',
           'eStkGraphicsTextureWrapMirroredRepeat',
           'eStkGraphicsPolylineTypePoints',
           'eStkGraphicsFontStyleItalic',
           '_IAgStkGraphicsTextOverlay',
           'eStkGraphicsStereoscopicDisplayModeRightEye',
           'IAgStkGraphicsTextBatchPrimitiveFactory',
           'AgStkGraphicsGammaCorrectionFilter',
           'AgStkGraphicsGlobeOverlay',
           'IAgStkGraphicsPixelSizeDisplayConditionFactory',
           'AgStkGraphicsPositionInterpolator',
           '_IAgStkGraphicsGraphicsFontFactory',
           'eStkGraphicsScreenOverlayOriginBottomRight',
           'AgStkGraphicsAGIProcessedImageGlobeOverlayFactory',
           'eStkGraphicsCylinderFillBottomCap',
           'AgStkGraphicsConvolutionFilter',
           'eStkGraphicsInternalTextureFormatAlpha16',
           'AgStkGraphicsCustomImageGlobeOverlayPluginActivatorFactory',
           '_IAgStkGraphicsMaximumCountPathPrimitiveUpdatePolicy',
           'IAgStkGraphicsRaster',
           '_IAgStkGraphicsColorToLuminanceFilterFactory',
           '_IAgStkGraphicsAlphaFromPixelFilterFactory',
           '_IAgStkGraphicsContrastFilter',
           '_IAgStkGraphicsJpeg2000WriterInitializer',
           'AgEStkGraphicsFlipAxis',
           'AgStkGraphicsKmlFeatureCollection',
           'eStkGraphicsScreenOverlayOriginTopRight',
           'AgStkGraphicsCustomImageGlobeOverlayPluginActivator',
           'eStkGraphicsScreenOverlayPinningOriginCenterRight',
           'eStkGraphicsGradientDetectMethodSouthEast',
           'eStkGraphicsMarkerBatchRenderingMethodVertexShader',
           'AgStkGraphicsTextureMatrixFactory',
           '_IAgStkGraphicsBoundingSphere',
           '_IAgStkGraphicsAxesPrimitiveFactory',
           'IAgStkGraphicsPointBatchPrimitiveFactory',
           'eStkGraphicsInternalTextureFormatLuminance4Alpha4',
           'AgEStkGraphicsRasterFormat',
           '_IAgStkGraphicsAGIRoamImageGlobeOverlay',
           'eStkGraphicsModelTransformationTypeTextureScaleY']
from comtypes import _check_version; _check_version('1.1.11', 1553863612.0)
